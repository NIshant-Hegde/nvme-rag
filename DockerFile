# Multi-stage build for NVMe RAG CLI
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt requirements_phase2.txt ./

# Install Python dependencies
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install -r requirements_phase2.txt

# Copy application code
COPY . .

# Install the package
RUN pip install -e .

# Create non-root user
RUN useradd --create-home --shell /bin/bash nvmerag
RUN chown -R nvmerag:nvmerag /app
USER nvmerag

# Create directories for data
RUN mkdir -p /app/data/vector_store /app/data/embeddings_cache /app/data/processed

# Expose port (if needed for web interface in future)
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD nvme-rag system status --format json || exit 1

# Default command
CMD ["nvme-rag", "--help"]

# Development stage
FROM base as development

USER root
RUN pip install -r requirements.txt && \
    pip install pytest pytest-cov black flake8 mypy pre-commit

USER nvmerag
CMD ["bash"]

# Production stage
FROM base as production

# Copy only necessary files
COPY --from=base /app /app

# Set working directory
WORKDIR /app

# Default to help command
CMD ["nvme-rag", "--help"]