# NVMe RAG CLI Tool - Complete Installation and Usage Guide

## Table of Contents
1. System Requirements
2. Installation Methods
3. Initial Setup
4. Basic Usage
5. Advanced Features
6. Document Management
7. Query and Search
8. Interactive Chat Mode
9. Configuration Management
10. Troubleshooting
11. Docker Deployment
12. Examples and Use Cases

================================================================================
## 1. SYSTEM REQUIREMENTS
================================================================================

Minimum Requirements:
- Operating System: Linux, macOS, or Windows 10+
- Python: 3.8 or higher
- RAM: 8GB (16GB recommended)
- Storage: 5GB free space (20GB recommended)
- Internet connection (for initial setup and model downloads)

Optional but Recommended:
- CUDA-compatible GPU (for faster processing)
- SSD storage (for better performance)

================================================================================
## 2. INSTALLATION METHODS
================================================================================

### Method 1: One-Command Installation (RECOMMENDED)
This is the easiest way for your peers to get started:

```bash
# Download and run the installation script
curl -fsSL https://raw.githubusercontent.com/your-repo/nvme-rag/main/install.sh | bash
```

If you prefer to inspect the script first:
```bash
# Download the script
wget https://raw.githubusercontent.com/your-repo/nvme-rag/main/install.sh
# Make it executable
chmod +x install.sh
# Run it
./install.sh
```

### Method 2: Manual Installation
```bash
# Step 1: Clone the repository
git clone https://github.com/your-repo/nvme-rag.git
cd nvme-rag

# Step 2: Create virtual environment (recommended)
python3 -m venv nvme-rag-env
source nvme-rag-env/bin/activate  # On Windows: nvme-rag-env\Scripts\activate

# Step 3: Install the package
pip install --upgrade pip
pip install -e .

# Step 4: Verify installation
nvme-rag --version
```

### Method 3: Package Installation (when available on PyPI)
```bash
pip install nvme-rag
```

### Method 4: Docker Installation (No Local Python Required)
```bash
# Clone the repository
git clone https://github.com/your-repo/nvme-rag.git
cd nvme-rag

# Build and run with Docker
docker build -t nvme-rag .
docker run -it nvme-rag nvme-rag --help
```

================================================================================
## 3. INITIAL SETUP
================================================================================

After installation, you MUST run the setup wizard:

```bash
# Run the comprehensive setup wizard
nvme-rag setup setup
```

This setup wizard will:
1. Check system requirements
2. Install required AI models (this may take 10-30 minutes)
3. Configure Ollama server
4. Set up vector database
5. Create configuration files
6. Verify everything is working

### Verify Setup
```bash
# Check system status
nvme-rag system status

# Should show all components as "ready" or "healthy"
```

If setup fails, see the Troubleshooting section below.

================================================================================
## 4. BASIC USAGE
================================================================================

### Getting Help
```bash
# Show main help
nvme-rag --help

# Show help for specific commands
nvme-rag document --help
nvme-rag query --help
nvme-rag ask --help
```

### Check Version and Info
```bash
# Show version
nvme-rag --version

# Show system information
nvme-rag system status
```

### Basic Workflow
1. Add documents → 2. Ask questions → 3. Get answers

```bash
# 1. Add a document (PDF)
nvme-rag document add /path/to/nvme-specification.pdf

# 2. Ask a question
nvme-rag ask "What is NVMe queue depth?"

# 3. Start interactive chat
nvme-rag query chat
```

================================================================================
## 5. ADVANCED FEATURES
================================================================================

### Multiple Output Formats
```bash
# Default rich text output
nvme-rag ask "What is NVMe?"

# JSON output (for programmatic use)
nvme-rag ask "What is NVMe?" --format json

# Markdown output (for documentation)
nvme-rag ask "What is NVMe?" --format markdown
```

### Include Sources and Explanations
```bash
# Show source citations
nvme-rag ask "Explain PCIe interface" --sources

# Show reasoning process
nvme-rag ask "NVMe command structure" --explain

# Both sources and explanations
nvme-rag ask "Queue management" --sources --explain
```

### Advanced Query Options
```bash
# Use specific retrieval strategy
nvme-rag ask "Performance optimization" --strategy hybrid

# Limit number of results
nvme-rag ask "Commands" --max-results 10

# Set confidence threshold
nvme-rag ask "Architecture" --confidence 0.8
```

================================================================================
## 6. DOCUMENT MANAGEMENT
================================================================================

### Adding Documents
```bash
# Add a PDF document
nvme-rag document add /path/to/document.pdf

# Add with custom name and description
nvme-rag document add /path/to/spec.pdf --name "NVMe Spec v2.0" --description "Latest specification"

# Add with JSON output
nvme-rag document add /path/to/doc.pdf --format json
```

### Listing Documents
```bash
# List all documents (default table format)
nvme-rag document list

# List in JSON format
nvme-rag document list --format json

# List in YAML format
nvme-rag document list --format yaml
```

### Removing Documents
```bash
# Remove a document (with confirmation)
nvme-rag document remove doc_id_12345

# Remove without confirmation
nvme-rag document remove doc_id_12345 --force

# Remove but keep original files
nvme-rag document remove doc_id_12345 --keep-files
```

### Managing Vector Store
```bash
# Rebuild the entire vector store
nvme-rag document reindex --force

# Rebuild with verification
nvme-rag document reindex --force --verify
```

================================================================================
## 7. QUERY AND SEARCH
================================================================================

### Ask Questions (Full RAG Pipeline)
```bash
# Simple question
nvme-rag ask "What is NVMe?"

# Complex technical question
nvme-rag ask "How does NVMe queue management work and what are the performance implications?"

# Question with session continuity
nvme-rag ask "What is PCIe?" --session-id conversation1
nvme-rag ask "How does it relate to NVMe?" --session-id conversation1
```

### Search Documents (Vector Search)
```bash
# Basic search
nvme-rag query search "bandwidth optimization"

# Search with options
nvme-rag query search "PCIe interface" --limit 5 --threshold 0.8

# Search with metadata
nvme-rag query search "commands" --metadata

# Search with JSON output
nvme-rag query search "performance" --format json

# Search with filters
nvme-rag query search "architecture" --filters '{"section": "Architecture"}'
```

### Text vs Table Output
```bash
# Table format (default)
nvme-rag query search "NVMe commands"

# Text format (paragraph style)
nvme-rag query search "NVMe commands" --format text

# JSON format (programmatic)
nvme-rag query search "NVMe commands" --format json
```

================================================================================
## 8. INTERACTIVE CHAT MODE
================================================================================

### Starting Chat
```bash
# Basic chat mode
nvme-rag query chat

# Chat with always-on sources
nvme-rag query chat --sources

# Chat with specific session
nvme-rag query chat --session my-session

# Chat with custom temperature
nvme-rag query chat --temperature 0.3
```

### Chat Commands
Once in chat mode, you can use these commands:

```
# Regular conversation
You: What is NVMe?
Assistant: [Provides detailed answer]

# Built-in commands
help        - Show available commands
status      - Show system status
summary     - Show conversation summary
exit        - Exit chat mode

# Quick search (without full answer generation)
/search bandwidth optimization

# Regular questions
You: How does queue depth affect performance?
You: Can you explain that in simpler terms?
```

### Chat Features
- **Session Persistence**: Conversations are remembered within a session
- **Context Awareness**: Follow-up questions understand previous context
- **Quick Search**: Use `/search` for fast document lookup
- **Conversation Summary**: Type `summary` to see chat history
- **Graceful Exit**: Use `exit` to see session summary

================================================================================
## 9. CONFIGURATION MANAGEMENT
================================================================================

### View Configuration
```bash
# Show current configuration
nvme-rag configure configure --show

# Show specific section
nvme-rag configure get ollama model
```

### Modify Configuration
```bash
# Set a configuration value
nvme-rag configure set ollama model llama3.1:8b

# Set embedding device to GPU
nvme-rag configure set embedding device cuda

# Set batch size for better performance
nvme-rag configure set embedding batch_size 32
```

### Interactive Configuration
```bash
# Interactive configuration editor
nvme-rag configure configure --edit

# Reset to defaults
nvme-rag configure configure --reset

# Validate current configuration
nvme-rag configure validate
```

### Import/Export Configuration
```bash
# Export configuration
nvme-rag configure export config-backup.yml

# Import configuration
nvme-rag configure import config-backup.yml
```

================================================================================
## 10. TROUBLESHOOTING
================================================================================

### Common Issues and Solutions

#### "Command not found" Error
```bash
# Check if package is installed
pip list | grep nvme-rag

# Reinstall if needed
pip install --force-reinstall nvme-rag

# Check PATH (if using virtual environment)
which nvme-rag
```

#### Ollama Connection Errors
```bash
# Check system status
nvme-rag system status

# Try starting Ollama manually
ollama serve

# Or use CLI to start
nvme-rag system start-server

# Check if port is available
lsof -i :11434
```

#### Memory Issues
```bash
# Check system resources
nvme-rag system status

# Use smaller model
nvme-rag configure set ollama model llama3.2:3b

# Reduce batch size
nvme-rag configure set embedding batch_size 8
```

#### Document Processing Errors
```bash
# Check if file exists and is readable
ls -la /path/to/document.pdf

# Check vector store status
nvme-rag document list

# Clear and rebuild vector store
nvme-rag document reindex --force
```

#### Permission Errors (Linux/macOS)
```bash
# Fix permissions
sudo chown -R $USER ~/.nvme-rag
chmod -R 755 ~/.nvme-rag
```

### Getting System Information
```bash
# Comprehensive system status
nvme-rag system status

# Configuration validation
nvme-rag configure validate

# Check logs (if available)
ls ~/.nvme-rag/logs/
```

### Reset Everything
```bash
# Nuclear option: reset everything
nvme-rag system reset

# Then run setup again
nvme-rag setup setup
```

================================================================================
## 11. DOCKER DEPLOYMENT
================================================================================

### Basic Docker Usage
```bash
# Build the image
docker build -t nvme-rag .

# Run a command
docker run -it nvme-rag nvme-rag --help

# Start chat mode
docker run -it nvme-rag nvme-rag query chat

# Run with volume for document persistence
docker run -it -v $(pwd)/documents:/app/documents nvme-rag nvme-rag document add /app/documents/spec.pdf
```

### Docker Compose (Recommended)
```bash
# Start all services
docker-compose up -d

# Check status
docker-compose ps

# Enter chat mode
docker-compose exec nvme-rag nvme-rag query chat

# View logs
docker-compose logs -f

# Stop services
docker-compose down
```

### Docker Helper Script
```bash
# Make script executable
chmod +x scripts/docker-deploy.sh

# Available commands
./scripts/docker-deploy.sh build        # Build image
./scripts/docker-deploy.sh chat         # Start chat mode
./scripts/docker-deploy.sh dev          # Development environment
./scripts/docker-deploy.sh compose-up   # Start with compose
./scripts/docker-deploy.sh help         # Show all options
```

================================================================================
## 12. EXAMPLES AND USE CASES
================================================================================

### Example 1: Processing NVMe Specification
```bash
# 1. Add the official NVMe specification
nvme-rag document add /path/to/nvme-2.0-specification.pdf

# 2. Ask specific technical questions
nvme-rag ask "What are the mandatory NVMe commands?"
nvme-rag ask "Explain the submission and completion queue mechanism"
nvme-rag ask "What is the maximum queue depth supported?"

# 3. Search for specific topics
nvme-rag query search "error handling"
nvme-rag query search "power management"
```

### Example 2: Comparative Analysis
```bash
# Add multiple documents
nvme-rag document add /path/to/nvme-1.4-spec.pdf
nvme-rag document add /path/to/nvme-2.0-spec.pdf

# Ask comparative questions
nvme-rag ask "What are the differences between NVMe 1.4 and 2.0?"
nvme-rag ask "What new features were added in NVMe 2.0?"
```

### Example 3: Research Session
```bash
# Start a research session
nvme-rag query chat --session research-001

# In chat mode:
You: What is the NVMe command format?
Assistant: [Explains command format]

You: Can you show me examples of admin commands?
Assistant: [Shows admin commands with examples]

You: How do these differ from I/O commands?
Assistant: [Explains differences with context from previous questions]

# Quick searches during conversation
You: /search completion queue
You: /search error codes

# End session
You: summary
You: exit
```

### Example 4: Development Workflow
```bash
# For developers working with NVMe
nvme-rag ask "Show me the structure of an NVMe command" --format markdown --sources
nvme-rag ask "What are the required fields for a Read command?" --explain
nvme-rag query search "namespace management" --format json --metadata
```

### Example 5: Educational Use
```bash
# For learning about NVMe
nvme-rag ask "Explain NVMe in simple terms for beginners"
nvme-rag ask "What are the main benefits of NVMe over SATA?"
nvme-rag ask "How does NVMe improve SSD performance?"
```

### Example 6: Batch Processing with JSON Output
```bash
# Get structured data for automation
nvme-rag ask "List all NVMe admin commands" --format json > admin_commands.json
nvme-rag query search "error codes" --format json --limit 20 > error_codes.json
```

================================================================================
## PERFORMANCE OPTIMIZATION TIPS
================================================================================

### For Better Performance:

1. **Use GPU if available:**
   ```bash
   nvme-rag configure set embedding device cuda
   ```

2. **Increase batch size (if you have enough RAM):**
   ```bash
   nvme-rag configure set embedding batch_size 32
   ```

3. **Use quantized models for faster responses:**
   ```bash
   nvme-rag configure set ollama model llama3.1:8b-instruct-q4_0
   ```

4. **Store data on SSD:**
   ```bash
   nvme-rag configure set vector_store persist_directory /path/to/ssd/nvme-rag-data
   ```

================================================================================
## SHARING WITH PEERS
================================================================================

### Quick Start Instructions for Your Peers:

1. **Share the one-liner:**
   ```bash
   curl -fsSL https://raw.githubusercontent.com/your-repo/nvme-rag/main/install.sh | bash
   ```

2. **Or share the repository:**
   ```bash
   git clone https://github.com/your-repo/nvme-rag.git
   cd nvme-rag
   ./install.sh
   ```

3. **After installation, they run:**
   ```bash
   nvme-rag setup setup
   nvme-rag document add /path/to/nvme-spec.pdf
   nvme-rag ask "What is NVMe?"
   ```

### What to Tell Your Peers:
- "This tool lets you chat with NVMe specifications using AI"
- "Just run the one-command installer and follow the setup wizard"
- "You can ask any question about NVMe and get expert-level answers"
- "It works offline after initial setup"
- "Supports multiple document formats and export options"

================================================================================
## CONCLUSION
================================================================================

The NVMe RAG CLI tool is now ready for production use. Your peers can:

✅ Install it with a single command
✅ Process NVMe specification documents  
✅ Ask complex technical questions
✅ Get AI-powered answers with source citations
✅ Use interactive chat for extended research sessions
✅ Export results in multiple formats
✅ Deploy consistently with Docker

For support or issues, refer to the troubleshooting section or check the system status with `nvme-rag system status`.

Happy querying! 🚀