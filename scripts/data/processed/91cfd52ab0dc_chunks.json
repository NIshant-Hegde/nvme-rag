[
  {
    "content": "#### **Revision 2.0c ** **October 4th, 2022 **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 0
    },
    "chunk_id": "91cfd52ab0dc_0000",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Document Root",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26313406229019165
  },
  {
    "content": "*Please send comments to info@nvmexpress.org*",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0001",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38208985328674316
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n\nNVM Express [®] [Base Specification, Revision 2.0c is available for download at https://nvmexpress.org. The](https://nvmexpress.org/)\nNVM Express Base Specification, Revision 2.0c incorporates NVM Express Base Specification, Revision\n[2.0 (refer to https://nvmexpress.org/changes-in-nvm-express-revision-2-0 for details), ECN 001, ECN102,](https://nvmexpress.org/changes-in-nvm-express-revision-2-0)\nECN105, ECN106, ECN107, ECN109, and ECN110.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 494,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0002",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20954526960849762
  },
  {
    "content": "SPECIFICATION DISCLAIMER",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0003",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1751241534948349
  },
  {
    "content": "**© Copyright 2008 to 2022 NVM Express, Inc. ALL RIGHTS RESERVED.**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0004",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6133284568786621
  },
  {
    "content": "This NVM Express Base Specification, Revision 2.0c is proprietary to the NVM Express, Inc. (also\nreferred to as “Company”) and/or its successors and assigns.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 157,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0005",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6631178259849548
  },
  {
    "content": "**NOTICE TO USERS WHO ARE NVM EXPRESS, INC. MEMB** **ER** **S** : Members of NVM Express, Inc. have\nthe right to use and implement this NVM Express Base Specification, Revision 2.0c subject, however, to\nthe Member’s continued compliance with the Company’s Intellectual Property Policy and Bylaws and the\nMember’s Participation Agreement.\n\n**NOTICE TO NON** **-** **MEMBERS OF NVM EXPRESS, INC.** : If you are not a Member of NVM Express, Inc.\nand you have obtained a copy of this document, you only have a right to review this document or make\nreference to or cite this document. Any such references or citations to this document must acknowledge\nNVM Express, Inc. copyright ownership of this document. The proper copyright citation or reference is as\nfollows: **“© 2008 to 2022 NVM Express, Inc. ALL RIGHTS RESERVED.”** When making any such\ncitations or references to this document you are not permitted to revise, alter, modify, make any\nderivatives of, or otherwise amend the referenced portion of this document in any way without the prior\nexpress written permission of NVM Express, Inc. Nothing contained in this document shall be deemed as\ngranting you any kind of license to implement or use this document or the specification described therein,\nor any of its contents, either expressly or impliedly, or to any intellectual property owned or controlled by\nNVM Express, Inc., including, without limitation, any trademarks of NVM Express, Inc.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1448,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0006",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36689525842666626
  },
  {
    "content": "**LEGAL DISCLAIMER** :",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0007",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4755113124847412
  },
  {
    "content": "THIS DOCUMENT AND THE INFORMATION CONTAINED HEREIN IS PROVIDED ON AN “ **AS IS** ”\nBASIS. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, NVM EXPRESS, INC.\n(ALONG WITH THE CONTRIBUTORS TO THIS DOCUMENT) HEREBY DISCLAIM ALL\nREPRESENTATIONS, WARRANTIES AND/OR COVENANTS, EITHER EXPRESS OR IMPLIED,\nSTATUTORY OR AT COMMON LAW, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, VALIDITY,\nAND/OR NONINFRINGEMENT.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 475,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0008",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4008725881576538
  },
  {
    "content": "All product names, trademarks, registered trademarks, and/or servicemarks may be claimed as the\nproperty of their respective owners.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 132,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0009",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36337119340896606
  },
  {
    "content": "The NVM Express [®] design mark is a registered trademark of NVM Express, Inc.\nPCI-SIG [®], PCI Express [®], and PCIe [®] are registered trademarks of PCI-SIG.\nInfiniBand [TM] is a trademark and servicemark of the InfiniBand Trade Association.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 243,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0010",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5283751487731934
  },
  {
    "content": "NVM Express Workgroup\nc/o VTM, Inc.\n3855 SW 153 [rd] Drive\nBeaverton, OR 97003 USA\ninfo@nvmexpress.org",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0011",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6450749635696411
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0012",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05835028365254402
  },
  {
    "content": "**Table of Contents**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0013",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1773817241191864
  },
  {
    "content": "1 I NTRODUCTION ............................................................................................................. 2",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0014",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5629492998123169
  },
  {
    "content": "1.1 Overview ........................................................................................................................................ 2\n1.2 Scope............................................................................................................................................. 3\n1.3 Outside of Scope ........................................................................................................................... 3\n1.4 Conventions ................................................................................................................................... 3",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 601,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0015",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4653225541114807
  },
  {
    "content": "1.5 Definitions ...................................................................................................................................... 6\n1.6 I/O Command Set specific definitions used in this specification ................................................. 11\n1.7 NVM Command Set specific definitions used in this specification .............................................. 12\n1.8 References .................................................................................................................................. 12\n1.9 References Under Development ................................................................................................. 14",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 674,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0016",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34421396255493164
  },
  {
    "content": "2 T HEORY OF O PERATION ............................................................................................... 15",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0017",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25576329231262207
  },
  {
    "content": "2.1 Memory-Based Transport Model ................................................................................................. 17\n2.2 Message-Based Transport Model ............................................................................................... 18\n2.3 NVM Storage Model .................................................................................................................... 21\n2.4 Extended Capabilities Theory ..................................................................................................... 26",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 546,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0018",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3123745620250702
  },
  {
    "content": "3 NVM E XPRESS A RCHITECTURE ..................................................................................... 30",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 117,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0019",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4333765208721161
  },
  {
    "content": "3.1 NVM Controller Architecture ........................................................................................................ 30\n3.2 NVM Subsystem Entities ............................................................................................................. 69\n3.3 NVM Queue Models .................................................................................................................... 79\n3.4 Command Architecture Submission and Completion Mechanism ............................................ 107\n3.5 Controller Initialization ............................................................................................................... 110\n3.6 Shutdown Processing ................................................................................................................ 117\n3.7 Resets........................................................................................................................................ 119\n3.8 NVM Capacity Model ................................................................................................................. 122\n3.9 Keep Alive ................................................................................................................................. 126\n3.10 Privileged Actions ...................................................................................................................... 128\n3.11 Firmware Update Process ......................................................................................................... 129",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1544,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0020",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19613729417324066
  },
  {
    "content": "4 D ATA S TRUCTURES ................................................................................................... 131",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 123,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0021",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25578227639198303
  },
  {
    "content": "4.1 Data Layout ............................................................................................................................... 131\n4.2 Feature Values .......................................................................................................................... 138\n4.3 Identifier Format and Layout (Informative) ................................................................................ 140\n4.4 List Data Structures ................................................................................................................... 142\n4.5 NVMe Qualified Names ............................................................................................................. 143",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 709,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0022",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2409566193819046
  },
  {
    "content": "5 A DMIN C OMMAND S ET ............................................................................................... 146",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0023",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32464754581451416
  },
  {
    "content": "5.1 Abort command ......................................................................................................................... 148\n5.2 Asynchronous Event Request command .................................................................................. 149\n5.3 Capacity Management command .............................................................................................. 153\n5.4 Create I/O Completion Queue command .................................................................................. 157\n5.5 Create I/O Submission Queue command.................................................................................. 158\n5.6 Delete I/O Completion Queue command .................................................................................. 160\n5.7 Delete I/O Submission Queue command .................................................................................. 161\n5.8 Doorbell Buffer Config command .............................................................................................. 162\n5.9 Device Self-test command ........................................................................................................ 163",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1179,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0024",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4812783896923065
  },
  {
    "content": "5.10 Directive Receive command ...................................................................................................... 164",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 137,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0025",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5763521790504456
  },
  {
    "content": "5.11 Directive Send command .......................................................................................................... 165\n5.12 Firmware Commit command ..................................................................................................... 166\n5.13 Firmware Image Download command ....................................................................................... 168\n5.14 Format NVM command ............................................................................................................. 170",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 540,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0026",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2785448729991913
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0027",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12168588489294052
  },
  {
    "content": "5.15 Get Features command ............................................................................................................. 172\n5.16 Get Log Page command............................................................................................................ 175\n5.17 Identify command ...................................................................................................................... 241\n5.18 Keep Alive command ................................................................................................................. 281\n5.19 Lockdown command .................................................................................................................. 281",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 705,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0028",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5056042671203613
  },
  {
    "content": "5.20 NVMe-MI Receive command .................................................................................................... 283",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 133,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0029",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6505802273750305
  },
  {
    "content": "5.21 NVMe-MI Send command ......................................................................................................... 283\n5.22 Namespace Attachment command ........................................................................................... 283\n5.23 Namespace Management command ........................................................................................ 284\n5.24 Sanitize command ..................................................................................................................... 286\n5.25 Security Receive command ....................................................................................................... 289\n5.26 Security Send command ........................................................................................................... 290\n5.27 Set Features command ............................................................................................................. 291\n5.28 Virtualization Management command ....................................................................................... 321",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1084,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0030",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33526673913002014
  },
  {
    "content": "6 F ABRICS C OMMAND S ET ............................................................................................ 324",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 121,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0031",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3838043510913849
  },
  {
    "content": "6.1 Authentication Receive Command and Response .................................................................... 324\n6.2 Authentication Send Command and Response ........................................................................ 325\n6.3 Connect Command and Response ........................................................................................... 326\n6.4 Disconnect Command and Response ....................................................................................... 331\n6.5 Property Get Command and Response .................................................................................... 332\n6.6 Property Set Command and Response..................................................................................... 332",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 753,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0032",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3388981223106384
  },
  {
    "content": "7 I/O C OMMANDS ......................................................................................................... 334",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 125,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0033",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3514920771121979
  },
  {
    "content": "7.1 Flush command ......................................................................................................................... 334\n7.2 Reservation Acquire command ................................................................................................. 335\n7.3 Reservation Register command ................................................................................................ 336\n7.4 Reservation Release command ................................................................................................ 337\n7.5 Reservation Report command ................................................................................................... 338",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 679,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0034",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2859918475151062
  },
  {
    "content": "8 E XTENDED C APABILITIES ........................................................................................... 341",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 121,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0035",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3221231698989868
  },
  {
    "content": "8.1 Asymmetric Namespace Access Reporting .............................................................................. 341\n8.2 Boot Partitions ........................................................................................................................... 348\n8.3 Capacity Management............................................................................................................... 351\n8.4 Command and Feature Lockdown ............................................................................................ 354\n8.5 Controller Memory Buffer .......................................................................................................... 355\n8.6 Device Self-test Operations ....................................................................................................... 357\n8.7 Directives ................................................................................................................................... 359",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 972,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0036",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.670555055141449
  },
  {
    "content": "8.8 Doorbell Stride for Software Emulation ..................................................................................... 368\n8.9 Host Memory Buffer ................................................................................................................... 368\n8.10 Host Operation with Asymmetric Namespace Access Reporting (Informative) ........................ 369\n8.11 Namespace Management ......................................................................................................... 371\n8.12 Namespace Write Protection ..................................................................................................... 373\n8.13 NVMe over Fabrics Secure Channel and In-band Authentication ............................................ 375\n8.14 Persistent Memory Region ........................................................................................................ 391\n8.15 Power Management .................................................................................................................. 392\n8.16 Predictable Latency Mode ......................................................................................................... 398\n8.17 Read Recovery Level ................................................................................................................ 402\n8.18 Replay Protected Memory Block ............................................................................................... 403\n8.19 Reservations .............................................................................................................................. 414",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1615,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0037",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5716771483421326
  },
  {
    "content": "8.20 Rotational Media ........................................................................................................................ 421\n8.21 Sanitize Operations ................................................................................................................... 422\n8.22 Submission Queue (SQ) Associations ...................................................................................... 425\n8.23 Standard Vendor Specific Command Format ........................................................................... 426\n8.24 Telemetry ................................................................................................................................... 426",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 698,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0038",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26690927147865295
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0039",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35593175888061523
  },
  {
    "content": "8.25 Universally Unique Identifiers (UUIDs) for Vendor Specific Information ................................... 430\n8.26 Virtualization Enhancements ..................................................................................................... 433",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 254,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0040",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2887483537197113
  },
  {
    "content": "9 E RROR R EPORTING AND R ECOVERY ............................................................................. 438",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 115,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0041",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43052324652671814
  },
  {
    "content": "9.1 Command and Queue Error Handling ....................................................................................... 438\n9.2 Media and Data Error Handling ................................................................................................. 438\n9.3 Memory Error Handling ............................................................................................................. 438\n9.4 Internal Controller Error Handling .............................................................................................. 438\n9.5 Controller Fatal Status Condition .............................................................................................. 438",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 679,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0042",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.305644690990448
  },
  {
    "content": "A NNEX A. S ANITIZE O PERATION C ONSIDERATIONS (I NFORMATIVE ) ..................................... 440",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 104,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0043",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38347598910331726
  },
  {
    "content": "A.1 Overview .................................................................................................................................... 440\nA.2 Hidden Storage (Overprovisioning) ........................................................................................... 440\nA.3 Integrity checks and No-Deallocate After Sanitize .................................................................... 440\nA.4 Bad Media and Vendor Specific NAND Use ............................................................................. 440",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 535,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0044",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28557586669921875
  },
  {
    "content": "A NNEX B. H OST C ONSIDERATIONS (I NFORMATIVE ) ........................................................... 442",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0045",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.388169527053833
  },
  {
    "content": "B.1 Basic Steps when Building a Command ................................................................................... 442\nB.2 Creating an I/O Submission Queue ........................................................................................... 442\nB.3 Executing a Fused Operation .................................................................................................... 443\nB.4 Asynchronous Event Request Host Software Recommendations ............................................ 445\nB.5 Updating Controller Doorbell Properties using a Shadow Doorbell Buffer ................................ 446",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 619,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0046",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1843789964914322
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0047",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11469686031341553
  },
  {
    "content": "**Table of Figures**\nFigure 1: NVMe Family of Specifications ....................................................................................................................... 2\nFigure 2: Decimal and Binary Units ................................................................................................................................ 4\nFigure 3: Byte, Word, and Dword Relationships ............................................................................................................ 6\nFigure 4: Taxonomy of Transport Models .................................................................................................................... 16\nFigure 5: Types of NVMe Command Sets .................................................................................................................... 16\nFigure 6: Queue Pair Example, 1:1 Mapping ............................................................................................................... 17\nFigure 7: Queue Pair Example, *n* :1 Mapping ............................................................................................................... 18\nFigure 8: NVMe over Fabrics Layering ......................................................................................................................... 19\nFigure 9: Command Capsule Format ........................................................................................................................... 21\nFigure 10: Response Capsule Format ......................................................................................................................... 21\nFigure 11: NVM Storage Hierarchy .............................................................................................................................. 22\nFigure 12: Complex NVM Storage Hierarchy ............................................................................................................... 23\nFigure 13: Single-Namespace NVM Subsystem .......................................................................................................... 24\nFigure 14: Two-Namespace NVM Subsystem ............................................................................................................. 25\nFigure 15: Complex NVM Subsystem .......................................................................................................................... 26\nFigure 16: NVM Express Controller with Two Namespaces ......................................................................................... 27\nFigure 17: NVM Subsystem with Two Controllers and One Port .................................................................................. 27\nFigure 18: NVM Subsystem with Two Controllers and Two Ports ................................................................................ 28\nFigure 19: PCI Express Device Supporting Single Root I/O Virtualization (SR-IOV) ................................................... 29\nFigure 20: Controller Types .......................................................................................................................................... 31\nFigure 21: NVM Subsystem with Three I/O Controllers ................................................................................................ 32\nFigure 22: I/O Controller – Admin Command Support .................................................................................................. 32\nFigure 23: I/O Controller –Common I/O Command Support ........................................................................................ 33\nFigure 24: I/O Controller – Log Page Support .............................................................................................................. 34\nFigure 25: I/O Controller – Feature Support ................................................................................................................. 34\nFigure 26: NVM Subsystem with One Administrative and Two I/O Controllers ............................................................ 36\nFigure 27: NVM Subsystem with One Administrative Controller .................................................................................. 37\nFigure 28: Administrative Controller – Admin Command Support ................................................................................ 37\nFigure 29: Administrative Controller – Log Page Support ............................................................................................ 38\nFigure 30: Administrative Controller – Feature Support ............................................................................................... 39\nFigure 31: Discovery Controller Initialization process flow ........................................................................................... 42\nFigure 32: Discovery Controller – Admin Command Support ....................................................................................... 42\nFigure 33: Discovery Controller – Log Page Support ................................................................................................... 43\nFigure 34: Discovery Controller – Feature Support ...................................................................................................... 44\nFigure 35: Property Definition ...................................................................................................................................... 46\nFigure 36: Offset 0h: CAP – Controller Capabilities ..................................................................................................... 47\nFigure 37: VS Value for 1.0 Compliant Controllers ....................................................................................................... 51\nFigure 38: VS Value for 1.1 Compliant Controllers ....................................................................................................... 51\nFigure 39: VS Value for 1.2 Compliant Controllers ....................................................................................................... 51\nFigure 40: VS Value for 1.2.1 Compliant Controllers .................................................................................................... 51\nFigure 41: VS Value for 1.3 Compliant Controllers ....................................................................................................... 52\nFigure 42: VS Value for 1.4 Compliant Controllers ....................................................................................................... 52\nFigure 43: VS Value for 2.0 Compliant Controllers ....................................................................................................... 52\nFigure 44: Offset Ch: INTMS – Interrupt Mask Set....................................................................................................... 52\nFigure 45: Offset 10h: INTMC – Interrupt Mask Clear .................................................................................................. 53\nFigure 46: Offset 14h: CC – Controller Configuration ................................................................................................... 53\nFigure 47: Offset 1Ch: CSTS – Controller Status ......................................................................................................... 56\nFigure 48: Offset 20h: NSSR – NVM Subsystem Reset ............................................................................................... 58\nFigure 49: Offset 24h: AQA – Admin Queue Attributes ................................................................................................ 58\nFigure 50: Offset 28h: ASQ – Admin Submission Queue Base Address ..................................................................... 58\nFigure 51: Offset 30h: ACQ – Admin Completion Queue Base Address ...................................................................... 59\nFigure 52: Offset 38h: CMBLOC – Controller Memory Buffer Location ........................................................................ 59\nFigure 53: Offset 3Ch: CMBSZ – Controller Memory Buffer Size................................................................................. 60\nFigure 54: Offset 40h: BPINFO – Boot Partition Information ........................................................................................ 61\nFigure 55: Offset 44h: BPRSEL – Boot Partition Read Select ..................................................................................... 61\nFigure 56: Offset 48h: BPMBL – Boot Partition Memory Buffer Location ..................................................................... 61\nFigure 57: Offset 50h: CMBMSC – Controller Memory Buffer Memory Space Control ................................................ 62\nFigure 58: Offset 58h: CMBSTS – Controller Memory Buffer Status............................................................................ 62\nFigure 59: Offset 5Ch: CMBEBS – Controller Memory Buffer Elasticity Buffer Size .................................................... 63\nFigure 60: Offset 60h: CMBSWTP – Controller Memory Buffer Sustained Write Throughput ...................................... 63\nFigure 61: Offset 64h: NSSD – NVM Subsystem Shutdown ........................................................................................ 64",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 9293,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0048",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11469686031341553
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0049",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24348552525043488
  },
  {
    "content": "Figure 62: Offset 68h: CRTO – Controller Ready Timeouts ......................................................................................... 65\nFigure 63: Offset E00h: PMRCAP – Persistent Memory Region Capabilities .............................................................. 65\nFigure 64: Offset E04h: PMRCTL – Persistent Memory Region Control ...................................................................... 66\nFigure 65: Offset E08h: PMRSTS – Persistent Memory Region Status ....................................................................... 67\nFigure 66: Offset E0Ch: PMREBS – Persistent Memory Region Elasticity Buffer Size ................................................ 68\nFigure 67: Offset E10h: PMRSWTP – Persistent Memory Region Sustained Write Throughput ................................. 68\nFigure 68: Offset E14h: PMRMSCL – Persistent Memory Region Memory Space Control Lower ............................... 69\nFigure 69: Offset E18h: PMRMSCU – Persistent Memory Region Memory Space Control Upper .............................. 69\nFigure 70: NSID Types and Relationship to Namespace ............................................................................................. 70\nFigure 71: NSID Types ................................................................................................................................................. 71\nFigure 72: NVM Sets and Associated Namespaces ..................................................................................................... 73\nFigure 73: NVM Set Aware Admin Commands ............................................................................................................ 73\nFigure 74: NVM Sets and Associated Namespaces ..................................................................................................... 75\nFigure 75: Example 1 Domain Structure ...................................................................................................................... 77\nFigure 76: Example 2 Domain Structure ...................................................................................................................... 78\nFigure 77: Empty Queue Definition .............................................................................................................................. 81\nFigure 78: Full Queue Definition................................................................................................................................... 81\nFigure 79: Command Capsule ..................................................................................................................................... 82\nFigure 80: Fabrics Command Capsule – Submission Queue Entry Format ................................................................. 82\nFigure 81: Response Capsule ...................................................................................................................................... 83\nFigure 82: Fabrics Response Capsule – Completion Queue Entry Format .................................................................. 83\nFigure 83: Data and SGL Locations within a Command Capsule ................................................................................ 85\nFigure 84: SGL Example Using Memory Transactions ................................................................................................ 85\nFigure 85: SGL Example Using In Capsule Data Transfer ........................................................................................... 86\nFigure 86: Command Dword 0 ..................................................................................................................................... 91\nFigure 87: Common Command Format ........................................................................................................................ 92\nFigure 88: Common Command Format – Admin and NVM Vendor Specific Commands (Optional) ............................ 94\nFigure 89: Common Completion Queue Entry Layout – Admin and All I/O Command Sets ........................................ 94\nFigure 90: Completion Queue Entry: DW 2 .................................................................................................................. 95\nFigure 91: Completion Queue Entry: DW 3 .................................................................................................................. 95\nFigure 92: Completion Queue Entry: Status Field ........................................................................................................ 95\nFigure 93: Status Code – Status Code Type Values .................................................................................................... 96\nFigure 94: Status Code – Generic Command Status Values ....................................................................................... 97\nFigure 95: Status Code – Command Specific Status Values ..................................................................................... 101\nFigure 96: Status Code – Command Specific Status Values, I/O Commands ........................................................... 102\nFigure 97: Status Code – Command Specific Status Values, Fabrics Commands .................................................... 102\nFigure 98: Status Code – Media and Data Integrity Error Values............................................................................... 103\nFigure 99: Status Code – Path Related Status Values ............................................................................................... 104\nFigure 100: Phase Tag bit Transition Example .......................................................................................................... 105\nFigure 101: Round Robin Arbitration .......................................................................................................................... 109\nFigure 102: Weighted Round Robin with Urgent Priority Class Arbitration ................................................................. 110\nFigure 103: Queue Creation Flow .............................................................................................................................. 112\nFigure 104: Admin Commands Permitted to Return a Status Code of Admin Command Media Not Ready .............. 114\nFigure 105: Simple NVM Subsystem ......................................................................................................................... 123\nFigure 106: Vertically-Organized NVM Subsystem .................................................................................................... 124\nFigure 107: Horizontally-Organized Dual NAND NVM Subsystem ............................................................................ 125\nFigure 108: Capacity Information Field Usage ........................................................................................................... 126\nFigure 109: PRP Entry Layout.................................................................................................................................... 131\nFigure 110: PRP Entry – Page Base Address and Offset .......................................................................................... 131\nFigure 111: PRP List Layout for Physically Contiguous Memory Pages .................................................................... 131\nFigure 112: PRP List Layout for Physically Non-Contiguous Memory Pages ............................................................ 132\nFigure 113: SGL Segment ......................................................................................................................................... 133\nFigure 114: Generic SGL Descriptor Format .............................................................................................................. 133\nFigure 115: SGL Descriptor Type ............................................................................................................................... 133\nFigure 116: SGL Descriptor Sub Type Values ........................................................................................................... 134\nFigure 117: SGL Data Block descriptor ...................................................................................................................... 134\nFigure 118: SGL Bit Bucket descriptor ....................................................................................................................... 135\nFigure 119: SGL Segment descriptor ......................................................................................................................... 135\nFigure 120: SGL Last Segment descriptor ................................................................................................................. 136\nFigure 121: Keyed SGL Data Block descriptor ........................................................................................................... 136\nFigure 122: Transport SGL Data Block descriptor...................................................................................................... 136\nFigure 123: SGL Read Example ................................................................................................................................ 138",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 9265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0050",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24348552525043488
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0051",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2602386176586151
  },
  {
    "content": "Figure 124: PCI Vendor ID (VID) and PCI Subsystem Vendor ID (SSVID) ................................................................ 140\nFigure 125: Serial Number (SN) and Model Number (MN) ........................................................................................ 140\nFigure 126: IEEE OUI Identifier (IEEE) ...................................................................................................................... 141\nFigure 127: IEEE Extended Unique Identifier (EUI64), MA-L Format......................................................................... 141\nFigure 128: IEEE Extended Unique Identifier (EUI64), OUI Identifier ........................................................................ 141\nFigure 129: IEEE Extended Unique Identifier (EUI64), Ext. ID (cont)......................................................................... 141\nFigure 130: MA-L similarity to WWN .......................................................................................................................... 141\nFigure 131: Namespace Globally Unique Identifier (NGUID) ..................................................................................... 142\nFigure 132: Namespace Globally Unique Identifier (NGUID), OUI ............................................................................. 142\nFigure 133: Namespace Globally Unique Identifier (NGUID), Extension Identifier (continued) .................................. 142\nFigure 134: Namespace Globally Unique Identifier (NGUID), NGUID similarity to WWN .......................................... 142\nFigure 135: Controller List Format .............................................................................................................................. 142\nFigure 136: Namespace List Format .......................................................................................................................... 143\nFigure 137: NQN Processing ..................................................................................................................................... 144\nFigure 138: NQN Construction for Older NVM Subsystems ....................................................................................... 145\nFigure 139: Opcodes for Admin Commands .............................................................................................................. 146\nFigure 140: Sanitize Operations and Format NVM Command – Admin Commands Allowed .................................... 147\nFigure 141: Abort – Command Dword 10 ................................................................................................................... 149\nFigure 142: Abort – Command Specific Status Values .............................................................................................. 149\nFigure 143: Status Code – Command Specific Status Values ................................................................................... 151\nFigure 144: Asynchronous Event Request – Completion Queue Entry Dword 0 ....................................................... 151\nFigure 145: Asynchronous Event Information – Error Status ..................................................................................... 151\nFigure 146: Asynchronous Event Information – SMART / Health Status ................................................................... 152\nFigure 147: Asynchronous Event Information – Notice .............................................................................................. 152\nFigure 148: Asynchronous Event Information – I/O Command Specific Status ......................................................... 153\nFigure 149: Asynchronous Event Information – Immediate ........................................................................................ 153\nFigure 150: Capacity Management – Command Dword 10 ....................................................................................... 154\nFigure 151: Capacity Management – Command Dword 11 ....................................................................................... 154\nFigure 152: Capacity Management – Command Dword 12 ....................................................................................... 154\nFigure 153: Capacity Management – Command Specific Status Values ................................................................... 156\nFigure 154: Capacity Management – Completion Queue Entry Dword 0 ................................................................... 157\nFigure 155: Create I/O Completion Queue – PRP Entry 1 ......................................................................................... 157\nFigure 156: Create I/O Completion Queue – Command Dword 10 ............................................................................ 157\nFigure 157: Create I/O Completion Queue – Command Dword 11 ............................................................................ 157\nFigure 158: Create I/O Completion Queue – Command Specific Status Values ........................................................ 158\nFigure 159: Create I/O Submission Queue – PRP Entry 1 ......................................................................................... 159\nFigure 160: Create I/O Submission Queue – Command Dword 10............................................................................ 159\nFigure 161: Create I/O Submission Queue – Command Dword 11............................................................................ 159\nFigure 162: Create I/O Submission Queue – Command Dword 12............................................................................ 160\nFigure 163: Create I/O Submission Queue – Command Specific Status Values ....................................................... 160\nFigure 164: Delete I/O Completion Queue – Command Dword 10 ............................................................................ 161\nFigure 165: Delete I/O Completion Queue – Command Specific Status Values ........................................................ 161\nFigure 166: Delete I/O Submission Queue – Command Dword 10 ............................................................................ 161\nFigure 167: Delete I/O Submission Queue – Command Specific Status Values ........................................................ 162\nFigure 168: Doorbell Buffer Config – Shadow Doorbell and EventIdx ........................................................................ 162\nFigure 169: Doorbell Buffer Config – PRP Entry 1 ..................................................................................................... 162\nFigure 170: Doorbell Buffer Config – PRP Entry 2 ..................................................................................................... 162\nFigure 171: Device Self-test Namespace Test Action ................................................................................................ 163\nFigure 172: Device Self-test – Command Dword 10 .................................................................................................. 163\nFigure 173: Device Self-test – Command Processing ................................................................................................ 164\nFigure 174: Device Self-test – Command Specific Status Values .............................................................................. 164\nFigure 175: Directive Receive – Data Pointer ............................................................................................................ 165\nFigure 176: Directive Receive – Command Dword 10 ............................................................................................... 165\nFigure 177: Directive Receive – Command Dword 11 ............................................................................................... 165\nFigure 178: Directive Send – Data Pointer ................................................................................................................. 165\nFigure 179: Directive Send – Command Dword 10 .................................................................................................... 165\nFigure 180: Directive Send – Command Dword 11 .................................................................................................... 166\nFigure 181: Firmware Commit – Command Dword 10 ............................................................................................... 166\nFigure 182: Firmware Commit – Completion Queue Entry Dword 0 .......................................................................... 167\nFigure 183: Firmware Commit – Command Specific Status Values ........................................................................... 168\nFigure 184: Firmware Image Download – Data Pointer ............................................................................................. 169\nFigure 185: Firmware Image Download – Command Dword 10 ................................................................................ 169",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 9004,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0052",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2602386176586151
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0053",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3260451853275299
  },
  {
    "content": "Figure 186: Firmware Image Download – Command Dword 11 ................................................................................ 169\nFigure 187: Firmware Image Download – Command Specific Status Values ............................................................ 170\nFigure 188: Format NVM – Operation Scope ............................................................................................................. 170\nFigure 189: Format NVM – Command Dword 10 ....................................................................................................... 171\nFigure 190: Format NVM – Command Specific Status Values ................................................................................... 172\nFigure 191: Get Features – Data Pointer ................................................................................................................... 173\nFigure 192: Get Features – Command Dword 10 ...................................................................................................... 173\nFigure 193: Get Features – Command Dword 14 ...................................................................................................... 173\nFigure 194: Get Features – Feature Identifiers .......................................................................................................... 173\nFigure 195: Completion Queue Entry Dword 0 when Select is set to 11b .................................................................. 175\nFigure 196: Get Log Page – Data Pointer .................................................................................................................. 175\nFigure 197: Get Log Page – Command Dword 10 ..................................................................................................... 175\nFigure 198: Get Log Page – Command Dword 11 ..................................................................................................... 176\nFigure 199: Get Log Page – Command Dword 12 ..................................................................................................... 177\nFigure 200: Get Log Page – Command Dword 13 ..................................................................................................... 177\nFigure 201: Get Log Page – Command Dword 14 ..................................................................................................... 177\nFigure 202: Get Log Page – Log Page Identifiers ...................................................................................................... 179\nFigure 203: Supported Log Pages Log Page ............................................................................................................. 180\nFigure 204: LID Supported and Effects Data Structure .............................................................................................. 180\nFigure 205: LID Supported and Effects Data Structure – LID Specific Parameter Field ............................................. 180\nFigure 206: Error Information Log Entry Data Structure ............................................................................................. 181\nFigure 207: SMART / Health Information Log Page ................................................................................................... 183\nFigure 208: Temperature Sensor Data Structure ....................................................................................................... 186\nFigure 209: Firmware Slot Information Log Page ....................................................................................................... 187\nFigure 210: Commands Supported and Effects Log Page ......................................................................................... 188\nFigure 211: Commands Supported and Effects Data Structure ................................................................................. 189\nFigure 212: Device Self-test Log Page ....................................................................................................................... 190\nFigure 213: Self-test Result Data Structure ................................................................................................................ 191\nFigure 214: Telemetry Host-Initiated Log Specific Parameter Field ........................................................................... 192\nFigure 215: Telemetry Host-Initiated Log Page .......................................................................................................... 193\nFigure 216: Telemetry Controller-Initiated Log Page .................................................................................................. 195\nFigure 217: Endurance Group Information Log Page ................................................................................................. 196\nFigure 218: Predictable Latency Per NVM Set Log Page .......................................................................................... 198\nFigure 219: Predictable Latency Event Aggregate Log Page ..................................................................................... 200\nFigure 220: Asymmetric Namespace Access Log Specific Parameter Field .............................................................. 200\nFigure 221: Asymmetric Namespace Access Log Page ............................................................................................ 201\nFigure 222: ANA Group Descriptor format ................................................................................................................. 201\nFigure 223: Persistent Event Log Specific Parameter Field ....................................................................................... 204\nFigure 224: Persistent Event Log Page ...................................................................................................................... 205\nFigure 225: Persistent Event Format .......................................................................................................................... 207\nFigure 226: Persistent Event Log Event Types .......................................................................................................... 209\nFigure 227: SMART / Health Log Snapshot Event Data Format (Event Type 01h) .................................................... 209\nFigure 228: Firmware Commit Event Data Format (Event Type 02h) ........................................................................ 210\nFigure 229: Timestamp Change Event Format (Event Type 03h) .............................................................................. 210\nFigure 230: Power-on or Reset Event (Event Type 04h) ............................................................................................ 210\nFigure 231: Controller Reset Information descriptor................................................................................................... 211\nFigure 232: NVM Subsystem Hardware Error Event Format (Event Type 05h) ......................................................... 212\nFigure 233: NVM Subsystem Hardware Error Event Codes ...................................................................................... 212\nFigure 234: Additional Hardware Error Information for correctable and uncorrectable PCIe errors ........................... 213\nFigure 235: Additional Hardware Error Information for Controller Ready Timeout Exceeded errors .......................... 215\nFigure 236: Change Namespace Event Data Format (Event Type 06h) .................................................................... 215\nFigure 237: Format NVM Start Event Data Format (Event Type 07h) ........................................................................ 217\nFigure 238: Format NVM Completion Event Data Format (Event Type 08h) ............................................................. 217\nFigure 239: Sanitize Start Event Data Format (Event Type 09h) ............................................................................... 218\nFigure 240: Sanitize Completion Event Data Format (Event Type 0Ah) .................................................................... 218\nFigure 241: Set Feature Event Data Format .............................................................................................................. 219\nFigure 242: Telemetry Log Create Event Data Format (Event Type 0Ch) ................................................................. 220\nFigure 243: Thermal Excursion Event Data Format (Event Type 0Dh) ...................................................................... 220\nFigure 244: Vendor Specific Event Format (Event Type DEh) ................................................................................... 222\nFigure 245: Vendor Specific Event Descriptor Format ............................................................................................... 222\nFigure 246: Vendor Specific Event Data Type Codes ................................................................................................ 222\nFigure 247: Endurance Group Event Aggregate Log Page ........................................................................................ 223",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 9167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0054",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3260451853275299
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0055",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22748178243637085
  },
  {
    "content": "Figure 248: Media Unit Status Log Page ................................................................................................................... 224\nFigure 249: Media Unit Status Descriptor .................................................................................................................. 224\nFigure 250: Supported Capacity Configuration List Log Page ................................................................................... 226\nFigure 251: Capacity Configuration Descriptor........................................................................................................... 226\nFigure 252: Endurance Group Configuration Descriptor ............................................................................................ 227\nFigure 253: Channel Configuration Descriptor ........................................................................................................... 228\nFigure 254: Media Unit Configuration Descriptor ....................................................................................................... 228\nFigure 255: Feature Identifiers Effects Log Page ....................................................................................................... 229\nFigure 256: FID Supported and Effects Data Structure .............................................................................................. 229\nFigure 257: NVMe-MI Commands Supported and Effects Log Page ......................................................................... 230\nFigure 258: NVMe-MI Commands Supported and Effects Data Structure ................................................................. 231\nFigure 259: Command and Feature Lockdown Log Specific Parameter Field ........................................................... 232\nFigure 260: Command and Feature Lockdown Log Page .......................................................................................... 233\nFigure 261: Boot Partition Log Specific Parameter Field ............................................................................................ 233\nFigure 262: Boot Partition Log Page .......................................................................................................................... 234\nFigure 263: Rotational Media Information Log Page .................................................................................................. 234\nFigure 264: Discovery Log Page Entry Data Structure ............................................................................................... 236\nFigure 265: Discovery Log Page ................................................................................................................................ 237\nFigure 266: Reservation Notification Log Page .......................................................................................................... 238\nFigure 267: Sanitize Status Log Page ........................................................................................................................ 239\nFigure 268: Get Log Page – Command Specific Status Values ................................................................................. 240\nFigure 269: Identify – Data Pointer ............................................................................................................................. 241\nFigure 270: Identify – Command Dword 10 ................................................................................................................ 241\nFigure 271: Identify – Command Dword 11 ................................................................................................................ 241\nFigure 272: Identify – Command Dword 14 ................................................................................................................ 241\nFigure 273: Identify – CNS Values ............................................................................................................................. 242\nFigure 274: Command Set Identifiers ......................................................................................................................... 243\nFigure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent ......................................... 244\nFigure 276: Identify – Power State Descriptor Data Structure .................................................................................... 267\nFigure 277: Identify – Namespace Identification Descriptor ....................................................................................... 269\nFigure 278: NVM Set List ........................................................................................................................................... 270\nFigure 279: NVM Set Attributes Entry ........................................................................................................................ 270\nFigure 280: Identify – I/O Command Set Independent Identify Namespace Data Structure ...................................... 272\nFigure 281: Identify – Primary Controller Capabilities Structure ................................................................................. 275\nFigure 282: Secondary Controller List ........................................................................................................................ 276\nFigure 283: Secondary Controller Entry ..................................................................................................................... 276\nFigure 284: UUID List ................................................................................................................................................. 277\nFigure 285: UUID List Entry ....................................................................................................................................... 277\nFigure 286: Domain List ............................................................................................................................................. 278\nFigure 287: Domain Attributes Entry .......................................................................................................................... 278\nFigure 288: Endurance Group List ............................................................................................................................. 278\nFigure 289: Identify I/O Command Set Data Structure ............................................................................................... 280\nFigure 290: I/O Command Set Vector ........................................................................................................................ 280\nFigure 291: Lockdown – Command Dword 10 ........................................................................................................... 281\nFigure 292: Lockdown – Command Dword 14 ........................................................................................................... 282\nFigure 293: Lockdown – Command Specific Status Values ....................................................................................... 283\nFigure 294: Namespace Attachment – Data Pointer .................................................................................................. 284\nFigure 295: Namespace Attachment – Command Dword 10 ..................................................................................... 284\nFigure 296: Namespace Attachment – Command Specific Status Values ................................................................. 284\nFigure 297: Namespace Management – Data Pointer ............................................................................................... 285\nFigure 298: Namespace Management – Command Dword 10 .................................................................................. 285\nFigure 299: Namespace Management – Command Dword 11 .................................................................................. 285\nFigure 300: Namespace Management – Data Structure for Create ........................................................................... 285\nFigure 301: Namespace Management – Command Specific Status Values .............................................................. 286\nFigure 302: Namespace Management – Completion Queue Entry Dword 0 .............................................................. 286\nFigure 303: Sanitize – Command Dword 10 .............................................................................................................. 288\nFigure 304: Sanitize – Command Dword 11 .............................................................................................................. 289\nFigure 305: Sanitize – Command Specific Status Values .......................................................................................... 289\nFigure 306: Security Receive – Data Pointer ............................................................................................................. 290\nFigure 307: Security Receive – Command Dword 10 ................................................................................................ 290\nFigure 308: Security Receive – Command Dword 11 ................................................................................................ 290\nFigure 309: Security Protocol EAh – Security Protocol Specific Field Values ............................................................ 290",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 9442,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0056",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22748178243637085
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0057",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09165182709693909
  },
  {
    "content": "Figure 310: Security Send – Data Pointer .................................................................................................................. 291\nFigure 311: Security Send – Command Dword 10 ..................................................................................................... 291\nFigure 312: Security Send – Command Dword 11 ..................................................................................................... 291\nFigure 313: Set Features – Data Pointer .................................................................................................................... 291\nFigure 314: Set Features – Command Dword 10 ....................................................................................................... 292\nFigure 315: Set Features – Command Dword 14 ....................................................................................................... 292\nFigure 316: Set Features – Feature Identifiers ........................................................................................................... 293\nFigure 317: Arbitration & Command Processing – Command Dword 11 ................................................................... 294\nFigure 318: Power Management – Command Dword 11 ........................................................................................... 294\nFigure 319: Power Management – Completion Queue Entry Dword 0 ....................................................................... 295\nFigure 320: Temperature Threshold – Command Dword 11 ...................................................................................... 295\nFigure 321: Volatile Write Cache – Command Dword 11 ........................................................................................... 296\nFigure 322: Number of Queues – Command Dword 11 ............................................................................................. 297\nFigure 323: Number of Queues – Completion Queue Entry Dword 0 ........................................................................ 297\nFigure 324: Interrupt Coalescing – Command Dword 11 ........................................................................................... 298\nFigure 325: Interrupt Vector Configuration – Command Dword 11 ............................................................................ 298\nFigure 326: Asynchronous Event Configuration – Command Dword 11 .................................................................... 298\nFigure 327: Autonomous Power State Transition – Command Dword 11 .................................................................. 300\nFigure 328: Autonomous Power State Transition – Data Structure Entry .................................................................. 300\nFigure 329: Interactions between APSTE and NOPPME ........................................................................................... 300\nFigure 330: Host Memory Buffer – Command Dword 11 ........................................................................................... 301\nFigure 331: Host Memory Buffer – Command Dword 12 ........................................................................................... 301\nFigure 332: Host Memory Buffer– Command Dword 13 ............................................................................................ 302\nFigure 333: Host Memory Buffer – Command Dword 14 ........................................................................................... 302\nFigure 334: Host Memory Buffer – Command Dword 15 ........................................................................................... 302\nFigure 335: Host Memory Buffer – Host Memory Descriptor List ............................................................................... 302\nFigure 336: Host Memory Buffer – Host Memory Buffer Descriptor Entry .................................................................. 302\nFigure 337: Host Memory Buffer – Completion Queue Entry Dword 0 ....................................................................... 303\nFigure 338: Host Memory Buffer – Attributes Data Structure ..................................................................................... 303\nFigure 339: Timestamp – Data Structure for Set Features ......................................................................................... 304\nFigure 340: Timestamp – Data Structure for Get Features ........................................................................................ 304\nFigure 341: Keep Alive Timer – Command Dword 11 ................................................................................................ 305\nFigure 342: HCTM – Command Dword 11 ................................................................................................................. 305\nFigure 343: Non-Operational Power State Config – Command Dword 11 ................................................................. 306\nFigure 344: Read Recovery Level Config – Command Dword 11 .............................................................................. 307\nFigure 345: Read Recovery Level Config – Command Dword 12 .............................................................................. 307\nFigure 346: Predictable Latency Mode Config – Command Dword 11....................................................................... 307\nFigure 347: Predictable Latency Mode Config – Command Dword 12....................................................................... 307\nFigure 348: Predictable Latency Mode – Deterministic Threshold Configuration Data Structure ............................... 308\nFigure 349: Predictable Latency Mode Window – Command Dword 11 .................................................................... 308\nFigure 350: Predictable Latency Mode Window – Command Dword 12 .................................................................... 308\nFigure 351: Host Behavior Support – Data Structure ................................................................................................. 309\nFigure 352: Sanitize Config – Command Dword 11 ................................................................................................... 310\nFigure 353: Asynchronous Event Configuration – Command Dword 11 .................................................................... 311\nFigure 354 I/O Command Set Profile – Command Dword 11 .................................................................................... 311\nFigure 355: I/O Command Set Profile – Completion Queue Entry Dword 0 ............................................................... 312\nFigure 356: Spinup Control – Command Dword 11.................................................................................................... 312\nFigure 357: Completion Queue Entry Dword 0 .......................................................................................................... 312\nFigure 358: Get Features – Command Dword 11 ...................................................................................................... 312\nFigure 359: Set Features – Command Dword 11 ....................................................................................................... 313\nFigure 360: Host Metadata Data Structure ................................................................................................................. 315\nFigure 361: Metadata Element Descriptor .................................................................................................................. 315\nFigure 362: Controller Metadata Element Types ........................................................................................................ 315\nFigure 363: Namespace Metadata Element Types .................................................................................................... 317\nFigure 364: Software Progress Marker – Command Dword 11 .................................................................................. 317\nFigure 365: Host Identifier – Command Dword 11 ..................................................................................................... 318\nFigure 366: Host Identifier – Data Structure Entry...................................................................................................... 318\nFigure 367: Reservation Notification Configuration – Command Dword 11 ............................................................... 319\nFigure 368: Reservation Persistence Configuration – Command Dword 11 .............................................................. 320\nFigure 369: Write Protection – Command Dword 11 .................................................................................................. 320\nFigure 370: Set Features – Command Specific Status Values .................................................................................. 320\nFigure 371: Virtualization Management – Command Dword 10 ................................................................................. 321",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 9047,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0058",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09165182709693909
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0059",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22666683793067932
  },
  {
    "content": "Figure 372: Virtualization Management – Command Dword 11 ................................................................................. 322\nFigure 373: Virtualization Management – Command Specific Status Values ............................................................. 322\nFigure 374: Virtualization Management – Completion Queue Entry Dword 0 ............................................................ 323\nFigure 375: Fabrics Command Types ........................................................................................................................ 324\nFigure 376 Authentication Receive Command – Submission Queue Entry ............................................................... 324\nFigure 377: Authentication Receive Response .......................................................................................................... 325\nFigure 378: Authentication Send Command – Submission Queue Entry ................................................................... 325\nFigure 379: Authentication Send Response ............................................................................................................... 326\nFigure 380: Connect Command – Submission Queue Entry ...................................................................................... 328\nFigure 381: Connect Command – Data ...................................................................................................................... 329\nFigure 382: Connect Response ................................................................................................................................. 330\nFigure 383: Connect Response – Dword 0 Value Based on Status Code ................................................................. 330\nFigure 384: Disconnect Command and Response ..................................................................................................... 331\nFigure 385: Disconnect Response ............................................................................................................................. 331\nFigure 386: Property Get Command .......................................................................................................................... 332\nFigure 387: Property Get Response ........................................................................................................................... 332\nFigure 388: Property Set Command ........................................................................................................................... 332\nFigure 389: Property Set Response ........................................................................................................................... 333\nFigure 390: Opcodes for I/O Commands ................................................................................................................... 334\nFigure 391: Reservation Acquire – Data Pointer ........................................................................................................ 335\nFigure 392: Reservation Acquire – Command Dword 10 ........................................................................................... 335\nFigure 393: Reservation Acquire Data Structure ........................................................................................................ 335\nFigure 394: Reservation Type Encoding .................................................................................................................... 336\nFigure 395: Reservation Register – Data Pointer ....................................................................................................... 336\nFigure 396: Reservation Register – Command Dword 10 .......................................................................................... 336\nFigure 397: Reservation Register Data Structure....................................................................................................... 337\nFigure 398: Reservation Release – Data Pointer ....................................................................................................... 337\nFigure 399: Reservation Release – Command Dword 10 .......................................................................................... 337\nFigure 400: Reservation Release Data Structure ....................................................................................................... 338\nFigure 401: Reservation Report – Data Pointer ......................................................................................................... 338\nFigure 402: Reservation Report – Command Dword 10 ............................................................................................ 338\nFigure 403: Reservation Report – Command Dword 11 ............................................................................................ 339\nFigure 404: Reservation Status Data Structure .......................................................................................................... 339\nFigure 405: Reservation Status Extended Data Structure .......................................................................................... 339\nFigure 406: Registered Controller Data Structure ...................................................................................................... 340\nFigure 407: Registered Controller Extended Data Structure ...................................................................................... 340\nFigure 408: Namespace B and C optimized through Controller 2 .............................................................................. 342\nFigure 409: Namespace B optimized through Controller 1 ......................................................................................... 343\nFigure 410: Multiple Namespace groups .................................................................................................................... 344\nFigure 411: ANA effects on Command Processing .................................................................................................... 346\nFigure 412: Boot Partition Overview ........................................................................................................................... 349\nFigure 413: Boot Partition Protection Overview ......................................................................................................... 351\nFigure 414: Example Device Self-test Operation (Informative) .................................................................................. 357\nFigure 415: Format NVM command Aborting a Device Self-Test Operation .............................................................. 358\nFigure 416: Directive Types ....................................................................................................................................... 359\nFigure 417: Directive Specific Field Interpretation ...................................................................................................... 360\nFigure 418: Identify Directive – Directive Operations ................................................................................................. 360\nFigure 419: Identify Directive – Return Parameters Data Structure ........................................................................... 361\nFigure 420: Enable Directive – Command Dword 12 ................................................................................................. 362\nFigure 421: Directive Streams – Stream Alignment and Granularity .......................................................................... 362\nFigure 422: Streams – Directive Operations .............................................................................................................. 363\nFigure 423: Example Multi-Stream and NSSC ........................................................................................................... 364\nFigure 424: Streams Directive – Command Specific Status Values ........................................................................... 365\nFigure 425: Streams Directive – Return Parameters Data Structure .......................................................................... 365\nFigure 426: Streams Directive – Get Status Data Structure ....................................................................................... 367\nFigure 427: Allocate Resources – Command Dword 12 ............................................................................................ 367\nFigure 428: Allocate Resources – Completion Queue Entry Dword 0 ........................................................................ 368\nFigure 429: Namespace Write Protection State Definitions ....................................................................................... 373\nFigure 430: Namespace Write Protection State Machine Model ................................................................................ 373\nFigure 431: Commands Allowed when Specifying a Write Protected NSID ............................................................... 374\nFigure 432: Example of TLS secure channel establishment ...................................................................................... 376\nFigure 433: Example of authentication transaction for NVMe/TCP ............................................................................ 377",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 9355,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0060",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22666683793067932
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0061",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18142536282539368
  },
  {
    "content": "Figure 434: Mapping of authentication messages to the Authentication Send command .......................................... 377\nFigure 435: Mapping of authentication messages to the Authentication Receive command ...................................... 377\nFigure 436: Example of TLS secure channel concatenated to an authentication transaction .................................... 378\nFigure 437: AUTH_Negotiate message format .......................................................................................................... 378\nFigure 438: Secure channel protocol identifiers ......................................................................................................... 379\nFigure 439: Authentication protocol identifiers ........................................................................................................... 379\nFigure 440: AUTH_Failure1 and AUTH_Failure2 message format ............................................................................ 380\nFigure 441: AUTH_Failure reason codes ................................................................................................................... 380\nFigure 442: AUTH_Failure reason code explanations ................................................................................................ 380\nFigure 443: Example of DH-HMAC-CHAP authentication transaction ....................................................................... 381\nFigure 444: Mathematical notations for DH-HMAC-CHAP ......................................................................................... 382\nFigure 445: Authentication protocol descriptor for DH-HMAC-CHAP ......................................................................... 383\nFigure 446: DH-HMAC-CHAP hash function identifiers ............................................................................................. 383\nFigure 447: DH-HMAC-CHAP Diffie-Hellman group identifiers .................................................................................. 384\nFigure 448: DH-HMAC-CHAP_Challenge message format ....................................................................................... 384\nFigure 449: DH-HMAC-CHAP_Reply message format .............................................................................................. 386\nFigure 450: DH-HMAC-CHAP_Success1 message format ........................................................................................ 387\nFigure 451: DH-HMAC-CHAP_Success2 message format ........................................................................................ 389\nFigure 452: Dynamic Power Management ................................................................................................................. 393\nFigure 453: Example Power State Descriptor Table .................................................................................................. 393\nFigure 454: Workload Hints ........................................................................................................................................ 395\nFigure 455: HCTM Example ....................................................................................................................................... 397\nFigure 456: Deterministic and Non-Deterministic Windows ....................................................................................... 398\nFigure 457: DTWIN Attributes and Estimates ............................................................................................................ 400\nFigure 458: Typical and Reliable Estimate Example .................................................................................................. 401\nFigure 459: Read Recovery Level Overview .............................................................................................................. 403\nFigure 460: RPMB Device Configuration Block Data Structure .................................................................................. 404\nFigure 461: RPMB Request and Response Message Types ..................................................................................... 405\nFigure 462: RPMB Operation Result .......................................................................................................................... 405\nFigure 463: RPMB Contents ...................................................................................................................................... 406\nFigure 464: RPMB Data Frame .................................................................................................................................. 406\nFigure 465: RPMB – Authentication Key Data Flow ................................................................................................... 408\nFigure 466: RPMB – Read Write Counter Value Flow ............................................................................................... 409\nFigure 467: RPMB – Authenticated Data Write Flow ................................................................................................. 411\nFigure 468: RPMB – Authenticated Data Read Flow ................................................................................................. 412\nFigure 469: RPMB – Authenticated Device Configuration Block Write Flow .............................................................. 413\nFigure 470: RPMB – Authenticated Device Configuration Block Read Flow .............................................................. 414\nFigure 471: Example Multi-Host System .................................................................................................................... 415\nFigure 472: Command Behavior in the Presence of a Reservation............................................................................ 416\nFigure 473: Command Behavior in the Presence of a Reservation............................................................................ 417\nFigure 474: Sanitize Operations – Overwrite Mechanism .......................................................................................... 423\nFigure 475: Telemetry Log Example – All Data Areas Populated .............................................................................. 429\nFigure 476: Telemetry Log Example – Data Area 2 Populated .................................................................................. 430\nFigure 477: UUID Index Field ..................................................................................................................................... 431\nFigure 478: Controller Resource Allocation ................................................................................................................ 434\nFigure 479: PRP List Describing I/O Submission Queue ........................................................................................... 443\nFigure 480: PRP List Describing Data to Compare .................................................................................................... 444",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 7014,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0062",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18070130050182343
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **1 Introduction **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0063",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5702107548713684
  },
  {
    "content": "The NVM Express [®] (NVMe [®] ) interface allows host software to communicate with a non-volatile memory\nsubsystem. This interface is optimized for all storage solutions, attached using a variety of transports\nincluding PCI Express [®], Ethernet, InfiniBand [TM], and Fibre Channel. The mapping of extensions defined in\nthis document to a specific NVMe Transport are defined in an NVMe Transport binding specification. The\nNVMe Transport binding specification for Fibre Channel is defined in INCITS 556 Fibre Channel – NonVolatile Memory Express - 2 (FC-NVMe-2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 562,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0064",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**1 Introduction **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2861346900463104
  },
  {
    "content": "[For an overview of changes from revision 1.4 to revision 2.0, refer to http://nvmexpress.org/changes for a](http://nvmexpress.org/changes)\ndocument that describes the new features, including mandatory requirements for a controller to comply with\nrevision 2.0.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 260,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0065",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**1 Introduction **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40197357535362244
  },
  {
    "content": "**NVM Express® Specification Family**\n\nFigure 1 shows the relationship of the NVM Express specifications to each other within the NVMe™ family\nof specifications.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 161,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0066",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**1 Introduction **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6333024501800537
  },
  {
    "content": "**Figure 1: NVMe Family of Specifications**\n#### I/O Command Set Specifications",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0067",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**1 Introduction **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5408108830451965
  },
  {
    "content": "(e.g., NVM, Key Value, Zoned Namespace)\n## NVM Express Base Specification\n#### Transport Specifications",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0068",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "I/O Command Set Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2629219889640808
  },
  {
    "content": "(e.g., PCIe ®, RDMA, TCP)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0069",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18403051793575287
  },
  {
    "content": "The NVM Express specification family structure shown in Figure 1 is intended to show the applicability of\nNVM Express specifications to each other, not a hierarchy, protocol stack, or system architecture.\n\nThe NVM Express Base (NVM Express Base) Specification (i.e., this specification) defines a protocol for\nhost software to communicate with a non-volatile memory subsystems over a variety of memory-based\ntransports and message-based transports.\n\nThe NVM Express Management Interface (NVMe-MI) Specification defines an optional management\ninterface for all NVM Express Subsystems.\n\nNVM Express I/O Command Set specifications define data structures, features, log pages, commands, and\nstatus values that extend the NVM Express Base Specification.\n\nNVM Express Transport specifications define the binding of the NVMe protocol including controller\nproperties to a specific transport.\n\nNVM Express [®] Base Specification, Revision 2.0c\n\nThis specification defines a set of properties and commands that comprise the interface required for\ncommunication with a controller in an NVM subsystem. These properties are to be implemented by an\ninstance of a controller using a specific NVMe Transport. This specification also defines common aspects\nof the NVMe I/O Command Sets that may be supported by a controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 7,
      "character_length": 1307,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0070",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3805522322654724
  },
  {
    "content": "There are three types of controllers with different capabilities (refer to section 3.1.2):",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0071",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6588581800460815
  },
  {
    "content": "a) I/O controllers;\nb) Discovery controllers; and\nc) Administrative controllers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 80,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0072",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.459833025932312
  },
  {
    "content": "In this document the generic term controller is often used instead of enumerating specific controller types\nwhen applicable controller types may be determined from the context.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 176,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0073",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07381866872310638
  },
  {
    "content": "**1.3** **Outside of Scope**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0074",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.005589018575847149
  },
  {
    "content": "The property interface and command set are specified apart from any usage model for the NVM, but rather\nonly specifies the communication interface to the NVM subsystem. Thus, this specification does not specify\nwhether the non-volatile memory system is used as a solid state drive, a main memory, a cache memory,\na backup memory, a redundant memory, etc. Specific usage models are outside the scope, optional, and\nnot licensed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 427,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0075",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5450741648674011
  },
  {
    "content": "This specification defines requirements and behaviors that are implementation agnostic. The\nimplementation of these requirements and behaviors are outside the scope of this specification. For\nexample, an NVM subsystem that follows this specification may be implemented by an SSD that attaches\ndirectly to a fabric, a device that translates between a fabric and a PCIe NVMe SSD, or software running\non a general purpose server.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 426,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0076",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.509981632232666
  },
  {
    "content": "This interface is specified above any non-volatile memory management, like wear leveling. Erases and\nother management tasks for NVM technologies like NAND are abstracted.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 170,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0077",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2946853041648865
  },
  {
    "content": "This specification does not contain any information on caching algorithms or techniques.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0078",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21695245802402496
  },
  {
    "content": "The implementation or use of other published specifications referred to in this specification, even if required\nfor compliance with the specification, are outside the scope of this specification (e.g., PCI, PCI Express,\nand PCI-X). This includes published specifications for fabrics and other technologies referred to by this\ndocument or any NVMe Transport binding specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 379,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0079",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2484189122915268
  },
  {
    "content": "**1.4** **Conventions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0080",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20904715359210968
  },
  {
    "content": "Several keywords are used to differentiate between different levels of requirements.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0081",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3646607995033264
  },
  {
    "content": "**1.4.1.1** **mandatory**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0082",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38777998089790344
  },
  {
    "content": "A keyword indicating items to be implemented as defined by this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0083",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36628612875938416
  },
  {
    "content": "A keyword that indicates flexibility of choice with no implied preference.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0084",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07563679665327072
  },
  {
    "content": "**1.4.1.3** **obsolete**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0085",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3833870589733124
  },
  {
    "content": "A keyword indicating functionality that was defined in a previous version of the NVM Express specification\nand that has been removed from this specification.\n\nNVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 208,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0086",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3072909712791443
  },
  {
    "content": "**1.4.1.4** **optional**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0087",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43775948882102966
  },
  {
    "content": "A keyword that describes features that are not required by this specification. However, if any optional\nfeature defined by the specification is implemented, the feature shall be implemented in the way defined by\nthe specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 230,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0088",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16249637305736542
  },
  {
    "content": "“R” is used as an abbreviation for “reserved” when the figure or table does not provide sufficient space for\nthe full word “reserved”.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 134,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0089",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3544498085975647
  },
  {
    "content": "**1.4.1.6** **reserved**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0090",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35699453949928284
  },
  {
    "content": "A keyword referring to bits, bytes, words, fields, and opcode values that are set-aside for future\nstandardization. Their use and interpretation may be specified by future extensions to this or other\nspecifications. A reserved bit, byte, word, field, property, or register shall be cleared to 0h, or in accordance\nwith a future extension to this specification. The recipient of a command or a register write is not required\nto check reserved bits, bytes, words, or fields. Receipt of reserved coded values in defined fields in\ncommands shall be reported as an error. Writing a reserved coded value into a controller property field\nproduces undefined results.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 658,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0091",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1741209179162979
  },
  {
    "content": "**1.4.1.7** **shall**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0092",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12545010447502136
  },
  {
    "content": "A keyword indicating a mandatory requirement. Designers are required to implement all such mandatory\nrequirements to ensure interoperability with other products that conform to the specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 195,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0093",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1155630573630333
  },
  {
    "content": "**1.4.1.8** **should**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0094",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15399344265460968
  },
  {
    "content": "A keyword indicating flexibility of choice with a strongly preferred alternative. Equivalent to the phrase “it is\nrecommended”.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0095",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09184103459119797
  },
  {
    "content": "**Numerical Descriptions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0096",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3663598597049713
  },
  {
    "content": "A 0’s based value is a numbering scheme in which the number 0h represents a value of 1h, 1h represents\n2h, 2h represents 3h, etc. In this numbering scheme, there is no method to represent the value of 0h.\nValues in this specification are 1-based (i.e., the number 1h represents a value of 1h, 2h represents 2h,\netc.) unless otherwise specified.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 344,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0097",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39112937450408936
  },
  {
    "content": "Size values are shown in binary units or decimal units. The symbols used to represent these values are as\nshown in Figure 2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0098",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5984588265419006
  },
  {
    "content": "**Figure 2: Decimal and Binary Units**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0099",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4222598075866699
  },
  {
    "content": "|Decimal|Binary|\n|---|---|\n|Power<br>Symbol<br>(base-10)|Power<br>Symbol<br>(base-2)|\n|kilo / k 103<br>mega / M 106<br>giga / G 109<br>tera / T 1012<br>peta / P 1015<br>exa / E 1018<br>zetta / Z 1021<br>yotta / Y 1024|kibi / Ki 210<br>mebi / Mi 220<br>gibi / Gi 230<br>tebi / Ti 240<br>pebi / Pi 250<br>exbi / Ei 260<br>zebi / Zi 270<br>yobi / Yi 280|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 351,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0100",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23953603208065033
  },
  {
    "content": "The ^ operator is used to denote the power to which that number, symbol, or expression is to be raised.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0101",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18428343534469604
  },
  {
    "content": "Some parameters are defined as an ASCII string. ASCII strings shall contain only code values 20h through\n7Eh. For the string “Copyright”, the character “C” is the first byte, the character “o” is the second byte, etc.\nThe string is left justified and shall be padded with spaces (ASCII character 20h) to the right if necessary.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 327,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0102",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28656262159347534
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0103",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19684121012687683
  },
  {
    "content": "A hexadecimal ASCII string is an ASCII string that uses a subset of the code values: “0” to “9”, “A” to “F”\nuppercase, and “a” to “f” lowercase.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 144,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0104",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6954164505004883
  },
  {
    "content": "Hexadecimal (i.e., base 16) numbers are written with a lower case “h” suffix (e.g., 0FFFh, 80h).\nHexadecimal numbers larger than eight digits are represented with an underscore character dividing each\ngroup of eight digits (e.g., 1E_DEADBEEFh).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 244,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0105",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6230410933494568
  },
  {
    "content": "Binary (i.e., base 2) numbers are written with a lower case “b” suffix (e.g., 1001b, 10b). Binary numbers\nlarger than four digits are written with an underscore character dividing each group of four digits (e.g.,\n1000_0101_0010b).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 230,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0106",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6202695965766907
  },
  {
    "content": "All other numbers are decimal (i.e., base 10). A decimal number is represented in this specification by any\nsequence of digits consisting of only the Western-Arabic numerals 0 to 9 not immediately followed by a\nlower-case b or a lower-case h (e.g., 175). This specification uses the following conventions for representing\ndecimal numbers:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 338,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0107",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5649084448814392
  },
  {
    "content": "a) the decimal separator (i.e., separating the integer and fractional portions of the number) is a period;\nb) the thousands separator (i.e., separating groups of three decimal digits in a portion of the number)\n\nis a comma;\nc) the thousands separator is used in only the integer portion of a number and not the fractional portion",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 329,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0108",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6456745862960815
  },
  {
    "content": "of a number; and\nd) the decimal representation for a year does not include a comma (e.g., 2019 instead of 2,019).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 113,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0109",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17777617275714874
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0110",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1511298269033432
  },
  {
    "content": "**Byte, Word, and Dword Relationships**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0111",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6408498287200928
  },
  {
    "content": "Figure 3 illustrates the relationship between bytes, words and dwords. A qword (quadruple word) is a unit\nof data that is four times the size of a word; it is not illustrated due to space constraints. Unless otherwise\nspecified, this specification specifies data in a little endian format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0112",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5738893151283264
  },
  {
    "content": "**Figure 3: Byte, Word, and Dword Relationships**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0113",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5215563178062439
  },
  {
    "content": "byte 3 byte 2 byte 1 byte 0",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0114",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.242640420794487
  },
  {
    "content": "**1.5** **Definitions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0115",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12554460763931274
  },
  {
    "content": "The Admin Queue is the Submission Queue and Completion Queue with identifier 0. The Admin\nSubmission Queue and corresponding Admin Completion Queue are used to submit administrative\ncommands and receive completions for those administrative commands, respectively.\n\nThe Admin Submission Queue is uniquely associated with the Admin Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 347,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0116",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09315702319145203
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0117",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04863612353801727
  },
  {
    "content": "**Administrative controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0118",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4673735499382019
  },
  {
    "content": "A controller that exposes capabilities that allow a host to manage an NVM subsystem. An Administrative\ncontroller does not implement I/O Queues, provide access to data or metadata associated with user data\non a non-volatile memory storage medium, or support namespaces attached to the Administrative controller\n(i.e., there are never any active NSIDs).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 352,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0119",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1173253133893013
  },
  {
    "content": "**arbitration burst**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0120",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4845181405544281
  },
  {
    "content": "The maximum number of commands that may be fetched by an arbitration mechanism at one time from a\nSubmission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 115,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0121",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6143817901611328
  },
  {
    "content": "**arbitration mechanism**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0122",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2358108013868332
  },
  {
    "content": "The method used to determine which Submission Queue is selected next to fetch commands for execution\nby the controller. Refer to section 3.4.4.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 143,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0123",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4614257216453552
  },
  {
    "content": "An exclusive communication relationship between a particular controller and a particular host that\nencompasses the Admin Queue and all I/O Queues of that controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0124",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11679591238498688
  },
  {
    "content": "The process of accessing media to determine correct operation of a sanitize operation. Refer to section\n8.21 and to ISO/IEC 27040.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 130,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0125",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2558458745479584
  },
  {
    "content": "**authentication commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0126",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5238693356513977
  },
  {
    "content": "Used to refer to Fabrics Authentication Send or Authentication Receive commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 80,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0127",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2433944195508957
  },
  {
    "content": "A data storage area used by the NVM subsystem, that is not accessible to a host, and that may contain a\nsubset of user data stored in the non-volatile media or may contain user data that is not committed to nonvolatile media.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0128",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06658346205949783
  },
  {
    "content": "**candidate command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0129",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6500017046928406
  },
  {
    "content": "A candidate command is a submitted command which has been transferred into the controller and the\ncontroller deems ready for processing.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0130",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19672763347625732
  },
  {
    "content": "An NVMe unit of information exchange used in NVMe over Fabrics. A capsule contains a command or\nresponse and may optionally contain command/response data and SGLs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0131",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4518434405326843
  },
  {
    "content": "A Channel represents a communication path between the controller and one or more Media Units in an\nNVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 113,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0132",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.021369826048612595
  },
  {
    "content": "**command completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0133",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49280405044555664
  },
  {
    "content": "A command is completed when the controller has completed processing the command, has updated status\ninformation in the completion queue entry, and has posted the completion queue entry to the associated\nCompletion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 220,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0134",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42936259508132935
  },
  {
    "content": "**command submission**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0135",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40326765179634094
  },
  {
    "content": "For memory-based transport model (e.g. PCIe) implementations, a command is submitted when a\nSubmission Queue Tail Doorbell write has completed that moves the Submission Queue Tail Pointer value\npast the Submission Queue slot in which the command was placed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 257,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0136",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19167925417423248
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0137",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3717348575592041
  },
  {
    "content": "For message-based transport model (e.g. NVMe over Fabrics) implementations, a command is submitted\nwhen a host adds a capsule to a Submission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0138",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2915547490119934
  },
  {
    "content": "A controller is the interface between a host and an NVM subsystem. There are three types of controllers:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 104,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0139",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5547828078269958
  },
  {
    "content": "a) I/O controllers;\nb) Discovery controllers; and\nc) Administrative controllers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 80,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0140",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5271052718162537
  },
  {
    "content": "A controller executes commands submitted by a host on a Submission Queue and posts a completion on\na Completion Queue. All controllers implement one Admin Submission Queue and one Admin Completion\nQueue. Depending on the controller type, a controller may also implement one or more I/O Submission\nQueues and I/O Completion Queues. When PCI Express is used as the transport, then a controller is a PCI\nExpress function.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 418,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0141",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3859560787677765
  },
  {
    "content": "A method of information exchange between a host and either an NVM subsystem or a controller.\nInformation may be transmitted using the Directive Send and Directive Receive commands. A subset of I/O\ncommands may include a Directive Type field and a Directive Specific field to communicate more\ninformation that is specific to the associated I/O command. Refer to section 8.7.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 373,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0142",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1924889087677002
  },
  {
    "content": "**Discovery controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0143",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5776439905166626
  },
  {
    "content": "A controller that exposes capabilities that allow a host to retrieve a Discovery Log Page. A Discovery\ncontroller does not implement I/O Queues or provide access to a non-volatile memory storage medium.\nRefer to section 3.1.2.3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 228,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0144",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4006059765815735
  },
  {
    "content": "**Discovery Service**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0145",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45078450441360474
  },
  {
    "content": "An NVM subsystem that supports Discovery controllers only. A Discovery Service shall not support a\ncontroller that exposes namespaces.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 134,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0146",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2475692629814148
  },
  {
    "content": "**dynamic controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0147",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33546820282936096
  },
  {
    "content": "The controller is allocated on demand with no state (e.g., Feature settings) preserved from prior\nassociations.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0148",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2689720392227173
  },
  {
    "content": "A domain is the smallest indivisible unit that shares state (e.g., power state, capacity information).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0149",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08530645072460175
  },
  {
    "content": "**emulated controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0150",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4941491484642029
  },
  {
    "content": "An NVM Express controller that is defined in software. An emulated controller may or may not have an\nunderlying physical NVMe controller (e.g., physical PCIe function).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0151",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4048605263233185
  },
  {
    "content": "A portion of NVM in the NVM subsystem whose endurance is managed as a group. Refer to section 3.2.3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0152",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15713463723659515
  },
  {
    "content": "**fabric (network fabric)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0153",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33581241965293884
  },
  {
    "content": "A network topology in which nodes pass data to each other.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0154",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.03890480473637581
  },
  {
    "content": "**firmware/boot partition image update command sequence**\n\nThe sequence of one or more Firmware Image Download commands that download a firmware image or a\nboot partition image followed by a Firmware Commit command that commits that downloaded image to a\nfirmware slot or a boot partition.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0155",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13350620865821838
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0156",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0969558134675026
  },
  {
    "content": "A firmware slot is a location in a domain used to store a firmware image. The domain stores from one to\nseven firmware images. Controllers in the same domain share the same firmware slots.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 188,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0157",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14360970258712769
  },
  {
    "content": "An entity that interfaces to an NVM subsystem through one or more controllers and submits commands to\nSubmission Queues and retrieves command completions from Completion Queues.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 177,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0158",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24944572150707245
  },
  {
    "content": "**host-accessible memory**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0159",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6623013615608215
  },
  {
    "content": "Memory that the host is able to access (e.g., host memory, Controller Memory Buffer (CMB), Persistent\nMemory Region (PMR)).\n\nMemory that may be read and written by both a host and a controller and that is not exposed by a controller\n(i.e., Controller Memory Buffer or Persistent Memory Region). Host memory may be implemented inside or\noutside a host (e.g., a memory region exposed by a device that is neither the host nor controller).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 435,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0160",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3635217845439911
  },
  {
    "content": "**Identify Controller data structures**\n\nAll controller data structures that are able to be retrieved via the Identify command: Identify Controller data\nstructure (i.e., CNS 01h) and each of the I/O Command Set specific Identify Controller data structure (i.e.,\nCNS 06h).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 271,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0161",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5953343510627747
  },
  {
    "content": "**Identify Namespace data structures**\n\nAll namespace data structures that are able to be retrieved via the Identify command: Identify Namespace\ndata structure (i.e., CNS 00h), I/O Command Set Independent Identify Namespace data structure (i.e., CNS\n08h), and each of the I/O Command Set specific Identify Namespace data structures (i.e., 05h).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 344,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0162",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20111119747161865
  },
  {
    "content": "An I/O command is a command submitted to an I/O Submission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0163",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5518025755882263
  },
  {
    "content": "**I/O Completion Queue**\n\nAn I/O Completion Queue is a Completion Queue that is used to indicate command completions and is\nassociated with one or more I/O Submission Queues.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 174,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0164",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.533008873462677
  },
  {
    "content": "A controller that implements I/O queues and is intended to be used to access a non-volatile memory storage\nmedium.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 114,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0165",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45429059863090515
  },
  {
    "content": "**I/O Submission Queue**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0166",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.686328113079071
  },
  {
    "content": "An I/O Submission Queue is a Submission Queue that is used to submit I/O commands for execution by\nthe controller (e.g., Read command and Write command for the NVM Command Set).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 177,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0167",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2530706524848938
  },
  {
    "content": "A Media Unit represents a component of the underlying media in an NVM subsystem. Endurance Groups\nare composed of Media Units.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 126,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0168",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3546828627586365
  },
  {
    "content": "Metadata is contextual information related to formatted user data (e.g., a particular LBA of data). The host\nmay include metadata to be stored by the NVM subsystem if storage space is provided by the controller.\nRefer to the applicable I/O Command Set specification for details.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 278,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0169",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30835527181625366
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0170",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2560639977455139
  },
  {
    "content": "A formatted quantity of non-volatile memory that may be directly accessed by a host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0171",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10835527628660202
  },
  {
    "content": "**Namespace ID (NSID)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0172",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6602992415428162
  },
  {
    "content": "An identifier used by a controller to provide access to a namespace or the name of the field in the SQE that\ncontains the namespace identifier (refer to Figure 87). Refer to section 3.2.1 for the definitions of valid\nNSID, invalid NSID, active NSID, inactive NSID, allocated NSID, and unallocated NSID.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 302,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0173",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23041419684886932
  },
  {
    "content": "NVM is an acronym for non-volatile memory.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0174",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5416179299354553
  },
  {
    "content": "A portion of NVM from an Endurance Group. Refer to section 3.2.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0175",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3577117323875427
  },
  {
    "content": "An NVM subsystem includes one or more domains, one or more controllers, zero or more namespaces,\nand one or more ports. An NVM subsystem may include a non-volatile memory storage medium and an\ninterface between the controller(s) in the NVM subsystem and non-volatile memory storage medium.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0176",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5770929455757141
  },
  {
    "content": "**NVM subsystem port**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0177",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6550041437149048
  },
  {
    "content": "An NVMe over Fabrics protocol interface between an NVM subsystem and a fabric. An NVM subsystem\nport is a collection of one or more physical fabric interfaces that together act as a single interface.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 199,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0178",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5534119606018066
  },
  {
    "content": "**NVMe over Fabrics**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0179",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2763979732990265
  },
  {
    "content": "An implemenation of the NVM Express interface that complies to either the message-only or the\nmessage/memory-based implementation of the memory-based transport model definition (refer to Figure 4\nand section 2.2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 213,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0180",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5807597637176514
  },
  {
    "content": "A protocol layer that provides reliable delivery of data, commands, and responses between a host and an\nNVM subsystem. The NVMe Transport layer is layered on top of the fabric. It is independent of the fabric\nphysical interconnect and low level fabric protocol layers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 268,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0181",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5695399641990662
  },
  {
    "content": "**NVMe Transport binding specification**\n\nA specification of reliable delivery of data, commands, and responses between a host and an NVM\nsubsystem for an NVMe Transport. The binding may exclude or restrict functionality based on the NVMe\nTransport’s capabilities.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 264,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0182",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3717450201511383
  },
  {
    "content": "**physical fabric interface (physical ports)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0183",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5216854214668274
  },
  {
    "content": "A physical connection between an NVM subsystem and a fabric.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0184",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49871626496315
  },
  {
    "content": "An identifier that is associated with an NVM subsystem port. Refer to section 2.2.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0185",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.184202179312706
  },
  {
    "content": "**primary controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0186",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3676159679889679
  },
  {
    "content": "An NVM Express controller that supports the Virtualization Management command. An NVM subsystem\nmay contain multiple primary controllers. Secondary controller(s) in an NVM subsystem depend on a\nprimary controller for dynamic resource management (refer to section 8.26).\n\nA PCI Express SR-IOV Physical Function that supports the NVM Express interface and the Virtualization\nEnhancements capability is an example of a primary controller (refer to section 8.26.4).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 461,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0187",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4726603627204895
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0188",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19539058208465576
  },
  {
    "content": "**private namespace**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0189",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.430235356092453
  },
  {
    "content": "A namespace that is only able to be attached to one controller at a time. Refer to the Namespace Multipath I/O and Namespace Sharing Capabilities (NMIC) field in Figure 280.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 173,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0190",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2865247428417206
  },
  {
    "content": "The generalization of memory mapped controller registers defined for NVMe over PCIe. Properties are\nused to configure low level controller attributes and obtain low level controller status.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 189,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0191",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14345449209213257
  },
  {
    "content": "Media that stores data on rotating platters (refer to section 8.20).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0192",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1052517518401146
  },
  {
    "content": "**Runtime D3 (Power Removed)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0193",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5936524271965027
  },
  {
    "content": "In Runtime D3 (RTD3) main power is removed from the controller. Auxiliary power may or may not be\nprovided. For PCI Express, RTD3 is the D3 cold power state (refer to section 8.15.4).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 183,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0194",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.04328041896224022
  },
  {
    "content": "**sanitize operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0195",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11395523697137833
  },
  {
    "content": "Process by which all user data in the NVM subsystem is altered such that recovery of the previous user\ndata from any cache or the non-volatile media is infeasible for a given level of effort (refer to ISO/IEC\n27040).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 216,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0196",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.051882099360227585
  },
  {
    "content": "**secondary controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0197",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44143545627593994
  },
  {
    "content": "An NVM Express controller that depends on a primary controller in an NVM subsystem for management of\nsome controller resources (refer to section 8.26).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 151,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0198",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6769914031028748
  },
  {
    "content": "A PCI Express SR-IOV Virtual Function that supports the NVM Express interface and receives resources\nfrom a primary controller is an example of a secondary controller (refer to section 8.26.4).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0199",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4652298390865326
  },
  {
    "content": "A namespace that may be attached to two or more controllers in an NVM subsystem concurrently. Refer to\nthe Namespace Multi-path I/O and Namespace Sharing Capabilities (NMIC) field in Figure 280.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 194,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0200",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10476677864789963
  },
  {
    "content": "The process of changing a spindle from an operational power state to a non-operational power state, for\nan Endurance Group that stores data on rotational media (refer to section 8.20).\n\nThe process of changing a spindle from a non-operational power state to an operational power state, for\nan Endurance Group associated with rotational media (refer to section 8.20).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 366,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0201",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12572932243347168
  },
  {
    "content": "**static controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0202",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25160491466522217
  },
  {
    "content": "The controller is pre-existing with a specific Controller ID and its state (e.g., Feature settings) is preserved\nfrom prior associations.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 137,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0203",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19347722828388214
  },
  {
    "content": "Data stored in a namespace that is composed of data that the host may store and later retrieve including\nmetadata if supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0204",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15419943630695343
  },
  {
    "content": "**1.6** **I/O Command Set specific definitions used in this specification**\n\nThe following terms used in this specification are defined in each I/O Command Set specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 174,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0205",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28718677163124084
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0206",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1950223594903946
  },
  {
    "content": "**Endurance Group Host Read Command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0207",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3973570466041565
  },
  {
    "content": "An I/O Command Set specific command that results in the controller reading user data, but may or may not\nreturn the data to the host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 133,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0208",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31581202149391174
  },
  {
    "content": "A value used to index into the I/O Command Set Specific Format table (i.e., the User Data Format number).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 105,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0209",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4210534393787384
  },
  {
    "content": "**SMART Data Units Read Command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0210",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3353527784347534
  },
  {
    "content": "An I/O Command Set specific command that results in the controller reading user data, but may or may not\nreturn the data to the host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 133,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0211",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4235553741455078
  },
  {
    "content": "**SMART Host Read Command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0212",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4235553741455078
  },
  {
    "content": "An I/O Command Set specific command that results in the controller reading user data, but may or may not\nreturn the data to the host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 133,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0213",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2546136677265167
  },
  {
    "content": "An I/O Command Set specific format that describes the layout of the data on the NVM media.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0214",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1865205615758896
  },
  {
    "content": "**User Data Out Command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0215",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4894067347049713
  },
  {
    "content": "An I/O Command Set specific command that results in the controller writing user data, but may or may not\ntransfer user data from the host to the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 156,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0216",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17767781019210815
  },
  {
    "content": "**1.7** **NVM Command Set specific definitions used in this specification**\n\nThe following terms used in this specification are defined in the NVM Command Set Specification. These\nterms are used throughout the document as examples for a specific I/O Command Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 262,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0217",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44405949115753174
  },
  {
    "content": "The smallest addressable data unit for Read and Write commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0218",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4479694664478302
  },
  {
    "content": "**logical block address (LBA)**\n\nThe address of a logical block, referred to commonly as LBA.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0219",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25423428416252136
  },
  {
    "content": "**1.8** **References**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0220",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14803758263587952
  },
  {
    "content": "INCITS 502-2019, Information technology – SCSI Primary Commands - 5 (SPC-5). Available from\n[http://webstore.ansi.org.](http://webstore.ansi.org/)\n\nINCITS 514-2014, Information technology – SCSI Block Commands - 3 (SBC-3). Available from\n[http://webstore.ansi.org.](http://webstore.ansi.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 292,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0221",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49989062547683716
  },
  {
    "content": "INCITS 529-2018, Information technology – ATA/ATAPI Command Set - 4 (ACS-4). Available from\n[http://webstore.ansi.org.](http://webstore.ansi.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 146,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0222",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40479037165641785
  },
  {
    "content": "INCITS 556-2020, Information technology – Non-Volatile Memory Express - 2 (FC-NVMe-2). Available\n[from http://webstore.ansi.org.](http://webstore.ansi.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 156,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0223",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33560115098953247
  },
  {
    "content": "ISO 8601, Data elements and interchange formats – Information interchange – Representations of dates\n[and times. Available from https://www.iso.org.](https://www.iso.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 171,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0224",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.553659975528717
  },
  {
    "content": "ISO/IEC 27040:2015 Information technology – Security techniques – Storage security. Available from\n[https://www.iso.org.](https://www.iso.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 143,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0225",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23160871863365173
  },
  {
    "content": "JEDEC JESD218B-01: Solid State Drive (SSD) Requirements and Endurance Test Method standard.\n[Available from https://www.jedec.org.](https://www.jedec.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0226",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2778657078742981
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n\nNVM Express Management Interface Specification, Revision 1.2. Available from\n[https://www.nvmexpress.org.](https://www.nvmexpress.org/)\n\nNVM Express NVM Command Set Specification, Revision 1.0. Available from\n[https://www.nvmexpress.org.](https://www.nvmexpress.org/)\n\nNVM Express Zoned Namespace Command Set Specification, Revision 1.1. Available from\n[https://www.nvmexpress.org.](https://www.nvmexpress.org/)\n\nNVM Express Key Value Command Set Specification, Revision 1.0. Available from\n[https://www.nvmexpress.org.](https://www.nvmexpress.org/)\n\nNVM Express NVMe over PCIe Transport Specification, Revision 1.0. Available from\n[https://www.nvmexpress.org.](https://www.nvmexpress.org/)\n\n[NVM Express RDMA Transport Specification, Revision 1.0. Available from https://www.nvmexpress.org](https://www.nvmexpress.org/)\n\n[NVM Express TCP Transport Specification, Revision 1.0. Available from https://www.nvmexpress.org.](https://www.nvmexpress.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 8,
      "character_length": 1001,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0227",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5543821454048157
  },
  {
    "content": "[PCI Local Bus Specification, revision 3.0. Available from https://www.pcisig.com.](https://www.pcisig.com/)\n\n[PCI Express® Base Specification, Revision 4.0. Available from https://www.pcisig.com.](https://www.pcisig.com/)\n\n[PCI Bus Power Management Interface Specification Revision 1.2. Available from https://www.pcisig.com.](https://www.pcisig.com/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 352,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0228",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5885531306266785
  },
  {
    "content": "PCI Single Root I/O Virtualization and Sharing Specification, revision 1.1. Available from\n[https://www.pcisig.com/specifications/iov/single_root/.](https://www.pcisig.com/specifications/iov/single_root/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 204,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0229",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5572433471679688
  },
  {
    "content": "[PCI Firmware Specification Revision 3.2. Available from https://www.pcisig.com.](https://www.pcisig.com/)\n\nPCI Code and ID Assignment Specification Revision 1.11, 24 January, 2019. Available from\n[https://www.pcisig.com.](https://www.pcisig.com/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 247,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0230",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23904700577259064
  },
  {
    "content": "RFC 1952, P. Deutsch, “GZIP file format specification version 4.3”, May 1996. Available from\n[https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 156,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0231",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46507760882377625
  },
  {
    "content": "RFC 1994, W. Simpson, “PPP Challenge Handshake Authentication Protocol (CHAP)”, August 1996.\n[Available from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 171,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0232",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5570452809333801
  },
  {
    "content": "RFC 2104, H. Krawczyk, M. Bellare, R. Canetti, “HMAC: Keyed-Hashing for Message Authentication”,\n[February 1997. Available from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 190,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0233",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5890804529190063
  },
  {
    "content": "RFC 2631, E. Rescorla, “Diffie-Hellman Key Agreement Method”, June 1999. Available from\n[https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 151,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0234",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5540600419044495
  },
  {
    "content": "RFC 3629, Alis Technologies, F. Yergeau, “UTF-8, a transformation format of ISO 10646”, November\n[2003. Available from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 181,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0235",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5894816517829895
  },
  {
    "content": "RFC 3986, T. Berners-Lee, R. Fielding, L. Masinter, “Uniform Resource Identifier (URI): Generic Syntax”,\n[January 2005. Available from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 197,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0236",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.549534022808075
  },
  {
    "content": "RFC 4086, D. Eastlake 3rd, J. Schiller, S. Crocker, “Randomness Requirements for Security”, June 2005.\n[Available from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 181,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0237",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.503350019454956
  },
  {
    "content": "RFC 4122, P. Leach, M. Mealling, and R. Salz, “A Universally Unique Identifier (UUID) URN Namespace”,\n[July 2005. Available from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 191,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0238",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5758115649223328
  },
  {
    "content": "RFC 4301, S. Kent, K. Seo, “Security Architecture for the Internet Protocol”, December 2005. Available\n[from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 171,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0239",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6167241930961609
  },
  {
    "content": "RFC 4648, S. Josefsson, “The Base16, Base32, and Base64 Data Encodings”, October 2006. Available\n[from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0240",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47980448603630066
  },
  {
    "content": "RFC 6234, D. Eastlake 3rd, and T. Hansen, \"US Secure Hash Algorithms (SHA and SHA-based HMAC\n[and HKDF)\", May 2011. Available from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0241",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11260518431663513
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0242",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18928126990795135
  },
  {
    "content": "RFC 7296, C. Kaufman, P. Hoffman, Y. Nir, P. Eronen, T. Kivinen, “Internet Key Exchange Protocol\n[Version 2 (IKEv2)”, October 2014. Available from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 209,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0243",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6098136305809021
  },
  {
    "content": "RFC 7919, D. Gillmor, “Negotiated Finite Field Diffie-Hellman Ephemeral Parameters for Transport Layer\n[Security (TLS)”, August 2016. Available from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)\n\nRFC 8446, E. Rescorla, “The Transport Layer Security (TLS) Protocol Version 1.3”, August 2018.\n[Available from https://www.ietf.org/rfc.html.](https://www.ietf.org/rfc.html)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 386,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0244",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26371651887893677
  },
  {
    "content": "[UEFI Specification Version 2.7A, September 2017. Available from https://uefi.org.](https://uefi.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0245",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6641698479652405
  },
  {
    "content": "Advanced Configuration and Power Interface (ACPI) Specification, Version 6.2 Errata A, September\n[2017. Available from https://www.uefi.org.](https://www.uefi.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0246",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24741630256175995
  },
  {
    "content": "TCG Storage Architecture Core Specification, Version 2.01 Revision 1.00. Available from\n[https://www.trustedcomputinggroup.org.](https://www.trustedcomputinggroup.org/)\n\nTCG Storage Interface Interactions Specification (SIIS), Version 1.08 Revision 1.00. Available from\n[https://www.trustedcomputinggroup.org.](https://www.trustedcomputinggroup.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 350,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0247",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12856411933898926
  },
  {
    "content": "**1.9** **References Under Development**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0248",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20833063125610352
  },
  {
    "content": "[INCITS 506-201x, SCSI Block Commands - 4 (SBC-4). Available from https://www.t10.org.](https://www.t10.org/)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0249",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.196841299533844
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **2 Theory of Operation **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 81,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0250",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48795247077941895
  },
  {
    "content": "The NVM Express scalable interface is designed to address the needs of storage systems that utilize PCI\nExpress based solid state drives or fabric connected devices. The interface provides optimized command\nsubmission and completion paths. It includes support for parallel operation by supporting up to 65,535 I/O\nQueues with up to 64 Ki - 1 outstanding commands per I/O Queue. Additionally, support has been added\nfor many Enterprise capabilities like end-to-end data protection (compatible with SCSI Protection\nInformation, commonly known as T10 DIF, and SNIA DIX standards), enhanced error reporting, and\nvirtualization.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 623,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0251",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2534792423248291
  },
  {
    "content": "The interface has the following key attributes:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0252",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14108897745609283
  },
  {
    "content": "- Does not require uncacheable / MMIO register reads in the command submission or completion\npath;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0253",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6913810968399048
  },
  {
    "content": "- A maximum of one MMIO register write or one 64B message is necessary in the command\nsubmission path;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0254",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3577229976654053
  },
  {
    "content": "- Support for up to 65,535 I/O Queues, with each I/O Queue supporting up to 65,535 outstanding\ncommands;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 104,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0255",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6146174669265747
  },
  {
    "content": "- Priority associated with each I/O Queue with well-defined arbitration mechanism;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0256",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3181401193141937
  },
  {
    "content": "- All information to complete a 4 KiB read request is included in the 64B command itself, ensuring\nefficient small I/O operation;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 129,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0257",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3144459128379822
  },
  {
    "content": "- Efficient and streamlined command set;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0258",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23785503208637238
  },
  {
    "content": "- Support for MSI/MSI-X and interrupt aggregation;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0259",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2358601838350296
  },
  {
    "content": "- Support for multiple namespaces;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0260",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1625732183456421
  },
  {
    "content": "- Efficient support for I/O virtualization architectures like SR-IOV;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0261",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24624758958816528
  },
  {
    "content": "- Robust error reporting and management capabilities; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0262",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22503556311130524
  },
  {
    "content": "- Support for multi-path I/O and namespace sharing.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0263",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23297515511512756
  },
  {
    "content": "This specification defines a streamlined set of properties that are used to configure low level controller\nattributes and obtain low level controller status. These properties have a transport specific mechanism for\ndefining access (e.g. Memory Mapped items use registers, whereas Fabrics use the Property Get and\nProperty Set commands). The following are examples of functionality defined in properties:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 403,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0264",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.464252233505249
  },
  {
    "content": "- Indication of controller capabilities;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0265",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42466461658477783
  },
  {
    "content": "- Status for controller failures (command status is processed via CQ directly);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0266",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3018489480018616
  },
  {
    "content": "- Admin Queue configuration (I/O Queue configuration processed via Admin commands); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0267",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3603788912296295
  },
  {
    "content": "- Doorbell registers for a scalable number of Submission and Completion Queues.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0268",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2881939709186554
  },
  {
    "content": "There are two defined constructs for communication between the host and the NVM subsystem, a memorybased transport model and a message-based transport model. All NVM subsystems require the underlying\nNVMe Transport to provide reliable NVMe command and data delivery. An NVMe Transport is an abstract\nprotocol layer independent of any physical interconnect properties. A taxonomy of NVMe Transports along\nwith examples is shown in Figure 4. An NVMe Transport may expose a memory-based transport model or\na message-based transport model. The message-based transport model has two subtypes: the messageonly transport model and the message/memory transport model. A memory-based transport model is one\nin which commands, responses, and data are transferred between a host and an NVM subsystem by\nperforming explicit memory read and write operations. A message-based transport model is one in which\nmessages containing command capsules and response capsules are sent between a host and an NVM\nsubsystem. The two subtypes of message-based transport models are differentiated by how data is sent\nbetween a host and an NVM subsystem. In the message-only transport model data is only sent between a\nhost and an NVM subsystem using capsules or messages. The message/memory-based transport model\nuses a combination of messages and explicit memory read and write operations to transfer command\ncapsules, response capsules and data between a host and an NVM subsystem. Data may optionally be\nincluded in command capsules and response capsules. Both the message-only transport model and the\nmessage/memory-based transport model are referenced as message-based transport models throughout\nthis specification when the description is applicable to both subtypes.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1745,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0269",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4658268988132477
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0270",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40760472416877747
  },
  {
    "content": "An NVM subsystem is made up of a single domain or multiple domains as described in section 3.2.4. An\nNVM subsystem may optionally include a non-volatile storage medium, and an interface between the\ncontroller(s) of the NVM subsystem and the non-volatile storage medium. Controllers expose this nonvolatile storage medium to hosts through namespaces. An NVM subsystem is not required to have the\nsame namespaces attached to all controllers. An NVM subsystem that supports a Discovery controller does\nnot support any other controller type. A Discovery Service is an NVM subsystem that supports Discovery\ncontrollers only (refer to section 3.1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 642,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0271",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24230939149856567
  },
  {
    "content": "**Figure 4: Taxonomy of Transport Models**\n\n**NVMe Transport Models**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0272",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20441867411136627
  },
  {
    "content": "**Message / Memory**\nCommands/Responses use Capsules",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0273",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.665798008441925
  },
  {
    "content": "Data may use\nCapsules or Shared Memory",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0274",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2781393229961395
  },
  {
    "content": "**Example Transports**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0275",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16009864211082458
  },
  {
    "content": "RDMA\n(InfiniBand, RoCE, iWARP)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0276",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20258955657482147
  },
  {
    "content": "**Memory**\nCommands/Responses & Data",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0277",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25148358941078186
  },
  {
    "content": "***Example Transport***",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0278",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28290846943855286
  },
  {
    "content": "**Message**\nCommands/Responses use Capsules",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0279",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6936270594596863
  },
  {
    "content": "Data may use Capsules or Messages",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0280",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3024861812591553
  },
  {
    "content": "***Example Transports***",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0281",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08569652587175369
  },
  {
    "content": "The capabilities and settings that apply to an NVM Express controller are indicated in the Controller\nCapabilities (CAP) property and the Identify Controller data structure (refer to Figure 275).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 195,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0282",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4953486919403076
  },
  {
    "content": "A namespace is a formatted quantity of non-volatile memory that may be accessed by a host. Associated\nwith each namespace is an I/O Command Set that operates on that namespace. An NVM Express controller\nmay support multiple namespaces that are referenced using a namespace ID. Namespaces may be created\nand deleted using the Namespace Management command and Capacity Management command. The\nIdentify Namespace data structures (refer to section 1.5.29) indicate capabilities and settings that are\nspecific to a particular namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 531,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0283",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4862422049045563
  },
  {
    "content": "The NVM Express interface is based on a paired Submission and Completion Queue mechanism.\nCommands are placed by host software into a Submission Queue. Completions are placed into the\nassociated Completion Queue by the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 230,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0284",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.649017333984375
  },
  {
    "content": "There are three types of commands that are defined in NVM Express: Admin Commands, I/O Commands,\nand Fabrics Commands. Figure 5 shows these different command types.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0285",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6420242786407471
  },
  {
    "content": "**Figure 5: Types of NVMe Command Sets**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0286",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48054736852645874
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0287",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05296478047966957
  },
  {
    "content": "An Admin Submission Queue and associated Completion Queue exist for the purpose of controller\nmanagement and control (e.g., creation and deletion of I/O Submission and Completion Queues, aborting\ncommands, etc.). Only commands that are part of the Admin Command Set or the Fabrics Command Set\nmay be submitted to the Admin Submission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 340,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0288",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41250184178352356
  },
  {
    "content": "An I/O Command Set is used with an I/O queue pair. This specification defines common I/O commands.\nI/O Command Sets are defined in NVMe I/O Command Set specifications (e.g., NVM Command Set, Key\nValue Command Set, or Zoned Namespace Command Set).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0289",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6389275193214417
  },
  {
    "content": "The Fabrics Command Set is NVMe over Fabrics specific. Fabrics Command Set commands are used for\noperations specific to NVMe over Fabrics including establishing a connection, NVMe in-band\nauthentication, and to get or set a property. All Fabrics commands may be submitted on the Admin\nSubmission Queue and some Fabrics commands may also be submitted on an I/O Submission Queue.\nUnlike Admin and I/O commands, Fabrics commands are processed by a controller regardless of whether\nthe controller is enabled (i.e., regardless of the state of CC.EN).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 545,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0290",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1656474769115448
  },
  {
    "content": "**2.1** **Memory-Based Transport Model**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0291",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48266440629959106
  },
  {
    "content": "In the memory-based model, Submission and Completion Queues are allocated in memory.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0292",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5669490098953247
  },
  {
    "content": "Host software creates queues, up to the maximum supported by the controller. Typically, the number of\ncommand queues created is based on the system configuration and anticipated workload. For example, on\na four core processor based system, there may be a queue pair per core to avoid locking and ensure data\nstructures are created in the appropriate processor core’s cache. Figure 6 provides a graphical\nrepresentation of the queue pair mechanism, showing a 1:1 mapping between Submission Queues and\nCompletion Queues. Figure 7 shows an example where multiple I/O Submission Queues utilize the same\nI/O Completion Queue on Core B. Figure 6 and Figure 7 show that there is always a 1:1 mapping between\nthe Admin Submission Queue and Admin Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 755,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0293",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40877920389175415
  },
  {
    "content": "**Figure 6: Queue Pair Example, 1:1 Mapping**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0294",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14066122472286224
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0295",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17497020959854126
  },
  {
    "content": "**Figure 7: Queue Pair Example,** ***n*** **:1 Mapping**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0296",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.308084100484848
  },
  {
    "content": "A Submission Queue (SQ) is a circular buffer with a fixed slot size that the host software uses to submit\ncommands for execution by the controller. The host software updates the appropriate SQ Tail doorbell\nregister when there are one to *n* new commands to execute. The previous SQ Tail value is overwritten in\nthe controller when there is a new doorbell register write. The controller fetches SQ entries in order from\nthe Submission Queue and may execute those commands in any order.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 485,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0297",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5462207794189453
  },
  {
    "content": "Each submission queue entry is a command. Commands are 64 bytes in size. The physical memory\nlocations in memory to use for data transfers are specified using Physical Region Page (PRP) entries or\nScatter Gather Lists (SGL). Each command may include two PRP entries or one Scatter Gather List\nsegment. If more than two PRP entries are necessary to describe the data buffer, then a pointer to a PRP\nList that describes a list of PRP entries is provided. If more than one SGL segment is necessary to describe\nthe data buffer, then the SGL segment provides a pointer to the next SGL segment.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 588,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0298",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5384447574615479
  },
  {
    "content": "A Completion Queue (CQ) is a circular buffer with a fixed slot size used to post status for completed\ncommands. A completed command is uniquely identified by a combination of the associated SQ identifier\nand command identifier that is assigned by host software. In the memory-based transport model multiple\nSubmission Queues may be associated with a single Completion Queue. A configuration with a single\nCompletion Queue may be used where a single worker thread processes all command completions via one\nCompletion Queue even when those commands originated from multiple Submission Queues. The CQ\nHead pointer is updated by host software after processing completion queue entries indicating the last free\nCQ slot. A Phase Tag (P) bit is defined in the completion queue entry to indicate whether an entry has been\nnewly posted without the host consulting a register (refer to section 3.3.3.2.2). The Phase Tag bit enables\nthe host to determine whether entries are new or not.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 975,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0299",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29466697573661804
  },
  {
    "content": "**2.2** **Message-Based Transport Model**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0300",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6590679883956909
  },
  {
    "content": "The message-based transport model used for NVMe over Fabrics has the following differences from the\nmemory-based transport model:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 129,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0301",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5049203038215637
  },
  {
    "content": "- There is a one-to-one mapping between I/O Submission Queues and I/O Completion Queues.\nNVMe over Fabrics does not support multiple I/O Submission Queues being mapped to a single\nI/O Completion Queue;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 201,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0302",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5477942228317261
  },
  {
    "content": "- NVMe over Fabrics does not define an interrupt mechanism that allows a controller to generate a\nhost interrupt. It is the responsibility of the host fabric interface (e.g., Host Bus Adapter) to generate\nhost interrupts;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 221,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0303",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6017846465110779
  },
  {
    "content": "- NVMe over Fabrics uses different mechanisms for I/O Submission Queue and I/O Completion\nQueue creation and deletion (refer to section 3.5);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0304",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.617659866809845
  },
  {
    "content": "- NVMe over Fabrics does not support transferring metadata from a separate buffer (e.g. does not\nsupport the Metadata Pointer field, refer to Figure 87);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0305",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3791671693325043
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0306",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4195564389228821
  },
  {
    "content": "- NVMe over Fabrics does not support PRPs but requires use of SGLs for Admin, I/O, and Fabrics\ncommands. This differs from the memory-based transport model where SGLs are not supported\nfor Admin commands and are optional for I/O commands;\n\n- NVMe over Fabrics does not support Completion Queue flow control (refer to section 3.3.1.2.1).\nThis requires that the host ensures there are available Completion Queue slots before submitting\nnew commands; and\n\n- NVMe over Fabrics allows Submission Queue flow control to be disabled if the host and controller\nagree to disable it. If Submission Queue flow control is disabled, the host is required to ensure that\nthere are available Submission Queue slots before submitting new commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 729,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0307",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33882173895835876
  },
  {
    "content": "**Fabrics and Transports**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0308",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5246805548667908
  },
  {
    "content": "NVMe over Fabrics utilizes the protocol layering shown in Figure 8. This specification defines core aspects\nof the architecture that are independent of the NVMe Transport. An NVMe Transport binding specification\nis used to describe any NVMe Transport specific specialization as well as how the services required by the\nNVMe interface are mapped onto the corresponding NVMe Transport. The native fabric communication\nservices and other functionality used by the NVMe interface and NVMe Transports (e.g., the Fabric Protocol\nand Fabric Physical layers in Figure 8) are outside the scope of the NVMe family of specifications.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 622,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0309",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5882369875907898
  },
  {
    "content": "**Figure 8: NVMe over Fabrics Layering**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0310",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4101383090019226
  },
  {
    "content": "Fabric Physical\n(e.g., Ethernet, InfiniBand, Fibre Channel)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0311",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28659629821777344
  },
  {
    "content": "**NVM Subsystem Ports**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0312",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6756397485733032
  },
  {
    "content": "An NVM subsystem presents a collection of one to (64Ki - 16) controllers which are used to access\nnamespaces. The controllers may be associated with hosts through one to 64Ki NVM subsystem ports.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 195,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0313",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4721490442752838
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0314",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4478181302547455
  },
  {
    "content": "An NVM subsystem port is a protocol interface between an NVM subsystem and a fabric. An NVM\nsubsystem port is a collection of one or more physical fabric interfaces that together act as a single protocol\ninterface. When link aggregation (e.g., Ethernet) is used, the physical ports for the group of aggregated\nlinks constitute a single NVM subsystem port.\n\nAn NVM subsystem contains one or more NVM subsystem ports.\n\nEach NVM subsystem port has a 16-bit port identifier (Port ID). An NVM subsystem port is identified by the\nNVM Subsystem NVMe Qualified Name (NQN) and Port ID. The NVM subsystem ports of an NVM\nsubsystem may support different NVMe Transports. An NVM subsystem port may support multiple NVMe\nTransports if more than one NVMe Transport binding specifications exist for the underlying fabric (e.g., an\nNVM subsystem port identified by a Port ID may support both iWARP and RoCE). An NVM subsystem\nimplementation may bind specific controllers to specific NVM subsystem ports or allow the flexible allocation\nof controllers between NVM subsystem ports, however, once connected, each specific controller is bound\nto a single NVM subsystem port.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1154,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0315",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6595106720924377
  },
  {
    "content": "A controller is associated with exactly one host at a time. NVMe over Fabrics allows multiple hosts to\nconnect to different controllers in the NVM subsystem through the same NVM sybsystem port. All other\naspects of NVMe over Fabrics multi-path I/O and namespace sharing (refer to section 2.4.1) are equivalent\nto that of the memory-based transport model.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 354,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0316",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.019553158432245255
  },
  {
    "content": "**Discovery Service**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0317",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30336904525756836
  },
  {
    "content": "NVMe over Fabrics defines a discovery mechanism that a host uses to determine the NVM subsystems\nthat expose namespaces that the host may access. The Discovery Service provides a host with the\nfollowing capabilities:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 216,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0318",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6588042378425598
  },
  {
    "content": "- The ability to discover a list of NVM subsystems with namespaces that are accessible to the host;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0319",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.684712290763855
  },
  {
    "content": "- The ability to discover multiple paths to an NVM subsystem;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0320",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3204585313796997
  },
  {
    "content": "- The ability to discover controllers that are statically configured;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0321",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5726433992385864
  },
  {
    "content": "- The optional ability to establish explicit persistent connections to the Discovery controller; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0322",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.694486677646637
  },
  {
    "content": "- The optional ability to receive Asynchronous Event Notifications from the Discovery controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0323",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.562538743019104
  },
  {
    "content": "A Discovery Service is an NVM subsystem that supports only Discovery controllers (refer to section 3.1.2.3),\nand shall not support any other controller type.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 157,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0324",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6029685139656067
  },
  {
    "content": "The method that a host uses to obtain the information necessary to connect to the initial Discovery Service\nis implementation specific. This information may be determined using a host configuration file, a hypervisor\nor OS property, or some other mechanism.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 257,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0325",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08351731300354004
  },
  {
    "content": "**Capsules and Data Transfer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0326",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5887114405632019
  },
  {
    "content": "A capsule is an NVMe unit of information exchange used in NVMe over Fabrics. A capsule may be classified\nas a command capsule or a response capsule. A command capsule contains a command (formatted as a\nsubmission queue entry) and may optionally include SGLs or data. A response capsule contains a response\n(formatted as a completion queue entry) and may optionally include data. Data refers to any data transferred\nat an NVMe layer between a host and an NVM subsystem (e.g., logical block data or a data structure\nassociated with a command). A capsule is independent of any underlying NVMe Transport unit (e.g.,\npacket, message, or frame and associated headers and footers) and may consist of multiple such units.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 713,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0327",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6870439052581787
  },
  {
    "content": "Command capsules are transferred from a host to an NVM subsystem. The SQE contains an Admin\ncommand, an I/O command, or a Fabrics command. The minimum size of a command capsule is NVMe\nTransport binding specific, but shall be at least 64B in size. The maximum size of a command capsule is\nNVMe Transport binding specific. The format of a command capsule is shown in Figure 9.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 375,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0328",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.401609867811203
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0329",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22327427566051483
  },
  {
    "content": "**Figure 9: Command Capsule Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0330",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22107425332069397
  },
  {
    "content": "Byte 0 63 64 ( *N* -1)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0331",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3985844552516937
  },
  {
    "content": "Command Capsule of Size N Bytes",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0332",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5416343808174133
  },
  {
    "content": "Response capsules are transferred from an NVM subsystem to a host. The CQE is associated with a\npreviously issued Admin command, I/O command, or Fabrics command. The size of a response capsule is\nNVMe Transport binding specific, but shall be at least 16B in size. The maximum size of a response capsule\nis NVMe Transport binding specific. The format of a response capsule is shown in Figure 10.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 394,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0333",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43961554765701294
  },
  {
    "content": "**Figure 10: Response Capsule Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0334",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20176641643047333
  },
  {
    "content": "Byte 0 15 16 ( *N* -1)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0335",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39331957697868347
  },
  {
    "content": "Response Capsule of Size N Bytes",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0336",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2784886658191681
  },
  {
    "content": "NVMe Transports using the message-only transport model and message/memory transport model require\nall SGLs sent from the host to the controller be transferred within the command. They may optionally support\nthe transfer of a portion or all data within the command and response capsules.\n\nNVMe over Fabrics requires SGLs for all commands (Fabrics, Admin, and I/O). An SGL may specify the\nplacement of data within a capsule or the information required to transfer data using an NVMe Transport\nspecific data transfer mechanism (e.g., via memory transfers as in RDMA). Each NVMe Transport binding\nspecification defines the SGLs used by a particular NVMe Transport and any capsule SGL and data\nplacement restrictions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 712,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0337",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5203536748886108
  },
  {
    "content": "NVMe over Fabrics supports both fabric secure channel that includes authentication (refer to section 8.13.1)\nand NVMe in-band authentication. An NVM subsystem may require a host to use fabric secure channel,\nNVMe in-band authentication, or both. The Discovery Service indicates if fabric secure channel shall be\nused for an NVM subsystem. The Connect response indicates if NVMe in-band authentication shall be used\nwith that controller.\n\nA controller associated with an NVM subsystem that requires a fabric secure channel shall not accept any\ncommands (i.e., Fabrics commands, Admin commands, or I/O commands) on an NVMe Transport until a\nsecure channel is established. Following a Connect command, a controller that requires NVMe in-band\nauthentication shall not accept any commands on the queue created by that Connect command other than\nauthentication commands until NVMe in-band authentication has completed. Refer to section 8.13.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 935,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0338",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28039324283599854
  },
  {
    "content": "**2.3** **NVM Storage Model**\n\nThe NVM storage model includes the following entities:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0339",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5740424394607544
  },
  {
    "content": "- NVM subsystems (refer to 1.5.40)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0340",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20586225390434265
  },
  {
    "content": "- Domains (refer to section 3.2.4)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0341",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18054208159446716
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0342",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22968412935733795
  },
  {
    "content": "- Endurance Groups (refer to section 3.2.3)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0343",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3428207039833069
  },
  {
    "content": "- NVM Sets (refer to section 3.2.2)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0344",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38294991850852966
  },
  {
    "content": "- Namespaces (refer to section 3.2.1)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0345",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4490754306316376
  },
  {
    "content": "As illustrated below, each domain is contained in a single NVM subsystem, each Endurance Group is\ncontained in a single domain, each NVM Set is contained in a single Endurance Group, and each\nnamespace is contained in a single NVM Set. Each Media Unit is contained in a single\nEndurance Group.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 293,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0346",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6018235087394714
  },
  {
    "content": "Each Endurance Group is composed of storage media, which are termed Media Units (refer to section\n8.3.2). For clarity, Media Units are not shown in the examples that follow.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 173,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0347",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4134540855884552
  },
  {
    "content": "Figure 11 shows the hierarchical relationships of these entities within a simple NVM subsystem, which has\none domain, one Endurance Group, one NVM Set, and one namespace:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 170,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0348",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5694270133972168
  },
  {
    "content": "**Figure 11: NVM Storage Hierarchy**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0349",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47169986367225647
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0350",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4397777318954468
  },
  {
    "content": "Figure 12 shows the relationships of these entities in a complex NVM subsystem, which has multiple\ndomains, multiple Endurance Groups per domain, multiple NVM Sets per Endurance Group, and multiple\nnamespaces per NVM Set:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 221,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0351",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5839883089065552
  },
  {
    "content": "**Figure 12: Complex NVM Storage Hierarchy**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0352",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0766170471906662
  },
  {
    "content": "Entity naming key (Abc):",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0353",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3783172369003296
  },
  {
    "content": "A: Domain (capital letter)\nb: Endurance Group (digit)\nc: NVM Set (lower case letter)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0354",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5117679238319397
  },
  {
    "content": "Reporting of Endurance Groups or NVM Sets is optional, but the storage model supports these concepts.\nAn NVM subsystem may be shipped by the vendor with its storage entities configured, or it may be\nconfigured or re-configured by the customer. Typical changes to the configuration are creation and deletion\nof namespaces.\n\nAn NVM subsystem that does not support multiple NVM Sets does not require reporting of NVM Sets. An\nNVM subsystem that does not support multiple Endurance Groups does not require reporting of Endurance\nGroups.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 532,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0355",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3503541350364685
  },
  {
    "content": "I/O commands perform operations on namespaces, and each namespace is associated with exactly one\nI/O command set. For example, commands in the NVM Command Set access data represented in a\nnamespace as logical blocks, and commands in the Key Value Command Set access data represented in\na namespace as key-value pairs.\n\nThe association of a namespace to an I/O command set is specified when the namespace is created and\nis fixed for the lifetime of the namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 462,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0356",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22594362497329712
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0357",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1282690018415451
  },
  {
    "content": "A controller may support one or more I/O command sets and may be attached to namespaces associated\nwith different I/O command sets. A host issues commands to a namespace and those commands are\ninterpreted based on the I/O command set associated with that namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0358",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2543461322784424
  },
  {
    "content": "**NVM Subsystem Examples**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0359",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6194252371788025
  },
  {
    "content": "Figure 13 illustrates a simple NVM subsystem that has a single instance of each storage entity.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0360",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5956428050994873
  },
  {
    "content": "**Figure 13: Single-Namespace NVM Subsystem**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0361",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.532433032989502
  },
  {
    "content": "- The NVM subsystem consists of a single port and a single domain.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0362",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3791879415512085
  },
  {
    "content": "- The domain contains a controller and storage media.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0363",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3152353763580322
  },
  {
    "content": "- All of the storage media are contained in one Endurance Group.\n\n- All of the storage media in that Endurance Group are organized into one NVM Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0364",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3746072053909302
  },
  {
    "content": "- That NVM Set contains a single namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0365",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5124756693840027
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0366",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5218098759651184
  },
  {
    "content": "Figure 14 shows an NVM subsystem with two namespaces.\n\n**Figure 14: Two-Namespace NVM Subsystem**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0367",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5193327069282532
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0368",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4348788559436798
  },
  {
    "content": "An NVM subsystem may have multiple domains, multiple namespaces, multiple controllers, and multiple\nports, as shown in Figure 15.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 129,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0369",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48546117544174194
  },
  {
    "content": "**Figure 15: Complex NVM Subsystem**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0370",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2209930419921875
  },
  {
    "content": "**2.4** **Extended Capabilities Theory**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0371",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18486227095127106
  },
  {
    "content": "**Multi-Path I/O and Namespace Sharing**\n\nThis section provides an overview of multi-path I/O and namespace sharing. Multi-path I/O refers to two or\nmore completely independent paths between a single host and a namespace while namespace sharing\nrefers to the ability for two or more hosts to access a common shared namespace using different NVM\nExpress controllers. Both multi-path I/O and namespace sharing require that the NVM subsystem contain\ntwo or more controllers. NVM subsystems that support Multi-Path I/O and Namespace Sharing may also\nsupport asymmetric controller behavior (refer to section 2.4.2). Concurrent access to a shared namespace\nby two or more hosts requires some form of coordination between hosts. The procedure used to coordinate\nthese hosts is outside the scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 810,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0372",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4462021291255951
  },
  {
    "content": "Figure 16 shows an NVM subsystem that contains a single NVM Express controller implemented over PCI\nExpress and a single PCI Express port. Since this is a single Function PCI Express device, the NVM\nExpress controller shall be associated with PCI Function 0. A controller may support multiple namespaces.\nThe controller in Figure 16 supports two namespaces labeled NS A and NS B. Associated with each\ncontroller namespace is a namespace ID, labeled as NSID 1 and NSID 2, that is used by the controller to\nreference a specific namespace. The namespace ID is distinct from the namespace itself and is the handle\na host and controller use to specify a particular namespace in a command. The selection of a controller’s\nnamespace IDs is outside the scope of this specification. In this example namespace ID 1 is associated",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 818,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0373",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5397009253501892
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0374",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18353793025016785
  },
  {
    "content": "with namespace A and namespace ID 2 is associated with namespace B. Both namespaces are private to\nthe controller and this configuration supports neither multi-path I/O nor namespace sharing.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 191,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0375",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.645823061466217
  },
  {
    "content": "**Figure 16: NVM Express Controller with Two Namespaces**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0376",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6526241898536682
  },
  {
    "content": "Figure 17 shows a multi-Function NVM subsystem with a single PCI Express port containing two controllers\nimplementing NVMe over PCIe. One controller is associated with PCI Function 0 and the other controller is\nassociated with PCI Function 1. Each controller supports a single private namespace and access to shared\nnamespace B. The namespace ID shall be the same in all controllers that have access to a particular shared\nnamespace. In this example both controllers use namespace ID 2 to access shared namespace B.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 515,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0377",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6119265556335449
  },
  {
    "content": "**Figure 17: NVM Subsystem with Two Controllers and One Port**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0378",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3112902343273163
  },
  {
    "content": "There is one or more Identify Controller data structures for each controller and one or more Identify\nNamespace data structures for each namespace (refer to Figure 273). Controllers with access to a shared\nnamespace return the Identify Namespace data structure associated with that shared namespace (i.e., the\nsame data structure contents are returned by all controllers with access to the same shared namespace).\nThere is a globally unique identifier associated with the namespace itself and may be used to determine\nwhen there are multiple paths to the same shared namespace. Refer to section 4.5.1.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 601,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0379",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6643568873405457
  },
  {
    "content": "Controllers associated with a shared namespace may operate on the namespace concurrently. Operations\nperformed by individual controllers are atomic to the shared namespace at the write atomicity level of the\ncontroller to which the command was submitted (refer to section 3.4.3). The write atomicity level is not\nrequired to be the same across controllers that share a namespace. If there are any ordering requirements",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 418,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0380",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.170720636844635
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0381",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22357599437236786
  },
  {
    "content": "between commands issued to different controllers that access a shared namespace, then host software or\nan associated application, is required to enforce these ordering requirements.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 181,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0382",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32139822840690613
  },
  {
    "content": "Figure 18 illustrates an NVM subsystem with two PCI Express ports, each with an associated controller\nimplementing NVMe over PCIe. Both controllers map to PCI Function 0 of the corresponding port. Each\nPCI Express port in this example is completely independent and has its own PCI Express Fundamental\nReset and reference clock input. A reset of a port only affects the controller associated with that port and\nhas no impact on the other controller, shared namespace, or operations performed by the other controller\non the shared namespace. The functional behavior of this example is otherwise the same as that illustrated\nin Figure 17.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 635,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0383",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5990867614746094
  },
  {
    "content": "**Figure 18: NVM Subsystem with Two Controllers and Two Ports**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0384",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3819724917411804
  },
  {
    "content": "PCIe Port *x* PCIe Port *y*",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0385",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43713247776031494
  },
  {
    "content": "The two ports shown in Figure 18 may be associated with the same Root Complex or with different Root\nComplexes and may be used to implement both multi-path I/O and I/O sharing architectures. System-level\narchitectural aspects and use of multiple ports in a PCI Express fabric are beyond the scope of this\nspecification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 319,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0386",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.501300573348999
  },
  {
    "content": "Figure 19 illustrates an NVM subsystem that supports Single Root I/O Virtualization (SR-IOV) and has one\nPhysical Function and four Virtual Functions. An NVM Express controller implementing NVMe over PCIe is\nassociated with each Function with each controller having a private namespace and access to a namespace\nshared by all controllers, labeled NS F. The behavior of the controllers in this example parallels that of the\nother examples in this section. Refer to section 8.26.4 for more information on SR-IOV.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 510,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0387",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46615302562713623
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0388",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3352698087692261
  },
  {
    "content": "**Figure 19: PCI Express Device Supporting Single Root I/O Virtualization (SR-IOV)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0389",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5524042248725891
  },
  {
    "content": "Examples provided in this section are meant to illustrate concepts and are not intended to enumerate all\npossible configurations. For example, an NVM subsystem may contain multiple PCI Express ports with\neach port supporting SR-IOV.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 232,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0390",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05191248655319214
  },
  {
    "content": "**Asymmetric Controller Behavior**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0391",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5493247509002686
  },
  {
    "content": "Asymmetric controller behavior occurs in NVM subsystems where namespace access characteristics (e.g.,\nperformance) may vary based on:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 133,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0392",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5009266138076782
  },
  {
    "content": "- the internal configuration of the NVM subsystem; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0393",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5376384854316711
  },
  {
    "content": "- which controller is used to access a namespace (e.g., Fabrics).\nNVM subsystems that provide asymmetric controller behavior may support Asymmetric Namespace\nAccess Reporting as described in section 8.1.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 203,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0394",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.427529901266098
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **3 NVM Express Architecture **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0395",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6133355498313904
  },
  {
    "content": "**3.1** **NVM Controller Architecture**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0396",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6290905475616455
  },
  {
    "content": "A controller is the interface between a host and an NVM subsystem.\n\nThis specification defines two controller models. An NVM subsystem may support a static or dynamic\ncontroller model. All controllers in the NVM subsystem shall follow the same controller model.\n\nIn a static controller model, controllers that may be allocated to a particular host may have different state\nat the time the association is established. The controllers within an NVM subsystem are distinguished by\ntheir controller identifier. All memory-based transport model controllers shall support the static controller\nmodel.\n\nIn a dynamic controller model, the controller is allocated by the NVM subsystem on demand. In this model,\nall controllers allocated to a specific host have the same state at the time the association is established,\nincluding attached namespaces and Feature settings. Changes to a controller (e.g., attached namespaces,\nFeature settings) after the association is established do not impact other dynamic controllers.\n\nControllers using the message-based transport model in an NVM subsystem may use a dynamic or static\ncontroller model. A Discovery controller shall support the dynamic controller model.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 1196,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0397",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5484117865562439
  },
  {
    "content": "An association is established between a host and a controller when the host connects to a controller’s\nAdmin Queue using the Fabrics Connect command (refer to section 6.3). Within the Connect command,\nthe host specifies the Host NQN, NVM Subsystem NQN, Host Identifier, and may request a specific\nController ID or may request a connection to any available controller. A controller has only one association\nat a time.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 416,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0398",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5450332164764404
  },
  {
    "content": "In a dynamic controller model, the controller is allocated by the NVM subsystem on demand with no state\n(e.g., Feature settings) preserved from prior associations. In a static controller model, the host may request\na particular controller based on the Controller ID where state (e.g., Feature settings) is preserved from prior\nassociations.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 340,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0399",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5775371789932251
  },
  {
    "content": "While an association exists between a host and a controller, only that host may establish connections with\nI/O Queues of that controller by presenting the same Host NQN, Host Identifier, NVM Subsystem NQN and\nController ID in subsequent Connect command(s) using the same NVM subsystem port, NVMe Transport\ntype, and NVMe Transport address.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 339,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0400",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5737447738647461
  },
  {
    "content": "An association between a host and controller is terminated if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0401",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45469963550567627
  },
  {
    "content": "- the controller is shutdown as described in section 3.6.2;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0402",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5271550416946411
  },
  {
    "content": "- a Controller Level Reset occurs;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0403",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2921178936958313
  },
  {
    "content": "- the NVMe Transport connection is lost between the host and controller for the Admin Queue or any\nI/O Queue; or\n\n- an NVMe Transport connection is lost between the host and controller for any I/O Queue and the\nhost or controller does not support individual I/O Queue deletion (refer to section 3.3.2.4).\n\nThere is no explicit NVMe command that breaks the NVMe Transport association between a host and\ncontroller. The Disconnect command (refer to section 6.4) provides a method to delete an NVMe I/O Queue\n(refer to section 3.3.2.4). While a controller is associated with a host, that controller is busy, and no other\nassociations may be made with that controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 664,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0404",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3686756491661072
  },
  {
    "content": "To use the dynamic controller model, the host specifies a controller identifier of FFFFh when using the\nFabrics Connect command (refer to section 6.3) to establish an association with an NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 201,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0405",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6451372504234314
  },
  {
    "content": "When using the static controller model with a Fabric connected controller, the state that persists across\nassociations is any state that persists across a Controller Level Reset. Additionally, different controllers\nmay present different Feature settings or namespace attachments to the same host. The NVM subsystem\nmay allocate particular controllers to specific hosts.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 369,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0406",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3344564139842987
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0407",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3528454601764679
  },
  {
    "content": "While allocation of static controllers to hosts are expected to be durable (so that hosts can expect to form\nassociations to the same controllers repeatedly (e.g., after each host reboot)), the NVM subsystem may\nremove the host allocation of a controller that is not in use at any time for implementation specific reasons\n(e.g., controller resource reclamation, subsystem reconfiguration).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 389,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0408",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3866454064846039
  },
  {
    "content": "As shown in Figure 20, there are three types of controllers. An I/O controller (refer to section 3.1.2.1) is a\ncontroller that supports commands that provide access to user data stored on an NVM subsystem’s nonvolatile storage medium and may support commands that provide management capabilities. An\nAdministrative controller (refer to section 3.1.2.2) is a controller that supports commands that provide\nmanagement capabilities, but does not support I/O commands that access to user data stored on an NVM\nsubsystem’s non-volatile storage medium. A Discovery controller (refer to section 3.1.2.3) is a controller\nused in NVMe over Fabrics to provide access to a Discovery Log Page.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 681,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0409",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4442451298236847
  },
  {
    "content": "**Figure 20: Controller Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0410",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4196675717830658
  },
  {
    "content": "The Controller Type (CNTRLTYPE) field in the Identify Controller data structure indicates a controller’s\ntype. Regardless of controller type, all controllers implement one Admin Submission Queue and one Admin\nCompletion Queue. Depending on the controller type, a controller may also support one or more I/O\nSubmission Queues and I/O Completion Queues.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 351,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0411",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40767738223075867
  },
  {
    "content": "When using a memory-based transport implementation (e.g. PCIe), host software submits commands to a\ncontroller through pre-allocated Submission Queues. A controller is alerted to newly submitted commands\nthrough SQ Tail Doorbell register writes. The difference between the previous doorbell register value and\nthe current register write indicates the number of commands that were submitted.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 390,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0412",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48155954480171204
  },
  {
    "content": "A controller fetches commands from the Submission Queue(s) and processes them. Except for fused\noperations, there are no ordering restrictions for processing of commands within or across Submission\nQueues. Host software should not submit commands to a Submission Queue that may not be re-ordered\narbitrarily. Data associated with the processing of a command may or may not be committed to the NVM\nsubsystem non-volatile memory storage medium in the order that commands are submitted.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 483,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0413",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6599709987640381
  },
  {
    "content": "Host software submits commands of higher priorities to the appropriate Submission Queues. Priority is\nassociated with the Submission Queue itself, thus the priority of the command is based on the Submission\nQueue to which that command was submitted. The controller arbitrates across the Submission Queues\nbased on fairness and priority according to the arbitration scheme specified in section 3.4.4.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 399,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0414",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5176385045051575
  },
  {
    "content": "Upon completion of the command execution by the NVM subsystem, the controller presents completion\nqueue entries to the host through the appropriate Completion Queues. Transport specific methods (e.g.,\nPCIe interrupts) are used to notify the host of completion queue entries to process (refer to the appropriate\nTransport specification).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 336,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0415",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4994695782661438
  },
  {
    "content": "There are no ordering restrictions for completions to the host. Each completion queue entry identifies the\nSubmission Queue Identifier and Command Identifier of the associated command. Host software uses this\ninformation to correlate the completions with the commands submitted to the Submission Queue(s).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 305,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0416",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6113946437835693
  },
  {
    "content": "Host software is responsible for creating I/O Submission Queues and I/O Completion Queues prior to using\nthose queue pairs to submit commands to the controller. I/O Submission Queues and I/O Completion\nQueues are created using the Create I/O Submission Queue command (refer to section 5.5) and the Create\nI/O Completion Queue command (refer to section 5.4).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 357,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0417",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16110481321811676
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0418",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18481752276420593
  },
  {
    "content": "**3.1.2.1** **I/O Controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0419",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5263383388519287
  },
  {
    "content": "An I/O controller is a controller that supports commands that provide access to user data stored on an NVM\nsubsystem’s non-volatile storage medium using an I/O command set and may support commands that\nprovide management capabilities.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 234,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0420",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6092775464057922
  },
  {
    "content": "An I/O controller may simultaneously support multiple I/O Command Sets. The I/O Command Sets that the\ncontroller supports and which of these I/O Command Sets the controller simultaneously supports is reported\nin the Identify I/O Command Set data structure (refer to section 5.17.2.21). The contents of the Identify I/O\nCommand Set data structure are not required to be the same for all controllers in an NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 418,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0421",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6660093665122986
  },
  {
    "content": "Figure 21 shows an NVM subsystem with three I/O controllers. I/O controller one has two attached\nnamespaces, private namespace A and shared namespace B. I/O controller two also has two attached\nnamespaces, private namespace C and shared namespace B. I/O controller three has no attached\nnamespaces. At some later point in time shared namespace B may be attached to I/O controller three.\n\n**Figure 21: NVM Subsystem with Three I/O Controllers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 443,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0422",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2494613379240036
  },
  {
    "content": "**3.1.2.1.1** **Command Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0423",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4004654586315155
  },
  {
    "content": "Figure 22 and Figure 23 defines commands that are mandatory, optional, and prohibited for an I/O\ncontroller. I/O Command Set specific command support requirements are described within individual I/O\nCommand Set specifications.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 226,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0424",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6788194179534912
  },
  {
    "content": "**Figure 22: I/O Controller – Admin Command Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0425",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35680246353149414
  },
  {
    "content": "|Command|Command Support<br>1<br>Requirements|Reference|\n|---|---|---|\n|Delete I/O Submission Queue|M|5.7|\n|Create I/O Submission Queue|M|5.5|\n|Get Log Page|M|5.16|\n|Delete I/O Completion Queue|M|5.6|\n|Create I/O Completion Queue|M|5.4|\n|Identify|M|5.17|\n|Abort|M|5.1|\n|Set Features|M|5.27|\n|Get Features|M|5.15|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 312,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0426",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25059542059898376
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0427",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13045959174633026
  },
  {
    "content": "**Figure 22: I/O Controller – Admin Command Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0428",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38708680868148804
  },
  {
    "content": "|Command|Command Support<br>1<br>Requirements|Reference|\n|---|---|---|\n|Asynchronous Event Request|M|5.2|\n|Capacity Management|O|5.3|\n|Namespace Management|O|5.23|\n|Firmware Commit|O|5.12|\n|Firmware Image Download|O|5.13|\n|Device Self-test|O|5.9|\n|Namespace Attachment|O|5.22|\n|Keep Alive|NOTE 2|5.18|\n|Directive Send|O|5.11|\n|Directive Receive|O|5.10|\n|Virtualization Management|O|5.28|\n|NVMe-MI Send|O|5.21|\n|NVMe-MI Receive|O|5.20|\n|Doorbell Buffer Config|O|5.8|\n|Lockdown|O|5.19|\n|Format NVM|O|5.14|\n|Security Send|O|5.26|\n|Security Receive|O|5.25|\n|Sanitize|O|5.24|\n|Property Set|M3|6.6|\n|Connect|M3|6.3|\n|Property Get|M3|6.5|\n|Authentication Send|O3|6.2|\n|Authentication Receive|O3|6.1|\n|Disconnect|O3|6.4|\n|I/O Command Set specific Admin<br>Command|Refer to the applicable<br>I/O Command Set<br>specification|Refer to the applicable I/O<br>Command Set specification|\n|Vendor Specific|O||\n|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. For NVMe over PCIe implementations, the Keep Alive command is optional. For NVMe over Fabrics<br>implementations, the associated NVMe Transport binding defines whether the Keep Alive command<br>is optional or mandatory.<br>3. For NVMe over PCIe implementations, all Fabrics commands are prohibited. For NVMe over<br>Fabrics implementations, the commands are as noted in the table.|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. For NVMe over PCIe implementations, the Keep Alive command is optional. For NVMe over Fabrics<br>implementations, the associated NVMe Transport binding defines whether the Keep Alive command<br>is optional or mandatory.<br>3. For NVMe over PCIe implementations, all Fabrics commands are prohibited. For NVMe over<br>Fabrics implementations, the commands are as noted in the table.|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. For NVMe over PCIe implementations, the Keep Alive command is optional. For NVMe over Fabrics<br>implementations, the associated NVMe Transport binding defines whether the Keep Alive command<br>is optional or mandatory.<br>3. For NVMe over PCIe implementations, all Fabrics commands are prohibited. For NVMe over<br>Fabrics implementations, the commands are as noted in the table.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2282,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0429",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41470155119895935
  },
  {
    "content": "**Figure 23: I/O Controller –Common I/O Command Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0430",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3015117049217224
  },
  {
    "content": "|Command|1<br>Command Support Requirements|\n|---|---|\n|Flush|M|\n|Dataset Management|O|\n|Reservation Register|2<br>O|\n|Reservation Report|2<br>O|\n|Reservation Acquire|2<br>O|\n|Reservation Release|2<br>O|\n|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. Mandatory if reservations are supported as indicated in the Identify Controller data structure.|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. Mandatory if reservations are supported as indicated in the Identify Controller data structure.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 558,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0431",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26768192648887634
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0432",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1714097559452057
  },
  {
    "content": "**3.1.2.1.2** **Log Page Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0433",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48871687054634094
  },
  {
    "content": "Figure 24 defines log pages that are mandatory, optional, and prohibited for an I/O controller. I/O Command\nSet specific log page support requirements are described within individual I/O Command Set specifications.\n\n**Figure 24: I/O Controller – Log Page Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 264,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0434",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5116181373596191
  },
  {
    "content": "|Log Page Name|1<br>Log Page Support Requirements|\n|---|---|\n|Supported Log Pages|3<br>M|\n|Error Information|M|\n|SMART / Health Information (Controller scope)|M|\n|SMART / Health Information (Namespace scope)|O|\n|Firmware Slot Information|M|\n|Changed Namespace List|O|\n|Commands Supported and Effects|3<br>M|\n|Device Self-test|O|\n|Telemetry Host-Initiated|O|\n|Telemetry Controller-Initiated|O|\n|Endurance Group Information|O|\n|Predictable Latency Per NVM Set|O|\n|Predictable Latency Event Aggregate|O|\n|Asymmetric Namespace Access|O|\n|Persistent Event|O|\n|Endurance Group Event Aggregate|O|\n|Media Unit Status|2<br>O|\n|Supported Capacity Configuration List|2<br>O|\n|Feature Identifiers Supported and Effects|3<br>M|\n|NVMe-MI Commands Supported and Effects|3<br>M|\n|Command and Feature Lockdown|O|\n|Reservation Notification|O|\n|Sanitize Status|O|\n|Boot Partition|O|\n|Rotational Media Information|O|\n|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. Mandatory for controllers that support Fixed Capacity Management (refer to section 8.3.2).<br>3. Optional for NVM Express revision 1.4 and earlier.|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. Mandatory for controllers that support Fixed Capacity Management (refer to section 8.3.2).<br>3. Optional for NVM Express revision 1.4 and earlier.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1356,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0435",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3540280759334564
  },
  {
    "content": "**3.1.2.1.3** **Features Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0436",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3394131064414978
  },
  {
    "content": "Figure 25 defines features that are mandatory, optional, and prohibited for an I/O controller. I/O Command\nSet specific feature support requirements are described within individual I/O Command Set specifications.\n\n**Figure 25: I/O Controller – Feature Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 261,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0437",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5041483044624329
  },
  {
    "content": "|Feature Name|Feature Support<br>1<br>Requirements|Logged in<br>1<br>Persistent Event Log|\n|---|---|---|\n|Arbitration|M|O|\n|Power Management|M|NR|\n|Temperature Threshold|M|O|\n|Volatile Write Cache|O|O|\n|Number of Queues|M|O|\n|Interrupt Coalescing|NOTE 2|O|\n|Interrupt Vector Configuration|NOTE 2|O|\n|Asynchronous Event Configuration|M|NR|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 338,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0438",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23130656778812408
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0439",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18941135704517365
  },
  {
    "content": "**Figure 25: I/O Controller – Feature Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0440",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4651758074760437
  },
  {
    "content": "|Feature Name|Feature Support<br>1<br>Requirements|Logged in<br>1<br>Persistent Event Log|\n|---|---|---|\n|Autonomous Power State Transition|O|O|\n|Host Memory Buffer|O|O|\n|Timestamp|O|P|\n|Keep Alive Timer|O|O|\n|Host Controlled Thermal Management|O|O|\n|Non-Operational Power State Config|O|O|\n|Read Recovery Level Config|O|O|\n|Predictable Latency Mode Config|O|O|\n|Predictable Latency Mode Window|O|P|\n|Host Behavior Support|O|O|\n|Sanitize Config|O|O|\n|Endurance Group Event Configuration|O|O|\n|I/O Command Set Profile|O|O|\n|Software Progress Marker|O|NR|\n|Host Identifier|O3|O|\n|Reservation Notification Mask|O4|O|\n|Reservation Persistence|O4|O|\n|Namespace Write Protection Config|O|O|\n|Enhanced Controller Metadata|O5|O|\n|Controller Metadata|O5|O|\n|Namespace Metadata|O5|O|\n|Rotational Media|O|O|\n|Notes:<br>1. O/M/P/NR definition: O = Optional, M = Mandatory, P = Prohibited, NR = Not Recommended<br>2. The feature is mandatory for NVMe over PCIe. This feature is not supported for NVMe over Fabrics.<br>3. Mandatory if reservations are supported as indicated in the Identify Controller data structure.<br>4. Mandatory if reservations are supported by the namespace as indicated by a non-zero value in the<br>Reservation Capabilities (RESCAP) field in the Identify Namespace data structure.<br>5. This feature is optional for NVM subsystems that do not implement a Management Endpoint. For NVM<br>subsystems that implement any Management Endpoint refer to the NVM Express Management Interface<br>Specification.|Notes:<br>1. O/M/P/NR definition: O = Optional, M = Mandatory, P = Prohibited, NR = Not Recommended<br>2. The feature is mandatory for NVMe over PCIe. This feature is not supported for NVMe over Fabrics.<br>3. Mandatory if reservations are supported as indicated in the Identify Controller data structure.<br>4. Mandatory if reservations are supported by the namespace as indicated by a non-zero value in the<br>Reservation Capabilities (RESCAP) field in the Identify Namespace data structure.<br>5. This feature is optional for NVM subsystems that do not implement a Management Endpoint. For NVM<br>subsystems that implement any Management Endpoint refer to the NVM Express Management Interface<br>Specification.|Notes:<br>1. O/M/P/NR definition: O = Optional, M = Mandatory, P = Prohibited, NR = Not Recommended<br>2. The feature is mandatory for NVMe over PCIe. This feature is not supported for NVMe over Fabrics.<br>3. Mandatory if reservations are supported as indicated in the Identify Controller data structure.<br>4. Mandatory if reservations are supported by the namespace as indicated by a non-zero value in the<br>Reservation Capabilities (RESCAP) field in the Identify Namespace data structure.<br>5. This feature is optional for NVM subsystems that do not implement a Management Endpoint. For NVM<br>subsystems that implement any Management Endpoint refer to the NVM Express Management Interface<br>Specification.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2940,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0441",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32241031527519226
  },
  {
    "content": "**3.1.2.2** **Administrative Controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0442",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4416296184062958
  },
  {
    "content": "An Administrative controller is a controller whose intended purpose is to provide NVM subsystem\nmanagement capabilities. While an I/O controller may support these same management capabilities, an\nAdministrative controller has fewer mandatory capabilities. Unlike an I/O controller, an Administrative\ncontroller does not support I/O commands that access to user data stored on an NVM subsystem’s nonvolatile storage medium. NVMe Transports may support a transport specific mechanism to allow an\nAdministrative controller to load a dedicated NVMe management driver instead of a generic NVMe driver\n(refer to the applicable NVMe Transport binding specification for details).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 671,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0443",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6108781099319458
  },
  {
    "content": "Examples of management capabilities that may be supported by an Administrative controller include the\nfollowing.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 112,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0444",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1364065259695053
  },
  {
    "content": "- Ability to efficiently poll NVM subsystem health status via NVMe-MI using the NVMe-MI Send\ncommand and the NVMe-MI Receive command (refer to the NVM Subsystem Health Status Poll\nsection in the NVM Express Management Interface Specification);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 243,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0445",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5701877474784851
  },
  {
    "content": "- Ability to manage an NVMe enclosure via NVMe-MI using the NVMe-MI Send command and the\nNVMe-MI Receive command;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 113,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0446",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46590226888656616
  },
  {
    "content": "- Ability to manage NVM subsystem namespaces using the Namespace Attachment command and\nthe Namespace Management command;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 121,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0447",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37003934383392334
  },
  {
    "content": "- Ability to perform virtualization management using the Virtualization Management command;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 91,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0448",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2611498236656189
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0449",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.468207985162735
  },
  {
    "content": "- Ability to reset an entire NVM subsystem using the NVM Subsystem Reset (NSSR) register, if\nsupported; and\n\n- Ability to shutdown an entire NVM subsystem using the NVM Subsystem Shutdown (NSSD)\nproperty, if supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 218,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0450",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1883300095796585
  },
  {
    "content": "An Administrative controller shall not support I/O queues. Namespaces shall not be attached to an\nAdministrative controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0451",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6071029305458069
  },
  {
    "content": "An Administrative controller is required to support the mandatory Admin commands listed in Figure 28. An\nAdministrative controller may support one or more I/O Command Sets. When an Administrative controller\nsupports an I/O Command Set, then only I/O Command Set specific Admin commands may be supported\nsince an Administrative controller only has an Admin Queue and no I/O Queues.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 380,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0452",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4107159972190857
  },
  {
    "content": "Figure 26 shows an NVM subsystem with one Administrative controller and two I/O controllers within an\nNVM subsystem that contains a non-volatile storage medium and namespaces. I/O controller one has two\nattached namespaces, private namespace A and shared namespace B. I/O controller two also has two\nattached namespaces, private namespace C and shared namespace B. Since an Administrative controller\ndoes not provide access to user data stored on an NVM subsystem’s non-volatile storage medium, the\nAdministrative controller has no attached namespaces. The Administrative controller in this example may\nbe used for tasks such as NVM subsystem namespace management and efficiently polling NVM subsystem\nhealth status via NVMe-MI. While this example shows a single Administrative controller, an NVM subsystem\nmay support zero or more Administrative controllers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 859,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0453",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6933371424674988
  },
  {
    "content": "**Figure 26: NVM Subsystem with One Administrative and Two I/O Controllers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0454",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6224508881568909
  },
  {
    "content": "Figure 27 shows an NVM subsystem with one Administrative controller within an NVM subsystem that\ncontains no non-volatile storage medium or namespaces. The Administrative controller in this example may\nbe used to manage an NVMe enclosure using NVMe-MI. Since the Administrative controller is used for a\nvery specific dedicated purpose, the implementer of such an Administrative controller may choose to\nimplement only the mandatory capabilities along with the NVMe-MI Send and NVMe-MI Receive\ncommands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 502,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0455",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46437129378318787
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0456",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39722371101379395
  },
  {
    "content": "**Figure 27: NVM Subsystem with One Administrative Controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0457",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28829190135002136
  },
  {
    "content": "**3.1.2.2.1** **Command Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0458",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37943270802497864
  },
  {
    "content": "Figure 28 defines commands that are mandatory, optional, and prohibited for an Administrative controller.\nSince an Administrative controller does not support I/O queues, NVM Command Set commands that are\nnot admin commands are not supported. A host may utilize the Commands Supported and Effects log page\nto determine optional commands that are supported by an Administrative controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 387,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0459",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5260221362113953
  },
  {
    "content": "**Figure 28: Administrative Controller – Admin Command Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0460",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27508601546287537
  },
  {
    "content": "|Command|Command Support<br>1<br>Requirements|Reference|\n|---|---|---|\n|Delete I/O Submission Queue|P|5.7|\n|Create I/O Submission Queue|P|5.5|\n|Get Log Page|M|5.16|\n|Delete I/O Completion Queue|P|5.6|\n|Create I/O Completion Queue|P|5.4|\n|Identify|M|5.17|\n|Abort|O|5.1|\n|Set Features|3<br>O|5.27|\n|Get Features|3<br>O|5.15|\n|Asynchronous Event Request|4<br>O|5.2|\n|Capacity Management|O|5.3|\n|Namespace Management|O|5.23|\n|Firmware Commit|O|5.12|\n|Firmware Image Download|O|5.13|\n|Device Self-test|O|5.9|\n|Namespace Attachment|O|5.22|\n|Keep Alive|NOTE 2|5.18|\n|Directive Send|O|5.11|\n|Directive Receive|O|5.10|\n|Virtualization Management|O|5.28|\n|NVMe-MI Send|O|5.21|\n|NVMe-MI Receive|O|5.20|\n|Doorbell Buffer Config|O|5.8|\n|Lockdown|O|5.19|\n|Format NVM|O|5.14|\n|Security Send|O|5.26|\n|Security Receive|O|5.25|\n|Sanitize|O|5.24|\n|Property Set|5<br>M|6.6|\n|Connect|5<br>M|6.3|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 874,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0461",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2696117162704468
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0462",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0739387571811676
  },
  {
    "content": "**Figure 28: Administrative Controller – Admin Command Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0463",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21237891912460327
  },
  {
    "content": "|Command|Command Support<br>1<br>Requirements|Reference|\n|---|---|---|\n|Property Get|5<br>M|6.5|\n|Authentication Send|5<br>O|6.2|\n|Authentication Receive|5<br>O|6.1|\n|Disconnect|P|6.4|\n|I/O Command Set Specific Admin<br>Commands|P||\n|Vendor Specific|O||\n|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. For NVMe over PCIe implementations, the Keep Alive command is optional. For NVMe over<br>Fabrics implementations, the associated NVMe Transport binding defines whether the Keep<br>Alive command is optional or mandatory.<br>3. Mandatory if any of the features in Figure 30 are implemented.<br>4. Mandatory if Telemetry Log, Firmware Commit, or SMART/Health Critical Warnings are<br>supported.<br>5. For NVMe over PCIe implementations, all Fabrics commands are prohibited. For NVMe over<br>Fabrics implementations, the commands are as noted in the table.|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. For NVMe over PCIe implementations, the Keep Alive command is optional. For NVMe over<br>Fabrics implementations, the associated NVMe Transport binding defines whether the Keep<br>Alive command is optional or mandatory.<br>3. Mandatory if any of the features in Figure 30 are implemented.<br>4. Mandatory if Telemetry Log, Firmware Commit, or SMART/Health Critical Warnings are<br>supported.<br>5. For NVMe over PCIe implementations, all Fabrics commands are prohibited. For NVMe over<br>Fabrics implementations, the commands are as noted in the table.|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. For NVMe over PCIe implementations, the Keep Alive command is optional. For NVMe over<br>Fabrics implementations, the associated NVMe Transport binding defines whether the Keep<br>Alive command is optional or mandatory.<br>3. Mandatory if any of the features in Figure 30 are implemented.<br>4. Mandatory if Telemetry Log, Firmware Commit, or SMART/Health Critical Warnings are<br>supported.<br>5. For NVMe over PCIe implementations, all Fabrics commands are prohibited. For NVMe over<br>Fabrics implementations, the commands are as noted in the table.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2157,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0464",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1137094497680664
  },
  {
    "content": "**3.1.2.2.2** **Log Page Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0465",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5027380585670471
  },
  {
    "content": "Figure 29 defines log pages that are mandatory, optional, and prohibited for an Administrative controller.\n\n**Figure 29: Administrative Controller – Log Page Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0466",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5043323636054993
  },
  {
    "content": "|Log Page Name|1<br>Command Support Requirements|\n|---|---|\n|Supported Log Pages|4<br>M|\n|Error Information|M|\n|SMART / Health Information (Controller scope)|O|\n|SMART / Health Information (Namespace scope)|O|\n|Firmware Slot Information|O|\n|Changed Namespace List|O|\n|Commands Supported and Effects|M|\n|Device Self-test|O|\n|Telemetry Host-Initiated|O|\n|Endurance Group Information|O|\n|Predictable Latency Per NVM Set|O|\n|Predictable Latency Event Aggregate|O|\n|Asymmetric Namespace Access|P|\n|Persistent Event|O|\n|Endurance Group Event Aggregate|O|\n|Media Unit Status|P|\n|Supported Capacity Configuration List|P|\n|Feature Identifiers Supported and Effects|2,4<br>M|\n|NVMe-MI Commands Supported and Effects|3,4<br>M|\n|Command and Feature Lockdown|O|\n|Reservation Notification|P|\n|Sanitize Status|O|\n|Rotational Media|P|\n|Boot Partition|O|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 837,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0467",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38403427600860596
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0468",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09749291092157364
  },
  {
    "content": "**Figure 29: Administrative Controller – Log Page Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0469",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38554415106773376
  },
  {
    "content": "|Log Page Name|1<br>Command Support Requirements|\n|---|---|\n|I/O Command Set Specific Log Pages|P|\n|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. Optional if Set Features command is not supported (refer to Figure 28).<br>3. Optional if NVMe-MI Send command and NVMe-MI Receive command is not supported (refer to Figure<br>28).<br>4. Optional for NVM Express revision 1.4 and earlier.|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. Optional if Set Features command is not supported (refer to Figure 28).<br>3. Optional if NVMe-MI Send command and NVMe-MI Receive command is not supported (refer to Figure<br>28).<br>4. Optional for NVM Express revision 1.4 and earlier.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 738,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0470",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14944587647914886
  },
  {
    "content": "**3.1.2.2.3** **Features Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0471",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39183396100997925
  },
  {
    "content": "Figure 30 defines features that are mandatory, optional, and prohibited for an Administrative controller. If\nany feature is supported, then the Set Features and Get Features commands shall be supported. I/O\nCommand Set specific feature support requirements for I/O Controllers are described within individual I/O\nCommand Set specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 339,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0472",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6891286373138428
  },
  {
    "content": "**Figure 30: Administrative Controller – Feature Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0473",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3855349123477936
  },
  {
    "content": "|Feature Name|1<br>Feature Support Requirements|Logged in<br>1<br>Persistent Event Log|\n|---|---|---|\n|Arbitration|P|P|\n|Power Management|O|NR|\n|Temperature Threshold|O|O|\n|Volatile Write Cache|P|P|\n|Number of Queues|P|P|\n|Interrupt Coalescing|NOTE 2|NOTE 2|\n|Interrupt Vector Configuration|NOTE 2|NOTE 2|\n|Asynchronous Event Configuration|3<br>O|NR|\n|Autonomous Power State Transition|O|O|\n|Host Memory Buffer|O|O|\n|Timestamp|O|P|\n|Keep Alive Timer|O|O|\n|Host Controlled Thermal Management|O|O|\n|Non-Operational Power State Config|O|O|\n|Read Recovery Level Config|O|O|\n|Predictable Latency Mode Config|O|P|\n|Predictable Latency Mode Window|O|O|\n|Host Behavior Support|O|O|\n|Sanitize Config|O|O|\n|Endurance Group Event Configuration|O|O|\n|I/O Command Set Profile|P|P|\n|Software Progress Marker|O|NR|\n|Host Identifier|4<br>O|O|\n|Reservation Notification Mask|5<br>O|O|\n|Reservation Persistence|5<br>O|O|\n|Namespace Write Protection Config|O|O|\n|Enhanced Controller Metadata|6<br>O|O|\n|Controller Metadata|6<br>O|O|\n|Namespace Metadata|6<br>O|O|\n|Rotational Media|P|P|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1066,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0474",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2977963387966156
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0475",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1325455754995346
  },
  {
    "content": "**Figure 30: Administrative Controller – Feature Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0476",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36070770025253296
  },
  {
    "content": "|Feature Name|1<br>Feature Support Requirements|Logged in<br>1<br>Persistent Event Log|\n|---|---|---|\n|Notes:<br>1. O/M/P/NR definition: O = Optional, M = Mandatory, P = Prohibited, NR = Not Recommended.<br>2. The feature is mandatory for NVMe over PCIe. This feature is not supported for NVMe over Fabrics.<br>3. Mandatory if Telemetry Log, Firmware Commit or SMART/Health Critical Warnings are supported.<br>4. Mandatory if reservations are supported as indicated in the Identify Controller data structure.<br>5. Mandatory if reservations are supported by the namespace as indicated by a non-zero value in the Reservation<br>Capabilities (RESCAP) field in the Identify Namespace data structure.<br>6. This feature is optional for NVM subsystems that do not implement a Management Endpoint. For NVM<br>subsystems that implement any Management Endpoint refer to the NVM Express Management Interface<br>Specification.|Notes:<br>1. O/M/P/NR definition: O = Optional, M = Mandatory, P = Prohibited, NR = Not Recommended.<br>2. The feature is mandatory for NVMe over PCIe. This feature is not supported for NVMe over Fabrics.<br>3. Mandatory if Telemetry Log, Firmware Commit or SMART/Health Critical Warnings are supported.<br>4. Mandatory if reservations are supported as indicated in the Identify Controller data structure.<br>5. Mandatory if reservations are supported by the namespace as indicated by a non-zero value in the Reservation<br>Capabilities (RESCAP) field in the Identify Namespace data structure.<br>6. This feature is optional for NVM subsystems that do not implement a Management Endpoint. For NVM<br>subsystems that implement any Management Endpoint refer to the NVM Express Management Interface<br>Specification.|Notes:<br>1. O/M/P/NR definition: O = Optional, M = Mandatory, P = Prohibited, NR = Not Recommended.<br>2. The feature is mandatory for NVMe over PCIe. This feature is not supported for NVMe over Fabrics.<br>3. Mandatory if Telemetry Log, Firmware Commit or SMART/Health Critical Warnings are supported.<br>4. Mandatory if reservations are supported as indicated in the Identify Controller data structure.<br>5. Mandatory if reservations are supported by the namespace as indicated by a non-zero value in the Reservation<br>Capabilities (RESCAP) field in the Identify Namespace data structure.<br>6. This feature is optional for NVM subsystems that do not implement a Management Endpoint. For NVM<br>subsystems that implement any Management Endpoint refer to the NVM Express Management Interface<br>Specification.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2545,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0477",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.352976530790329
  },
  {
    "content": "**3.1.2.3** **Discovery Controller**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0478",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6046867370605469
  },
  {
    "content": "A Discovery controller only implements features related to Discovery Log Pages and does not implement\nI/O Queues, I/O commands, or expose namespaces. The functionality supported by the Discovery controller\nis defined in section 3.1.2.3.4.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 238,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0479",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4008857011795044
  },
  {
    "content": "The host uses the well-known Discovery Service NQN (nqn.2014-08.org.nvmexpress.discovery) in the\nConnect command (refer to section 6.3) to a Discovery Service. The method that a host uses to obtain the\nNVMe Transport information necessary to connect to the well-known Discovery Service is implementation\nspecific.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 313,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0480",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5624657273292542
  },
  {
    "content": "The Discovery Log Page provided by a Discovery controller contains one or more entries. Each entry\nspecifies information necessary for the host to connect to an NVM subsystem. An entry may be associated\nwith an NVM subsystem that exposes namespaces or a referral to another Discovery Service. There are\nno ordering requirements for log page entries within the Discovery Log Page.\n\nDiscovery controller(s) may provide different log page contents depending on the Host NQN provided (e.g.,\ndifferent NVM subsystems may be accessible to different hosts). The set of Discovery Log Page Entries\nshould include all applicable addresses on the same fabric as the Discovery Service and may include\naddresses on other fabrics.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 716,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0481",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4654324948787689
  },
  {
    "content": "Discovery controllers that support explicit persistent connections shall support both Asynchronous Event\nRequest and Keep Alive commands (refer to sections 5.2 and 5.18 respectively). A host requests an explicit\npersistent connection to a Discovery controller and Asynchronous Event Notifications from the Discovery\ncontroller on that persistent connection by specifying a non-zero Keep Alive Timer value in the Connect\ncommand. If the Connect command specifies a non-zero Keep Alive Timer value and the Discovery\ncontroller does not support Asynchronous Events, then the Discovery controller shall return a status value\nof Connect Invalid Parameters (refer to Figure 383) for the Connect command. Discovery controllers shall\nindicate support for Discovery Log Change Notifications in the Identify Controller Data Structure (refer to\nFigure 275).\n\nDiscovery controllers that do not support explicit persistent connections shall not support Keep Alive\ncommands and may use a fixed Discovery controller activity timeout value (e.g., 2 minutes). If no commands\nare received by such a Discovery controller within that time period, the controller may perform the actions\nfor Keep Alive Timer expiration defined in section 3.9.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1221,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0482",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6655364036560059
  },
  {
    "content": "A Discovery controller shall not support the Disconnect command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0483",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2787286043167114
  },
  {
    "content": "A Discovery Log Page with multiple Discovery Log Page Entries for the same NVM subsystem indicates\nthat there are multiple fabric paths to the NVM subsystem, and/or that multiple static controllers may share\na fabric path. The host may use this information to form multiple associations to controllers within an NVM\nsubsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 326,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0484",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6995868682861328
  },
  {
    "content": "Multiple Discovery Log Page Entries for the same NVM subsystem with different Port ID values indicates\nthat the resulting NVMe Transport connections are independent with respect to NVM subsystem port",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 199,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0485",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4114501178264618
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0486",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38882723450660706
  },
  {
    "content": "hardware failures. A host that uses a single association should pick a record to attach to an NVM\nsubsystem. A host that uses multiple associations should choose different ports.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 178,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0487",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15380635857582092
  },
  {
    "content": "A transport specific method may exist to indicate changes to a Discovery controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0488",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3660080134868622
  },
  {
    "content": "The Controller ID values returned in the Discovery Log Page Entries indicate whether an NVM subsystem\nsupports the dynamic or static controller model. The controller ID value of FFFFh is a special value used\nfor NVM subsystems that support the dynamic controller model indicating that any available controller may\nbe returned. The Controller ID value of FFFEh is a special value used for NVM subsystems that support\nthe static controller model indicating that any available controller may be returned. An NVM subsystem\nsupports the dynamic controller model if Discovery Log Page Entries use the Controller ID value of FFFFh.\nAn NVM subsystem supports the static controller model if Discovery Log Page Entries use a Controller ID\nvalue that is less than FFFFh. The Identify Controller data structure also indicates whether an NVM\nsubsystem is dynamic or static.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 860,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0489",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7587877511978149
  },
  {
    "content": "If an NVM subsystem implements the dynamic controller model, then multiple Discovery Log Page Entries\n(refer to Figure 264) with the Controller ID set to FFFFh may be returned for that NVM subsystem (e.g., to\nindicate multiple NVM subsystem ports) in the Discovery Log Page. If an NVM subsystem implements the\nstatic controller model, then multiple Discovery Log Page Entries that indicate different Controller ID values\nmay be returned for that NVM subsystem in the Discovery Log Page. If an NVM subsystem that implements\nthe static controller model includes any Discovery Log Page Entries that indicate a Controller ID of FFFEh,\nthen the host should remember the Controller ID returned from the Fabrics Connect command and re-use\nthe allocated Controller ID for future associations to that particular controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 814,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0490",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3426680862903595
  },
  {
    "content": "**3.1.2.3.1** **Discovery Controller Initialization**\n\nThe initialization process for Discovery controllers is described in Figure 31.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 134,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0491",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17614038288593292
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0492",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18418852984905243
  },
  {
    "content": "**Figure 31: Discovery Controller Initialization process flow**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0493",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2747945189476013
  },
  {
    "content": "1. Refer to section 6.3;\n2. Refer to the Asynchronous Event Request command in section 5.2;\n3. Refer to the Keep Alive command in section 5.18; and\n4. R e f e r to t h e f o ll o win g steps in t hi s sect i o n.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 212,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0494",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3092832565307617
  },
  {
    "content": "After the Connect Command completes with a status of Successful Completion, the host performs the\nfollowing steps:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 114,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0495",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25244638323783875
  },
  {
    "content": "1. NVMe authentication is performed if required (refer to section 8.13.2);\n2. The host determines the controller’s capabilities by reading the Controller Capabilities property;\n3. The host configures the controller’s settings by writing the Controller Configuration property,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 275,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0496",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.371672660112381
  },
  {
    "content": "including setting CC.EN to ‘1’ to enable command processing;\n4. The host waits for the controller to indicate that the controller is ready to process commands. The",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0497",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5771729350090027
  },
  {
    "content": "controller is ready to process commands when CSTS.RDY is set to ‘1’ in the Controller Status\nproperty; and\n5. The host determines the features and capabilities of the controller by issuing an Identify command,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 209,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0498",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32794249057769775
  },
  {
    "content": "specifying each applicable Controller data structure.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0499",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13175475597381592
  },
  {
    "content": "After initializing the Discovery controller, the host reads the Discovery Log Page. Refer to section 5.16.1.21.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0500",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1458553969860077
  },
  {
    "content": "**3.1.2.3.2** **Command Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0501",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3646235764026642
  },
  {
    "content": "A Discovery controller supports all mandatory Fabrics commands. A Discovery controller supports a subset\nof Admin commands shown in Figure 32.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 142,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0502",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6359747648239136
  },
  {
    "content": "**Figure 32: Discovery Controller – Admin Command Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0503",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22571884095668793
  },
  {
    "content": "|Command|1<br>Command Support Requirements|Reference|\n|---|---|---|\n|Delete I/O Submission Queue|P|5.7|\n|Create I/O Submission Queue|P|5.5|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 139,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0504",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24324217438697815
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0505",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.058984365314245224
  },
  {
    "content": "**Figure 32: Discovery Controller – Admin Command Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0506",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29107776284217834
  },
  {
    "content": "|Command|1<br>Command Support Requirements|Reference|\n|---|---|---|\n|Get Log Page|M|5.16|\n|Delete I/O Completion Queue|P|5.6|\n|Create I/O Completion Queue|P|5.4|\n|Identify|M|5.17|\n|Abort|O|5.1|\n|Set Features|NOTE 2|5.27|\n|Get Features|NOTE 2|5.15|\n|Asynchronous Event Request|NOTE 2|5.2|\n|Capacity Management|P|5.3|\n|Namespace Management|P|5.23|\n|Firmware Commit|P|5.12|\n|Firmware Image Download|P|5.13|\n|Device Self-test|P|5.9|\n|Namespace Attachment|P|5.22|\n|Keep Alive|NOTE 2|5.18|\n|Directive Send|P|5.11|\n|Directive Receive|P|5.10|\n|Virtualization Management|P|5.28|\n|NVMe-MI Send|P|5.21|\n|NVMe-MI Receive|P|5.20|\n|Doorbell Buffer Config|P|5.8|\n|Lockdown|P|5.19|\n|Format NVM|P|5.14|\n|Security Send|P|5.26|\n|Security Receive|P|5.25|\n|Sanitize|P|5.24|\n|Property Set|M|6.6|\n|Connect|M|6.3|\n|Property Get|M|6.5|\n|Authentication Send|O|6.2|\n|Authentication Receive|O|6.1|\n|Disconnect|P|6.4|\n|I/O Command Set Specific Admin<br>Commands|P||\n|Vendor Specific|O||\n|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. For Discovery controllers that do not support explicit persistent connections, the command is prohibited. For<br>Discovery controllers that support explicit persistent connections, the command is mandatory.|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. For Discovery controllers that do not support explicit persistent connections, the command is prohibited. For<br>Discovery controllers that support explicit persistent connections, the command is mandatory.|Notes:<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. For Discovery controllers that do not support explicit persistent connections, the command is prohibited. For<br>Discovery controllers that support explicit persistent connections, the command is mandatory.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1823,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0507",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2806382179260254
  },
  {
    "content": "**3.1.2.3.3** **Log Page Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0508",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5322095155715942
  },
  {
    "content": "The Discovery controller shall support the Discovery Log Page. The log pages that a Discovery controller\nmay support are shown in Figure 33.\n\n**Figure 33: Discovery Controller – Log Page Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 196,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0509",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5368064641952515
  },
  {
    "content": "|Log Page Name|1<br>Command Support Requirements|\n|---|---|\n|Supported Log Pages|4<br>M|\n|Error Information|O|\n|SMART / Health Information (Controller scope)|P|\n|SMART / Health Information (Namespace scope)|P|\n|Firmware Slot Information|P|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 239,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0510",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2784712016582489
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0511",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09742777049541473
  },
  {
    "content": "**Figure 33: Discovery Controller – Log Page Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0512",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41299670934677124
  },
  {
    "content": "|Log Page Name|1<br>Command Support Requirements|\n|---|---|\n|Changed Namespace List|P|\n|Commands Supported and Effects|P|\n|Device Self-test|P|\n|Telemetry Host-Initiated|P|\n|Telemetry Controller-Initiated|P|\n|Endurance Group Information|P|\n|Predictable Latency Per NVM Set|P|\n|Predictable Latency Event Aggregate|P|\n|Asymmetric Namespace Access|P|\n|Persistent Event|P|\n|Endurance Group Event Aggregate|P|\n|Media Unit Status|P|\n|Supported Capacity Configuration List|P|\n|Feature Identifiers Supported and Effects|2,4<br>M|\n|NVMe-MI Commands Supported and Effects|3,4<br>M|\n|Command and Feature Lockdown|P|\n|Discovery|M|\n|Reservation Notification|P|\n|Sanitize Status|P|\n|Rotational Media|P|\n|Boot Partition|P|\n|I/O Command Set Specific Log Pages|P|\n|Notes<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. Optional if Set Features command is not supported (refer to Figure 32).<br>3. Optional if NVMe-MI Send command and NVMe-MI Receive command is not supported (refer to Figure<br>32).<br>4. Optional for versions 1.1 and earlier of the NVMe over Fabrics specification.|Notes<br>1. O/M/P definition: O = Optional, M = Mandatory, P = Prohibited<br>2. Optional if Set Features command is not supported (refer to Figure 32).<br>3. Optional if NVMe-MI Send command and NVMe-MI Receive command is not supported (refer to Figure<br>32).<br>4. Optional for versions 1.1 and earlier of the NVMe over Fabrics specification.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1437,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0513",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.355692595243454
  },
  {
    "content": "**3.1.2.3.4** **Features Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0514",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34505876898765564
  },
  {
    "content": "These features indicate the attributes of a Discovery controller (refer to Figure 34). This is optional\ninformation not required for proper behavior of the system (refer to Figure 316).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 185,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0515",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.676277756690979
  },
  {
    "content": "**Figure 34: Discovery Controller – Feature Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0516",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3325442969799042
  },
  {
    "content": "|Feature Name|Feature Support<br>1<br>Requirements|Logged in<br>1<br>Persistent Event Log|\n|---|---|---|\n|Arbitration|P|P|\n|Power Management|P|P|\n|Temperature Threshold|P|P|\n|Volatile Write Cache|P|P|\n|Number of Queues|P|P|\n|Interrupt Coalescing|P|P|\n|Interrupt Vector Configuration|P|P|\n|Asynchronous Event Configuration|O|NR|\n|Autonomous Power State Transition|P|P|\n|Host Memory Buffer|P|P|\n|Timestamp|P|P|\n|Keep Alive Timer|O|O|\n|Host Controlled Thermal Management|P|P|\n|Non-Operational Power State Config|P|P|\n|Read Recovery Level Config|P|P|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 546,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0517",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2893700897693634
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0518",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10656248033046722
  },
  {
    "content": "**Figure 34: Discovery Controller – Feature Support**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0519",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3923582434654236
  },
  {
    "content": "|Feature Name|Feature Support<br>1<br>Requirements|Logged in<br>1<br>Persistent Event Log|\n|---|---|---|\n|Predictable Latency Mode Config|P|P|\n|Predictable Latency Mode Window|P|P|\n|Host Behavior Support|P|P|\n|Sanitize Config|P|P|\n|Endurance Group Event Configuration|P|P|\n|Vendor Specific|O|O|\n|Software Progress Marker|P|P|\n|Host Identifier|P|P|\n|Reservation Notification Mask|P|P|\n|Reservation Persistence|P|P|\n|Namespace Write Protection Config|P|P|\n|I/O Command Set Profile|P|P|\n|Enhanced Controller Metadata|2<br>O|O|\n|Controller Metadata|2<br>O|O|\n|Namespace Metadata|2<br>O|O|\n|Rotational Media|P|P|\n|Notes:<br>1. O/M/P/NR definition: O = Optional, M = Mandatory, P = Prohibited, NR = Not Recommended.<br>2. This feature is optional for NVM subsystems that do not implement a Management Endpoint. For NVM<br>subsystems that implement any Management Endpoint refer to the NVM Express Management Interface<br>Specification.|Notes:<br>1. O/M/P/NR definition: O = Optional, M = Mandatory, P = Prohibited, NR = Not Recommended.<br>2. This feature is optional for NVM subsystems that do not implement a Management Endpoint. For NVM<br>subsystems that implement any Management Endpoint refer to the NVM Express Management Interface<br>Specification.|Notes:<br>1. O/M/P/NR definition: O = Optional, M = Mandatory, P = Prohibited, NR = Not Recommended.<br>2. This feature is optional for NVM subsystems that do not implement a Management Endpoint. For NVM<br>subsystems that implement any Management Endpoint refer to the NVM Express Management Interface<br>Specification.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1572,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0520",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35136088728904724
  },
  {
    "content": "**3.1.2.3.4.1 Asynchronous Event Configuration (Feature Identifier 0Bh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 73,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0521",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4547581970691681
  },
  {
    "content": "Discovery controllers that support Asynchronous Event Notifications shall implement the Get Features and\nSet Features commands. A Discovery controller shall enable Asynchronous Discovery Log Event\nNotifications, if a non-zero Keep Alive Timeout (KATO) value is received in the Connect command (refer to\nsection 6.3) sent to that controller.\n\nFigure 326 defines Discovery controller Asynchronous Event Notifications.\n\n**3.1.2.3.4.2 Discovery Controller Asynchronous Event Information – Requests and Notifications**\n\nIf Discovery controllers detect events about which a host has requested notification, then the Discovery\ncontroller shall send an Asynchronous Event with the:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 673,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0522",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3627082407474518
  },
  {
    "content": "- Asynchronous Event Type field set to Notice (i.e., 2h);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0523",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33077484369277954
  },
  {
    "content": "- Log Page Identifier field set to Discovery (i.e., 70h); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0524",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3442297875881195
  },
  {
    "content": "- Asynchronous Event Information field set as defined in Figure 147.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0525",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3237503468990326
  },
  {
    "content": "When a Discovery controller updates Discovery Log Page(s), the Discovery controller shall send a\nDiscovery Log Page Change Asynchronous Event notification (Asynchronous Event Information F0h) to\neach host that has requested asynchronous event notifications of this type (refer to Figure 147).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 292,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0526",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20751988887786865
  },
  {
    "content": "**Controller Properties**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0527",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5009275078773499
  },
  {
    "content": "A property is a dword, or qword attribute of a controller. The attribute may have read, write, or read/write\naccess. The host shall access a property using the width specified for that property with an offset that is at\nthe beginning of the property unless otherwise noted in a transport specific specification. All reserved\nproperties and all reserved bits within properties are read-only and return 0h when read. Properties may be\nread with the Property Get command and may be written with the Property Set command with controllers\nusing the message-based transport model. For controllers using the memory-based transport model, refer\nto the applicable NVMe Transport binding specification for access methods and rules (e.g., NVMe PCIe\nTransport Specification).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 763,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0528",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17373861372470856
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0529",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20856620371341705
  },
  {
    "content": "Figure 35 describes the property map for the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0530",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26604586839675903
  },
  {
    "content": "Accesses that target any portion of two or more properties are not supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 77,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0531",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08454442024230957
  },
  {
    "content": "Software should not rely on 0h being returned.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0532",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.053371261805295944
  },
  {
    "content": "**Figure 35: Property Definition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0533",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07454027235507965
  },
  {
    "content": "|Offset<br>(OFST)|Size<br>(in<br>bytes)|I/O<br>Controller1|Admin.<br>Controller1|Discovery<br>Controller1|Name|\n|---|---|---|---|---|---|\n|0h|8|M|M|M|CAP: Controller Capabilities|\n|8h|4|M|M|M|VS: Version|\n|Ch|4|M2|M2|R|INTMS: Interrupt Mask Set|\n|Fh|4|M2|M2|R|INTMC: Interrupt Mask Clear|\n|14h|4|M|M|M|CC: Controller Configuration|\n|18h||R|R|R|Reserved|\n|1Ch|4|M|M|M|CSTS: Controller Status|\n|20h|4|O|O|R|NSSR: NVM Subsystem Reset|\n|24h|4|M2|M2|R|AQA: Admin Queue Attributes|\n|28h|8|M2|M2|R|ASQ: Admin Submission Queue Base<br>Address|\n|30h|8|M2|M2|R|ACQ: Admin Completion Queue Base<br>Address|\n|38h|4|O3|O3|R|CMBLOC: Controller Memory Buffer<br>Location|\n|3Ch|4|O3|O3|R|CMBSZ: Controller Memory Buffer Size|\n|40h|4|O3|O3|R|BPINFO: Boot Partition Information|\n|44h|4|O3|O3|R|BPRSEL: Boot Partition Read Select|\n|48h|8|O3|O3|R|BPMBL: Boot Partition Memory Buffer<br>Location|\n|50h|8|O3|O3|R|CMBMSC: Controller Memory Buffer<br>Memory Space Control|\n|58h|4|O3|O3|R|CMBSTS: Controller Memory Buffer<br>Status|\n|5Ch|4|O3|O3|R|CMBEBS: Controller Memory Buffer<br>Elasticity Buffer Size|\n|60h|4|O3|O3|R|CMBSWTP: Controller Memory Buffer<br>Sustained Write Throughput|\n|64h|4|O|O|R|NSSD: NVM Subsystem Shutdown|\n|68h|4|M|M|R|CRTO: Controller Ready Timeouts|\n|6Ch||R|R|R|Reserved|\n|E00h|4|O3|O3|R|PMRCAP: Persistent Memory<br>Capabilities|\n|E04h|4|O3|O3|R|PMRCTL: Persistent Memory Region<br>Control|\n|E08h|4|O3|O3|R|PMRSTS: Persistent Memory Region<br>Status|\n|E0Ch|4|O3|O3|R|PMREBS: Persistent Memory Region<br>Elasticity Buffer Size|\n|E10h|4|O3|O3|R|PMRSWTP: Persistent Memory Region<br>Sustained Write Throughput|\n|E14h|4|O3|O3|R|PMRMSCL: Persistent Memory Region<br>Controller Memory Space Control Lower|\n|E18h|4|O3|O3|R|PMRMSCU: Persistent Memory Region<br>Controller Memory Space Control Upper|\n|E1Ch||R|M|R|Reserved|\n|1000h||T|T|T|Transport Specific|\n|1300h||O|O|O|Vendor Specific|\n|Notes:|Notes:|Notes:|Notes:|Notes:|Notes:|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1926,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0534",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23202596604824066
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0535",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17912545800209045
  },
  {
    "content": "**Figure 35: Property Definition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0536",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10889201611280441
  },
  {
    "content": "|Offset<br>(OFST)|Size<br>(in<br>bytes)|I/O<br>Controller1|Admin.<br>Controller1|Discovery<br>Controller1|Name|\n|---|---|---|---|---|---|\n|1. O/M/P definition: O = Optional, M = Mandatory, R = Reserved, T = Transport Specific<br>2. Mandatory for memory-based transport implementations. Reserved for message-based transport<br>implementations.<br>3. Optional for memory-based transport implementations. Reserved for message-based transport<br>implementations.|1. O/M/P definition: O = Optional, M = Mandatory, R = Reserved, T = Transport Specific<br>2. Mandatory for memory-based transport implementations. Reserved for message-based transport<br>implementations.<br>3. Optional for memory-based transport implementations. Reserved for message-based transport<br>implementations.|1. O/M/P definition: O = Optional, M = Mandatory, R = Reserved, T = Transport Specific<br>2. Mandatory for memory-based transport implementations. Reserved for message-based transport<br>implementations.<br>3. Optional for memory-based transport implementations. Reserved for message-based transport<br>implementations.|1. O/M/P definition: O = Optional, M = Mandatory, R = Reserved, T = Transport Specific<br>2. Mandatory for memory-based transport implementations. Reserved for message-based transport<br>implementations.<br>3. Optional for memory-based transport implementations. Reserved for message-based transport<br>implementations.|1. O/M/P definition: O = Optional, M = Mandatory, R = Reserved, T = Transport Specific<br>2. Mandatory for memory-based transport implementations. Reserved for message-based transport<br>implementations.<br>3. Optional for memory-based transport implementations. Reserved for message-based transport<br>implementations.|1. O/M/P definition: O = Optional, M = Mandatory, R = Reserved, T = Transport Specific<br>2. Mandatory for memory-based transport implementations. Reserved for message-based transport<br>implementations.<br>3. Optional for memory-based transport implementations. Reserved for message-based transport<br>implementations.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2059,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0537",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5066148638725281
  },
  {
    "content": "The following conventions are used to describe controller properties for all transport models. Hardware\nshall return ‘0’ for all bits that are marked as reserved, and host software shall write all reserved bits and\nproperties with the value of 0h",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0538",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30353888869285583
  },
  {
    "content": "The following terms and abbreviations are used:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0539",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1897677779197693
  },
  {
    "content": "**RO** Read Only\n**RW** Read Write",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0540",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5328499674797058
  },
  {
    "content": "**RWC** Read/Write ‘1’ to clear",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0541",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3599434792995453
  },
  {
    "content": "**RWS** Read/Write ‘1’ to set\n**Impl Spec** Implementation Specific – the controller has the freedom to choose\nits implementation.\n**HwInit** The default state is dependent on NVM Express controller and\nsystem configuration.\n**Reset** This column indicates the value of the field after a Controller Level",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 304,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0542",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32194769382476807
  },
  {
    "content": "Reset as defined in section 3.7.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0543",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19905154407024384
  },
  {
    "content": "For some fields, it is implementation specific as to whether the field is RW, RWC, or RO; this is typically\nshown as RW/RO or RWC/RO to indicate that if the functionality is not supported that the field is read only.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 216,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0544",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5679306387901306
  },
  {
    "content": "When a field is referred to in the document, the convention used is “Property Symbol.Field Symbol”. For\nexample, the PCI command register Parity Error Response Enable bit is referred to by the name CMD.PEE.\nIf the field is an array of bits, the field is referred to as “Property Symbol.Field Symbol (array offset to\nelement)”. When a sub-field is referred to in the document, the convention used is “Property Symbol.Field\nSymbol.Sub Field Symbol”. For example, when the Controller Ready With Media Support sub-field of the\nController Ready Modes Supported field within the Controller Capability property, the sub-field is referred\nto by the name CAP.CRMS.CRWMS.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 661,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0545",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21384330093860626
  },
  {
    "content": "**3.1.3.1** **Offset 0h: CAP – Controller Capabilities**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0546",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43373700976371765
  },
  {
    "content": "This property indicates basic capabilities of the controller to host software.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0547",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40402159094810486
  },
  {
    "content": "**Figure 36: Offset 0h: CAP – Controller Capabilities**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0548",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3384146988391876
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|63: 61|RO|0h|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 71,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0549",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2584351599216461
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0550",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29791802167892456
  },
  {
    "content": "**Figure 36: Offset 0h: CAP – Controller Capabilities**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0551",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47249865531921387
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|0|Controller Ready With Media Support (CRWMS): If this bit is set<br>to ‘1’, then the controller supports the Controller Ready With Media<br>mode.<br>If this bit is cleared to ‘0’, then the controller does not support<br>Controller Ready With Media mode.<br>This bit shall be set to ‘1’ on controllers compliant with NVM Express<br>Base Specification, Revision 2.0 and later.|\n|1|Controller Ready Independent of Media Support (CRIMS): If this<br>bit is set to ‘1’, then the controller supports the Controller Ready<br>Independent of Media mode.<br>If this bit is cleared to ‘0’, then the controller does not support<br>Controller Ready Independent of Media mode.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 693,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0552",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8731511235237122
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|60:59|RO|Impl<br>Spec|Controller Ready Modes Supported (CRMS): This field indicates the ready<br>capabilities of the controller. Refer to sections 3.5.3 and 3.5.4 for more detail.<br>Bits Description<br>Controller Ready With Media Support (CRWMS): If this bit is set<br>to ‘1’, then the controller supports the Controller Ready With Media<br>mode.<br>0 If this bit is cleared to ‘0’, then the controller does not support<br>Controller Ready With Media mode.<br>This bit shall be set to ‘1’ on controllers compliant with NVM Express<br>Base Specification, Revision 2.0 and later.<br>Controller Ready Independent of Media Support (CRIMS): If this<br>bit is set to ‘1’, then the controller supports the Controller Ready<br>1 Independent of Media mode.<br>If this bit is cleared to ‘0’, then the controller does not support<br>Controller Ready Independent of Media mode.|\n|58|RO|Impl<br>Spec|NVM Subsystem Shutdown Supported (NSSS): This bit indicates whether the<br>controller supports the NVM Subsystem Shutdown feature defined in section<br>3.6.3 If the controller supports the NVM Subsystem Shutdown feature, then this<br>bit is set to ‘1’. If the controller does not support the NVM Subsystem Shutdown<br>feature, then this bit is cleared to ‘0’. If the NSSRS bit is cleared to ‘0’, then this<br>bit shall be cleared to ‘0’.|\n|57|RO|Impl<br>Spec|Controller Memory Buffer Supported (CMBS): If set to ‘1’, this bit indicates<br>that the controller supports the Controller Memory Buffer, and that addresses<br>supplied by the host are permitted to reference the Controller Memory Buffer only<br>if the host has enabled the Controller Memory Buffer’s controller memory space.<br>If the controller supports the Controller Memory Buffer, this bit shall be set to ‘1’.|\n|56|RO|Impl<br>Spec|Persistent Memory Region Supported (PMRS): This bit indicates whether the<br>Persistent Memory Region is supported. This bit is set to ‘1’ if the Persistent<br>Memory Region is supported. This bit is cleared to ‘0’ if the Persistent Memory<br>Region is not supported.|\n|55:52|RO|Impl<br>Spec|Memory Page Size Maximum (MPSMAX): This field indicates the maximum<br>host memory page size that the controller supports. The maximum memory page<br>size is (2 ^ (12 + MPSMAX)). The host shall not configure a memory page size<br>in CC.MPS that is larger than this value.<br>For Discovery controllers this field shall be cleared to 0h.|\n|51:48|RO|Impl<br>Spec|Memory Page Size Minimum (MPSMIN): This field indicates the minimum host<br>memory page size that the controller supports. The minimum memory page size<br>is (2 ^ (12 + MPSMIN)). The host shall not configure a memory page size in<br>CC.MPS that is smaller than this value.<br>For Discovery controllers this shall be cleared to 0h.|\n|47:46|RO|Impl<br>Spec|Controller Power Scope (CPS): This field indicates scope of controlling the<br>main power for this controller.<br>Value Power Scope<br>00b Not Reported<br>01b Controller scope<br>Domain scope (i.e., the NVM subsystem supports multiple domains<br>10b<br>(refer to section 3.2.4).<br>NVM subsystem scope (i.e., the NVM subsystem does not support<br>11b<br>multiple domains).<br>If the NSSS bit is set to ‘1’, then this field shall not be cleared to 00b.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3292,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0553",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3536326289176941
  },
  {
    "content": "|Value|Power Scope|\n|---|---|\n|00b|Not Reported|\n|01b|Controller scope|\n|10b|Domain scope (i.e., the NVM subsystem supports multiple domains<br>(refer to section 3.2.4).|\n|11b|NVM subsystem scope (i.e., the NVM subsystem does not support<br>multiple domains).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 260,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0554",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4517482817173004
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0555",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29791802167892456
  },
  {
    "content": "**Figure 36: Offset 0h: CAP – Controller Capabilities**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0556",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39183473587036133
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|45|RO|Impl<br>Spec|Boot Partition Support (BPS): This bit indicates whether the controller supports<br>Boot Partitions. If this bit is set to '1‘, the controller supports Boot Partitions. If this<br>bit is cleared to ‘0‘, the controller does not support Boot Partitions. Refer to<br>section 8.2.|\n|44:37|RO|Impl<br>Spec|Command Sets Supported (CSS): This field indicates the I/O Command Set(s)<br>that the controller supports.<br>For Discovery controllers, this field should have only Bit 0 set to 1.<br>Bit Definition<br>No I/O Command Set is supported (i.e., only the Admin Command Set<br>7 is supported).<br>This bit shall be set to ‘1’ if no I/O Command Set is supported.<br>Controller supports one or more I/O Command Sets and supports the<br>Identify I/O Command Set data structure (refer to section 5.17.2.21).<br>6 Controllers that support I/O Command Sets other than the NVM<br>Command Set shall set this bit to ‘1’. Controllers that only support the<br>NVM Command Set may set this bit to ‘1’.<br>5:1 Reserved<br>0 NVM Command Set or a Discovery controller|\n|36|RO|Impl<br>Spec|NVM Subsystem Reset Supported (NSSRS): This bit indicates whether the<br>controller supports the NVM Subsystem Reset feature defined in section 3.7.1.<br>This bit is set to '1' if the controller supports the NVM Subsystem Reset feature.<br>This bit is cleared to ‘0' if the controller does not support the NVM Subsystem<br>Reset feature.<br>For Discovery controllers, this field shall be cleared to 0h.|\n|35:32|RO|Impl<br>Spec|Doorbell Stride (DSTRD): Each Submission Queue and Completion Queue<br>Doorbell property is 32-bits in size. This property indicates the stride between<br>doorbell properties. The stride is specified as (2 ^ (2 + DSTRD)) in bytes. A value<br>of 0h indicates a stride of 4 bytes, where the doorbell properties are packed<br>without reserved space between each property. Refer to section 8.8.<br>For NVMe over Fabrics I/O controllers, this property shall be cleared to a fixed<br>value of 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2055,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0557",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5551642775535583
  },
  {
    "content": "|Bit|Definition|\n|---|---|\n|7|No I/O Command Set is supported (i.e., only the Admin Command Set<br>is supported).<br>This bit shall be set to ‘1’ if no I/O Command Set is supported.|\n|6|Controller supports one or more I/O Command Sets and supports the<br>Identify I/O Command Set data structure (refer to section 5.17.2.21).<br>Controllers that support I/O Command Sets other than the NVM<br>Command Set shall set this bit to ‘1’. Controllers that only support the<br>NVM Command Set may set this bit to ‘1’.|\n|5:1|Reserved|\n|0|NVM Command Set or a Discovery controller|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 570,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0558",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3119139075279236
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0559",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29791802167892456
  },
  {
    "content": "**Figure 36: Offset 0h: CAP – Controller Capabilities**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0560",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29677656292915344
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:24|RO|Impl<br>Spec|Timeout (TO): This is the worst-case time that host software should wait for<br>CSTS.RDY to transition from:<br>a) ‘0’ to ‘1’ after CC.EN transitions from ‘0’ to ‘1’; or<br>b) ‘1’ to ‘0’ after CC.EN transitions from ‘1’ to ‘0’.<br>This worst-case time may be experienced after events such as an abrupt<br>shutdown or activation of a new firmware image; typical times are expected to be<br>much shorter.<br>This field is in 500 millisecond units. The maximum value of this field is FFh,<br>which indicates a 127.5 second timeout.<br>If the Controller Ready Independent of Media Enable (CC.CRIME) bit is cleared<br>to ‘0’ and the worst-case time for CSTS.RDY to change state is due to enabling<br>the controller after CC.EN transitions from ‘0’ to ‘1’, then this field shall be set to:<br>a) the value in Controller Ready With Media Timeout (CRTO.CRWMT); or<br>b) FFh if CRTO.CRWMT is greater than FFh.<br>If the Controller Ready Independent of Media Enable (CC.CRIME) bit is set to ‘1’<br>and the worst-case time for CSTS.RDY to change state is due to enabling the<br>controller after CC.EN transitions from ‘0’ to ‘1’, then this field shall be set to:<br>a) the value in Controller Ready Independent of Media Timeout<br>(CRTO.CRIMT); or<br>b) FFh if CRTO.CRIMT is greater than FFh.<br>Controllers that support the CRTO register (refer to Figure 62) are able to indicate<br>larger timeouts for enabling the controller. Host software should use the value in<br>CRTO.CRWMT or CRTO.CRIMT depending on the controller ready mode<br>indicated by CC.CRIME to determine the worst-case timeout for CSTS.RDY to<br>transition from ‘0’ to ‘1’ after CC.EN transitions from ‘0’ to ‘1’. Host software that<br>is based on revisions earlier than NVM Express Base Specification, Revision 2.0<br>is not required to wait for more than 127.5 seconds for CSTS.RDY to transition.<br>Refer to sections 3.5.3 and 3.5.4 for more information.|\n|23:19|RO|0h|Reserved|\n|18:17|RO|Impl<br>Spec|Arbitration Mechanism Supported (AMS): This field is bit significant and<br>indicates the optional arbitration mechanisms supported by the controller. If a bit<br>is set to ‘1’, then the corresponding arbitration mechanism is supported by the<br>controller. Refer to section 3.4.4 for arbitration details.<br>Bit Definition<br>0 Weighted Round Robin with Urgent Priority Class<br>1 Vendor Specific<br>The round robin arbitration mechanism is not listed since all controllers shall<br>support this arbitration mechanism.<br>For Discovery controllers, this property shall be cleared to 0h.|\n|16|RO|Impl<br>Spec|Contiguous Queues Required (CQR): This bit is set to ‘1’ if the controller<br>requires that I/O Submission Queues and I/O Completion Queues are required<br>to be physically contiguous. This bit is cleared to ‘0’ if the controller supports I/O<br>Submission Queues and I/O Completion Queues that are not physically<br>contiguous. If this bit is set to ‘1’, then the Physically Contiguous bit (CDW11.PC)<br>in the Create I/O Submission Queue and Create I/O Completion Queue<br>commands shall be set to ‘1’.<br>For I/O controllers and Discovery controllers using a message-based transport,<br>this property shall be set to a value of 1h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3277,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0561",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40550875663757324
  },
  {
    "content": "|Bit|Definition|\n|---|---|\n|0|Weighted Round Robin with Urgent Priority Class|\n|1|Vendor Specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0562",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1492108255624771
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0563",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29791802167892456
  },
  {
    "content": "**Figure 36: Offset 0h: CAP – Controller Capabilities**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0564",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3050140142440796
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|15:00|RO|Impl<br>Spec|Maximum Queue Entries Supported (MQES): This field indicates the<br>maximum individual queue size that the controller supports. For NVMe over PCIe<br>implementations, this value applies to the I/O Submission Queues and I/O<br>Completion Queues that the host creates. For NVMe over Fabrics<br>implementations, this value applies to only the I/O Submission Queues that the<br>host creates. This is a 0’s based value. The minimum value is 1h, indicating two<br>entries.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 538,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0565",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21670305728912354
  },
  {
    "content": "**3.1.3.2** **Offset 8h: VS – Version**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0566",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40256357192993164
  },
  {
    "content": "This property indicates the major, minor, and tertiary version of the NVM Express Base Specification that\nthe controller implementation supports. Valid versions of the specification are: 1.0, 1.1, 1.2, 1.2.1, 1.3, 1.4,\nand 2.0.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 227,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0567",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49647217988967896
  },
  {
    "content": "**3.1.3.2.1** **VS Value for 1.0 Compliant Controllers**\n\n**Figure 37: VS Value for 1.0 Compliant Controllers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0568",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27409952878952026
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:16|RO|1h|Major Version Number (MJR): Indicates the major version is “1”.|\n|15:08|RO|0h|Minor Version Number (MNR): Indicates the minor version is “0”.|\n|07:00|RO|0h|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 226,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0569",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22596940398216248
  },
  {
    "content": "**3.1.3.2.2** **VS Value for 1.1 Compliant Controllers**\n\n**Figure 38: VS Value for 1.1 Compliant Controllers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0570",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2541674077510834
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:16|RO|1h|Major Version Number (MJR): Indicates the major version is “1”|\n|15:08|RO|1h|Minor Version Number (MNR): Indicates the minor version is “1”.|\n|07:00|RO|0h|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0571",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21839140355587006
  },
  {
    "content": "**3.1.3.2.3** **VS Value for 1.2 Compliant Controllers**\n\n**Figure 39: VS Value for 1.2 Compliant Controllers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0572",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25860270857810974
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:16|RO|1h|Major Version Number (MJR): Indicates the major version is “1”.|\n|15:08|RO|2h|Minor Version Number (MNR): Indicates the minor version is “2”.|\n|07:00|RO|0h|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 226,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0573",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23966915905475616
  },
  {
    "content": "**3.1.3.2.4** **VS Value for 1.2.1 Compliant Controllers**\n\n**Figure 40: VS Value for 1.2.1 Compliant Controllers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 115,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0574",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2464667707681656
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:16|RO|1h|Major Version Number (MJR): Indicates the major version is “1”.|\n|15:08|RO|2h|Minor Version Number (MNR): Indicates the minor version is “2”.|\n|07:00|RO|1h|Tertiary Version Number (TER): Indicates the tertiary version is “1”.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 287,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0575",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4092022776603699
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0576",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2798860967159271
  },
  {
    "content": "**3.1.3.2.5** **VS Value for 1.3 Compliant Controllers**\n\n**Figure 41: VS Value for 1.3 Compliant Controllers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0577",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2310308814048767
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:16|RO|1h|Major Version Number (MJR): Indicates the major version is “1”.|\n|15:08|RO|3h|Minor Version Number (MNR): Indicates the minor version is “3”.|\n|07:00|RO|0h|Tertiary Version Number (TER): Indicates the tertiary version is “0”.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 287,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0578",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21557219326496124
  },
  {
    "content": "**3.1.3.2.6** **VS Value for 1.4 Compliant Controllers**\n\n**Figure 42: VS Value for 1.4 Compliant Controllers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0579",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21959762275218964
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:16|RO|1h|Major Version Number (MJR): Indicates the major version is “1”.|\n|15:08|RO|4h|Minor Version Number (MNR): Indicates the minor version is “4”.|\n|07:00|RO|0h|Tertiary Version Number (TER): Indicates the tertiary version is “0”.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 287,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0580",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22658050060272217
  },
  {
    "content": "**3.1.3.2.7** **VS Value for 2.0 Compliant Controllers**\n\n**Figure 43: VS Value for 2.0 Compliant Controllers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0581",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27055227756500244
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:16|RO|2h|Major Version Number (MJR): Indicates the major version is “2”.|\n|15:08|RO|0h|Minor Version Number (MNR): Indicates the minor version is “0”.|\n|07:00|RO|0h|Tertiary Version Number (TER): Indicates the tertiary version is “0”.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 287,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0582",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2778282165527344
  },
  {
    "content": "**3.1.3.3** **Offset Ch: INTMS – Interrupt Mask Set**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0583",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45072317123413086
  },
  {
    "content": "This property is used to mask interrupts when using pin-based interrupts, single message MSI, or multiple\nmessage MSI. When using MSI-X, the interrupt mask table defined as part of MSI-X should be used to\nmask interrupts. Host software shall not access this property when configured for MSI-X; any accesses\nwhen configured for MSI-X is undefined. For interrupt behavior requirements, refer to the Interrupts section\nof the NVMe over PCIe Transport Specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 462,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0584",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4523584246635437
  },
  {
    "content": "**Figure 44: Offset Ch: INTMS – Interrupt Mask Set**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0585",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5536349415779114
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:00|RWS|0h|Interrupt Vector Mask Set (IVMS): This field is bit significant. If a ‘1’ is written to a<br>bit, then the corresponding interrupt vector is masked from generating an interrupt<br>or reporting a pending interrupt in the MSI Capability Structure. Writing a ‘0’ to a bit<br>has no effect. When read, this field returns the current interrupt mask value within<br>the controller (not the value of this property). If a bit has a value of a ‘1’, then the<br>corresponding interrupt vector is masked. If a bit has a value of ‘0’, then the<br>corresponding interrupt vector is not masked.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 643,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0586",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4523337781429291
  },
  {
    "content": "**3.1.3.4** **Offset 10h: INTMC – Interrupt Mask Clear**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0587",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45272165536880493
  },
  {
    "content": "This property is used to unmask interrupts when using pin-based interrupts, single message MSI, or multiple\nmessage MSI. When using MSI-X, the interrupt mask table defined as part of MSI-X should be used to\nunmask interrupts. Host software shall not access this property when configured for MSI-X; any accesses",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 310,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0588",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1694786101579666
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0589",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33110684156417847
  },
  {
    "content": "when configured for MSI-X is undefined. For interrupt behavior requirements, refer to the Interrupts section\nof the NVMe over PCIe Transport Specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0590",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31453385949134827
  },
  {
    "content": "**Figure 45: Offset 10h: INTMC – Interrupt Mask Clear**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0591",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5585798621177673
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:00|RWC|0h|Interrupt Vector Mask Clear (IVMC): This field is bit significant. If a ‘1’ is written to<br>a bit, then the corresponding interrupt vector is unmasked. Writing a ‘0’ to a bit has<br>no effect. When read, this field returns the current interrupt mask value within the<br>controller (not the value of this property). If a bit has a value of a ‘1’, then the<br>corresponding interrupt vector is masked. If a bit has a value of ‘0’, then the<br>corresponding interrupt vector is not masked.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 550,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0592",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17750057578086853
  },
  {
    "content": "**3.1.3.5** **Offset 14h: CC – Controller Configuration**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0593",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4284920394420624
  },
  {
    "content": "This property modifies settings for the controller. Host software shall set the Arbitration Mechanism Selected\n(CC.AMS), the Memory Page Size (CC.MPS), and the I/O Command Set Selected (CC.CSS) to valid values\nprior to enabling the controller by setting CC.EN to ‘1’. Attempting to create an I/O queue before initializing\nthe I/O Completion Queue Entry Size (CC.IOCQES) and the I/O Submission Queue Entry Size\n(CC.IOSQES) should cause a controller to abort a Create I/O Completion Queue command or a Create I/O\nSubmission Queue command with a status code of Invalid Queue Size.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 577,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0594",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41373881697654724
  },
  {
    "content": "**Figure 46: Offset 14h: CC – Controller Configuration**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0595",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4526558816432953
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|0b|Enabling the controller (i.e., CC.EN transitions from ‘0’ to ‘1’) when<br>this bit is cleared to ‘0’ enables Controller Ready With Media mode.|\n|1b|Enabling the controller when this bit is set to ‘1’ enables Controller<br>Ready Independent of Media mode.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 288,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0596",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7475733160972595
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:25|RO|0h|Reserved|\n|24|RW/RO|0b|Controller Ready Independent of Media Enable (CRIME): This field controls<br>the controller ready mode. The controller ready mode is determined by the state<br>of this bit at the time the controller is enabled by transitioning the CC.EN bit from<br>‘0’ to ‘1’.<br>If the CAP.CRMS field is set to 11b, then this bit is RW. If the CAP.CRMS field<br>is not set to 11b, then this bit is RO and shall be cleared to ‘0’. Refer to sections<br>3.5.3 and 3.5.4 for more detail.<br>Changing the value of this field may cause a change in the time reported in the<br>CAP.TO field. Refer to the definition of CAP.TO for more details.<br>Value Definition<br>Enabling the controller (i.e., CC.EN transitions from ‘0’ to ‘1’) when<br>0b<br>this bit is cleared to ‘0’ enables Controller Ready With Media mode.<br>Enabling the controller when this bit is set to ‘1’ enables Controller<br>1b<br>Ready Independent of Media mode.|\n|23:20|RW/RO|0h|I/O Completion Queue Entry Size (IOCQES): This field defines the I/O<br>completion queue entry size that is used for the selected I/O Command Set(s).<br>The required and maximum values for this field are specified in the CQES field<br>in the Identify Controller data structure in Figure 275 for each I/O Command<br>Set. The value is in bytes and is specified as a power of two (2^n).<br>If any I/O Completion Queues exist, then write operations that change the value<br>in this field produce undefined results.<br>If the controller does not support I/O queues, then this field shall be read-only<br>with a value of 0h.<br>For Discovery controllers, this property is reserved.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1686,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0597",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2628621459007263
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0598",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21582470834255219
  },
  {
    "content": "**Figure 46: Offset 14h: CC – Controller Configuration**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0599",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21178129315376282
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|19:16|RW/RO|0h|I/O Submission Queue Entry Size (IOSQES): This field defines the I/O<br>submission queue entry size that is used for the selected I/O Command Set(s).<br>The required and maximum values for this field are specified in the SQES field<br>in the Identify Controller data structure in Figure 275 for each I/O Command<br>Set. The value is in bytes and is specified as a power of two (2^n).<br>If any I/O Submission Queues exist, then write operations that change the value<br>in this field produce undefined results.<br>If the controller does not support I/O queues, then this field shall be read-only<br>with a value of 0h.<br>For Discovery controllers, this property is reserved.|\n|15:14|RW|00b|Shutdown Notification (SHN): This field is used to initiate a controller<br>shutdown when a power down condition is expected. For a normal controller<br>shutdown, it is expected that the controller is given time to process the controller<br>shutdown. For an abrupt shutdown, the host may not wait for the controller<br>shutdown to complete before power is lost.<br>The controller shutdown notification values are defined as:<br>Value Definition<br>00b No notification; no effect<br>01b Normal shutdown notification<br>10b Abrupt shutdown notification<br>11b Reserved<br>This field should be written by host software prior to any power down condition<br>and prior to any change of the PCI power management state. It is recommended<br>that this field also be written prior to a warm reset (refer to the PCI Express<br>specification). To determine when the controller shutdown processing is<br>complete, refer to CSTS.ST and CSTS.SHST. Refer to sections 3.6.1 and 3.6.2<br>for additional shutdown processing details.<br>Other fields in this property (including the EN bit) may be modified as part of<br>updating this field to 01b or 10b to initiate a controller shutdown. If the EN bit is<br>cleared to ‘0’ such that the EN bit transitions from ‘1’ to ‘0’, then both a Controller<br>Reset and a controller shutdown occur.<br>If an NVM Subsystem Shutdown is in progress or is being reported as<br>completed (i.e., CSTS.ST is set to ‘1’, and CSTS.SHST is set to 01b or 10b),<br>then writes to this field modify the field value but have no effect. Refer to section<br>3.6.3 for details.|\n|13:11|RW|000b|Arbitration Mechanism Selected (AMS): This field selects the arbitration<br>mechanism to be used. This value shall only be changed when CC.EN is<br>cleared to ‘0’. Host software shall only set this field to supported arbitration<br>mechanisms indicated in CAP.AMS. If this field is set to an unsupported value,<br>the behavior is undefined.<br>For Discovery controllers, this value shall be cleared to 0h.<br>Value Definition<br>000b Round Robin<br>001b Weighted Round Robin with Urgent Priority Class<br>010b to 110b Reserved<br>111b Vendor Specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2903,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0600",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3623524606227875
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|000b|Round Robin|\n|001b|Weighted Round Robin with Urgent Priority Class|\n|010b to 110b|Reserved|\n|111b|Vendor Specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 149,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0601",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4815344214439392
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|No notification; no effect|\n|01b|Normal shutdown notification|\n|10b|Abrupt shutdown notification|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 146,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0602",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24056151509284973
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0603",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21582470834255219
  },
  {
    "content": "**Figure 46: Offset 14h: CC – Controller Configuration**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0604",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21139676868915558
  },
  {
    "content": "|Value|Definition|Col3|Col4|Col5|\n|---|---|---|---|---|\n|000b||CAP.CSS<br>bit 0|Description||\n|000b||1|NVM Command Set|NVM Command Set|\n|000b||0|Reserved|Reserved|\n|001b to 101b|Reserved|Reserved|Reserved|Reserved|\n|110b||CAP.CSS<br>bit 6|Description||\n|110b||1|All Supported I/O Command Sets<br>The I/O Command Sets that are<br>supported are reported in the Identify I/O<br>Command Set data structure (refer to<br>section 5.17.2.21).|All Supported I/O Command Sets<br>The I/O Command Sets that are<br>supported are reported in the Identify I/O<br>Command Set data structure (refer to<br>section 5.17.2.21).|\n|110b||0|Reserved|Reserved|\n|111b||CAP.CSS<br>bit 7|Description||\n|111b||1|Admin Command Set only<br>I/O Command Set and I/O Command<br>Set specific Admin commands are not<br>supported. Any I/O Command Set<br>specific Admin command submitted on<br>the Admin Submission Queue is aborted<br>with a status code of Invalid Command<br>Opcode.|Admin Command Set only<br>I/O Command Set and I/O Command<br>Set specific Admin commands are not<br>supported. Any I/O Command Set<br>specific Admin command submitted on<br>the Admin Submission Queue is aborted<br>with a status code of Invalid Command<br>Opcode.|\n|111b||0|Reserved|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1238,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0605",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4989403784275055
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|10:07|RW|0h|Memory Page Size (MPS): This field indicates the host memory page size. The<br>memory page size is (2 ^ (12 + MPS)). Thus, the minimum host memory page<br>size is 4 KiB and the maximum host memory page size is 128 MiB. The value<br>set by host software shall be a supported value as indicated by the<br>CAP.MPSMAX and CAP.MPSMIN fields. This field describes the value used for<br>PRP entry size. This field shall only be modified when CC.EN is cleared to ‘0’.<br>For Discovery controllers this property shall be cleared to 0h.|\n|06:04|RW|000b|I/O Command Set Selected (CSS): This field specifies the I/O Command Set<br>or Sets that are selected. This field shall only be changed when the controller is<br>disabled (i.e., CC.EN is cleared to ‘0’). The I/O Command Set or Sets that are<br>selected shall be used for all I/O Submission Queues.<br>Value Definition<br>CAP.CSS<br>Description<br>bit 0<br>000b<br>1 NVM Command Set<br>0 Reserved<br>001b to 101b Reserved<br>CAP.CSS<br>Description<br>bit 6<br>All Supported I/O Command Sets<br>110b The I/O Command Sets that are<br>1 supported are reported in the Identify I/O<br>Command Set data structure (refer to<br>section 5.17.2.21).<br>0 Reserved<br>CAP.CSS<br>Description<br>bit 7<br>Admin Command Set only<br>I/O Command Set and I/O Command<br>Set specific Admin commands are not<br>111b 1 supported. Any I/O Command Set<br>specific Admin command submitted on<br>the Admin Submission Queue is aborted<br>with a status code of Invalid Command<br>Opcode.<br>0 Reserved<br>For Discovery controllers, this property shall be cleared to 000b.|\n|03:01|RO|000b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1674,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0606",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36767974495887756
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0607",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21582470834255219
  },
  {
    "content": "**Figure 46: Offset 14h: CC – Controller Configuration**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0608",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3316902220249176
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|00|RW|0b|Enable (EN): When set to ‘1’, then the controller shall process commands.<br>When cleared to ‘0’, then the controller shall not process commands nor post<br>completion queue entries to Completion Queues. When this bit transitions from<br>‘1’ to ‘0’, the controller is reset (i.e., a Controller Reset). That reset deletes all<br>I/O Submission Queues and I/O Completion Queues, resets the Admin<br>Submission Queue and Completion Queue, and brings the hardware to an idle<br>state. That reset does not affect transport specific state (e.g. PCI Express<br>registers including MMIO MSI-X registers), nor the Admin Queue properties<br>(AQA, ASQ, or ACQ). All other controller properties defined in this section and<br>internal controller state (e.g., Feature values defined in section 5.27.1 that are<br>not persistent across power states) are reset to their default values. The<br>controller shall ensure that there is no data loss for commands that have had<br>corresponding completion queue entries posted to an I/O Completion Queue<br>prior to that Controller Reset. Refer to section 3.6.<br>When this bit is cleared to ‘0’, the CSTS.RDY bit is cleared to ‘0’ by the controller<br>once the controller is ready to be re-enabled. When this bit is set to ‘1’, the<br>controller sets CSTS.RDY to ‘1’ when it is ready to process commands.<br>CSTS.RDY may be set to ‘1’ before namespace(s) are ready to be accessed.<br>Setting this bit from a ‘0’ to a ‘1’ when CSTS.RDY is a ‘1’ or clearing this bit from<br>a '1' to a '0' when CSTS.RDY is cleared to '0' has undefined results. The Admin<br>Queue properties (AQA, ASQ, and ACQ) are only allowed to be modified when<br>this bit is cleared to ‘0’.<br>If an NVM Subsystem Shutdown is in progress or is completed (i.e., CSTS.ST<br>is set to ‘1’, and CSTS.SHST is set to 01b or 10b), then writes to this field modify<br>the field value but have no effect. Refer to section 3.6.3 for details.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1989,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0609",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35280489921569824
  },
  {
    "content": "**3.1.3.6** **Offset 1Ch: CSTS – Controller Status**\n\n**Figure 47: Offset 1Ch: CSTS – Controller Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 105,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0610",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4494493305683136
  },
  {
    "content": "|Bits|Type|Reset1|Description|\n|---|---|---|---|\n|31:07|RO|0h|Reserved|\n|06|RO|Impl<br>Spec|Shutdown Type (ST): When CSTS.SHST is set to a non-zero value, then this bit<br>indicates the type of shutdown reported by CSTS.SHST. If this bit is set to ‘1’, then<br>CSTS.SHST is reporting the state of an NVM Subsystem Shutdown. If this bit is<br>cleared to ‘0’, then CSTS.SHST is reporting the state of a controller shutdown.<br>If CSTS.SHST is cleared to 00b, then this bit is ignored.|\n|05|RO|0b|Processing Paused (PP): This bit indicates whether the controller is processing<br>commands. If this bit is cleared to ‘0’, then the controller is processing commands<br>normally. If this bit is set to ‘1’, then the controller has temporarily stopped processing<br>commands in order to handle an event (e.g., firmware activation). This bit is only valid<br>when CC.EN is set to ‘1’.|\n|04|RWC|HwInit|NVM Subsystem Reset Occurred (NSSRO): The initial value of this bit is set to '1' if<br>the last occurrence of an NVM Subsystem Reset (refer to section 3.7.1) occurred while<br>power was applied to the domain. The initial value of this bit is cleared to '0' following<br>an NVM Subsystem Reset due to application of power to the domain. This bit is only<br>valid if the controller supports the NVM Subsystem Reset feature defined in section<br>3.7.1 as indicated by CAP.NSSRS set to ‘1’.<br>The reset value of this bit is cleared to '0' if an NVM Subsystem Reset causes<br>activation of a new firmware image in the domain.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1516,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0611",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36851584911346436
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0612",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21450690925121307
  },
  {
    "content": "**Figure 47: Offset 1Ch: CSTS – Controller Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0613",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24227569997310638
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Normal operation (no shutdown has been requested)|\n|01b|Shutdown processing occurring|\n|10b|Shutdown processing complete|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 170,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0614",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6199615001678467
  },
  {
    "content": "|Bits|Type|Reset1|Description|\n|---|---|---|---|\n|03:02|RO|00b|Shutdown Status (SHST): This field indicates the status of shutdown processing that<br>is initiated by the host setting the CC.SHN field, the host setting the NSSC property,<br>or a Management Endpoint has processed an NVMe-MI Shutdown command (refer to<br>the NVM Express Management Interface specification).<br>The shutdown status values are defined as:<br>Value Definition<br>00b Normal operation (no shutdown has been requested)<br>01b Shutdown processing occurring<br>10b Shutdown processing complete<br>11b Reserved<br>If this field is set to 01b, then:<br>• an NVM Subsystem Reset aborts a controller shutdown and an NVM<br>Subsystem Shutdown; and<br>• any other type of Controller Level Reset:<br>o may or may not abort a controller shutdown; and<br>o shall not abort an NVM Subsystem Shutdown.<br>If this field is set to 01b when a Controller Level Reset is initiated and the shutdown is<br>not aborted, then this field transitions to 00b on the reset and then to 01b to indicate<br>the shutdown is still in progress and host software may or may not observe this<br>transition.<br>If CSTS.ST is cleared to ‘0’ and this field is set to 10b, then<br>• If CC.EN is set to ‘1’, to start executing commands on the controller after a<br>shutdown operation (CSTS.SHST set to 10b), a Controller Reset (CC.EN<br>cleared to ‘0’) is required. If host software submits commands to the controller<br>without issuing a Controller Reset, the behavior is undefined; and<br>• If CC.EN is cleared to ‘0’, to start executing commands on the controller:<br>o a Controller Level Reset is required; or<br>o CC.EN is required to be set to ‘1’ and CC.SHN is required to be<br>cleared to 00b with the same write to the CC property.<br>If CSTS.ST is set to ‘1’ and this field is set to 10b, then an NVM Subsystem Reset is<br>required to start executing commands.<br>Refer to section 3.6.3 on the reset behavior of this field when CAP.CPS is set to 10b<br>or 11b.|\n|01|RO|HwInit|Controller Fatal Status (CFS): This bit is set to ’1’ when a fatal controller error<br>occurred that could not be communicated in the appropriate Completion Queue. This<br>bit is cleared to ‘0’ when a fatal controller error has not occurred. Refer to section 9.5.<br>The reset value of this bit is set to '1' when a fatal controller error is detected during<br>controller initialization.|\n|00|RO|0b|Ready (RDY): This bit is set to ‘1’ when the controller is ready to process submission<br>queue entries after CC.EN is set to ‘1’. This bit shall be cleared to ‘0’ when CC.EN is<br>cleared to ‘0’ once the controller is ready to be re-enabled. Commands should not be<br>submitted to the controller until this bit is set to ‘1’ after the CC.EN bit is set to ‘1’.<br>Failure to follow this recommendation produces undefined results. Refer to the<br>definition of CAP.TO, sections 3.5.3, and 3.5.4 for timing information related to this<br>field.<br>If an NVM Subsystem Shutdown has completed that affects this controller (i.e.,<br>CSTS.ST is set to ‘1’ and CSTS.SHST is set to 10b), then an NVM Subsystem Reset<br>is required before this bit is allowed to be set to ‘1’. Refer to section 3.6.3.|\n|NOTE:<br>1. During a Controller Level Reset, the field values may transition to values other than the reset value prior to<br>indicating the reset value.|NOTE:<br>1. During a Controller Level Reset, the field values may transition to values other than the reset value prior to<br>indicating the reset value.|NOTE:<br>1. During a Controller Level Reset, the field values may transition to values other than the reset value prior to<br>indicating the reset value.|NOTE:<br>1. During a Controller Level Reset, the field values may transition to values other than the reset value prior to<br>indicating the reset value.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3833,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0615",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49788138270378113
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0616",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41199636459350586
  },
  {
    "content": "**3.1.3.7** **Offset 20h: NSSR – NVM Subsystem Reset**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0617",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5502712726593018
  },
  {
    "content": "This optional property provides host software with the capability to initiate an NVM Subsystem Reset.\nSupport for this property is indicated by the state of the NVM Subsystem Reset Supported (CAP.NSSRS)\nfield. If the property is not supported, then the address range occupied by the property is reserved. Refer\nto section 3.7.1.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 328,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0618",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5320369005203247
  },
  {
    "content": "**Figure 48: Offset 20h: NSSR – NVM Subsystem Reset**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0619",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6711230278015137
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:00|RW|0h|NVM Subsystem Reset Control (NSSRC): A write of the value 4E564D65h (\"NVMe\")<br>to this field initiates an NVM Subsystem Reset. A write of any other value has no<br>functional effect on the operation of the NVM subsystem. This field shall return the<br>value 0h when read.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 334,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0620",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2592242658138275
  },
  {
    "content": "**3.1.3.8** **Offset 24h: AQA – Admin Queue Attributes**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0621",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5684754252433777
  },
  {
    "content": "This property defines the attributes for the Admin Submission Queue and Admin Completion Queue. The\nQueue Identifier for the Admin Submission Queue and Admin Completion Queue is 0h. The Admin\nSubmission Queue’s priority is determined by the arbitration mechanism selected, refer to section 3.4.4.\nThe Admin Submission Queue and Admin Completion Queue are required to be in physically contiguous",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 394,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0622",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19078697264194489
  },
  {
    "content": "Note: It is recommended that UEFI be used during boot operations. In low memory environments (like\nOption ROMs in legacy BIOS environments) there may not be sufficient available memory to allocate the\nnecessary Submission and Completion Queues. In these types of conditions, low memory operation of the\ncontroller is vendor specific.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 333,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0623",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11298612505197525
  },
  {
    "content": "**Figure 49: Offset 24h: AQA – Admin Queue Attributes**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0624",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49311521649360657
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:28|RO|0h|Reserved|\n|27:16|RW|0h|Admin Completion Queue Size (ACQS): Defines the size of the Admin Completion<br>Queue in entries. Refer to section 3.3.3.2.2. Enabling a controller while this field is<br>cleared to 0h produces undefined results. The minimum size of the Admin Completion<br>Queue is two entries. The maximum size of the Admin Completion Queue is 4,096<br>entries. This is a 0’s based value.|\n|15:12|RO|0h|Reserved|\n|11:00|RW|0h|Admin Submission Queue Size (ASQS): Defines the size of the Admin Submission<br>Queue in entries. Refer to section 3.3.3.2.2. Enabling a controller while this field is<br>cleared to 0h produces undefined results. The minimum size of the Admin Submission<br>Queue is two entries. The maximum size of the Admin Submission Queue is 4,096<br>entries. This is a 0’s based value.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 869,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0625",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49252262711524963
  },
  {
    "content": "**3.1.3.9** **Offset 28h: ASQ – Admin Submission Queue Base Address**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0626",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.588411271572113
  },
  {
    "content": "This property defines the base memory address of the Admin Submission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0627",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5980298519134521
  },
  {
    "content": "**Figure 50: Offset 28h: ASQ – Admin Submission Queue Base Address**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0628",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6076756715774536
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|63:12|RW|Impl<br>Spec|Admin Submission Queue Base (ASQB): This field specifies the 52 most significant<br>bits of the 64-bit physical address for the Admin Submission Queue. This address shall<br>be memory page aligned (based on the value in CC.MPS). All Admin commands,<br>including creation of I/O Submission Queues and I/O Completions Queues shall be<br>submitted to this queue. For the definition of Submission Queues, refer to section 4.1.|\n|11:00|RO|0h|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 517,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0629",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3510836660861969
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0630",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22092533111572266
  },
  {
    "content": "**3.1.3.10 Offset 30h: ACQ – Admin Completion Queue Base Address**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0631",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6228896975517273
  },
  {
    "content": "This property defines the base memory address of the Admin Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0632",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6254737973213196
  },
  {
    "content": "**Figure 51: Offset 30h: ACQ – Admin Completion Queue Base Address**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0633",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6502202749252319
  },
  {
    "content": "|Bit|Type|Reset|Description|\n|---|---|---|---|\n|63:12|RW|Impl<br>Spec|Admin Completion Queue Base (ACQB): This field specifies the 52 most significant<br>bits of the 64-bit physical address for the Admin Completion Queue. This address shall<br>be memory page aligned (based on the value in CC.MPS). All completion queue entries<br>for the commands submitted to the Admin Submission Queue shall be posted to this<br>Completion Queue. This queue is always associated with interrupt vector 0. For the<br>definition of Completion Queues, refer to section 4.1.|\n|11:00|RO|0h|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 579,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0634",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.358693927526474
  },
  {
    "content": "**3.1.3.11 Offset 38h: CMBLOC – Controller Memory Buffer Location**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0635",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.553884744644165
  },
  {
    "content": "This optional property defines the location of the Controller Memory Buffer (refer to section 8.1). If the\ncontroller does not support the Controller Memory Buffer (CAP.CMBS), this property is reserved. If the\ncontroller supports the Controller Memory Buffer and CMBMSC.CRE is cleared to ‘0’, this property shall be\ncleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 330,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0636",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5675275325775146
  },
  {
    "content": "**Figure 52: Offset 38h: CMBLOC – Controller Memory Buffer Location**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0637",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6467397212982178
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:12|RO|Impl<br>Spec|Offset (OFST): Indicates the offset of the Controller Memory Buffer in multiples of the<br>Size Unit specified in CMBSZ.|\n|11:09|RO|000b|Reserved|\n|08|RO|Impl<br>Spec|CMB Queue Dword Alignment (CQDA): If this bit is set to ‘1’, CDW11.PC is set to ‘1’;<br>and the address pointer specifies Controller Memory Buffer, then the address pointer in<br>a Create I/O Submission Queue command (refer to Figure 159) or a Create I/O<br>Completion Queue command (refer to Figure 155) shall be Dword aligned.<br>If this bit is cleared to ‘0’, then the I/O Submission Queues and I/O Completion Queues<br>contained in the Controller Memory Buffer are aligned as defined by the PRP1 field of a<br>Create I/O Submission Queue command (refer to Figure 159) or a Create I/O Completion<br>Queue command (refer to Figure 155).|\n|07|RO|Impl<br>Spec|CMB Data Metadata Mixed Memory Support (CDMMMS): If this bit is set to ‘1’, then<br>the restriction on data and metadata use of Controller Buffer Memory by a command as<br>defined in section 8.5 is not enforced. If this bit is cleared to ‘0’, then the restriction on<br>data and metadata use of Controller Buffer Memory by a command as defined in section<br>8.5 is enforced.|\n|06|RO|Impl<br>Spec|CMB Data Pointer and Command Independent Locations Support (CDPCILS): If this<br>bit is set to ‘1’, then the restriction that the PRP Lists and SGLs shall not be located in<br>the Controller Buffer Memory if the command that they are associated with is not located<br>in the Controller Buffer Memory is not enforced (refer to section 8.5). If this bit is cleared<br>to ‘0’, then that restriction is enforced.|\n|05|RO|Impl<br>Spec|CMB Data Pointer Mixed Locations Support (CDPMLS): If this bit is set to ‘1’, then<br>the restriction that for a particular PRP List or SGL associated with a single command,<br>all memory that is associated with that particular PRP List or SGL shall reside in either<br>the Controller Memory Buffer or outside the Controller Memory Buffer, is not enforced<br>(refer to section 8.5). If this bit is cleared to ‘0’, then that restriction is enforced.|\n|04|RO|Impl<br>Spec|CMB Queue Physically Discontiguous Support (CQPDS): If this bit is set to ‘1’, then<br>the restriction that for all queues in the Controller Memory Buffer, the queue shall be<br>physically contiguous, is not enforced (refer to section 8.5). If this bit is cleared to ‘0’,<br>then that restriction is enforced.|\n|03|RO|Impl<br>Spec|CMB Queue Mixed Memory Support (CQMMS): If this bit is set to ‘1’, then for a<br>particular queue placed in the Controller Memory Buffer, the restriction that all memory<br>associated with that queue shall reside in the Controller Memory Buffer is not enforced<br>(refer to section 8.5). If this bit is cleared to ‘0’, then that requirement is enforced.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2879,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0638",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30377069115638733
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0639",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18746371567249298
  },
  {
    "content": "**Figure 52: Offset 38h: CMBLOC – Controller Memory Buffer Location**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0640",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4265648126602173
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|02:00|RO|Impl<br>Spec|Base Indicator Register (BIR): Indicates the Base Address Register (BAR) that<br>contains the Controller Memory Buffer. For a 64-bit BAR, the BAR for the least significant<br>32-bits of the address is specified. Values 000b, 010b, 011b, 100b, and 101b are valid.<br>The address specified by the BAR shall be 4 KiB aligned.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 394,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0641",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4534764587879181
  },
  {
    "content": "**3.1.3.12 Offset 3Ch: CMBSZ – Controller Memory Buffer Size**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0642",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5514258146286011
  },
  {
    "content": "This optional property defines the size of the Controller Memory Buffer (refer to section 8.1). If the controller\ndoes not support the Controller Memory Buffer feature or if the controller supports the Controller Memory\nBuffer (CAP.CMBS) and CMBMSC.CRE is cleared to ‘0’, then this property shall be cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 314,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0643",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5633435845375061
  },
  {
    "content": "**Figure 53: Offset 3Ch: CMBSZ – Controller Memory Buffer Size**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0644",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34135958552360535
  },
  {
    "content": "|Value|Granularity|\n|---|---|\n|0h|4 KiB|\n|1h|64 KiB|\n|2h|1 MiB|\n|3h|16 MiB|\n|4h|256 MiB|\n|5h|4 GiB|\n|6h|64 GiB|\n|7h to Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 131,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0645",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5534652471542358
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:12|RO|Impl<br>Spec|Size (SZ): Indicates the size of the Controller Memory Buffer available for use by the<br>host. The size is in multiples of the Size Unit. If the Offset + Size exceeds the length of<br>the indicated BAR, the size available to the host is limited by the length of the BAR.|\n|11:08|RO|Impl<br>Spec|Size Units (SZU): Indicates the granularity of the Size field.<br>Value Granularity<br>0h 4 KiB<br>1h 64 KiB<br>2h 1 MiB<br>3h 16 MiB<br>4h 256 MiB<br>5h 4 GiB<br>6h 64 GiB<br>7h to Fh Reserved|\n|07:05|RO|000b|Reserved|\n|04|RO|Impl<br>Spec|Write Data Support (WDS): If this bit is set to ‘1’, then the controller supports data and<br>metadata in the Controller Memory Buffer for commands that transfer data from the host<br>to the controller (e.g., Write). If this bit is cleared to ‘0’, then data and metadata for<br>commands that transfer data from the host to the controller shall not be transferred to<br>the Controller Memory Buffer.|\n|03|RO|Impl<br>Spec|Read Data Support (RDS): If this bit is set to ‘1’, then the controller supports data and<br>metadata in the Controller Memory Buffer for commands that transfer data from the<br>controller to the host (e.g., Read). If this bit is cleared to ‘0’, then data and metadata for<br>commands that transfer data from the controller to the host shall not be transferred from<br>the Controller Memory Buffer.|\n|02|RO|Impl<br>Spec|PRP SGL List Support (LISTS): If this bit is set to ‘1’, then the controller supports PRP<br>Lists in the Controller Memory Buffer. If this bit is set to ‘1’ and SGLs are supported by<br>the controller, then the controller supports Scatter Gather Lists in the Controller Memory<br>Buffer. If this bit is set to ‘1’, then the Submission Queue Support bit shall be set to ‘1’. If<br>this bit is cleared to ‘0’, then PRP Lists and SGLs shall not be placed in the Controller<br>Memory Buffer.|\n|01|RO|Impl<br>Spec|Completion Queue Support (CQS): If this bit is set to ‘1’, then the controller supports<br>Admin and I/O Completion Queues in the Controller Memory Buffer. If this bit is cleared<br>to ‘0’, then Completion Queues shall not be placed in the Controller Memory Buffer.|\n|00|RO|Impl<br>Spec|Submission Queue Support (SQS): If this bit is set to ‘1’, then the controller supports<br>Admin and I/O Submission Queues in the Controller Memory Buffer. If this bit is cleared<br>to ‘0’, then Submission Queues shall not be placed in the Controller Memory Buffer.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2510,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0646",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21452684700489044
  },
  {
    "content": "**3.1.3.13 Offset 40h: BPINFO – Boot Partition Information**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0647",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4160667955875397
  },
  {
    "content": "This optional property defines the characteristics of Boot Partitions (refer to section 8.2). If the controller\ndoes not support the Boot Partitions feature, then this property shall be cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 200,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0648",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1589883416891098
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0649",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15685221552848816
  },
  {
    "content": "**Figure 54: Offset 40h: BPINFO – Boot Partition Information**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0650",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5471302270889282
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|No Boot Partition read operation requested|\n|01b|Boot Partition read in progress|\n|10b|Boot Partition read completed successfully|\n|11b|Error completing Boot Partition read|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 207,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0651",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6906419992446899
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31|RO|Impl<br>Spec|Active Boot Partition ID (ABPID): This bit indicates the identifier of the active Boot<br>Partition.|\n|30:26|RO|0h|Reserved|\n|25:24|RO|00b|Boot Read Status (BRS): This field indicates the status of Boot Partition read<br>operations initiated by the host writing to the BPRSEL.BPID field. Refer to section<br>8.2.<br>The boot read status values are defined as:<br>Value Definition<br>00b No Boot Partition read operation requested<br>01b Boot Partition read in progress<br>10b Boot Partition read completed successfully<br>11b Error completing Boot Partition read<br>If host software writes the BPRSEL.BPID field, this field transitions to 01b. After<br>successfully completing a Boot Partition read operation (i.e., transferring the contents<br>to the boot memory buffer), the controller sets this field to 10b. If there is an error<br>completing a Boot Partition read operation, this field is set to 11b, and the contents<br>of the boot memory buffer are undefined.|\n|23:15|RO|0h|Reserved|\n|14:00|RO|Impl<br>Spec|Boot Partition Size (BPSZ): This field defines the size of each Boot Partition in<br>multiples of 128 KiB. Both Boot Partitions are the same size.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0652",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.556029736995697
  },
  {
    "content": "**3.1.3.14 Offset 44h: BPRSEL – Boot Partition Read Select**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0653",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3264597952365875
  },
  {
    "content": "This optional property is used to initiate the transfer of a data in the Boot Partition (refer to section 8.2) from\nthe controller to the host. If the controller does not support the Boot Partitions feature, then this property\nshall be cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 250,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0654",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5563985705375671
  },
  {
    "content": "If the host attempts to read beyond the end of a Boot Partition (i.e., the Boot Partition Read Offset plus Boot\nPartition Read Size, is greater than the Boot Partition Size in bytes), the controller shall not transfer data\nand report an error in the BPINFO.BRS field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 267,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0655",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4908691644668579
  },
  {
    "content": "**Figure 55: Offset 44h: BPRSEL – Boot Partition Read Select**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0656",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6456254720687866
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31|RW|0b|Boot Partition Identifier (BPID): This bit specifies the Boot Partition identifier for the<br>Boot Partition read operation.|\n|30|RO|0b|Reserved|\n|29:10|RW|0h|Boot Partition Read Offset (BPROF): This field selects the offset into the Boot<br>Partition, in 4 KiB units, that the controller copies into the Boot Partition Memory<br>Buffer.|\n|09:00|RW|0h|Boot Partition Read Size (BPRSZ): This field selects the read size in multiples of<br>4 KiB to copy into the Boot Partition Memory Buffer.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 549,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0657",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6023036241531372
  },
  {
    "content": "**3.1.3.15 Offset 48h: BPMBL – Boot Partition Memory Buffer Location**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0658",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4761227071285248
  },
  {
    "content": "This optional property specifies the memory buffer that is used as the destination for data when a Boot\nPartition is read (refer to section 8.2). If the controller does not support the Boot Partitions feature, then this\nproperty shall be cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 252,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0659",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5130733847618103
  },
  {
    "content": "**Figure 56: Offset 48h: BPMBL – Boot Partition Memory Buffer Location**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0660",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.61761474609375
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|63:12|RW|0h|Boot Partition Memory Buffer Base Address (BMBBA): This field specifies the 52<br>most significant bits of the 64-bit physical address for the Boot Partition Memory Buffer.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 234,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0661",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3132382035255432
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0662",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17141325771808624
  },
  {
    "content": "**Figure 56: Offset 48h: BPMBL – Boot Partition Memory Buffer Location**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0663",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2592986226081848
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|11:00|RO|0h|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0664",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2400086522102356
  },
  {
    "content": "**3.1.3.16 Offset 50h: CMBMSC – Controller Memory Buffer Memory Space Control**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0665",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39227449893951416
  },
  {
    "content": "This optional property specifies how the controller references the Controller Memory Buffer with hostsupplied addresses. If the controller supports the Controller Memory Buffer (CAP.CMBS), this property is\nmandatory. Otherwise, this property is reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 254,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0666",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2453363984823227
  },
  {
    "content": "This property shall be reset by neither Controller Reset nor Function Level Reset, but it shall be reset by all\nother Controller Level Resets.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 142,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0667",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12612664699554443
  },
  {
    "content": "**Figure 57: Offset 50h: CMBMSC – Controller Memory Buffer Memory Space Control**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 81,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0668",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5220639705657959
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|63:12|RW|0h|Controller Base Address (CBA): This field specifies the 52 most significant bits of the<br>64-bit base address for the Controller Memory Buffer’s controller address range. The<br>Controller Memory Buffer’s controller base address and its size determine its controller<br>address range.<br>The specified address shall be valid only under the following conditions:<br>a) no part of the Controller Memory Buffer’s controller address range is greater<br>than 264 − 1; and<br>b) if the Persistent Memory Region’s controller memory space is enabled, then the<br>Controller Memory Buffer’s controller address range does not overlap the<br>Persistent Memory Region’s controller address range.|\n|11:02|RO|0h|Reserved|\n|01|RW|0b|Controller Memory Space Enable (CMSE): This bit specifies whether addresses<br>supplied by the host are permitted to reference the Controller Memory Buffer.<br>If CMBSMSC.CRE is cleared to ‘0’ this bit has no effect, and the Controller Memory<br>Buffer’s controller memory space is not enabled.<br>If this bit is set to ‘1’ and the controller base address is valid, then the Controller Memory<br>Buffer’s controller memory space is enabled. Otherwise, the controller memory space is<br>not enabled.<br>If the Controller Memory Buffer’s controller memory space is enabled, then addresses<br>supplied by the host that fall within the Controller Memory Buffer’s controller address<br>range shall reference the Controller Memory Buffer.<br>If the Controller Memory Buffer’s controller memory space is not enabled, then no<br>address supplied by the host shall reference the Controller Memory Buffer. Instead, such<br>addresses shall reference memory spaces other than the Controller Memory Buffer.|\n|00|RW|0b|Capabilities Registers Enabled (CRE): This bit specifies whether the CMBLOC and<br>CMBSZ properties are enabled. If this bit is set to ‘1’, then CMBLOC is defined as shown<br>in Figure 52 and CMBSZ is defined as shown in Figure 53. If this bit is cleared to ‘0’, then<br>CMBSZ and CMBLOC are cleared to 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2092,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0669",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5130733847618103
  },
  {
    "content": "**3.1.3.17 Offset 58h: CMBSTS – Controller Memory Buffer Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0670",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5281699299812317
  },
  {
    "content": "This optional property indicates the status of the Controller Memory Buffer. If the controller supports the\nController Memory Buffer (CAP.CMBS), this property is mandatory. Otherwise, this property is reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0671",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.570709228515625
  },
  {
    "content": "**Figure 58: Offset 58h: CMBSTS – Controller Memory Buffer Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0672",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3340913951396942
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:01|RO|0h|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0673",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24386034905910492
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0674",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2586126923561096
  },
  {
    "content": "**Figure 58: Offset 58h: CMBSTS – Controller Memory Buffer Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0675",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6006906628608704
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|00|RO|0b|Controller Base Address Invalid (CBAI): This bit indicates whether the controller has<br>failed to enable the Controller Memory Buffer’s controller memory space because<br>CMBMSC.CBA is invalid. If CMBMSC.CRE and CMBMSC.CMSE are set to ‘1’, and<br>CMBMSC.CBA is invalid, this bit shall be set to ‘1’. Otherwise, this bit shall be cleared to<br>‘0’.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 407,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0676",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.51860511302948
  },
  {
    "content": "**3.1.3.18 Offset 5Ch: CMBEBS – Controller Memory Buffer Elasticity Buffer Size**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 81,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0677",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4657619297504425
  },
  {
    "content": "This optional property identifies to the host the size of the CMB elasticity buffer. A value of 0h in this property\nindicates to the host that no information regarding the presence or size of a CMB elasticity buffer is\navailable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0678",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4688294231891632
  },
  {
    "content": "**Figure 59: Offset 5Ch: CMBEBS – Controller Memory Buffer Elasticity Buffer Size**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0679",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.61329585313797
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:8|RO|Impl<br>Spec|CMB Elasticity Buffer Size Base (CMBWBZ): Indicates the size of the CMB elasticity<br>buffer. The size of the CMB elasticity buffer is equal to the value in this field multiplied<br>by the value specified by the CMB Elasticity Buffer Size Units field.|\n|7:5|RO|0h|Reserved|\n|4|RO|Impl<br>Spec|Read Bypass Behavior: If a memory read does not conflict with any memory write in<br>the CMB Elasticity Buffer (i.e., if the set of memory addresses specified by a read is<br>disjoint from the set of memory addresses specified by all writes in the CMB Elasticity<br>Buffer), and this bit is:<br>a) set to ‘1’, then memory reads not conflicting with memory writes in the CMB<br>Elasticity Buffer shall bypass those memory writes; and<br>b) cleared to ‘0’, then memory reads not conflicting with memory writes in the<br>CMB Elasticity Buffer may bypass those memory writes.|\n|3:0|RO|Impl<br>Spec|CMB Elasticity Buffer Size Units (CMBSZU): Indicates the granularity of the CMB<br>Elasticity Buffer Size field.<br>Value Granularity<br>0h Bytes<br>1h 1 KiB<br>2h 1 MiB<br>3h 1 GiB<br>4h – Fh Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1159,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0680",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4765733480453491
  },
  {
    "content": "|Value|Granularity|\n|---|---|\n|0h|Bytes|\n|1h|1 KiB|\n|2h|1 MiB|\n|3h|1 GiB|\n|4h – Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0681",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26958614587783813
  },
  {
    "content": "**3.1.3.19 Offset 60h: CMBSWTP – Controller Memory Buffer Sustained Write Throughput**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0682",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47043511271476746
  },
  {
    "content": "This optional property identifies to the host the maximum CMB sustained write throughput. A value of 0h in\nthis property indicates to the host that no information regarding the CMB sustained write throughput is\navailable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 221,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0683",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49224984645843506
  },
  {
    "content": "**Figure 60: Offset 60h: CMBSWTP – Controller Memory Buffer Sustained Write Throughput**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0684",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6076840162277222
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:8|RO|Impl<br>Spec|CMB Sustained Write Throughput (CMBSWTV): Indicates the sustained write<br>throughput of the CMB at the maximum payload size specified by the applicable NVMe<br>Transport binding specification (e.g. the PCIe TLP payload size, as specified in the<br>Max_Payload_Size (MPS) field of the PCIe Express Device Control (PXDC) register).<br>The sustained write throughput of the CMB is equal to the value in this field multiplied by<br>the units specified by the CMB Sustained Write Throughput Units field.|\n|7:4|RO|0h|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 591,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0685",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4116341173648834
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0686",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3257162272930145
  },
  {
    "content": "**CMB Sustained Write Throughput Units (CMBSWTU):** Indicates the granularity of the\nCMB Sustained Write Throughput field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0687",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42556363344192505
  },
  {
    "content": "|Value|Granularity|\n|---|---|\n|0h|Bytes/second|\n|1h|1 KiB/second|\n|2h|1 MiB/second|\n|3h|1 GiB/second|\n|4h – Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 120,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0688",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15030540525913239
  },
  {
    "content": "**3.1.3.20 Offset 64h: NSSD – NVM Subsystem Shutdown**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0689",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5002495646476746
  },
  {
    "content": "This optional property provides host software with the capability to initiate a normal or abrupt NVM\nsubsystem shutdown.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 120,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0690",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6435291171073914
  },
  {
    "content": "Support for this property is indicated by the state of the NVM Subsystem Shutdown Supported (CAP.NSSS)\nfield. If the property is not supported, then the address range occupied by the register is reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 204,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0691",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5317436456680298
  },
  {
    "content": "**Figure 61: Offset 64h: NSSD – NVM Subsystem Shutdown**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0692",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.694940984249115
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:00|RW|0h|NVM Subsystem Shutdown Control (NSSC): A write of the value 4E726D6Ch<br>(\"Nrml\") to this field initiates a normal NVM Subsystem Shutdown on every controller:<br>• in the domain associated with the controller when CAP.CPS is set to 10b as<br>specified in section 3.6.3.1; or<br>• in the NVM subsystem when CAP.CPS is set to 11b in the NVM subsystem<br>as specified in section 3.6.3.2.<br>A write of the value 41627074h (\"Abpt\") to this field initiates an abrupt NVM subsystem<br>shutdown on every controller:<br>• in the domain associated with the controller when CAP.CPS is set to 10b as<br>specified in section 3.6.3.1; or<br>• in the NVM subsystem when CAP.CPS is set to 11b in the NVM subsystem<br>as specified in section 3.6.3.2.<br>A write of any other value to this field has no functional effect on the operation of the<br>NVM subsystem. This field shall return the value 0h when read.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 955,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0693",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3133391737937927
  },
  {
    "content": "**3.1.3.21 Offset 68h: CRTO – Controller Ready Timeouts**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0694",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4010143280029297
  },
  {
    "content": "This property indicates the controller ready timeout values. This property is mandatory for controllers\ncompliant with NVM Express Base Specification revision 2.0 and later.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 173,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0695",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5286247134208679
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0696",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09563624858856201
  },
  {
    "content": "**Figure 62: Offset 68h: CRTO – Controller Ready Timeouts**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0697",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5128516554832458
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:16|RO|Impl<br>Spec|Controller Ready Independent of Media Timeout (CRIMT): If the<br>CAP.CRMS.CRIMS bit is cleared to ‘0’, then this field is not applicable and shall<br>be cleared to 0h.<br>If the CAP.CRMS.CRIMS bit is set to ‘1’, then this field contains the worst-case<br>time that host software should wait after CC.EN transitions from ‘0’ to ‘1’ for the<br>controller to become ready and be able to successfully process all commands<br>that do not access attached namespaces and Admin commands that do not<br>require access to media when the controller is in Controller Ready Independent<br>of Media mode (i.e., the CC.CRIME bit is set to ‘1’). Attached namespaces and<br>media required to process Admin commands may or may not be ready within this<br>time period (refer to section 3.5.3, section 3.5.4, and Figure 104).<br>This worst-case time may be experienced after events such as an abrupt<br>shutdown or activation of a new firmware image; typical times are expected to be<br>much shorter. This field is in 500 millisecond units.<br>The value of this field should not exceed FFh (i.e., 127.5 seconds).|\n|15:0|RO|Impl<br>Spec|Controller Ready With Media Timeout (CRWMT): This field contains the worst-<br>case time that host software should wait after CC.EN transitions from ‘0’ to ‘1’<br>for:<br>a) the controller to become ready and be able to successfully process all<br>commands; and<br>b) all attached namespaces and media required to process Admin<br>commands to become ready,<br>independent of which ready mode (refer to CC.CRIME) the controller is in (refer<br>to section 3.5.3 and section 3.5.4).<br>This worst-case time may be experienced after events such as an abrupt<br>shutdown or activation of a new firmware image; typical times are expected to be<br>much shorter. This field is in 500 millisecond units.<br>The value of this field shall be greater than or equal to the value of the<br>CRTO.CRIMT field and may be significantly larger than the value of the<br>CRTO.CRIMT field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2055,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0698",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3336672782897949
  },
  {
    "content": "**3.1.3.22 Offset E00h: PMRCAP – Persistent Memory Region Capabilities**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0699",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44095379114151
  },
  {
    "content": "This property indicates capabilities of the Persistent Memory Region. If the controller does not support the\nPersistent Memory Region feature, then this property shall be cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 185,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0700",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4832937717437744
  },
  {
    "content": "**Figure 63: Offset E00h: PMRCAP – Persistent Memory Region Capabilities**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0701",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5924323201179504
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:25|RO|0h|Reserved|\n|24|RO|Impl<br>Spec|Controller Memory Space Supported (CMSS): If set to ‘1’, this bit indicates that<br>addresses supplied by the host are permitted to reference the Persistent Memory Region<br>only if the host has enabled the Persistent Memory Region’s controller memory space.<br>If the controller supports referencing the Persistent Memory Region with host-supplied<br>addresses, this bit shall bet set to ‘1’. Otherwise, this bit shall be cleared to ‘0’.|\n|23:16|RO|Impl<br>Spec|Persistent Memory Region Timeout (PMRTO): This field contains the minimum<br>amount of time that host software should wait for the Persistent Memory Region to<br>become ready or not ready after PMRCTL.EN is modified. The time in this field is<br>expressed in Persistent Memory Region time units (refer to PMRCAP.PMRTU).|\n|15:14|RO|00b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 898,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0702",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3333573639392853
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0703",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3503369688987732
  },
  {
    "content": "**Figure 63: Offset E00h: PMRCAP – Persistent Memory Region Capabilities**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0704",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5944383144378662
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|0|The completion of a memory read from any Persistent<br>Memory Region address ensures that all prior writes to the<br>Persistent Memory Region have completed and are<br>persistent.|\n|1|The completion of a read to the PMRSTS property shall<br>ensure that all prior writes to the Persistent Memory Region<br>have completed and are persistent.|\n|3:2|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 387,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0705",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5451503396034241
  },
  {
    "content": "|Value|Persistent Memory Region Time Units|\n|---|---|\n|00b|500 milliseconds|\n|01b|minutes|\n|10b to 11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 112,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0706",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5880929827690125
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|13:10|RO|Impl<br>Spec|Persistent Memory Region Write Barrier Mechanisms (PMRWBM): This field lists<br>mechanisms that may be used to ensure that previous writes to the Persistent Memory<br>Region have completed and are persistent when the Persistent Memory Region is ready<br>and operating normally. A bit in this field is set to ‘1’ if the corresponding mechanism to<br>ensure persistence is supported. A bit in this field is cleared to ‘0’ if the corresponding<br>mechanism to ensure persistence is not supported.<br>At least one bit in this field shall be set to ‘1’.<br>Bits Description<br>The completion of a memory read from any Persistent<br>Memory Region address ensures that all prior writes to the<br>0<br>Persistent Memory Region have completed and are<br>persistent.<br>The completion of a read to the PMRSTS property shall<br>1 ensure that all prior writes to the Persistent Memory Region<br>have completed and are persistent.<br>3:2 Reserved|\n|9:8|RO|Impl<br>Spec|Persistent Memory Region Time Units (PMRTU): Indicates Persistent Memory Region<br>time units.<br>Value Persistent Memory Region Time Units<br>00b 500 milliseconds<br>01b minutes<br>10b to 11b Reserved|\n|7:5|RO|Impl<br>Spec|Base Indicator Register (BIR): This field indicates the Base Address Register (BAR)<br>that specifies the address and size of the Persistent Memory Region. Values 010b, 011b,<br>100b, and 101b are valid.|\n|4|RO|Impl<br>Spec|Write Data Support (WDS): If this bit is set to ‘1’, then the controller supports data and<br>metadata in the Persistent Memory Region for commands that transfer data from the<br>host to the controller (e.g., Write). If this bit is cleared to ‘0’, then data and metadata for<br>commands that transfer data from the host to the controller shall not be transferred to<br>the Persistent Memory Region.<br>If PMRCAP.CMSS is cleared to ‘0’, this bit shall be cleared to ‘0’.|\n|3|RO|Impl<br>Spec|Read Data Support (RDS): If this bit is set to ‘1’, then the controller supports data and<br>metadata in the Persistent Memory Region for commands that transfer data from the<br>controller to the host (e.g., Read). If this bit is cleared to ‘0’, then all data and metadata<br>for commands that transfer data from the controller to the host shall not be transferred<br>from the Persistent Memory Region.<br>If PMRCAP.CMSS is cleared to ‘0’, this bit shall be cleared to ‘0’.|\n|2:0|RO|000b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2462,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0707",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5538182258605957
  },
  {
    "content": "**3.1.3.23 Offset E04h: PMRCTL – Persistent Memory Region Control**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0708",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49976763129234314
  },
  {
    "content": "This optional property controls the operation of the Persistent Memory Region. If the controller does not\nsupport the Persistent Memory Region feature, then this property shall be cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 194,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0709",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5250524282455444
  },
  {
    "content": "**Figure 64: Offset E04h: PMRCTL – Persistent Memory Region Control**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0710",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5559112429618835
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:1|RO|0h|Reserved|\n|0|RW|0b|Enable (EN): When set to ‘1’, then the Persistent Memory Region is ready to process<br>PCI Express memory read and write requests once PMRSTS.NRDY is cleared to ‘0’.<br>When cleared to ‘0’, then the Persistent Memory Region is disabled and PMRSTS.NRDY<br>shall be set to ‘1’ once the Persistent Memory Region is ready to be re-enabled.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 415,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0711",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31929054856300354
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0712",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.361064612865448
  },
  {
    "content": "**3.1.3.24 Offset E08h: PMRSTS – Persistent Memory Region Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0713",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4586429297924042
  },
  {
    "content": "This optional property provides the status of the Persistent Memory Region. If the controller does not\nsupport the Persistent Memory Region feature, then this property shall be cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 191,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0714",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.509595513343811
  },
  {
    "content": "**Figure 65: Offset E08h: PMRSTS – Persistent Memory Region Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0715",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6662402153015137
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|000b|Normal Operation: The Persistent Memory Region is<br>operating normally.|\n|001b|Restore Error: The Persistent Memory Region is operating<br>normally and is persistent; however, the contents of the<br>Persistent Memory Region may not have been restored<br>correctly (i.e., may not contain the contents prior to the last<br>power cycle, NVM Subsystem Reset, Controller Level Reset,<br>or Persistent Memory Region disable).|\n|010b|Read Only: The Persistent Memory Region is read only. PCI<br>Express memory write requests do not update the Persistent<br>Memory Region. PCI Express memory read requests to the<br>Persistent Memory Region return correct data.|\n|011b|Unreliable: The Persistent Memory Region has become<br>unreliable. PCI Express memory reads may return invalid<br>data or generate poisoned PCI Express TLP(s). Persistent<br>Memory Region memory writes may not update memory or<br>may update memory with undefined data. The Persistent<br>Memory Region may also have become non-persistent.|\n|100b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1059,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0716",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.631283700466156
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:13|RO|0h|Reserved|\n|12|RO|0b|Controller Base Address Invalid (CBAI): This field indicates whether the controller has<br>failed to enable the Persistent Memory Region’s controller memory space because the<br>controller 64-bit base address specified by PMRMSCU.CBA and PMRMSCL.CBA are<br>invalid. If PMRCAP.CMSS is set to ‘1’, PMRMSCL.CMSE is set to ‘1’, and the controller<br>64-bit base address specified by PMRMSCU.CBA and PMRMSCL.CBA is invalid, this<br>bit shall be set to ‘1’. Otherwise, this bit shall be cleared to ‘0’.|\n|11:9|RO|000b|Health Status (HSTS): If the Persistent Memory Region is ready, then this field indicates<br>the health status of the Persistent Memory Region. This field is always cleared to 000b<br>when the Persistent Memory Region is not ready.<br>The health status values are defined as:<br>Value Definition<br>Normal Operation: The Persistent Memory Region is<br>000b<br>operating normally.<br>Restore Error: The Persistent Memory Region is operating<br>normally and is persistent; however, the contents of the<br>Persistent Memory Region may not have been restored<br>001b<br>correctly (i.e., may not contain the contents prior to the last<br>power cycle, NVM Subsystem Reset, Controller Level Reset,<br>or Persistent Memory Region disable).<br>Read Only: The Persistent Memory Region is read only. PCI<br>Express memory write requests do not update the Persistent<br>010b<br>Memory Region. PCI Express memory read requests to the<br>Persistent Memory Region return correct data.<br>Unreliable: The Persistent Memory Region has become<br>unreliable. PCI Express memory reads may return invalid<br>data or generate poisoned PCI Express TLP(s). Persistent<br>011b<br>Memory Region memory writes may not update memory or<br>may update memory with undefined data. The Persistent<br>Memory Region may also have become non-persistent.<br>100b to 111b Reserved|\n|8|RO|0b|Not Ready (NRDY): This bit indicates if the Persistent Memory Region is ready for use.<br>If this bit is cleared to ‘0’ and the PMRCTL.EN is set to ‘1’, then the Persistent Memory<br>Region is ready to accept and process PCI Express memory read and write requests. If<br>this bit is set to ‘1’ or the PMRCTL.EN bit is cleared to ‘0’, then the Persistent Memory<br>Region is not ready to process PCI Express memory read and write requests.|\n|7:0|RO|0h|Error (ERR): When the Persistent Memory Region is ready and operating normally, this<br>field indicates whether previous memory writes to the Persistent Memory Region have<br>completed without error. If this field is cleared to 0h, then previous writes to the Persistent<br>Memory Region have completed without error and that the values written are persistent.<br>A non-zero value in this field indicates the occurrence of an error that may have caused<br>one or more of the previous writes to not have completed successfully. The meaning of<br>any particular non-zero value is vendor specific.<br>Once this field takes on a non-zero value, it maintains a non-zero value until the PCI<br>Function is reset.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3105,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0717",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4597979485988617
  },
  {
    "content": "**3.1.3.25 Offset E0Ch: PMREBS – Persistent Memory Region Elasticity Buffer Size**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0718",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37934377789497375
  },
  {
    "content": "This optional property identifies to the host the size of the PMR elasticity buffer. A value of 0h in this property\nindicates to the host that no information regarding the presence or size of a PMR elasticity buffer is\navailable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0719",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3229462206363678
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0720",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35777267813682556
  },
  {
    "content": "**Figure 66: Offset E0Ch: PMREBS – Persistent Memory Region Elasticity Buffer Size**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0721",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6257721185684204
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:8|RO|Impl<br>Spec|PMR Elasticity Buffer Size Base (PMRWBZ): Indicates the size of the PMR elasticity<br>buffer. The actual size of the PMR elasticity buffer is equal to the value in this field<br>multiplied by the value specified by the PMR Elasticity Buffer Size Units field.|\n|7:5|RO|000b|Reserved|\n|4|RO|Impl<br>Spec|Read Bypass Behavior: If a memory read does not conflict with any memory write in<br>the PMR Elasticity Buffer (i.e., if the set of memory addresses specified by a read is<br>disjoint from the set of memory addresses specified by all writes in the PMR Elasticity<br>Buffer), and this bit is:<br>a) set to ‘1’, then memory reads not conflicting with memory writes in the PMR<br>Elasticity Buffer shall bypass those memory writes; and<br>b) cleared to ‘0’, then memory reads not conflicting with memory writes in the PMR<br>Elasticity Buffer may bypass those memory writes.|\n|3:0|RO|Impl<br>Spec|PMR Elasticity Buffer Size Units (PMRSZU): Indicates the granularity of the PMR<br>Elasticity Buffer Size field.<br>Value Definition<br>0h Bytes<br>1h 1 KiB<br>2h 1 MiB<br>3h 1 GiB<br>4h to Fh Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0722",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43668362498283386
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|0h|Bytes|\n|1h|1 KiB|\n|2h|1 MiB|\n|3h|1 GiB|\n|4h to Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0723",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2368364781141281
  },
  {
    "content": "**3.1.3.26 Offset E10h: PMRSWTP – Persistent Memory Region Sustained Write Throughput**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0724",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4156077802181244
  },
  {
    "content": "This optional property identifies to the host the maximum PMR sustained write throughput. A value of 0h in\nthis property indicates to the host that no information regarding the PMR sustained write throughput is\navailable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 221,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0725",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45715221762657166
  },
  {
    "content": "**Figure 67: Offset E10h: PMRSWTP – Persistent Memory Region Sustained Write Throughput**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0726",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6035740375518799
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:8|RO|Impl<br>Spec|PMR Sustained Write Throughput (PMRSWTV): Indicates the sustained write<br>throughput of the PMR at the maximum payload size specified by the applicable NVMe<br>Transport binding specification (e.g. the PCIe TLP payload size, as specified in the<br>Max_Payload_Size (MPS) field of the PCI Express Device Control (PXDC) register). The<br>actual sustained write throughput of the PMR is equal to the value in this field multiplied<br>by the units specified by the PMR Sustained Write Throughput Units field.|\n|7:4|RO|0h|Reserved|\n|3:0|RO|Impl<br>Spec|PMR Sustained Write Throughput Units (PMRSWTU): Indicates the granularity of the<br>PMR Sustained Write Throughput field.<br>Value Definition<br>0h Bytes per second<br>1h 1 KiB / s<br>2h 1 MiB / s<br>3h 1 GiB / s<br>7h to Fh Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 853,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0727",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38254669308662415
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|0h|Bytes per second|\n|1h|1 KiB / s|\n|2h|1 MiB / s|\n|3h|1 GiB / s|\n|7h to Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 115,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0728",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2254376858472824
  },
  {
    "content": "**3.1.3.27 Offset E14h: PMRMSCL – Persistent Memory Region Memory Space Control Lower**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0729",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5916241407394409
  },
  {
    "content": "This optional property and the PMRMSCU property specify how the controller references the Persistent\nMemory Region with host-supplied addresses. If the controller supports the Persistent Memory Region’s\ncontroller memory space (PMRCAP.CMSS), this property is mandatory. Otherwise, this property is\nreserved. The host shall access this register with aligned 32-bit accesses.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 373,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0730",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31904804706573486
  },
  {
    "content": "This property shall not be reset by Controller Reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0731",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08160077780485153
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0732",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3280167579650879
  },
  {
    "content": "**Figure 68: Offset E14h: PMRMSCL – Persistent Memory Region Memory Space Control Lower**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0733",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5650323033332825
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:12|RW|0h|Controller Base Address (CBA): This field specifies the 20 least significant bits of the<br>52 most significant bits of the 64-bit base address for the Persistent Memory Region’s<br>controller address range. The Persistent Memory Region’s controller base address and<br>its size determine its controller address range.<br>The 64-bit base address specified by this field and PMRMSCU.CBA when the CMSE bit<br>is set to ‘1’ shall be valid only under the following conditions:<br>a) no part of the Persistent Memory Region’s controller address range is greater<br>than 264 − 1; and<br>b) if the Controller Memory Buffer’s controller memory space is enabled, then the<br>Persistent Memory Region’s controller address range does not overlap the<br>Controller Memory Buffer’s controller address range.|\n|11:02|RO|0h|Reserved|\n|01|RW|0b|Controller Memory Space Enable (CMSE): This bit specifies whether addresses<br>supplied by the host are permitted to reference the Persistent Memory Region.<br>If this bit is set to ‘1’ and the controller base address is valid, then the Persistent Memory<br>Region’s controller memory space is enabled. Otherwise, the controller memory space<br>is not enabled.<br>If the Persistent Memory Region’s controller memory space is enabled, then addresses<br>supplied by the host that fall within the Persistent Memory Region’s controller address<br>range shall reference the Persistent Memory Region.<br>If the Persistent Memory Region’s controller memory space is not enabled, then no<br>address supplied by the host shall reference the Persistent Memory Region. Instead,<br>such addresses shall reference memory spaces other than the Persistent Memory<br>Region.|\n|00|RO|0b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1769,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0734",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5322940349578857
  },
  {
    "content": "**3.1.3.28 Offset E18h: PMRMSCU – Persistent Memory Region Memory Space Control Upper**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0735",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5969616770744324
  },
  {
    "content": "This optional property and the PMRMSCL property specify how the controller references the Persistent\nMemory Region with host-supplied addresses. If the controller supports the Persistent Memory Region’s\ncontroller memory space (PMRCAP.CMSS), this property is mandatory. Otherwise, this property is\nreserved. The host shall access this register with aligned 32-bit accesses.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 373,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0736",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3618740141391754
  },
  {
    "content": "This register shall not be reset by Controller Reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0737",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2168802171945572
  },
  {
    "content": "**Figure 69: Offset E18h: PMRMSCU – Persistent Memory Region Memory Space Control Upper**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0738",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43479347229003906
  },
  {
    "content": "|Bits|Type|Reset|Description|\n|---|---|---|---|\n|31:00|RW|0h|Controller Base Address (CBA): This field specifies the 32 most significant bits of the<br>52 most significant bits of the 64-bit base address for the Persistent Memory Region’s<br>controller address range. The Persistent Memory Region’s controller base address and<br>its size determine its controller address range.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 379,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0739",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14911049604415894
  },
  {
    "content": "**3.2** **NVM Subsystem Entities**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0740",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44755852222442627
  },
  {
    "content": "**3.2.1.1** **Namespace Overview**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0741",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41631948947906494
  },
  {
    "content": "A namespace is a formatted quantity of non-volatile memory that may be directly accessed by a host. A\nnamespace ID (NSID) is an identifier used by a controller to provide access to a namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0742",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3993905186653137
  },
  {
    "content": "**3.2.1.2** **Valid and Invalid NSIDs**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0743",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6273579001426697
  },
  {
    "content": "Valid NSIDs are the range of possible NSIDs that may be used to refer to namespaces that exist in the\nNVM subsystem. Any NSID is valid, except if that NSID is 0h or greater than the Number of Namespaces",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 202,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0744",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44215127825737
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0745",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2348749190568924
  },
  {
    "content": "field reported in the Identify Controller data structure (refer to Figure 275). NSID FFFFFFFFh is a broadcast\nvalue that is used to specify all namespaces. An invalid NSID is any value that is not a valid NSID and is\nalso not the broadcast value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0746",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2439868152141571
  },
  {
    "content": "a) allocated or unallocated in the NVM subsystem; and\nb) active or inactive for a specific controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0747",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4008280336856842
  },
  {
    "content": "**3.2.1.3** **Allocated and Unallocated NSID Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0748",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5726507902145386
  },
  {
    "content": "In the NVM subsystem, a valid NSID is:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0749",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5952067375183105
  },
  {
    "content": "a) an allocated NSID; or\nb) an unallocated NSID.\n\nAllocated NSIDs refer to namespaces that exist in the NVM subsystem. Unallocated NSIDs do not refer to\nany namespaces that exist in the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 200,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0750",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5718335509300232
  },
  {
    "content": "**3.2.1.4** **Active and Inactive NSID Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0751",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5657390356063843
  },
  {
    "content": "For a specific controller, an allocated NSID is:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0752",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6478517055511475
  },
  {
    "content": "a) an active NSID; or\nb) an inactive NSID.\n\nActive NSIDs for a controller refer to namespaces that are attached to that controller. Allocated NSIDs that\nare inactive for a controller refer to namespaces that are not attached to that controller.\n\nUnallocated NSIDs are inactive NSIDs for all controllers in the NVM subsystem.\n\nAn allocated NSID may be an active NSID for some controllers and an inactive NSID for other controllers\nin the same NVM subsystem if the namespace that the NSID refers to is attached to some controllers, but\nnot all controllers, in the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 576,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0753",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4054631292819977
  },
  {
    "content": "Refer to section 8.11 for actions associated with a namespace being detached or deleted.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0754",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4690738916397095
  },
  {
    "content": "**3.2.1.5** **NSID and Namespace Relationships**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0755",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.521851122379303
  },
  {
    "content": "Unless otherwise noted, specifying an inactive NSID in a command that uses the Namespace Identifier\n(NSID) field shall cause the controller to abort the command with a status code of Invalid Field in Command.\nSpecifying an invalid NSID in a command that uses the NSID field shall cause the controller to abort the\ncommand with a status code of Invalid Namespace or Format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 372,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0756",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4230329096317291
  },
  {
    "content": "The following table summarizes the valid NSID types and Figure 70 visually shows the NSID types and how\nthey relate.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 116,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0757",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6706928014755249
  },
  {
    "content": "**Figure 70: NSID Types and Relationship to Namespace**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0758",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5878499746322632
  },
  {
    "content": "|Valid NSID Type|NSID relationship to namespace|Reference|\n|---|---|---|\n|Unallocated|Does not refer to any namespace that exists in the NVM subsystem|3.2.1.3|\n|Allocated|Refers to a namespace that exists in the NVM subsystem|3.2.1.3|\n|Inactive|1<br>Does not refer to a namespace that is attached to the controller|3.2.1.4|\n|Active|Refers to a namespace that is attached to the controller|3.2.1.4|\n|Notes:<br>1. If allocated, refers to a namespace that is not attached to the controller. If unallocated, does not refer to any<br>namespace.|Notes:<br>1. If allocated, refers to a namespace that is not attached to the controller. If unallocated, does not refer to any<br>namespace.|Notes:<br>1. If allocated, refers to a namespace that is not attached to the controller. If unallocated, does not refer to any<br>namespace.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 822,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0759",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4798052906990051
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0760",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21410173177719116
  },
  {
    "content": "**Figure 71: NSID Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0761",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6304707527160645
  },
  {
    "content": "**3.2.1.6** **NSID and Namespace Usage**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0762",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6487082839012146
  },
  {
    "content": "If Namespace Management (refer to section 8.11), ANA Reporting (refer to section 8.1), or NVM Sets (refer\nto section 3.2) capabilities are supported, then NSIDs shall be unique within the NVM subsystem (e.g.,\nNSID of 3 shall refer to the same physical namespace regardless of the accessing controller). If the\nNamespace Management, ANA Reporting, and NVM Sets capabilities are not supported, then NSIDs:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 403,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0763",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6134525537490845
  },
  {
    "content": "a) for shared namespaces shall be unique within the NVM subsystem; and\nb) for private namespaces are not required to be unique within the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 152,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0764",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3712015151977539
  },
  {
    "content": "The Identify command (refer to section 5.17) may be used to determine the active NSIDs for a controller\nand the allocated NSIDs in the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 149,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0765",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49743860960006714
  },
  {
    "content": "If the MNAN field (refer to Figure 275) is cleared to 0h, then the maximum number of allocated NSIDs is\nthe same as the value reported in the NN field (refer to Figure 275). If the MNAN field is non-zero, then the\nmaximum number of allocated NSIDs may be less than the number of namespaces (e.g., an NVM\nsubsystem may support a maximum valid NSID value (i.e., the NN field) set to 1,000,000 but support a\nmaximum of 10 allocated NSID values).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 442,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0766",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37105798721313477
  },
  {
    "content": "To determine the active NSIDs for a particular controller, the host may follow either of the following methods:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0767",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5585464835166931
  },
  {
    "content": "1. Issue an Identify command with the CNS field cleared to 0h for each valid NSID (based on the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0768",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6831735968589783
  },
  {
    "content": "Number of Namespaces value (i.e., MNAM field or NN field) in the Identify Controller data\nstructure). If a non-zero data structure is returned for a particular NSID, then that is an active\nNSID; or\n2. Issue an Identify command with a CNS field set to 2h to retrieve a list of up to 1,024 active\n\nNSIDs. If there are more than 1,024 active NSIDs, continue to issue Identify commands with a\nCNS field set to 2h until all active NSIDs are retrieved.\n\nTo determine the allocated NSIDs in the NVM subsystem, the host may issue an Identify command with\nthe CNS field set to 10h to retrieve a list of up to 1,024 allocated NSIDs. If there are more than 1,024\nallocated NSIDs, continue to issue Identify commands with a CNS field set to 10h until all allocated NSIDs\nare retrieved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 773,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0769",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32149797677993774
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0770",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25098416209220886
  },
  {
    "content": "Namespace IDs may change across power off conditions. However, it is recommended that Namespace\nIDs remain static across power off conditions in order to avoid issues with host software. To determine if\nthe same namespace has been encountered, the host may use the:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0771",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4246142506599426
  },
  {
    "content": "a) UUID field in the Namespace Identification Descriptor (refer to Figure 277), if present;\nb) NGUID field in the Identify Namespace data (refer to the applicable I/O Command Set specification)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0772",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5585492849349976
  },
  {
    "content": "or in the Namespace Identification Descriptor, if present; or\nc) EUI64 field in the Identify Namespace data or in the Namespace Identification Descriptor, if present.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 166,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0773",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4862213730812073
  },
  {
    "content": "UIDREUSE bit in the NSFEAT field (refer to Figure 280 or the Identify Namespace data structure in the\nNVM Command Set Specification, if applicable) indicates NGUID and EUI64 reuse characteristics.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 196,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0774",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3533443510532379
  },
  {
    "content": "If Asymmetric Namespace Access Reporting is supported (i.e., bit 3 set to ‘1’ in the CMIC field in the Identify\nController data structure (refer to Figure 275)), refer to the applicable I/O Command Set specification for\nadditional detail, if any.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0775",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4657304286956787
  },
  {
    "content": "A namespace may or may not have a relationship to a Submission Queue; this relationship is determined\nby the host software implementation. The controller shall support access to any active namespace from\nany I/O Submission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0776",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18738333880901337
  },
  {
    "content": "**3.2.1.7** **I/O Command Set Associations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0777",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38113537430763245
  },
  {
    "content": "A namespace is associated with exactly one I/O Command Set. For I/O commands and I/O Command Set\nspecific Admin commands, the I/O Command Set with which a submission queue entry is associated is\ndetermined by the Namespace Identifier (NSID) field in the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 262,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0778",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6218556761741638
  },
  {
    "content": "An NVM subsystem may contain namespaces each of which is associated with a different I/O Command\nSet. A controller may support attached namespaces that use any of the I/O Command Sets that the\ncontroller simultaneously supports as indicated in the I/O Command Set Profile (refer to section 5.27.1.21).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 301,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0779",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6603595018386841
  },
  {
    "content": "An NVM Set is a collection of NVM that is separate (logically and potentially physically) from NVM in other\nNVM Sets. One or more namespaces may be created within an NVM Set and those namespaces inherit\nthe attributes of the NVM Set. A namespace is wholly contained within a single NVM Set and shall not span\nmore than one NVM Set.\n\nFigure 72 shows an example of three NVM Sets. NVM Set A contains three namespaces (NS A1, NS A2,\nand NS A3). NVM Set B contains two namespaces (NS B1 and NS B2). NVM Set C contains one\nnamespace (NS C1). Each NVM Set shown also contains ‘Unallocated’ regions that consist of NVM that is\nnot yet allocated to a namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 653,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0780",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43014809489250183
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0781",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4717200696468353
  },
  {
    "content": "**Figure 72: NVM Sets and Associated Namespaces**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0782",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48800039291381836
  },
  {
    "content": "There is a subset of Admin commands that are NVM Set aware as described in Figure 73.\n\n**Figure 73: NVM Set Aware Admin Commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 130,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0783",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6674302220344543
  },
  {
    "content": "|Admin Command|Details|\n|---|---|\n|Identify|• The Identify Namespace data structure includes the associated NVM Set<br>Identifier.<br>• The NVM Set List data structure includes attributes for each NVM Set.|\n|Capacity Management|• The Create NVM Set action returns the NVM Set Identifier of the NVM Set that<br>is created.<br>• The Delete NVM Set action includes the NVM Set Identifier of the NVM Set that<br>is to be deleted.|\n|Namespace Management|• The create action includes the NVM Set Identifier as a host specified field.|\n|Get Features and<br>Set Features|• The Read Recovery Level Feature specifies the associated NVM Set Identifier.<br>• The Predictable Latency Mode Config Feature specifies the associated NVM<br>Set Identifier.<br>• The Predictable Latency Mode Window Feature specifies the associated NVM<br>Set Identifier.|\n|Create I/O Submission Queue|• The Create I/O Submission Queue command includes the associated NVM Set<br>Identifier.|\n\nThe host determines the NVM Sets present and their attributes using the Identify command with CNS value\nof 04h to retrieve the NVM Set List (refer to Figure 278). For each NVM Set, the attributes include:\n\n- an identifier associated with the NVM Set;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1207,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0784",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6025440096855164
  },
  {
    "content": "- the optimal size for writes to the NVM Set;\n\n- the total capacity of the NVM Set; and\n\n- the unallocated capacity for the NVM Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 132,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0785",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5608052611351013
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0786",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4283311665058136
  },
  {
    "content": "An NVM Set Identifier is a 16-bit value that specifies the NVM Set with which an action is associated. An\nNVM Set Identifier is unique with the NVM subsystem. An NVM Set Identifier may be specified in NVM Set\naware Admin commands (refer to Figure 73). An NVM Set Identifier value of 0h is reserved and is not a\nvalid NVM Set Identifier. Unless otherwise specified, if the host specifies an NVM Set Identifier cleared to\n0h for a command that requires an NVM Set Identifier, then that command shall abort with a status code of\nInvalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 551,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0787",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46683457493782043
  },
  {
    "content": "Each NVM Set is associated with exactly one Endurance Group (refer to section 3.2.3).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0788",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4887917935848236
  },
  {
    "content": "The NVM Set with which a namespace is associated is reported in the Identify Namespace data structure\n(refer to the applicable NVMe I/O Command Set specification). When a host creates a namespace using\nthe Namespace Management command, the host specifies the NVM Set Identifier of the NVM Set that the\nnamespace is to be created in. The namespace that is created inherits attributes from the NVM Set (e.g.,\nthe optimal write size to the NVM).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 442,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0789",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3977837562561035
  },
  {
    "content": "If NVM Sets are supported, then all controllers in the NVM subsystem shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 75,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0790",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6640222072601318
  },
  {
    "content": "- Indicate support for NVM Sets in the Controller Attributes field in the Identify Controller data\nstructure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0791",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5767630338668823
  },
  {
    "content": "- Support the NVM Set Identifier in all commands that use the NVM Set Identifier;\n\n- Support the NVM Set List for the Identify command;\n\n- Indicate the NVM Set Identifier with which the namespace is associated in the Identify Namespace\ndata structure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 251,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0792",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1122315302491188
  },
  {
    "content": "- Support Endurance Groups; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0793",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6188231110572815
  },
  {
    "content": "- For each NVM Set, indicate the associated Endurance Group as an attribute.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0794",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4964858889579773
  },
  {
    "content": "If support for NVM Sets is not reported (i.e., the NVM Sets bit is cleared to ‘0’ in the CTRATT field; refer to\nFigure 275), then the NVM Set Identifier field shall be cleared to 0h in all commands and data structures\nthat support an NVM Set Identifier field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 259,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0795",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4091959595680237
  },
  {
    "content": "Endurance may be managed within a single NVM Set (refer to section 3.2.2) or across a collection of NVM\nSets. Each NVM Set is associated with an Endurance Group (refer to Figure 278). If two or more NVM Sets\nhave the same Endurance Group Identifier, then endurance is managed by the NVM subsystem across\nthat collection of NVM Sets. If only one NVM Set is associated with a specific Endurance Group Identifier,\nthen endurance is managed locally to that NVM Set. An Endurance Group shall be part of only one domain\n(refer to section 3.2.4).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 539,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0796",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6552582383155823
  },
  {
    "content": "An Endurance Group Identifier is a 16-bit value that specifies the Endurance Group with which an action is\nassociated. An Endurance Group Identifier is unique within the NVM subsystem. An Endurance Group\nIdentifier value of 0h is reserved and is not a valid Endurance Group Identifier. Unless otherwise specified,\nif the host specifies an Endurance Group Identifier cleared to 0h for a command that requires an Endurance\nGroup Identifier, then that command shall abort with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 516,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0797",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5744194984436035
  },
  {
    "content": "The information that describes an Endurance Group is indicated in the Endurance Group Information log\npage (refer to section 5.16.1.10).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0798",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5293851494789124
  },
  {
    "content": "Figure 74 shows Endurance Groups added to the example in Figure 72. In this example, the endurance of\nNVM Set A and NVM Set B are managed together as part of Endurance Group Y, while the endurance of\nNVM Set C is managed only within NVM Set C which is the only NVM Set that is part of Endurance Group\nZ.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 303,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0799",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36755576729774475
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0800",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47098004817962646
  },
  {
    "content": "**Figure 74: NVM Sets and Associated Namespaces**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0801",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3509063124656677
  },
  {
    "content": "If Endurance Groups are supported, then the NVM subsystem and all controllers shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0802",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5892235636711121
  },
  {
    "content": "- indicate support for Endurance Groups in the Controller Attributes field in the Identify Controller\ndata structure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 117,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0803",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6630138158798218
  },
  {
    "content": "- indicate the Endurance Group Identifier with which the namespace is associated in the Identify\nNamespace data structure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0804",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5718522071838379
  },
  {
    "content": "- support the Endurance Group Information log page; and\n\n- support the Endurance Group Event Aggregate log page.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 112,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0805",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5946723222732544
  },
  {
    "content": "If Endurance Groups are not supported and the host sends a command in which an Endurance Group\nIdentifier field is defined (e.g., Get Log Page), then that field shall be ignored by the controller.\n\nIf Endurance Groups are not supported and the controller returns information to the host that contains an\nEndurance Group Identifier field, then that field shall be cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 377,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0806",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4324687421321869
  },
  {
    "content": "**3.2.3.1** **Configuring and Managing Endurance Group Events**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0807",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5325812697410583
  },
  {
    "content": "The host may configure asynchronous events to be triggered when certain events occur for an Endurance\nGroup. The host submits a Set Features command specifying the Endurance Group Event Configuration\nfeature (refer to section 5.27.1.20), the Endurance Group, and the specific event(s) that shall trigger adding\nan entry to the Endurance Group Event Aggregate log page (refer to section 5.16.1.15).\n\nThe host configures events using a Set Features command for each Endurance Group.\n\nThe host submits a Set Features command specifying the Asynchronous Event Configuration feature (refer\nto section 5.27.1.8) with the Endurance Group Event Aggregate Log Change Notices bit set to ‘1’ to specify\nthat adding an entry to the Endurance Group Event Aggregate log page shall trigger an Endurance Group\nEvent Aggregate Log Page Change Notice event to the host (refer to Figure 353).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 873,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0808",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1777818351984024
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0809",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20706629753112793
  },
  {
    "content": "The host determines the Endurance Groups that have outstanding events by reading the Endurance Group\nEvent Aggregate log page. An entry is returned for each Endurance Group that has an event outstanding.\nThe host may use the Endurance Group Identifier Maximum value reported in the Identify Controller data\nstructure to determine the maximum size of this log page.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 364,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0810",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6768714189529419
  },
  {
    "content": "To determine the specific event(s) that have occurred for a reported Endurance Group, the host reads the\nEndurance Group Information log page (refer to Figure 217) for that Endurance Group. The Critical Warning\nfield indicates the event(s) that have occurred (e.g., that all namespaces in the Endurance Group have\nbeen placed in read-only mode). All events for an Endurance Group are cleared if the controller successfully\nprocesses a read for the Endurance Group Information log page for that Endurance Group, where the Get\nLog Page command has the Retain Asynchronous Event bit cleared to ‘0’. If the Critical Warning field in the\nEndurance Group Information log page is cleared to 0h, then events for that Endurance Group are not\nreported in the Endurance Group Event Aggregate log page.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 790,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0811",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08855108171701431
  },
  {
    "content": "**Domains and Divisions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0812",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23558162152767181
  },
  {
    "content": "**3.2.4.1** **Overview**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0813",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07833651453256607
  },
  {
    "content": "An NVM subsystem may be made up of a single domain or multiple domains (i.e., two or more). A domain\nis the smallest indivisible unit that shares state (e.g., power state, capacity information). An NVM subsystem\nthat supports multiple domains shall support Asymmetric Namespace Access Reporting (refer to section\n8.1).\n\nA common example of a simple implementation of an NVM subsystem is one that consists of a single\ndomain (i.e., multiple domains are not supported).\n\nEach domain is independent, and the boundaries between domains are communication boundaries (e.g.,\nfault boundaries, management boundaries). If multiple domains are present in an NVM subsystem, then\nthose domains cooperate in the operation of that NVM subsystem. If a domain is unable to cooperate in the\noperation of the NVM subsystem, then the NVM subsystem has become divided.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 848,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0814",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5379817485809326
  },
  {
    "content": "A division is an event (e.g., failure of a domain) or action (e.g. management action or reconfiguration) within\nthe NVM subsystem that affects communication between the domains contained in the NVM subsystem\n(refer to Figure 75 and Figure 76). If a division exists, global state within the NVM subsystem may be\nimpacted (e.g., a controller may only have information about the state of the domains with which the\ncontroller is able to communicate). A division event or action may:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 479,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0815",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13304856419563293
  },
  {
    "content": "- affect access to namespaces (refer to section 8.1); or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0816",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3658187687397003
  },
  {
    "content": "- impact operations that have NVM subsystem scope (e.g., TNVMCAP, sanitize, format, SMART\ninformation).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0817",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14054127037525177
  },
  {
    "content": "A domain is comprised of:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0818",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16431495547294617
  },
  {
    "content": "- zero or more controllers; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0819",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37998396158218384
  },
  {
    "content": "- zero or more NVM Endurance Groups.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0820",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2460566908121109
  },
  {
    "content": "If an NVM subsystem supports multiple domains, then all controllers in that NVM subsystem shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0821",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15160436928272247
  },
  {
    "content": "- set the MDS bit to ‘1’ in the CTRATT field in the Identify Controller data structure (refer to Figure\n275);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0822",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3225429058074951
  },
  {
    "content": "- set the Domain Identifier in each Endurance Group descriptor, if supported, to a non-zero value;\nand",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0823",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5794622898101807
  },
  {
    "content": "- set the Domain Identifier in each Identify Controller data structure to a non-zero value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 91,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0824",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4026302993297577
  },
  {
    "content": "If an NVM subsystem supports multiple domains, then controllers in that NVM subsystem may:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0825",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1676587462425232
  },
  {
    "content": "- support Endurance Groups (refer to Endurance Groups bit in the CTRATT field of Identify\nController data structure).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 117,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0826",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19451284408569336
  },
  {
    "content": "For an NVM subsystem that supports multiple domains, each domain shall be assigned a domain identifier\nthat is unique within the NVM subsystem (refer to the Domain Identifier field in Figure 275 and section",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 206,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0827",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4653187394142151
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0828",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49049943685531616
  },
  {
    "content": "3.2.4.3). For an NVM subsystem that does not support multiple domains, Domain Identifier fields are\ncleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 114,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0829",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6255127787590027
  },
  {
    "content": "Figure 75 shows an example of an NVM subsystem that consists of three domains. Domain 1 contains two\ncontrollers and some amount of NVM storage capacity which has been allocated to two private namespaces\n(i.e., NS A and NS C) and a shared namespace (i.e., NS B). Domain 2 contains two controllers and some\namount of NVM storage capacity which has been allocated to two shared namespaces (i.e., NS D and NS\nE). Domain 3 contains one controller, and no NVM storage capacity.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 472,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0830",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42065778374671936
  },
  {
    "content": "**Figure 75: Example 1 Domain Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0831",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2595469057559967
  },
  {
    "content": "Port *x* Port y Port z",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0832",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11426696181297302
  },
  {
    "content": "If, in the example shown in Figure 75, a division event occurs that results in Domain 1 no longer being able\nto communicate with Domain 2 and Domain 3, then the NVM subsystem would consist of two parts. The\nfirst part consists of Domain 1 and the second part consists of Domain 2 and Domain 3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 293,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0833",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5647576451301575
  },
  {
    "content": "Figure 76 shows an example of an NVM subsystem that consists of six domains, of which, three are\ndomains that contain controllers. Domain 1 is a domain that contains two controllers and some amount of\nNVM storage capacity from which NVM Endurance Groups have been created that contain a private\nnamespace (i.e., NS A) and a shared namespace (i.e., NS C). Domain 2 is a domain that contains no\ncontrollers and contains some amount of NVM storage capacity from which NVM Endurance Groups have\nbeen created that contain a shared namespace (i.e., NS B). Domain 3 is a domain that contains two\ncontrollers and no NVM storage capacity. Domain 4 is a domain that contains no controllers and contains\nsome amount of NVM storage capacity from which NVM Endurance Groups have been created that contain\ntwo shared namespaces (i.e., NS D and NS E). Domain 5 is a domain that contains one controller and no\nNVM storage capacity. Domain 6 is a domain that contains no controllers and no NVM storage capacity\nallocated to an NVM Endurance Group (i.e., an empty domain).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1054,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0834",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4278406500816345
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0835",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1924051195383072
  },
  {
    "content": "**Figure 76: Example 2 Domain Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0836",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26032325625419617
  },
  {
    "content": "Port *x* Port y Port z",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0837",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37271633744239807
  },
  {
    "content": "##### Key: - - - - (Dashed Line) – Communication Boundary",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0838",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15676216781139374
  },
  {
    "content": "**3.2.4.2** **Domains and Reservations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0839",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2655017673969269
  },
  {
    "content": "If an NVM subsystem supports multiple domains and Persistent Reservations (refer to section 8.19), then\nresumption after a division event (e.g., resumption of operation, resumption of communication) requires\nthat all persistent reservation state within the domains in the NVM subsystem that are no longer divided be\nsynchronized (i.e., updated).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 345,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0840",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.584077000617981
  },
  {
    "content": "If the reservation state for a namespace is not synchronized, then the ANA Group that contains that\nnamespace shall transition to the ANA Inaccessible state (refer to section 8.1.3.3) and remain in that state\nuntil the Persistent Reservation state is synchronized. If the Persistent Reservation state is not able to be\nsynchronized, then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 338,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0841",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5215793251991272
  },
  {
    "content": "- a transition to the ANA Persistent Loss state occurs and commands are processed as described\nin section 8.1.3.4; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 117,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0842",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2727522850036621
  },
  {
    "content": "- the controller may stop processing commands and set the Controller Fatal Status (CSTS.CFS) bit\nto ‘1’ (refer to section 9.5).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0843",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16095013916492462
  },
  {
    "content": "**3.2.4.3** **Domain Identifier Use (Informative)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0844",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5451290011405945
  },
  {
    "content": "Domain Identifier values indicate the parts of the NVM subsystem that comprise a domain.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0845",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5932168364524841
  },
  {
    "content": "The host may use these values to determine which Endurance Groups (refer to section 3.2.3) are contained\nin the same domain and which are contained in a different domain. Examples of host use of the domain\nidentifier include:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0846",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6344135403633118
  },
  {
    "content": "- host data redundancy software (e.g., RAID) that may use the Endurance Group’s Domain\nIdentifier to determine which Endurance Groups may fail together (e.g., Endurance Groups in the\nsame domain) and which Endurance Groups may fail independently (e.g., Endurance Groups in\ndifferent domains); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 296,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0847",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5254209041595459
  },
  {
    "content": "- host application software may use the controller’s Domain Identifier to determine which\ncontrollers share domains (e.g., controllers that may fail together) and which controllers are a part\nof different domains (e.g., controllers that may fail independently).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 261,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0848",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09588488936424255
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0849",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4799981415271759
  },
  {
    "content": "**3.3** **NVM Queue Models**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0850",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6203681230545044
  },
  {
    "content": "The NVM Express interface is based on a paired Submission and Completion Queue mechanism.\nCommands are placed by host software into a Submission Queue. Completions are placed into the\nassociated Completion Queue by the controller. When using a memory-based transport queue model,\nmultiple Submission Queues may utilize the same Completion Queue. When using a message-based\ntransport queue model each Submission Queue maps to a single Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 451,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0851",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6140862703323364
  },
  {
    "content": "**Memory-based Transport Queue Model**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0852",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43062150478363037
  },
  {
    "content": "**3.3.1.1** **Queue Setup and Initialization**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0853",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.556429386138916
  },
  {
    "content": "To setup and initialize I/O Submission Queues and I/O Completion Queues for use, host software follows\nthese steps:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 115,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0854",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6231540441513062
  },
  {
    "content": "1. Configures the Admin Submission and Completion Queues by initializing the Admin Queue",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0855",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6461610794067383
  },
  {
    "content": "Attributes (AQA), Admin Submission Queue Base Address (ASQ), and Admin Completion Queue\nBase Address (ACQ) properties appropriately;\n2. Configures the size of the I/O Submission Queues (CC.IOSQES) and I/O Completion Queues",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 222,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0856",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5638630390167236
  },
  {
    "content": "(CC.IOCQES);\n3. Submits a Set Features command with the Number of Queues attribute set to the requested",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0857",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6441171169281006
  },
  {
    "content": "number of I/O Submission Queues and I/O Completion Queues. The completion queue entry for\nthis Set Features command indicates the number of I/O Submission Queues and I/O Completion\nQueues allocated by the controller;\n4. Determines the maximum number of entries supported per queue (CAP.MQES) and whether the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 307,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0858",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6207940578460693
  },
  {
    "content": "queues are required to be physically contiguous (CAP.CQR);\n5. Creates I/O Completion Queues within the limitations of the number allocated by the controller and\n\nthe queue attributes supported (maximum entries and physically contiguous requirements) by using\nthe Create I/O Completion Queue command; and\n6. Creates I/O Submission Queues within the limitations of the number allocated by the controller and\n\nthe queue attributes supported (maximum entries and physically contiguous requirements) by using\nthe Create I/O Submission Queue command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 544,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0859",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.640678882598877
  },
  {
    "content": "At the end of this process, I/O Submission Queues and I/O Completion Queues have been setup and\ninitialized and may be used to complete I/O commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 149,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0860",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42665401101112366
  },
  {
    "content": "**3.3.1.2** **Queue Usage**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0861",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4568689167499542
  },
  {
    "content": "The submitter of entries to a memory-based transport queue uses the current Tail entry pointer to identify\nthe next open queue slot. The submitter increments the Tail entry pointer after placing the new entry to the\nopen queue slot. If the Tail entry pointer increment exceeds the queue size, the Tail entry shall roll to zero.\nThe submitter may continue to place entries in free queue slots as long as the Full queue condition is not\nmet (refer to section 3.3.1.5).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 466,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0862",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5147756338119507
  },
  {
    "content": "Note: The submitter shall take queue wrap conditions into account.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0863",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3557075560092926
  },
  {
    "content": "The consumer of entries on a memory-based transport queue uses the current Head entry pointer to identify\nthe slot containing the next entry to be consumed. The consumer increments the Head entry pointer after\nconsuming the next entry from the queue. If the Head entry pointer increment exceeds the queue size, the\nHead entry pointer shall roll to zero. The consumer may continue to consume entries from the queue as\nlong as the Empty queue condition is not met (refer to section 3.3.1.3).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 489,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0864",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5837382674217224
  },
  {
    "content": "Note: The consumer shall take queue wrap conditions into account.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0865",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4708978831768036
  },
  {
    "content": "Creation and deletion of memory-based transport Submission Queue and associated Completion Queues\nare required to be ordered correctly by host software. Host software creates the Completion Queue before\ncreating any associated Submission Queue. Submission Queues may be created at any time after the\nassociated Completion Queue is created. Host software deletes all associated Submission Queues prior to\ndeleting a Completion Queue. To abort all commands submitted to the Submission Queue host software\nissues a Delete I/O Submission Queue command for that queue (refer to section 3.3.1.3).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 590,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0866",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2267264723777771
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0867",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3009539842605591
  },
  {
    "content": "Host software writes the Submission Queue Tail Doorbell and the Completion Queue Head Doorbell (refer\nto the Transport Specific Controller Properties section in the NVMe over PCIe Transport Specification) to\ncommunicate new values of the corresponding entry pointers to the controller. If host software writes an\ninvalid value to the Submission Queue Tail Doorbell or Completion Queue Head Doorbell property and an\nAsynchronous Event Request command is outstanding, then an asynchronous event is posted to the Admin\nCompletion Queue with a status code of Invalid Doorbell Write Value. The associated queue is then deleted\nand recreated by host software. For a Submission Queue that experiences this error, the controller may\ncomplete previously consumed commands; no additional commands are consumed. This condition may be\ncaused by host software attempting to add an entry to a full Submission Queue or remove an entry from an\nempty Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 951,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0868",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5579954981803894
  },
  {
    "content": "Host software checks completion queue entry Phase Tag (P) bits in memory to determine whether new\ncompletion queue entries have been posted (refer to section 3.3.3.2.2). The Completion Queue Tail pointer\nis only used internally by the controller and is not visible to the host. The controller uses the SQ Head\nPointer (SQHD) field in completion queue entries to communicate new values of the Submission Queue\nHead Pointer to the host. A new SQHD value indicates that submission queue entries have been consumed,\nbut does not indicate either execution or completion of any command. Refer to section 3.3.3.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 606,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0869",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5763169527053833
  },
  {
    "content": "A submission queue entry is submitted to the controller when the host writes the associated Submission\nQueue Tail Doorbell with a new value that indicates that the Submission Queue Tail Pointer has moved to\nor past the slot in which that submission queue entry was placed. A Submission Queue Tail Doorbell write\nmay indicate that one or more submission queue entries have been submitted.\n\nA submission queue entry has been consumed by the controller when a completion queue entry is posted\nthat indicates that the Submission Queue Head Pointer has moved past the slot in which that submission\nqueue entry was placed. A completion queue entry may indicate that one or more submission queue entries\nhave been consumed.\n\nA completion queue entry is posted to the Completion Queue when the controller write of that completion\nqueue entry to the next free Completion Queue slot inverts the Phase Tag (P) bit from its previous value in\nmemory (refer to section 3.3.3.2.2). The controller may generate an interrupt to the host to indicate that one\nor more completion queue entries have been posted.\n\nA completion queue entry has been consumed by the host when the host writes the associated Completion\nQueue Head Doorbell with a new value that indicates that the Completion Queue Head Pointer has moved\npast the slot in which that completion queue entry was placed. A Completion Queue Head Doorbell write\nmay indicate that one or more completion queue entries have been consumed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 1472,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0870",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5847263336181641
  },
  {
    "content": "Once a submission queue entry or a completion queue entry has been consumed, the slot in which it was\nplaced is free and available for reuse. Altering a submission queue entry after that entry has been submitted\nbut before that entry has been consumed results in undefined behavior. Altering a completion queue entry\nafter that entry has been posted but before that entry has been consumed results in undefined behavior.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 420,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0871",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4200248420238495
  },
  {
    "content": "**3.3.1.2.1** **Completion Queue Flow Control**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0872",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44843941926956177
  },
  {
    "content": "If there are no free slots in a Completion Queue, then the controller shall not post status to that Completion\nQueue until slots become available. In this case, the controller may stop processing additional submission\nqueue entries associated with the affected Completion Queue until slots become available. The controller\nshall continue processing for other Submission Queues not associated with the affected Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 427,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0873",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.381268173456192
  },
  {
    "content": "**3.3.1.3** **Queue Abort**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0874",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4983333945274353
  },
  {
    "content": "To abort a large number of commands, the recommended procedure is to delete and recreate the I/O\nSubmission Queue. Specifically, to abort all commands that are submitted to the I/O Submission Queue\nhost software should issue a Delete I/O Submission Queue command for that queue. After the queue has\nbeen successfully deleted, indicating that all commands have been completed or aborted, then host\nsoftware should recreate the queue by submitting a Create I/O Submission Queue command. Host software\nmay then re-submit commands to the associated I/O Submission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 566,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0875",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.03149140626192093
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0876",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1395871788263321
  },
  {
    "content": "**3.3.1.4** **Empty Queue**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0877",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5502619743347168
  },
  {
    "content": "The queue is Empty when the Head entry pointer equals the Tail entry pointer. Figure 77 defines the Empty\nQueue condition.\n\n**Figure 77: Empty Queue Definition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 161,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0878",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4758099317550659
  },
  {
    "content": "**3.3.1.5** **Full Queue**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0879",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4405573308467865
  },
  {
    "content": "The queue is Full when the Head equals one more than the Tail. The number of entries in a queue when\nfull is one less than the queue size. Figure 78 defines the Full Queue condition.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 182,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0880",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6860818266868591
  },
  {
    "content": "Note: Queue wrap conditions shall be taken into account when determining whether a queue is Full.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0881",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5924102663993835
  },
  {
    "content": "**Figure 78: Full Queue Definition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0882",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5488905906677246
  },
  {
    "content": "**Message-based Transport Queue Model**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0883",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5551942586898804
  },
  {
    "content": "For NVMe over Fabrics, a queue is a unidirectional communication channel that is used to send capsules\nbetween a host and a controller. A host uses Submission Queues to send command capsules (refer to\nsection 3.3.2.1.1) to a controller. A controller uses Completion Queues to send response capsules (refer to\nsection 3.3.2.1.2) to a host. Submission and Completion Queues are created in pairs using the Connect\ncommand (refer to section 3.3.2.2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 446,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0884",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6710950136184692
  },
  {
    "content": "The NVMe Transport is responsible for delivering command capsules to the controller and notifying the\ncontroller of capsule arrival in a transport-specific fashion.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0885",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41678178310394287
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0886",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20931720733642578
  },
  {
    "content": "Altering a command capsule between host submission to the Submission Queue and transport delivery of\nthat capsule to the controller results in undefined behavior.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0887",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16444163024425507
  },
  {
    "content": "NVMe Transports are not required to provide any additional end-to-end flow control. Specific NVMe\nTransports may require low level flow control for congestion avoidance and reliability; any such additional\nNVMe Transport flow control is outside the scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 277,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0888",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3975848853588104
  },
  {
    "content": "Flow control differs for Submission Queues (refer to section 3.3.2.1.1, section 3.3.2.6, and section 3.3.2.7)\nand Completion Queues (refer to sections 3.3.2.1.2, section 3.3.2.8, and section 3.3.1.2.1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 202,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0889",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08232473582029343
  },
  {
    "content": "**3.3.2.1** **Capsules and Data Transfers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0890",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5089681148529053
  },
  {
    "content": "This section describes capsules and data transfer mechanisms necessary to support message-based\ntransport queues. These mechanisms are used for Fabrics commands, Admin commands, and I/O\ncommands when using the message-based transport queue model.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0891",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5958475470542908
  },
  {
    "content": "A capsule is an NVMe unit of information exchanged between a host and a controller. A capsule may\ncontain commands, responses, SGLs, and/or data. The data may include user data (e.g., logical block data\nand metadata that is transferred as a contiguous part of the logical block) and data structures associated\nwith the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 327,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0892",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6631179451942444
  },
  {
    "content": "The capsule size for the Admin Queue commands and responses is fixed and defined in the NVMe\nTransport binding specification. The controller indicates in the Identify Controller data structure the capsule\ncommand and response sizes that the host shall use with I/O commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 274,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0893",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6796068549156189
  },
  {
    "content": "The controller shall support SGL based data transfers for commands on both the Admin Queue and I/O\nQueues. Data may be transferred within the capsule or through memory transactions based on the\nunderlying NVMe Transport as indicated in the SGL descriptors associated with the command capsule. The\nSGL types supported by an NVMe Transport are specified in the NVMe Transport binding specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 396,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0894",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3189071714878082
  },
  {
    "content": "The value of unused and not reserved capsule fields (e.g., the capsule is larger than the command /\nresponse and associated data) is undefined and shall not be interpreted by the recipient.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 189,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0895",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3828296363353729
  },
  {
    "content": "**3.3.2.1.1** **Command Capsules**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0896",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5448004007339478
  },
  {
    "content": "A command capsule is sent from a host to a controller. It contains a submission queue entry (SQE) and\nmay optionally contain data or SGLs. The SQE is 64 bytes in size and contains the Admin command, I/O\ncommand, or Fabrics command to be executed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0897",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6228013038635254
  },
  {
    "content": "**Figure 79: Command Capsule**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0898",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23103119432926178
  },
  {
    "content": "Byte 0 63 64 ( *N* -1)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0899",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3985844552516937
  },
  {
    "content": "Command Capsule of Size N Bytes",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0900",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4741526246070862
  },
  {
    "content": "The Command Identifier field in the SQE shall be unique among all outstanding commands associated with\nthat queue. If there is data or additional SGLs to be transferred within the capsule, then the SGL descriptor\nin the SQE contains a Data Block, Segment Descriptor, or Last Segment Descriptor specifying an\nappropriate Offset address. The definition for the submission queue entry when the command is a Fabrics\ncommand is defined in Figure 80. The definition for the submission queue entry when the command is an\nAdmin or I/O command is defined in section 3.3.3.1, where the Metadata Pointer field is reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 611,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0901",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6383388042449951
  },
  {
    "content": "**Figure 80: Fabrics Command Capsule – Submission Queue Entry Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0902",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5389032959938049
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Opcode (OPC): Set to 7Fh to indicate a Fabrics command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0903",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14054974913597107
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0904",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2346002459526062
  },
  {
    "content": "**Figure 80: Fabrics Command Capsule – Submission Queue Entry Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0905",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6113458871841431
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01|PRP or SGL for Data Transfer (PSDT): This field is described in Figure 86. Bits 7:6 of this field<br>should be set to 01b, and may be cleared to 00b.|\n|03:02|Command Identifier (CID): This field specifies a unique identifier for the command. The identifier<br>shall be unique among all outstanding commands associated with a particular queue.|\n|04|Fabrics Command Type (FCTYPE): This field specifies the Fabrics command transferred in the<br>capsule. The Fabrics command types are defined in Figure 375. If this field is set to a reserved<br>value, the command should be aborted with a status code of Invalid Field in Command.|\n|39:05|Reserved|\n|63:40|Fabrics Command Type Specific: This field is Fabrics command type specific.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 762,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0906",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2238479107618332
  },
  {
    "content": "**3.3.2.1.2** **Response Capsules**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0907",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3767228126525879
  },
  {
    "content": "A response capsule is sent from the NVM subsystem to the host. It contains a completion queue entry\n(CQE) and may optionally contain data. The CQE is the completion queue entry associated with a\npreviously issued command capsule.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0908",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5491251349449158
  },
  {
    "content": "If a command requests data and the SGL in the associated command capsule specifies a Data Block\ndescriptor with an Offset, the data is included in the response capsule. If the SGL(s) in the command\ncapsule specify a region in host memory, then data is transferred via memory transactions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 288,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0909",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2917565703392029
  },
  {
    "content": "**Figure 81: Response Capsule**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0910",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17096418142318726
  },
  {
    "content": "Byte 0 15 16 ( *N* -1)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0911",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39331957697868347
  },
  {
    "content": "Response Capsule of Size N Bytes",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0912",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.416402667760849
  },
  {
    "content": "The completion queue entry is 16 bytes in size and contains a two byte status field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0913",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6290119886398315
  },
  {
    "content": "The definition for the completion queue entry for a Fabrics command is defined in Figure 82. The definition\nfor the completion queue entry when the command is an Admin or I/O command is defined in section\n3.3.3.2, where the SQ Identifier and Phase Tag fields are reserved because they are not used in NVMe\nover Fabrics. Use of the SQHD field depends on whether SQ flow control is disabled for the queue pair,\nrefer to section 6.3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 430,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0914",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5327888131141663
  },
  {
    "content": "**Figure 82: Fabrics Response Capsule – Completion Queue Entry Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 71,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0915",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5697253942489624
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|The definition of this field is Fabrics response type specific.|\n|09:08|SQ Head Pointer (SQHD): Indicates the current Submission Queue Head pointer for the<br>associated Submission Queue. This field is reserved if SQ flow control is disabled for the queue<br>pair (refer to section 6.3).|\n|11:10|Reserved|\n|13:12|Command Identifier (CID): Indicates the identifier of the command that is being completed.|\n|15:14|Status (STS): Specifies status for the associated Fabrics command.<br>Bits Definition<br>15:01 Status field as defined in section 3.3.3.2.1.<br>00 Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 605,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0916",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4889395236968994
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|15:01|Status field as defined in section 3.3.3.2.1.|\n|00|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0917",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2865089178085327
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0918",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1753484457731247
  },
  {
    "content": "**3.3.2.1.3** **Data Transfers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0919",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24807962775230408
  },
  {
    "content": "Data may be transferred within capsules or by memory transfers. SGLs are used to specify the location of\ndata. Metadata, if transferred, is a contiguous part of the user data with which that metadata is associated.\nThe SGL descriptor(s) (refer to section 4.1.2) specify whether the command’s data is transferred through\nmemory or within the capsule. The capsule may contain either SGLs or data (not a mixture of both) following\nthe SQE. If additional SGLs are required, then the SGLs are included in the capsule immediately after the\nSQE. If an invalid offset is specified in an SGL descriptor, then a status code of SGL Offset Invalid shall be\nreturned.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 654,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0920",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6373037099838257
  },
  {
    "content": "SGLs shall be supported within a capsule. The NVMe Transport binding specification defines the SGL\nDescriptor Types and Sub Types that are supported for the corresponding NVMe Transport. The NVMe\nTransport binding specification also specifies if SGLs may be supported in host memory.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 283,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0921",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5483534932136536
  },
  {
    "content": "**3.3.2.1.3.1 Data and SGL Locations within a Command Capsule**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0922",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5696529746055603
  },
  {
    "content": "The submission queue entry within the command capsule includes one SGL entry. If there are additional\nSGL entries to be transferred in the command capsule, then those entries shall be contiguous and located\nimmediately after the submission queue entry.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 252,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0923",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3520384430885315
  },
  {
    "content": "An NVMe Transport binding specification defines the support for data as part of the command capsule. The\ncontroller indicates the starting location of data within a command capsule via the In Capsule Data Offset\n(ICDOFF) field in the Identify Controller data structure.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 269,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0924",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08833039551973343
  },
  {
    "content": "There are restrictions for SGLs that the host should follow:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0925",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3292899429798126
  },
  {
    "content": "- if the ICDOFF field is a non-zero value, then all SGL descriptors following the submission queue\nentry shall not have a total size greater than (ICDOFF * 16);\n\n- if the SGL descriptors following the submission queue entry have a total size greater than (ICDOFF",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 262,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0926",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5036103129386902
  },
  {
    "content": "- 16), then the controller shall abort the command with a status code of Invalid Number of SGL\nDescriptors;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 107,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0927",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5352305769920349
  },
  {
    "content": "- the host shall not place more SGL Data Block or Keyed SGL Data Block descriptors within a\ncapsule than the maximum indicated in the Identify Controller data structure; and\n\n- if the host places more SGL Data Block of Keyed SGL Data Block descriptors in a capsule than the\nmaximum indicated in the Maximum SGL Data Block Descriptors field in the Identify Controller data\nstructure, then the controller shall abort the command with a status code of Invalid Number of SGL\nDescriptors.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 483,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0928",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43299752473831177
  },
  {
    "content": "The host shall start data (if present) in command capsules at byte offset (ICDOFF * 16) from the end of the\nsubmission queue entry.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 131,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0929",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22496117651462555
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0930",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1695626825094223
  },
  {
    "content": "**Figure 83: Data and SGL Locations within a Command Capsule**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0931",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4534052610397339
  },
  {
    "content": "Command Capsule of Size N Bytes\n\nCommand Capsule of Size N Bytes",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0932",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19804944097995758
  },
  {
    "content": "**3.3.2.1.3.2 Data Transfer Examples**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0933",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4964485168457031
  },
  {
    "content": "The data transfer examples in Figure 84 and Figure 85 show SGL examples for a Write command where\ndata is transferred via a memory transaction or within the capsule. The SGL may use a key as part of the\ndata transfer depending on the requirements of the NVMe Transport used.\n\nThe first example shows an 8KiB write where all of the data is transferred via memory transactions. In this\ncase, there is one SGL descriptor that is contained within the submission queue entry at CMD.SGL1. The\nSGL descriptor is a Keyed SGL Data Block descriptor. If more SGLs are required to complete the command,\nthe additional SGLs are contained in the command capsule.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 648,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0934",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6580966114997864
  },
  {
    "content": "**Figure 84: SGL Example Using Memory Transactions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0935",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1842653751373291
  },
  {
    "content": "Keyed Data Block descriptor",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0936",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37125691771507263
  },
  {
    "content": "specifies to transfer 8KiB Address = Data Block A",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0937",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1882145255804062
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0938",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25079524517059326
  },
  {
    "content": "The second example shows an 8KiB write where all of the data is transferred within the capsule. In this\ncase, the SGL descriptor is an SGL Data Block descriptor specifying an Offset of 20h based on an ICDOFF\nvalue of 2h.\n\n**Figure 85: SGL Example Using In Capsule Data Transfer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 279,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0939",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15851545333862305
  },
  {
    "content": "**3.3.2.2** **Queue Creation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0940",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4348333775997162
  },
  {
    "content": "Controllers using the message-based transport queue model use the Connect command (refer to section\n6.3) to create controller Admin or I/O Queues. The creation of an Admin Queue establishes an association\nbetween a host and the corresponding controller. The message-based transport queue model does not\nsupport the Admin Submission Queue Base Address (ASQ), Admin Completion Queue Base Address\n(ACQ), and Admin Queue Attributes (AQA) properties as all information necessary to establish an Admin\nQueue is contained in the Connect command. The message-based transport queue model does not support\nthe Admin commands associated with I/O Queue creation and deletion (Create I/O Completion Queue,\nCreate I/O Submission Queue, Delete I/O Completion Queue, Delete I/O Submission Queue).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 780,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0941",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4877103269100189
  },
  {
    "content": "An NVMe Transport connection is established between a host and an NVM subsystem prior to the transfer\nof any capsules or data. The mechanism used to establish an NVMe Transport connection is NVMe\nTransport specific and defined by the corresponding NVMe Transport binding specification. The NVMe\nTransport may require a separate NVMe Transport connection for each Admin or I/O Queue or may utilize\nthe same NVMe Transport connection for all Admin and I/O Queues associated with a particular controller.\nAn NVMe Transport may also require that NVMe layer information be passed between the host and\ncontroller in the process of establishing an NVMe Transport connection (e.g., exchange queue size to\nappropriately size send and receive buffers).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 742,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0942",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5919926166534424
  },
  {
    "content": "The Connect command specifies the Queue ID and type (Admin or I/O), the size of the Submission and\nCompletion Queues, queue attributes, Host NQN, NVM Subsystem NQN, and Host Identifier. The Connect\ncommand may specify a particular controller if the NVM subsystem supports a static controller model. The\nConnect response indicates whether the connection was successfully established as well as whether NVMe\nin-band authentication is required.\n\nThe Connect command is submitted to the same Admin Queue or I/O Queue that the Connect command\ncreates. The underlying NVMe Transport connection that is used for that queue is created first and the\nConnect command and response capsules are sent over that NVMe Transport connection. The Connect\ncommand shall be sent once to a queue.\n\nWhen a Connect command successfully completes, the corresponding Submission and Completion\nQueues are created. If NVMe in-band authentication is required as indicated in the Connect response, then",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 973,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0943",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2754904627799988
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0944",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.315957635641098
  },
  {
    "content": "NVMe in-band authentication shall be performed before the queues may be used to perform other Fabrics\ncommands, Admin commands, or I/O commands. Once a Connect command for an Admin Queue has\ncompleted successfully (and NVMe in-band authentication, if required, has succeeded), only Fabrics\ncommands may be submitted until the controller is ready (CSTS.RDY = 1). Both Fabrics commands and\nAdmin commands may be submitted to the Admin Queue while the controller is ready. A Connect command\nfor an I/O Queue may be submitted after the controller is ready. Once a Connect command for an I/O Queue\nhas completed successfully (and NVMe in-band authentication, if required, has succeeded), I/O commands\nmay be submitted to the queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 726,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0945",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6394059658050537
  },
  {
    "content": "The Connect response contains the controller ID allocated to the host. All subsequent Connect commands\nthat create an I/O Queue with that controller shall be from the same host, utilize the same NVMe Transport,\nand have the same Host Identifier, Host NQN, and NVM Subsystem NQN; if any of these conditions are\nnot met, then the Connect command fails.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 350,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0946",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2728765606880188
  },
  {
    "content": "**3.3.2.3** **Queue Initialization and Queue State**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0947",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3506097197532654
  },
  {
    "content": "When a Connect command successfully completes, the corresponding Admin Submission and Completion\nQueue or I/O Submission and Completion Queues are created. If the host sends a Connect command\nspecifying the Queue ID of a queue which already exists, then the controller shall abort the command with\na status code of Command Sequence Error.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 338,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0948",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5263019800186157
  },
  {
    "content": "The Authentication Requirements (AUTHREQ) field in the Connect response indicates if NVMe in-band\nauthentication is required. If AUTHREQ is cleared to 0h, the created queue is ready for use after the\nConnect command completes successfully. If AUTHREQ is set to a non-zero value, the created queue is\nready for use after NVMe in-band authentication has been performed successfully using the Authentication\nSend and Authentication Receive Fabrics commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 454,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0949",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6432862877845764
  },
  {
    "content": "If a controller requires or is undergoing NVMe in-band authentication for a queue pair, then a controller\nshall abort all commands received on that queue other than authentication commands with a status code\nof Authentication Required. After the NVMe in-band authentication has been performed successfully on a\nqueue, then a controller shall abort all authentication commands on that queue with a status code of\nCommand Sequence Error.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 435,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0950",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5301015377044678
  },
  {
    "content": "When an Admin Queue is first created, the associated controller is disabled (i.e., CC.EN is initialized to ‘0’).\nA disabled controller shall abort all commands other than Fabrics commands on the Admin Queue with a\nstatus code of Command Sequence Error. After the controller is enabled, it shall accept all supported Admin\ncommands in addition to Fabrics commands.\n\nA created I/O queue shall abort all commands with a status code of Command Sequence Error if the\nassociated controller is disabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 496,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0951",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4921674430370331
  },
  {
    "content": "**3.3.2.4** **I/O Queue Deletion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0952",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44718459248542786
  },
  {
    "content": "NVMe over Fabrics deletes an individual I/O Queue and may delete the associated NVMe Transport\nconnection as a result of:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 121,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0953",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22004428505897522
  },
  {
    "content": "- the exchange of a Disconnect command and response (refer to section 6.4) between a host and\ncontroller; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 108,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0954",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30479753017425537
  },
  {
    "content": "- the detection and processing of a transport error on an NVMe Transport connection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0955",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24132554233074188
  },
  {
    "content": "The host indicates support for the deletion of an individual I/O Queue by setting bit 3 to ‘1’ in the CATTR\nfield in the Connect command (refer to Figure 380) used to create the Admin Queue. The controller indicates\nsupport for the deletion of an individual I/O Queue by setting bit 0 to ‘1’ in the OFCS field in the Identify\nController Attributes region of the Identify Controller data structure (refer to Figure 275).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 419,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0956",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6133862137794495
  },
  {
    "content": "If both the host and the controller support deletion of an individual I/O Queue, then the termination of an\nindividual I/O Queue impacts only that I/O Queue (i.e., the association and all other I/O Queues and their\nassociated NVMe Transport connections are not impacted). If either the host or the controller does not\nsupport deletion of an individual I/O Queue, then the deletion of an individual I/O Queue or the termination\nof an NVMe Transport connection causes the association to be terminated.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 499,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0957",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21886351704597473
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0958",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3301790654659271
  },
  {
    "content": "NVMe over Fabrics uses the Disconnect command to delete an Individual I/O Queue. This command is\nsent on the I/O Submission Queue to be deleted and affects only that I/O Submission Queue and its\nassociated I/O Completion Queue (i.e., other I/O Queues are not affected). To delete an I/O Queue, the\nNVMe Transport connection for that I/O Queue is used. If all Queues associated with an NVMe Transport\nconnection are deleted, then the NVMe Transport connection may be deleted after completion of the\nDisconnect command. Actions necessary to delete the NVMe Transport connection are transport specific.\nThe association between the host and the controller is not affected.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 668,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0959",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5792397856712341
  },
  {
    "content": "If a Disconnect command returns a status code other than success, the host may delete an I/O Queue\nusing other methods including:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 129,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0960",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5813999772071838
  },
  {
    "content": "- waiting a vendor specific amount of time and retry the Disconnect command;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0961",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34505096077919006
  },
  {
    "content": "- deleting the NVMe Transport connection (note: this may impact other I/O Queues);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0962",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5196602940559387
  },
  {
    "content": "- performing a Controller Level Reset (note: this impacts other I/O Queues); or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0963",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31756410002708435
  },
  {
    "content": "- ending the host to controller association.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0964",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3261830806732178
  },
  {
    "content": "If the transport requires a separate NVMe Transport connection for each Admin and I/O Queue (refer to\nsection 3.3.2.2), then the host should not delete an NVMe Transport connection until after:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0965",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44782504439353943
  },
  {
    "content": "- a Disconnect command has been submitted to the I/O Submission Queue; and\n\n- the response for that Disconnect command has been received by the host on the corresponding\nI/O Completion Queue or a vendor specific timeout (refer to section 3.9) has occurred while waiting\nfor that response.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 288,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0966",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4539754390716553
  },
  {
    "content": "If the transport requires a separate NVMe Transport connection for each Admin and I/O Queue, then the\ncontroller should not delete an NVMe Transport connection until after:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 172,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0967",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5279788970947266
  },
  {
    "content": "- a Disconnect command has been received on the I/O Submission Queue and processed by the\ncontroller;\n\n- the responses for commands received by the controller on that I/O Submission Queue prior to\nreceiving the Disconnect command have been sent to the host on the corresponding I/O\nCompletion Queue; and\n\n- the resulting response for that Disconnect command has been sent to the host on the\ncorresponding I/O Completion queue (i.e., this response is the last response sent). It is\nrecommended that the controller delay destroying the NVMe Transport connection to allow time for\nthe Disconnect command response to be received by the host (e.g., a transport specific event\noccurs or a transport specific time period elapses).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 723,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0968",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.596045196056366
  },
  {
    "content": "If the transport utilizes the same NVMe Transport connection for all Admin and I/O Queues associated with\na particular controller (refer to section 3.3.2.2), then the deletion of an individual I/O Queue has no impact\non the NVMe Transport connection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 250,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0969",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48662036657333374
  },
  {
    "content": "A Disconnect command is the last I/O Submission Queue entry processed by the controller for an I/O\nQueue. Controller processing of the Disconnect command completes or aborts all commands on the I/O\nQueue on which the Disconnect command was received. The controller determines whether to complete\nor abort each of those commands.\n\nThe response to the Disconnect command is the last I/O Completion Queue entry processed by the host\nfor an I/O Queue. To avoid command aborts the host should wait for outstanding commands on an I/O\nQueue to complete before sending the Disconnect command.\n\nIf the controller detects an NVMe Transport connection loss, then the controller shall stop processing all\ncommands received on I/O Queues associated with that NVMe Transport connection. Until the controller\ndetects an NVMe Transport connection loss or sends a successful completion for a Disconnect command,\noutstanding commands may continue being processed by the controller.\n\nIf the host detects an NVMe Transport connection loss before the responses are received for all outstanding\ncommands submitted to the associated I/O Queue, then there is no further information available to the host\nabout the state of those commands (e.g., each individual outstanding command may have been completed\nor aborted by the controller).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 1311,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0970",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2431105375289917
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0971",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27971914410591125
  },
  {
    "content": "If an NVMe Transport connection is lost as a result of an NVMe Transport error, then before performing\nrecovery actions related to commands sent on I/O queues associated with that NVMe Transport connection,\nthe host should wait for at least the longer of:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 255,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0972",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6175138354301453
  },
  {
    "content": "- the NVMe Keep Alive timeout; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0973",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36702001094818115
  },
  {
    "content": "- the underlying fabric transport timeout, if any.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0974",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07247243076562881
  },
  {
    "content": "**3.3.2.5** **Submission Queue Flow Control Negotiation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0975",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5950849652290344
  },
  {
    "content": "Use of Submission Queue (SQ) flow control is negotiated for each queue pair by the Connect command\nand the controller response to the Connect command. SQ flow control shall be used unless it is disabled\nas a result of that negotiation. If SQ flow control is disabled, then the Submission Queue Head Pointer\n(SQHD) field is reserved in all Fabrics response capsules for that queue pair after the response to the\nConnect command (i.e., in all subsequent response capsules for that queue pair, the controller shall clear\nthe SQHD field to 0h and the host should ignore the SQHD field).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 582,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0976",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6659927368164062
  },
  {
    "content": "If the host requests that SQ flow control be disabled for a queue pair, then the host should size each\nSubmission Queue to support the maximum number of commands that the host could have outstanding at\none time for that Submission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 237,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0977",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5473877787590027
  },
  {
    "content": "The maximum size of the Admin Submission Queue is specified in the Admin Max SQ Size (ASQSZ) field\nof the Discovery Log Page Entry for the NVM subsystem (refer to section 5.16.1.23).\n\nThe maximum size of an I/O Submission Queue is specified in the Maximum Queue Entries Supported\n(MQES) field of the Controller Capabilities (CAP) property for the controller (refer to section 3.1.3.1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 385,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0978",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5893829464912415
  },
  {
    "content": "The Maximum Outstanding Commands (MAXCMD) value in the Identify Controller data structure indicates\nthe maximum number of commands that the controller processes at one time for a particular I/O Queue.\nThe host may use this value to size I/O Submission Queues and optimize the number of commands\nsubmitted at one time per queue to achieve the best performance.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 359,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0979",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43851014971733093
  },
  {
    "content": "If SQ flow control is disabled, then the host should limit the number of outstanding commands for a queue\npair to be less than the size of the Submission Queue. If the controller detects that the number of\noutstanding commands for a queue pair is greater than or equal to the size of the Submission Queue, then\nthe controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 332,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0980",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3399195969104767
  },
  {
    "content": "a) stop processing commands and set the Controller Fatal Status (CSTS.CFS) bit to ‘1’ (refer to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0981",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12248215824365616
  },
  {
    "content": "section 9.5); and\nb) terminate the NVMe Transport connection and end the association between the host and the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0982",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22319257259368896
  },
  {
    "content": "**3.3.2.6** **Submission Queue Flow Control**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0983",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6612052917480469
  },
  {
    "content": "This section applies only to Submission Queues that use SQ flow control.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0984",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42998477816581726
  },
  {
    "content": "The Submission Queue has a Head entry pointer and a Tail entry pointer that are used to manage the\nqueue and determine the number of Submission Queue capsules available to the host for new submissions.\nThe Head and Tail entry pointers are initialized to 0h when a queue is created. All arithmetic operations\nand comparisons on entry pointers are performed modulo the queue size with queue wrap conditions taken\ninto account. The host increments the Tail entry pointer when the host adds a capsule to a queue. The\ncontroller increments the Head entry pointer when that controller removes a capsule from the queue.\n\nThe Submission Queue Head entry pointer is maintained by the controller and is communicated to the host\nin the SQHD field of completion queue entries. The host uses the received SQHD values for Submission\nQueue management (e.g., to determine whether the Submission Queue is full).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 894,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0985",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5711038112640381
  },
  {
    "content": "The Submission Queue Tail entry pointer is local to the host and is not communicated to the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0986",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5173549652099609
  },
  {
    "content": "The Submission Queue is full when the Head entry pointer equals one more than the Tail entry pointer (i.e.,\nincrementing the Tail entry pointer has caused it to wrap around to just behind the Head entry pointer). A\nfull Submission Queue contains one less capsule than the queue size. A host may continue to submit\ncommands to a Submission Queue as long as the queue is not full.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 378,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0987",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13778828084468842
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_0988",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13560274243354797
  },
  {
    "content": "If the controller detects that the host has submitted a command capsule to a full Submission Queue, then\nthe controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 126,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0989",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3546239733695984
  },
  {
    "content": "a) stop processing commands and set the Controller Fatal Status (CSTS.CFS) bit to ‘1’ (refer to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0990",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12248215824365616
  },
  {
    "content": "section 9.5); and\nb) terminate the NVMe Transport connection and end the association between the host and the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0991",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14533039927482605
  },
  {
    "content": "The Submission Queue is empty when the Head entry pointer equals the Tail entry pointer.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0992",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5889270305633545
  },
  {
    "content": "**3.3.2.7** **Submission Queue Head Pointer Update Optimization**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0993",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6211321949958801
  },
  {
    "content": "Submission Queue Head Pointer update optimization does not apply to queue pairs for which Submission\nQueue (SQ) flow control is disabled, as the SQHD field is reserved if SQ flow control is disabled, refer to\nsection 3.3.2.5 and to section 6.3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 244,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0994",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24602541327476501
  },
  {
    "content": "The NVMe Transport may omit transmission of the SQHD value for a response capsule that:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0995",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1648092120885849
  },
  {
    "content": "a) contains a Generic Command status (i.e., Status Code Type 0h) indicating successful",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0996",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5420503616333008
  },
  {
    "content": "completion of a command (i.e., Status Code 00h);\nb) is not a Connect response capsule; and\nc) is not a Disconnect response capsule.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 131,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0997",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28611287474632263
  },
  {
    "content": "If a new SQHD value is not received in a response capsule, the host continues to use its previous SQHD\nvalue. Thus, at the NVMe layer there is a logical progression of SQHD values despite the fact that the\nNVMe Transport may not actually transfer the SQHD value in each response capsule.\n\nThe NVMe Transport may deliver response capsules that do not contain an SQHD value to the host in any\norder. The applicable NVMe Transport binding specification defines how presence versus absence of an\nSQHD value in a response capsule is indicated by the NVMe Transport.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 560,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0998",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5317602753639221
  },
  {
    "content": "Periodic SQHD updates at the host are required to avoid Submission Queue (SQ) starvation as SQHD\nvalue transmission in responses is the only means of releasing SQ slots for host reuse.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 184,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_0999",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5771511793136597
  },
  {
    "content": "An NVMe Transport may transmit an SQHD value in every response capsule. If an NVMe Transport does\nnot transmit an SQHD value in every response capsule, then an SQHD value should be transmitted\nperiodically (e.g., in at least one of every n response capsules on a CQ, where n is 10% of the size of the\nassociated SQ) or more often. An SQHD value should always be transmitted if 90% or more of the slots in\nthe associated SQ are occupied at the subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 453,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1000",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10895048826932907
  },
  {
    "content": "**3.3.2.8** **Completion Queue Considerations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1001",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47590023279190063
  },
  {
    "content": "Completion Queue flow control (refer to section 3.3.1.2.1) is not used in the message-based transport\nqueue model. Message-based transport Completion Queues do not use either Head entry pointers or Tail\nentry pointers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 218,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1002",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4035117030143738
  },
  {
    "content": "The host should size each Completion Queue to support the maximum number of commands that the host\ncould have outstanding at one time for a particular Submission Queue. The Completion Queue size may\nbe larger than the size of the corresponding Submission Queue to accommodate responses for commands\nthat are being processed by the controller in addition to responses for commands that are still in the\nSubmission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 419,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1003",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.621873676776886
  },
  {
    "content": "If the size of a Completion Queue is too small for the number of outstanding commands and the controller\nsubmits a response capsule to a full Completion Queue, then the results are undefined.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 191,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1004",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4060082733631134
  },
  {
    "content": "The Maximum Outstanding Commands (MAXCMD) value in the Identify Controller data structure indicates\nthe maximum number of commands that the controller processes at one time for a particular I/O Queue.\nThe host may use this value to size I/O Completion Queues and optimize the number of commands\nsubmitted at one time per queue to achieve the best performance.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 359,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1005",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2428961992263794
  },
  {
    "content": "Altering a response capsule between controller submission to the Completion Queue and transport delivery\nof that capsule to the host results in undefined behavior.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1006",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19943280518054962
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1007",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34010934829711914
  },
  {
    "content": "**3.3.2.9** **Transport Requirements**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1008",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4651021957397461
  },
  {
    "content": "This section defines requirements that all NVMe Transports that support an NVMe over Fabrics\nimplementation shall meet.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 119,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1009",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5243186950683594
  },
  {
    "content": "The NVMe Transport may support NVMe Transport error detection and report errors to the NVMe layer in\ncommand status values. The controller may record NVMe Transport specific errors in the Error Information\nlog page. Transport errors that cause loss of a message or loss of data in a way that the low-level NVMe\nTransport cannot replay or recover should cause:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 359,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1010",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5812397003173828
  },
  {
    "content": "- the deletion of the individual I/O Queues (refer to section 3.3.2.4) and the associated NVMe\nTransport connection on which that NVMe Transport level error occurred; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1011",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5497802495956421
  },
  {
    "content": "- termination of the NVMe Transport connection and the association between the host and controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1012",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6004931926727295
  },
  {
    "content": "The NVMe Transport shall provide reliable delivery of capsules between a host and NVM subsystem (and\nallocated controller) over each connection. The NVMe Transport may deliver command capsules in any\norder on each queue except for I/O commands that are part of fused operations (refer to section 3.4.2).\n\nFor command capsules that are part of fused operations for I/O commands, the NVMe Transport:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 397,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1013",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5891779065132141
  },
  {
    "content": "a) shall deliver the first and second command capsules for each fused operation to the queue in\norder; and\nb) shall not deliver any other command capsule for the same Submission Queue between delivery\n\nof the two command capsules for a fused operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 252,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1014",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3148367404937744
  },
  {
    "content": "The NVMe Transport shall provide reliable delivery of response capsules from an NVMe subsystem to a\nhost over each connection. The NVMe Transport shall deliver response capsules that include an SQ Head\nPointer (SQHD) value to the host in-order; this includes all Connect response capsules and all Disconnect\nresponse capsules.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 326,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1015",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20691177248954773
  },
  {
    "content": "**Queueing Data Structures**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1016",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.346215158700943
  },
  {
    "content": "**3.3.3.1** **Submission Queue Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1017",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11871414631605148
  },
  {
    "content": "Each Common Command Format command is 64 bytes in size.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1018",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42128828167915344
  },
  {
    "content": "Command Dword 0, Namespace Identifier, Metadata Pointer, PRP Entry 1, PRP Entry 2, SGL Entry 1, and\nMetadata SGL Segment Pointer have common definitions for all Admin commands and I/O commands for\nall I/O Command Sets. Metadata Pointer, PRP Entry 1, PRP Entry 2, and Metadata SGL Segment Pointer\nare not used by all commands. Command Dword 0 is defined in Figure 86.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 366,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1019",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5161716938018799
  },
  {
    "content": "**Figure 86: Command Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1020",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37158820033073425
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Command Identifier (CID): This field specifies a unique identifier for the command when combined with the<br>Submission Queue identifier.<br>The value of FFFFh should not be used as the Error Information log page (refer to section 5.16.1.2) uses this<br>value to indicate an error is not associated with a particular command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 362,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1021",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2653767466545105
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1022",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0881798267364502
  },
  {
    "content": "**Figure 86: Command Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1023",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16736379265785217
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15:14|PRP or SGL for Data Transfer (PSDT): This field specifies whether PRPs or SGLs are used for any data<br>transfer associated with the command. PRPs shall be used for all Admin commands for NVMe over PCIe<br>implementations. SGLs shall be used for all Admin and I/O commands for NVMe over Fabrics implementations<br>(i.e., this field set to 01b). An NVMe Transport may support only specific values (refer to the applicable NVMe<br>Transport binding specification for details).<br>Value Definition<br>00b PRPs are used for this transfer.<br>SGLs are used for this transfer. If used, Metadata Pointer (MPTR) contains an address<br>of a single contiguous physical buffer.<br>01b<br>Refer to bit 17 of the SGLS field in the Identify Controller data structure (refer to Figure<br>275) for alignment requirements.<br>SGLs are used for this transfer. If used, Metadata Pointer (MPTR) contains an address<br>10b<br>of an SGL segment containing exactly one SGL Descriptor that is qword aligned.<br>11b Reserved<br>If there is metadata that is not interleaved with the user data, as specified in the Format NVM command, then<br>the Metadata Pointer (MPTR) field is used to point to the metadata. The definition of the Metadata Pointer field<br>is dependent on the setting in this field. Refer to Figure 87.|\n|13:10|Reserved|\n|09:08|Fused Operation (FUSE): In a fused operation, a complex command is created by “fusing” together two<br>simpler commands. Refer to section 3.4.2. This field specifies whether this command is part of a fused<br>operation and if so, which command it is in the sequence.<br>Value Definition<br>00b Normal operation<br>01b Fused operation, first command<br>10b Fused operation, second command<br>11b Reserved|\n|07:00|Opcode (OPC): This field specifies the opcode of the command to be executed.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1845,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1024",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6454081535339355
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|PRPs are used for this transfer.|\n|01b|SGLs are used for this transfer. If used, Metadata Pointer (MPTR) contains an address<br>of a single contiguous physical buffer.<br>Refer to bit 17 of the SGLS field in the Identify Controller data structure (refer to Figure<br>275) for alignment requirements.|\n|10b|SGLs are used for this transfer. If used, Metadata Pointer (MPTR) contains an address<br>of an SGL segment containing exactly one SGL Descriptor that is qword aligned.|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 523,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1025",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39630126953125
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Normal operation|\n|01b|Fused operation, first command|\n|10b|Fused operation, second command|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1026",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4620201587677002
  },
  {
    "content": "The Common Command Format is defined in Figure 87. Any additional I/O Command Set defined in the\nfuture may use an alternate command size or format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1027",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28888213634490967
  },
  {
    "content": "SGLs shall not be used for Admin commands in NVMe over PCIe implementations.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1028",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16033901274204254
  },
  {
    "content": "**Figure 87: Common Command Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1029",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40354612469673157
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Command Dword 0 (CDW0): This field is common to all commands and is defined in Figure 86.|\n|07:04|Namespace Identifier (NSID): This field specifies the namespace that this command applies to. If the<br>namespace identifier is not used for the command, then this field shall be cleared to 0h. The value FFFFFFFFh<br>in this field is a broadcast value (refer to section 3.2.1.2), where the scope (e.g., the NVM subsystem, all<br>attached namespaces, or all namespaces in the NVM subsystem) is dependent on the command. Refer to<br>Figure 139 and Figure 390 for commands that support the use of the value FFFFFFFFh in this field.<br>Specifying an inactive namespace identifier (refer to section 3.2.1.4) in a command that uses the namespace<br>identifier shall cause the controller to abort the command with a status code of Invalid Field in Command,<br>unless otherwise specified. Specifying an invalid namespace identifier (refer to section 3.2.1.2) in a command<br>that uses the namespace identifier shall cause the controller to abort the command with a status code of Invalid<br>Namespace or Format, unless otherwise specified.<br>If the namespace identifier is used for the command (refer to Figure 139), the value FFFFFFFFh is not<br>supported for that command, and the host specifies a value of FFFFFFFFh, then the controller should abort<br>the command with a status code of Invalid Field in Command, unless otherwise specified.<br>If the namespace identifier is not used for the command and the host specifies a value from 1h to FFFFFFFFh,<br>then the controller should abort the command with a status code of Invalid Field in Command, unless otherwise<br>specified.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1711,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1030",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3860933184623718
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1031",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15867604315280914
  },
  {
    "content": "**Figure 87: Common Command Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1032",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3610396683216095
  },
  {
    "content": "|39:32|PRP Entry 2 (PRP2): This field:<br>• is reserved if the data transfer does not cross a memory page boundary;<br>• specifies the Page Base Address of the second memory page if the data<br>transfer crosses exactly one memory page boundary. E.g.,:<br>o the command data transfer length is equal in size to one memory<br>page and the offset portion of the PBAO field of PRP1 is non-<br>zero; or<br>o the Offset portion of the PBAO field of PRP1 is equal to 0h and<br>the command data transfer length is greater than one memory<br>page and less than or equal to two memory pages in size;<br>and<br>• is a PRP List pointer if the data transfer crosses more than one memory<br>page boundary. E.g.,:<br>o the command data transfer length is greater than or equal to two<br>memory pages in size but the offset portion of the PBAO field of<br>PRP1 is non-zero; or<br>o the command data transfer length is equal in size to more than<br>two memory pages and the Offset portion of the PBAO field of<br>PRP1 is equal to 0h.|\n|---|---|\n|31:24|PRP Entry 1 (PRP1): This field contains the first PRP entry for the command or a<br>PRP List pointer depending on the command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1033",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.622747540473938
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|11:08|Command Dword 2 (CDW2): This field is command specific Dword2.|\n|15:12|Command Dword 3 (CDW3): This field is command specific Dword3.|\n|23:16|Metadata Pointer (MPTR): If CDW0.PSDT (refer to Figure 86) is cleared to 00b, then this field shall contain<br>the address of a contiguous physical buffer of metadata and that address shall be dword aligned (i.e., bits 1:0<br>cleared to 00b). The controller is not required to check that bits 1:0 are cleared to 00b. The controller may<br>report an error of Invalid Field in Command if bits 1:0 are not cleared to 00b. If the controller does not report<br>an error of Invalid Field in Command, then the controller shall operate as if bits 1:0 are cleared to 00b.<br>If CDW0.PSDT is set to 01b, then this field shall contain the address of a contiguous physical buffer of<br>metadata. Refer to bit 17 of the SGLS field in the Identify Controller data structure for alignment requirements.<br>If CDW0.PSDT is set to 10b, then this field shall contain the address of an SGL segment that contains exactly<br>one SGL Descriptor. The address of that SGL segment shall be qword aligned (i.e., bits 2:0 cleared to 000b).<br>The SGL Descriptor contained in that SGL segment is the first SGL Descriptor of the metadata for the<br>command. If the SGL Descriptor contained in that SGL segment is an SGL Data Block descriptor, then that<br>SGL Data Block Descriptor is the only SGL Descriptor and therefore describes the entire metadata data<br>transfer. Refer to section 4.1.2. The controller is not required to check that bits 2:0 are cleared to 000b. The<br>controller may report an error of Invalid Field in Command if bits 2:0 are not cleared to 000b. If the controller<br>does not report an error of Invalid Field in Command, then the controller shall operate as if bits 2:0 are cleared<br>to 000b.|\n|39:24|Data Pointer (DPTR): This field specifies the data used in the command.<br>If CDW0.PSDT is cleared to 00b, then the definition of this field is:<br>PRP Entry 2 (PRP2): This field:<br>• is reserved if the data transfer does not cross a memory page boundary;<br>• specifies the Page Base Address of the second memory page if the data<br>transfer crosses exactly one memory page boundary. E.g.,:<br>o the command data transfer length is equal in size to one memory<br>page and the offset portion of the PBAO field of PRP1 is non-<br>zero; or<br>o the Offset portion of the PBAO field of PRP1 is equal to 0h and<br>the command data transfer length is greater than one memory<br>39:32 page and less than or equal to two memory pages in size;<br>and<br>• is a PRP List pointer if the data transfer crosses more than one memory<br>page boundary. E.g.,:<br>o the command data transfer length is greater than or equal to two<br>memory pages in size but the offset portion of the PBAO field of<br>PRP1 is non-zero; or<br>o the command data transfer length is equal in size to more than<br>two memory pages and the Offset portion of the PBAO field of<br>PRP1 is equal to 0h.<br>PRP Entry 1 (PRP1): This field contains the first PRP entry for the command or a<br>31:24<br>PRP List pointer depending on the command.<br>If CDW0.PSDT is set to 01b or 10b, then the definition of this field is:<br>SGL Entry 1 (SGL1): This field contains the first SGL segment for the command.<br>If the SGL segment is an SGL Data Block or Keyed SGL Data Block or Transport<br>SGL Data Block descriptor, then it describes the entire data transfer. If more than<br>one SGL segment is needed to describe the data transfer, then the first SGL<br>39:24 segment is a Segment, or Last Segment descriptor. Refer to section 4.1.2 for the<br>definition of SGL segments and descriptor types.<br>The NVMe Transport may support a subset of SGL Descriptor types and features<br>as defined in the NVMe Transport binding specification.|\n|43:40|Command Dword 10 (CDW10): This field is command specific Dword 10.|\n|47:44|Command Dword 11 (CDW11): This field is command specific Dword 11.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 4017,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1034",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1948954164981842
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1035",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15867604315280914
  },
  {
    "content": "**Figure 87: Common Command Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1036",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4610460698604584
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|51:48|Command Dword 12 (CDW12): This field is command specific Dword 12.|\n|55:52|Command Dword 13 (CDW13): This field is command specific Dword 13.|\n|59:56|Command Dword 14 (CDW14): This field is command specific Dword 14.|\n|63:60|Command Dword 15 (CDW15): This field is command specific Dword 15.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 329,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1037",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37487176060676575
  },
  {
    "content": "In addition to the fields commonly defined for the Common Command Format, Admin and NVM Vendor\nSpecific commands may support the Number of Dwords in Data Transfer and Number of Dwords in\nMetadata Transfer fields. If supported, the command format for the Admin Vendor Specific Command and\nNVM Vendor Specific Commands are defined in Figure 88. For more details, refer to section 8.23.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 383,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1038",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5902974605560303
  },
  {
    "content": "**Figure 88: Common Command Format – Admin and NVM Vendor Specific Commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 77,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1039",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38086721301078796
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Command Dword 0 (CDW0): This field is common to all commands and is defined in Figure 86.|\n|07:04|Namespace Identifier (NSID): This field indicates the namespace ID that this command applies<br>to. If the namespace ID is not used for the command, then this field shall be cleared to 0h. Setting<br>this value to FFFFFFFFh causes the command to be applied to all namespaces attached to the<br>controller processing the command, unless otherwise specified.<br>The behavior of a controller in response to an inactive namespace ID for a vendor specific<br>command is vendor specific. Specifying an invalid namespace ID in a command that uses the<br>namespace ID shall cause the controller to abort the command with a status code of Invalid<br>Namespace or Format, unless otherwise specified.|\n|15:08|Reserved|\n|39:16|Refer to Figure 87 for the definition of these fields.|\n|43:40|Number of Dwords in Data Transfer (NDT): This field indicates the number of dwords in the data<br>transfer.|\n|47:44|Number of Dwords in Metadata Transfer (NDM): This field indicates the number of dwords in<br>the metadata transfer.|\n|51:48|Command Dword 12 (CDW12): This field is command specific Dword 12.|\n|55:52|Command Dword 13 (CDW13): This field is command specific Dword 13.|\n|59:56|Command Dword 14 (CDW14): This field is command specific Dword 14.|\n|63:60|Command Dword 15 (CDW15): This field is command specific Dword 15.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1445,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1040",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24160780012607574
  },
  {
    "content": "**3.3.3.2** **Common Completion Queue Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1041",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5282002687454224
  },
  {
    "content": "The Common Completion Queue Entry Layout is at least 16 bytes in size. Figure 89 describes the layout\nof the first 16 bytes of the completion queue entry data structure which follows the Common Completion\nQueue Entry Layout. The contents of Dword 0 and Dword 1 are command specific. If a command uses\nDword 0 or Dword 1, then the definition of these dwords is contained within the associated command\ndefinition. If a command does not use Dword 0 or Dword 1, then the unused field(s) are reserved. Dword 2\nis defined in Figure 90 and Dword 3 is defined in Figure 91.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 565,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1042",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42044582962989807
  },
  {
    "content": "If a completion queue entry is constructed via multiple writes, the Phase Tag bit shall be updated in the last\nwrite of that completion queue entry.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1043",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3652358651161194
  },
  {
    "content": "**Figure 89: Common Completion Queue Entry Layout – Admin and All I/O Command Sets**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1044",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3375664949417114
  },
  {
    "content": "|Col1|31|23|Col4|15|7 0|\n|---|---|---|---|---|---|\n|DW0|Command Specific|Command Specific|Command Specific|Command Specific|Command Specific|\n|DW1|Command Specific|Command Specific|Command Specific|Command Specific|Command Specific|\n|DW2|SQ Identifier|SQ Identifier|SQ Identifier|SQ Head Pointer|SQ Head Pointer|\n|DW3|Status|Status|P|Command Identifier|Command Identifier|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 372,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1045",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12316489964723587
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1046",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15833832323551178
  },
  {
    "content": "**Figure 90: Completion Queue Entry: DW 2**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1047",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4011179804801941
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|SQ Identifier (SQID): Indicates the Submission Queue to which the associated command was<br>issued. This field is used by host software when more than one Submission Queue shares a single<br>Completion Queue to uniquely determine the command completed in combination with the<br>Command Identifier (CID).<br>This is a reserved field in NVMe over Fabrics implementations.|\n|15:00|SQ Head Pointer (SQHD): Indicates the current Submission Queue Head pointer for the<br>Submission Queue indicated in the SQ Identifier field. This is used to indicate to the host the<br>submission queue entries that have been consumed and may be re-used for new entries.<br>Note: The value returned is the value of the SQ Head pointer when the completion queue entry<br>was created. By the time host software consumes the completion queue entry, the controller may<br>have an SQ Head pointer that has advanced beyond the value indicated.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 953,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1048",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4069738984107971
  },
  {
    "content": "**Figure 91: Completion Queue Entry: DW 3**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1049",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47898775339126587
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:17|Status : Indicates the status for the command that is being completed. Refer to section 3.3.3.2.1.|\n|16|Phase Tag (P): Identifies whether a completion queue entry is new. Refer to section 3.3.3.2.2.<br>This is a reserved bit in NVMe over Fabrics implementations.|\n|15:00|Command Identifier (CID): Indicates the identifier of the command that is being completed. This<br>identifier is assigned by host software when the command is submitted to the Submission Queue.<br>The combination of the SQ Identifier and Command Identifier uniquely identifies the command that<br>is being completed. The maximum number of requests outstanding for a Submission Queue at<br>one time is 64 Ki.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 715,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1050",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3930715024471283
  },
  {
    "content": "**3.3.3.2.1** **Status Field Definition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1051",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5898324251174927
  },
  {
    "content": "The Status field defines the status for the command indicated in the completion queue entry, defined in\nFigure 92.\n\nA value of 0h for the Status field indicates a successful command completion, with no fatal or non-fatal error\nconditions. Unless otherwise noted, if a command fails to complete successfully for multiple reasons, then\nthe particular status code returned is chosen by the vendor.\n\n**Figure 92: Completion Queue Entry: Status Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 447,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1052",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.303690105676651
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31|Do Not Retry (DNR): If set to ‘1’, indicates that if the same command is re-submitted to any<br>controller in the NVM subsystem, then that re-submitted command is expected to fail. If cleared to<br>‘0’, indicates that the same command may succeed if retried. If a command is aborted due to time<br>limited error recovery (refer to the Error Recovery section in the NVM Command Set Specification),<br>this bit should be cleared to ‘0’. If the SCT and SC fields are cleared to 0h, then this bit should be<br>cleared to ‘0’.|\n|30|More (M): If set to ‘1’, there is more status information for this command as part of the Error<br>Information log page that may be retrieved with the Get Log Page command. If cleared to ‘0’, there<br>is no additional status information for this command. Refer to section 5.16.1.2.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 842,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1053",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4031795263290405
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1054",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09484487026929855
  },
  {
    "content": "**Figure 92: Completion Queue Entry: Status Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1055",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19418865442276
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|29:28|Command Retry Delay (CRD): If the DNR bit is cleared to ‘0’ and the host has set the Advanced<br>Command Retry Enable (ACRE) field to 1h in the Host Behavior Support feature (refer to section<br>5.27.1.18), then:<br>a) a 00b CRD value indicates a command retry delay time of zero (i.e., the host may retry<br>the command immediately); and<br>b) a non-zero CRD value selects a field in the Identify Controller data structure (refer to<br>Figure 275) that indicates the command retry delay time:<br>• a 01b CRD value selects the Command Retry Delay Time 1 (CRDT1) field;<br>• a 10b CRD value selects the Command Retry Delay Time 2 (CRDT2) field; and<br>• a 11b CRD value selects the Command Retry Delay Time 3 (CRDT3) field.<br>The host should not retry the command until at least the amount of time indicated by the selected<br>field has elapsed. It is not an error for the host to retry the command prior to that time.<br>If the DNR bit is set to’1’ in the Status field or the ACRE field is cleared to 0h in the Host Behavior<br>Support feature, then this field is reserved.<br>If the SCT and SC fields are cleared to 0h, then this field should be cleared to 00b.|\n|27:25|Status Code Type (SCT): Indicates the status code type of the completion queue entry. This<br>indicates the type of status code the controller is returning.|\n|24:17|Status Code (SC): Indicates a status code identifying any error or status information for the<br>command indicated.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1489,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1056",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2799185514450073
  },
  {
    "content": "Completion queue entries indicate a Status Code Type (SCT) for the type of completion being reported.\nFigure 93 specifies the status code type values and descriptions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1057",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46853649616241455
  },
  {
    "content": "**Figure 93: Status Code – Status Code Type Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1058",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5544343590736389
  },
  {
    "content": "|Value|Description|Reference|\n|---|---|---|\n|0h|Generic Command Status: Indicates that the command specified by the Command and<br>Submission Queue identifiers in the completion queue entry has completed. These status<br>values are generic across all command types, and include such conditions as success,<br>opcode not supported, and invalid field.|3.3.3.2.1.1|\n|1h|Command Specific Status: Indicates a status value that is specific to a particular<br>command opcode. These values may indicate additional processing is required. Status<br>values such as invalid firmware image or exceeded maximum number of queues is<br>reported with this type.|3.3.3.2.1.2|\n|2h|Media and Data Integrity Errors: Any media specific errors that occur in the NVM or data<br>integrity type errors shall be of this type.|3.3.3.2.1.3|\n|3h|Path Related Status: Indicates that the command specified by the Command and<br>Submission Queue identifier in the completion queue entry has completed. These status<br>values are generic across all command types. These values may indicate that additional<br>process is required and indicate a status value that is specific to:<br>the connection between the host and the controller processing the command; or<br>the characteristics that support Asymmetric Namespace Access Reporting (refer to section<br>8.1), the characteristics of the relationship between the controller processing the command<br>and the specified namespace.|3.3.3.2.1.4|\n|4h to 6h|Reserved||\n|7h|Vendor Specific||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1500,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1059",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6375423669815063
  },
  {
    "content": "The Status Code (SC) field in the completion queue entry indicates more detailed status information about\nthe completion being reported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1060",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41000398993492126
  },
  {
    "content": "Each Status Code set of values is split into three ranges:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1061",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.237028107047081
  },
  {
    "content": "- 00h to 7Fh: Applicable to Admin Command Set, or across multiple command sets;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1062",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4489705264568329
  },
  {
    "content": "- 80h to BFh: I/O Command Set specific status codes; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1063",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04907343536615372
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1064",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28536686301231384
  },
  {
    "content": "- C0h to FFh: Vendor Specific status codes.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1065",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3971547484397888
  },
  {
    "content": "Unless otherwise specified, if multiple status codes apply, then the controller selects the status code that is\nreturned.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 121,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1066",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3407648801803589
  },
  {
    "content": "**3.3.3.2.1.1 Generic Command Status Definition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1067",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5677136778831482
  },
  {
    "content": "Completion queue entries with a Status Code Type (SCT) of Generic Command Status indicate a status\nvalue associated with the command that is generic across many different types of commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 189,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1068",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46337392926216125
  },
  {
    "content": "**Figure 94: Status Code – Generic Command Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1069",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5953096747398376
  },
  {
    "content": "|Value|Description|I/O Command<br>Set Specific|I/O Command<br>1<br>Set(s)|\n|---|---|---|---|\n|00h|Successful Completion: The command completed without<br>error.|No||\n|01h|Invalid Command Opcode: A reserved coded value or an<br>unsupported value in the command opcode field.|No||\n|02h|Invalid Field in Command: A reserved coded value or an<br>unsupported value in a defined field (other than the opcode<br>field). This status code should be used unless another status<br>code is explicitly specified for a particular condition. The field<br>may be in the command parameters as part of the submission<br>queue entry or in data structures pointed to by the command<br>parameters.|No||\n|03h|Command ID Conflict: The command identifier is already in<br>use. Note: It is implementation specific how many commands<br>are searched for a conflict.|No||\n|04h|Data Transfer Error: Transferring the data or metadata<br>associated with a command had an error.|No||\n|05h|Commands Aborted due to Power Loss Notification:<br>Indicates that the command was aborted due to a power loss<br>notification.|No||\n|06h|Internal Error: The command was not completed successfully<br>due to an internal error. Details on the internal device error<br>should be reported as an asynchronous event. Refer to Figure<br>145 for Internal Error Asynchronous Event Information.|No||\n|07h|Command Abort Requested: The command was aborted due<br>to an Abort command being received that specified the<br>Submission Queue Identifier and Command Identifier of this<br>command (refer to section 5.1).|No||\n|08h|Command Aborted due to SQ Deletion: The command was<br>aborted due to a Delete I/O Submission Queue request<br>received for the Submission Queue to which the command was<br>submitted.|No||\n|09h|Command Aborted due to Failed Fused Command: The<br>command was aborted due to the other command in a fused<br>operation failing.|No||\n|0Ah|Command Aborted due to Missing Fused Command: The<br>fused command was aborted due to the adjacent submission<br>queue entry not containing a fused command that is the other<br>command in a supported fused operation (refer to section<br>3.4.2).|No||\n|0Bh|Invalid Namespace or Format: The namespace or the format<br>of that namespace is invalid.|No||\n|0Ch|Command Sequence Error: The command was aborted due<br>to a protocol violation in a multi-command sequence (e.g., a<br>violation of the Security Send and Security Receive sequencing<br>rules in the TCG Storage Synchronous Interface<br>Communications protocol (refer to TCG Storage Architecture<br>Core Specification)).|No||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2581,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1070",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14816062152385712
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1071",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1669200360774994
  },
  {
    "content": "**Figure 94: Status Code – Generic Command Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1072",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40530773997306824
  },
  {
    "content": "|Value|Description|I/O Command<br>Set Specific|I/O Command<br>1<br>Set(s)|\n|---|---|---|---|\n|0Dh|Invalid SGL Segment Descriptor: The command includes an<br>invalid SGL Last Segment or SGL Segment descriptor. This<br>may occur under various conditions, including:<br>a) the SGL segment pointed to by an SGL Last Segment<br>descriptor contains an SGL Segment descriptor or an<br>SGL Last Segment descriptor;<br>b) an SGL Last Segment descriptor contains an invalid<br>length (i.e., a length of 0h or 1h that is not a multiple<br>of 16); or<br>c) an SGL Segment descriptor or an SGL Last Segment<br>descriptor contains an invalid address (e.g., an<br>address that is not qword aligned).|No||\n|0Eh|Invalid Number of SGL Descriptors: There is an SGL Last<br>Segment descriptor or an SGL Segment descriptor in a location<br>other than the last descriptor of a segment based on the length<br>indicated. This is also used for invalid SGLs in a command<br>capsule.|No||\n|0Fh|Data SGL Length Invalid: This may occur if the length of a<br>data SGL is too short. This may occur if the length of a data<br>SGL is too long and the controller does not support SGL<br>transfers longer than the amount of data to be transferred as<br>indicated in the SGL Support field of the Identify Controller data<br>structure.|No||\n|10h|Metadata SGL Length Invalid: This may occur if the length of<br>a metadata SGL is too short. This may occur if the length of a<br>metadata SGL is too long and the controller does not support<br>SGL transfers longer than the amount of data to be transferred<br>as indicated in the SGL Support field of the Identify Controller<br>data structure.|No||\n|11h|SGL Descriptor Type Invalid: The type of an SGL Descriptor<br>is a type that is not supported by the controller, or the<br>combination of type and subtype is not supported by the<br>controller.|No||\n|12h|Invalid Use of Controller Memory Buffer: The attempted use<br>of the Controller Memory Buffer is not supported by the<br>controller. Refer to section 8.3.|No||\n|13h|PRP Offset Invalid: The Offset field for a PRP entry is invalid.<br>This may occur when there is a PRP entry with a non-zero offset<br>after the first entry or when the Offset field in any PRP entry is<br>not dword aligned (i.e., bits 1:0 are not cleared to 00b).|No||\n|14h|Atomic Write Unit Exceeded: See the applicable I/O<br>Command Set specification for the description.|Yes|NVM, ZNS|\n|15h|Operation Denied: The command was denied due to lack of<br>access rights. Refer to the appropriate security specification<br>(e.g., TCG Storage Interface Interactions specification). For<br>media access commands, the Access Denied status code<br>should be used instead.|No||\n|16h|SGL Offset Invalid: The offset specified in an SGL descriptor<br>is invalid. This may occur when using capsules for data<br>transfers in NVMe over Fabrics implementations and an invalid<br>offset in the capsule is specified.|No||\n|17h|Reserved|No||\n|18h|Host Identifier Inconsistent Format: The NVM subsystem<br>detected the simultaneous use of 64-bit and 128-bit Host<br>Identifier values on different controllers.|No||\n|19h|Keep Alive Timer Expired: The Keep Alive Timer expired.|No||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3192,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1073",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18322686851024628
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1074",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1669200360774994
  },
  {
    "content": "**Figure 94: Status Code – Generic Command Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1075",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30447888374328613
  },
  {
    "content": "|Value|Description|I/O Command<br>Set Specific|I/O Command<br>1<br>Set(s)|\n|---|---|---|---|\n|1Ah|Keep Alive Timeout Invalid: The Keep Alive Timeout value<br>specified is invalid. This may be due to an attempt to specify a<br>value of 0h on a transport that requires the Keep Alive feature<br>to be enabled. This may be due to the value specified being too<br>large for the associated NVMe Transport as defined in the<br>NVMe Transport binding specification.|No||\n|1Bh|Command Aborted due to Preempt and Abort: The<br>command was aborted due to a Reservation Acquire command<br>with the Reservation Acquire Action (RACQA) set to 010b<br>(Preempt and Abort).|No||\n|1Ch|Sanitize Failed: The most recent sanitize operation failed and<br>no recovery action has been successfully completed.|No||\n|1Dh|Sanitize In Progress: The requested function (e.g., command)<br>is prohibited while a sanitize operation is in progress. Refer to<br>section 8.21.1.|No||\n|1Eh|SGL Data Block Granularity Invalid: See the applicable I/O<br>Command Set specification for the description.|Yes|NVM, ZNS|\n|1Fh|Command Not Supported for Queue in CMB: The<br>implementation does not support submission of the command<br>to a Submission Queue in the Controller Memory Buffer or<br>command completion to a Completion Queue in the Controller<br>Memory Buffer.<br>Note: NVM Express revision 1.3 and later use this status code<br>only for Sanitize commands.|No||\n|20h|Namespace is Write Protected: The command is prohibited<br>while the namespace is write protected as a result of a change<br>in the namespace write protection state as defined by the<br>Namespace Write Protection State Machine (refer to Figure<br>430).|No||\n|21h|Command Interrupted: Command processing was interrupted<br>and the controller is unable to successfully complete the<br>command. The host should retry the command.<br>If this status code is returned, then the controller shall clear the<br>Do Not Retry bit to ‘0’ in the Status field of the CQE (refer to<br>Figure 92). The controller shall not return this status code<br>unless the host has set the Advanced Command Retry Enable<br>(ACRE) field to 1h in the Host Behavior Support feature (refer<br>to section 5.27.1.18).|No||\n|22h|Transient Transport Error: A transient transport error was<br>detected. If the command is retried on the same controller, the<br>command is likely to succeed. A command that fails with a<br>transient transport error four or more times should be treated<br>as a persistent transport error that is not likely to succeed if<br>retried on the same controller.|No||\n|23h|Command Prohibited by Command and Feature<br>Lockdown: The command was aborted due to command<br>execution being prohibited by the Command and Feature<br>Lockdown (refer to section 8.4).|No||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2785,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1076",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36031827330589294
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1077",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1669200360774994
  },
  {
    "content": "**Figure 94: Status Code – Generic Command Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1078",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4483337700366974
  },
  {
    "content": "|Value|Description|I/O Command<br>Set Specific|I/O Command<br>1<br>Set(s)|\n|---|---|---|---|\n|24h|Admin Command Media Not Ready: The Admin command<br>requires access to media and the media is not ready. The Do<br>Not Retry bit indicates whether re-issuing the command at a<br>later time may succeed. This status code shall only be returned:<br>a) for Admin commands; and<br>b) if the controller is in Controller Ready Independent of<br>Media mode (i.e., CC.CRIME bit is set to ‘1’).<br>This status code shall not be returned with the Do Not Retry bit<br>cleared to ‘0’ after the amount of time indicated by the Controller<br>Ready With Media Timeout (CRTO.CRWMT) field after the<br>controller is enabled (i.e., CC.EN transitions from ‘0’ to ‘1’).<br>Refer to Figure 104 for the list of Admin commands permitted<br>to return this status code.|No||\n|25h to 7Fh|Reserved|||\n|80h|LBA Out of Range: See the applicable I/O Command Set<br>specification for the description.|Yes|NVM, ZNS|\n|81h|Capacity Exceeded: Execution of the command has caused<br>the capacity of the namespace to be exceeded. This error<br>occurs when the Namespace Utilization exceeds the<br>Namespace Capacity, as reported in Figure 245.|No||\n|82h|Namespace Not Ready: The namespace is not ready to be<br>accessed as a result of a condition other than a condition that<br>is reported as an Asymmetric Namespace Access condition.<br>The Do Not Retry bit indicates whether re-issuing the command<br>at a later time may succeed.|No||\n|83h|Reservation Conflict: The command was aborted due to a<br>conflict with a reservation held on the accessed namespace.<br>Refer to section 8.19.|No||\n|84h|Format In Progress: A Format NVM command is in progress<br>on the namespace. The Do Not Retry bit shall be cleared to ‘0’<br>to indicate that the command may succeed if resubmitted.|Yes|NVM, ZNS|\n|85h|Invalid Value Size: See the applicable I/O Command Set<br>specification for the description.|Yes|KV|\n|86h|Invalid Key Size: See the applicable I/O Command Set<br>specification for the description.|Yes|KV|\n|87h|KV Key Does Not Exist: See the applicable I/O Command Set<br>specification for the description.|Yes|KV|\n|88h|Unrecovered Error: See the applicable I/O Command Set<br>specification for the description.|Yes|KV|\n|89h|Key Exists: See the applicable I/O Command Set specification<br>for the description.|Yes|KV|\n|90h to BFh|Reserved|||\n|C0h to FFh|Vendor Specific|||\n|Key:<br>NVM – NVM Command Set<br>ZNS – Zoned Namespace Command Set<br>KV – Key Value Command Set<br>Notes:<br>1. This column is blank unless the value is I/O Command Set specific|Key:<br>NVM – NVM Command Set<br>ZNS – Zoned Namespace Command Set<br>KV – Key Value Command Set<br>Notes:<br>1. This column is blank unless the value is I/O Command Set specific|Key:<br>NVM – NVM Command Set<br>ZNS – Zoned Namespace Command Set<br>KV – Key Value Command Set<br>Notes:<br>1. This column is blank unless the value is I/O Command Set specific|Key:<br>NVM – NVM Command Set<br>ZNS – Zoned Namespace Command Set<br>KV – Key Value Command Set<br>Notes:<br>1. This column is blank unless the value is I/O Command Set specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3146,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1079",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05620739609003067
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1080",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.234644815325737
  },
  {
    "content": "**3.3.3.2.1.2 Command Specific Status Definition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1081",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5229723453521729
  },
  {
    "content": "Completion queue entries with a Status Code Type (SCT) of Command Specific Errors indicate an error\nthat is specific to a particular command opcode. Status codes of 00h to 7Fh are for Admin command errors.\nStatus codes of 80h to BFh are specific to the selected I/O command sets.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 279,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1082",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43497657775878906
  },
  {
    "content": "**Figure 95: Status Code – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1083",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3496139347553253
  },
  {
    "content": "|Value|Description|Commands Affected|\n|---|---|---|\n|00h|Completion Queue Invalid|Create I/O Submission Queue|\n|01h|Invalid Queue Identifier|Create I/O Submission Queue, Create I/O<br>Completion Queue, Delete I/O Completion<br>Queue, Delete I/O Submission Queue|\n|02h|Invalid Queue Size|Create I/O Submission Queue, Create I/O<br>Completion Queue|\n|03h|Abort Command Limit Exceeded|Abort|\n|04h|Reserved||\n|05h|Asynchronous Event Request Limit Exceeded|Asynchronous Event Request|\n|06h|Invalid Firmware Slot|Firmware Commit|\n|07h|Invalid Firmware Image|Firmware Commit|\n|08h|Invalid Interrupt Vector|Create I/O Completion Queue|\n|09h|Invalid Log Page|Get Log Page|\n|0Ah|Invalid Format|Format NVM, Namespace Management|\n|0Bh|Firmware Activation Requires Conventional Reset|Firmware Commit, Sanitize|\n|0Ch|Invalid Queue Deletion|Delete I/O Completion Queue|\n|0Dh|Feature Identifier Not Saveable|Set Features|\n|0Eh|Feature Not Changeable|Set Features|\n|0Fh|Feature Not Namespace Specific|Set Features|\n|10h|Firmware Activation Requires NVM Subsystem Reset|Firmware Commit, Sanitize|\n|11h|Firmware Activation Requires Controller Level Reset|Firmware Commit, Sanitize|\n|12h|Firmware Activation Requires Maximum Time Violation|Firmware Commit|\n|13h|Firmware Activation Prohibited|Firmware Commit|\n|14h|Overlapping Range|Firmware Commit, Firmware Image Download,<br>Set Features|\n|15h|Namespace Insufficient Capacity|Namespace Management|\n|16h|Namespace Identifier Unavailable|Namespace Management|\n|17h|Reserved||\n|18h|Namespace Already Attached|Namespace Attachment|\n|19h|Namespace Is Private|Namespace Attachment|\n|1Ah|Namespace Not Attached|Namespace Attachment|\n|1Bh|Thin Provisioning Not Supported|Namespace Management|\n|1Ch|Controller List Invalid|Namespace Attachment|\n|1Dh|Device Self-test In Progress|Device Self-test|\n|1Eh|Boot Partition Write Prohibited|Firmware Commit|\n|1Fh|Invalid Controller Identifier|Virtualization Management|\n|20h|Invalid Secondary Controller State|Virtualization Management|\n|21h|Invalid Number of Controller Resources|Virtualization Management|\n|22h|Invalid Resource Identifier|Virtualization Management|\n|23h|Sanitize Prohibited While Persistent Memory Region is<br>Enabled|Sanitize|\n|24h|ANA Group Identifier Invalid|Namespace Management|\n|25h|ANA Attach Failed|Namespace Attachment|\n|26h|Insufficient Capacity|Capacity Management|\n|27h|Namespace Attachment Limit Exceeded|Namespace Attachment|\n|28h|Prohibition of Command Execution Not Supported|Lockdown|\n|29h|I/O Command Set Not Supported|Namespace Attachment, Namespace<br>Management|\n|2Ah|I/O Command Set Not Enabled|Namespace Attachment|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2625,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1084",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19717903435230255
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1085",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14774058759212494
  },
  {
    "content": "**Figure 95: Status Code – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1086",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5479493737220764
  },
  {
    "content": "|Value|Description|Commands Affected|\n|---|---|---|\n|2Bh|I/O Command Set Combination Rejected|Set Features|\n|2Ch|Invalid I/O Command Set|Identify, Namespace Management|\n|2Dh|Identifier Unavailable|Capacity Management|\n|2Eh to 6Fh|Reserved||\n|70h to 7Fh|Directive Specific|NOTE 1|\n|80h to BFh|I/O Command Set Specific|Refer to Figure 96|\n|C0h to FFh|Vendor Specific||\n|Notes:<br>1. The Directives Specific range defines Directives specific status values. Refer to section 8.7.|Notes:<br>1. The Directives Specific range defines Directives specific status values. Refer to section 8.7.|Notes:<br>1. The Directives Specific range defines Directives specific status values. Refer to section 8.7.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 692,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1087",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5864315629005432
  },
  {
    "content": "**Figure 96: Status Code – Command Specific Status Values, I/O Commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 73,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1088",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5265440940856934
  },
  {
    "content": "|Value|Description|\n|---|---|\n|80h|Conflicting Attributes|\n|81h|Invalid Protection Information|\n|82h|Attempted Write to Read Only Range|\n|83h|Command Size Limit Exceeded|\n|84h to B7h|Reserved|\n|B8h|Zoned Boundary Error|\n|B9h|Zone Is Full|\n|BAh|Zone Is Read Only|\n|BBh|Zone Is Offline|\n|BCh|Zone Invalid Write|\n|BDh|Too Many Active Zones|\n|BEh|Too Many Open Zones|\n|BFh|Invalid Zone State Transition|\n|Notes:<br>1. A = All I/O Command Sets, C = Command Set Specific.|Notes:<br>1. A = All I/O Command Sets, C = Command Set Specific.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 531,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1089",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4093973934650421
  },
  {
    "content": "**Figure 97: Status Code – Command Specific Status Values, Fabrics Commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 77,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1090",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2819923758506775
  },
  {
    "content": "|Value|Description|Commands<br>Affected|\n|---|---|---|\n|80h|Incompatible Format: The NVM subsystem does not support the record format<br>specified by the host.|Connect,<br>Disconnect|\n|81h|Controller Busy: The controller is already associated with a host (Connect<br>command). This value is also returned if there is no available controller (Connect<br>command).<br>The controller is not able to disconnect the I/O Queue at the current time<br>(Disconnect command).|Connect,<br>Disconnect|\n|82h|Connect Invalid Parameters: One or more of the command parameters (e.g.,<br>Host NQN, Subsystem NQN, Host Identifier, Controller ID, Queue ID) specified<br>are not valid.|Connect|\n|83h|Connect Restart Discovery: The NVM subsystem requested is not available.<br>The host should restart the discovery process.|Connect|\n|84h|Connect Invalid Host: The host is not allowed to establish an association to any<br>controller in the NVM subsystem or the host is not allowed to establish an<br>association to the specified controller.|Connect|\n|85h|Invalid Queue Type: The command was sent on the wrong queue type (e.g., a<br>Disconnect command was sent on the Admin queue).|Disconnect|\n|86h to 8Fh|Reserved|Reserved|\n|90h|Discover Restart: The snapshot of the records is now invalid or out of date. The<br>host should re-read the Discovery Log Page.|Get Log Page|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1349,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1091",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3748391270637512
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1092",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23970574140548706
  },
  {
    "content": "**Figure 97: Status Code – Command Specific Status Values, Fabrics Commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 77,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1093",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3725540041923523
  },
  {
    "content": "|Value|Description|Commands<br>Affected|\n|---|---|---|\n|91h|Authentication Required: NVMe in-band authentication is required and the<br>queue has not yet been authenticated.|NOTE 1|\n|92h to AFh|Reserved|Reserved|\n|B0h to BFh|Transport Specific: The status values in this range are NVMe Transport specific. Refer to the<br>appropriate NVMe Transport binding specification for the definition of these status values.|Transport Specific: The status values in this range are NVMe Transport specific. Refer to the<br>appropriate NVMe Transport binding specification for the definition of these status values.|\n|Notes:<br>1. All commands other than Connect, Authenticate Send, and Authenticate Receive.|Notes:<br>1. All commands other than Connect, Authenticate Send, and Authenticate Receive.|Notes:<br>1. All commands other than Connect, Authenticate Send, and Authenticate Receive.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 878,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1094",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21216189861297607
  },
  {
    "content": "**3.3.3.2.1.3 Media and Data Integrity Errors Definition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1095",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5402458310127258
  },
  {
    "content": "Completion queue entries with a Status Code Type (SCT) of Media and Data Integrity Errors indicate an\nerror associated with the command that is due to an error associated with the NVM media or a data integrity\ntype error.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 221,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1096",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5141247510910034
  },
  {
    "content": "**Figure 98: Status Code – Media and Data Integrity Error Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1097",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5242671966552734
  },
  {
    "content": "|Value|Description|Command Set<br>Specific|Command<br>Set(s)|\n|---|---|---|---|\n|00h to 7Fh|Reserved|||\n|80h|Write Fault: The write data could not be committed to the<br>media.|No||\n|81h|Unrecovered Read Error: The read data could not be<br>recovered from the media.|No||\n|82h|End-to-end Guard Check Error: The command was aborted<br>due to an end-to-end guard check failure.|No||\n|83h|End-to-end Application Tag Check Error: The command was<br>aborted due to an end-to-end application tag check failure.|No||\n|84h|End-to-end Reference Tag Check Error: The command was<br>aborted due to an end-to-end reference tag check failure.|No||\n|85h|Compare Failure: See the NVM Command Set Specification<br>for the description.|Yes|NVM|\n|86h|Access Denied: Access to the namespace and/or user data is<br>denied due to lack of access rights. Refer to the appropriate<br>security specification (e.g., TCG Storage Interface Interactions<br>Specification).|No||\n|87h|Deallocated or Unwritten Logical Block: See the NVM<br>Command Set Specification for the description.|Yes|NVM|\n|88h|End-to-End Storage Tag Check Error: The command was<br>aborted due to an end-to-end storage tag check failure.|No||\n|89h to BFh|Reserved|||\n|C0h to FFh|Vendor Specific|||\n|Key:<br>NVM – NVM Command Set|Key:<br>NVM – NVM Command Set|Key:<br>NVM – NVM Command Set|Key:<br>NVM – NVM Command Set|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1362,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1098",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25324374437332153
  },
  {
    "content": "**3.3.3.2.1.4 Path Related Status Definition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1099",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4742777347564697
  },
  {
    "content": "Completion queue entries with a Status Code Type (SCT) of Path Related Status (refer to Figure 99)\nindicate a status value associated with the command that is generic across many different types of\ncommands and applies to a specific connection between the host and controller processing the command\nor between the controller and the namespace. The command for which this status is returned may be retried\non a different controller in the same NVM subsystem if more than one controller is available to the host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 510,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1100",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30264902114868164
  },
  {
    "content": "In a multipath environment, unless otherwise specified, errors of this type should be retried using a different\npath, if one is available.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 138,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1101",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11138889938592911
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1102",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.137964129447937
  },
  {
    "content": "**Figure 99: Status Code – Path Related Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1103",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2902783751487732
  },
  {
    "content": "|Value|Description|\n|---|---|\n|00h|Internal Path Error: The command was not completed as the result of a controller internal error<br>that is specific to the controller processing the command. Retries for the request function should be<br>based on the setting of the DNR bit (refer to Figure 92).|\n|01h|Asymmetric Access Persistent Loss: The requested function (e.g., command) is not able to be<br>performed as a result of the relationship between the controller and the namespace, NVM Set, or<br>Endurance Group being in the ANA Persistent Loss state (refer to section 8.1.3.4). The command<br>should not be re-submitted to the same controller.|\n|02h|Asymmetric Access Inaccessible: The requested function (e.g., command) is not able to be<br>performed as a result of the relationship between the controller and the namespace, NVM Set, or<br>Endurance Group being in the ANA Inaccessible state (refer to section 8.1.3.3). The command<br>should not be re-submitted to the same controller.|\n|03h|Asymmetric Access Transition: The requested function (e.g., command) is not able to be<br>performed as a result of the relationship between the controller and the namespace, NVM Set, or<br>Endurance Group transitioning between Asymmetric Namespace Access states (refer to section<br>8.1.3.5). The requested function should be retried after the transition is complete.|\n|04h to 5Fh|Reserved|\n|Controller detected Pathing errors|Controller detected Pathing errors|\n|60h|Controller Pathing Error: A pathing error was detected by the controller.|\n|61h to 6Fh|Reserved|\n|Host detected Pathing errors|Host detected Pathing errors|\n|70h|Host Pathing Error: A pathing error was detected by the host.|\n|71h|Command Aborted By Host: The command was aborted as a result of host action (e.g., the host<br>disconnected the Fabric connection).|\n|72h to 7Fh|Reserved|\n|Other Pathing errors|Other Pathing errors|\n|80h to BFh|I/O Command Set Specific|\n|C0h to FFh|Vendor Specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1958,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1104",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07095912098884583
  },
  {
    "content": "**3.3.3.2.2** **Phase Tag**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1105",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5388484001159668
  },
  {
    "content": "The Phase Tag bit indicates whether a completion queue entry is new. The Phase Tag bit for each\ncompletion queue entry in:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1106",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42850854992866516
  },
  {
    "content": "- the Admin Completion Queue shall be initialized to ‘0’ by the host prior to setting CC.EN (refer to\nFigure 46) to ‘1’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1107",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6489477157592773
  },
  {
    "content": "- an I/O Completion Queue shall be initialized to ‘0’ by the host prior to submitting the Create I/O\nCompletion Queue command for that queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1108",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4745281934738159
  },
  {
    "content": "When the controller posts a new completion queue entry to the Completion Queue, the controller shall\ninvert the Phase Tag bit in that completion queue entry (i.e., the inverting of the Phase Tag bit enables the\nhost to detect the new completion queue entry).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 258,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1109",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5542970895767212
  },
  {
    "content": "When a completion queue entry is posted to a completion queue slot in:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1110",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5671781897544861
  },
  {
    "content": "- the Admin Queue for the first time after CC.EN is set to ‘1’, the Phase Tag bit for that completion\nqueue entry is set to ‘1’; and\n\n- an I/O Completion Queue for the first time after the Create I/O Completion Queue command\ncompleted for that queue, the Phase Tag bit for that completion queue entry is set to ‘1’.\n\nThis continues for each completion queue entry that is posted until the controller posts a completion queue\nentry to the highest numbered completion queue slot and wraps to completion queue slot number 0 as\ndescribed in section 3.3.1.2. When that queue wrap condition occurs, the Phase Tag bit is then cleared to\n‘0’ in each completion queue entry that is posted. This continues until another queue wrap condition occurs.\nEach time a queue wrap condition occurs, the value of the Phase Tag bit is inverted (i.e., changes from ‘1’\nto ‘0’ or changes from ‘0’ to ‘1’).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 882,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1111",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20389682054519653
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1112",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25481081008911133
  },
  {
    "content": "**3.3.3.2.2.1 Phase Tag Example**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1113",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5124712586402893
  },
  {
    "content": "Figure 100 shows an example of how the Phase Tag bit changes over time as the Controller completes\ncommands and the host processes those completions. This example shows a Completion Queue consisting\nof 6 entries.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 212,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1114",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5507626533508301
  },
  {
    "content": "**Figure 100: Phase Tag bit Transition Example**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1115",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14989393949508667
  },
  {
    "content": "|1<br>T|Condition|Completion Queue Entry/Slot number|Col4|Col5|Col6|Col7|Col8|\n|---|---|---|---|---|---|---|---|\n|1<br>T|Condition|0|1|2|3|4|5|\n|0|Admin Queue: Host initializes Completion<br>Queue and sets CC.EN to ‘1’<br>I/O Queue: Host initializes<br>Completion Queue and submits<br>Create I/O Completion Queue<br>command|P(0) (E)<br>HEAD-><br>TAIL->|P(0)<br>(E)|P(0)<br>(E)|P(0)<br>(E)|P(0)<br>(E)|P(0)<br>(E)|\n|1|Controller has completed 1<br>command and the host has<br>consumed 0 completions|P(1)<br>HEAD->|P(0) (E)<br>TAIL->|P(0)<br>(E)|P(0)<br>(E)|P(0)<br>(E)|P(0)<br>(E)|\n|2|Controller has completed 6<br>commands and the host has<br>consumed 2 completions|P(1) (E)<br>TAIL->|P(1)<br>(E)|P(1)<br>HEAD-<br>>|P(1)|P(1)|P(1)|\n|3|Controller has completed 7<br>commands and the host has<br>consumed 2 completions|P(0)|P(1)<br>(E)<br>TAIL->|P(1)<br>HEAD-<br>>|P(1)|P(1)|P(1)|\n|4|Controller has completed 7<br>commands and host has consumed<br>4 completions|P(0)|P(1) (E)<br>TAIL->|P(1)<br>(E)|P(1)<br>(E)|P(1)<br>HEAD-<br>>|P(1)|\n|5|Controller has completed 11<br>commands and host has consumed<br>8 completions|P(0)<br>(E)|P(0)<br>(E)|P(0)<br>HEAD-<br>>|P(0)|P(0)|P(1) (E)<br>TAIL->|\n|6|Controller has completed 11<br>commands and host has consumed<br>11 completions|P(0)<br>(E)|P(0)<br>(E)|P(0)<br>(E)|P(0)<br>(E)|P(0)<br>(E)|P(1) (E)<br>HEAD-><br>TAIL->|\n|Key:<br>P(0) = Phase Tag bit for this completion queue entry is cleared to the value ‘0’.<br>P(1) = Phase Tag bit for this completion queue entry is set to the value ‘1’.<br>(E) = The Entry/Slot is empty.<br>HEAD-> = Completion Queue Head Pointer for this completion queue is set to indicate this slot.<br>TAIL-> = Completion Queue Tail Pointer for this completion queue is used within the controller to indicate this<br>slot.<br>Note:<br>T = Time sequence.|Key:<br>P(0) = Phase Tag bit for this completion queue entry is cleared to the value ‘0’.<br>P(1) = Phase Tag bit for this completion queue entry is set to the value ‘1’.<br>(E) = The Entry/Slot is empty.<br>HEAD-> = Completion Queue Head Pointer for this completion queue is set to indicate this slot.<br>TAIL-> = Completion Queue Tail Pointer for this completion queue is used within the controller to indicate this<br>slot.<br>Note:<br>T = Time sequence.|Key:<br>P(0) = Phase Tag bit for this completion queue entry is cleared to the value ‘0’.<br>P(1) = Phase Tag bit for this completion queue entry is set to the value ‘1’.<br>(E) = The Entry/Slot is empty.<br>HEAD-> = Completion Queue Head Pointer for this completion queue is set to indicate this slot.<br>TAIL-> = Completion Queue Tail Pointer for this completion queue is used within the controller to indicate this<br>slot.<br>Note:<br>T = Time sequence.|Key:<br>P(0) = Phase Tag bit for this completion queue entry is cleared to the value ‘0’.<br>P(1) = Phase Tag bit for this completion queue entry is set to the value ‘1’.<br>(E) = The Entry/Slot is empty.<br>HEAD-> = Completion Queue Head Pointer for this completion queue is set to indicate this slot.<br>TAIL-> = Completion Queue Tail Pointer for this completion queue is used within the controller to indicate this<br>slot.<br>Note:<br>T = Time sequence.|Key:<br>P(0) = Phase Tag bit for this completion queue entry is cleared to the value ‘0’.<br>P(1) = Phase Tag bit for this completion queue entry is set to the value ‘1’.<br>(E) = The Entry/Slot is empty.<br>HEAD-> = Completion Queue Head Pointer for this completion queue is set to indicate this slot.<br>TAIL-> = Completion Queue Tail Pointer for this completion queue is used within the controller to indicate this<br>slot.<br>Note:<br>T = Time sequence.|Key:<br>P(0) = Phase Tag bit for this completion queue entry is cleared to the value ‘0’.<br>P(1) = Phase Tag bit for this completion queue entry is set to the value ‘1’.<br>(E) = The Entry/Slot is empty.<br>HEAD-> = Completion Queue Head Pointer for this completion queue is set to indicate this slot.<br>TAIL-> = Completion Queue Tail Pointer for this completion queue is used within the controller to indicate this<br>slot.<br>Note:<br>T = Time sequence.|Key:<br>P(0) = Phase Tag bit for this completion queue entry is cleared to the value ‘0’.<br>P(1) = Phase Tag bit for this completion queue entry is set to the value ‘1’.<br>(E) = The Entry/Slot is empty.<br>HEAD-> = Completion Queue Head Pointer for this completion queue is set to indicate this slot.<br>TAIL-> = Completion Queue Tail Pointer for this completion queue is used within the controller to indicate this<br>slot.<br>Note:<br>T = Time sequence.|Key:<br>P(0) = Phase Tag bit for this completion queue entry is cleared to the value ‘0’.<br>P(1) = Phase Tag bit for this completion queue entry is set to the value ‘1’.<br>(E) = The Entry/Slot is empty.<br>HEAD-> = Completion Queue Head Pointer for this completion queue is set to indicate this slot.<br>TAIL-> = Completion Queue Tail Pointer for this completion queue is used within the controller to indicate this<br>slot.<br>Note:<br>T = Time sequence.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 5026,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1116",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.696073591709137
  },
  {
    "content": "At time 0, the host initializes the Completion queue (i.e., clearing the Phase Tag bit to ‘0’ in each completion\nqueue entry in the completion queue). For the Admin Completion Queue, the host then sets CC.EN to ‘1’\nto enable the controller. For an I/O Completion Queue, the host then sends the Create I/O Completion\nQueue command. The queue, at this time, is in the Empty condition (refer to section 3.3.1.4).\n\nAt time 1, the controller has completed a command, but the host has not consumed that completion queue\nentry. As a result of the command completion, the Phase Tag bit in completion queue entry 0 has been\ninverted to ‘1’. Since no completion queue entries have been consumed, the Completion Queue Head\npointer still indicates completion queue entry 0. The controller has updated the internal Completion Queue\nTail Pointer to indicate that completion queue slot 1 is the next completion queue slot into which the\ncontroller posts a completion queue entry.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 964,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1117",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2187732607126236
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1118",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21842607855796814
  },
  {
    "content": "At time 2, the controller has completed 5 additional commands (i.e., 6 commands have been completed)\nand the host has consumed 2 of the completion queue entries. As a result of the 5 additional commands\nhaving been completed, the Phase Tag bit has been inverted to ‘1’ in completion queue entry 1 through\ncompletion queue entry 5. As a result of 2 completion queue entries having been consumed, the host has\nupdated the Completion Queue Head Pointer to indicate that completion queue entry 0 and completion\nqueue entry 1 have been consumed (i.e., completion queue entry 2 is the next completion queue entry for\nthe host to consume). The controller has updated the internal Completion Queue Tail Pointer to indicate\nthat completion queue slot 0 is the next completion queue slot into which the controller posts a completion\nqueue entry.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 835,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1119",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.9337406158447266
  },
  {
    "content": "At time 3, the controller has completed 1 additional command (i.e., 7 commands have been completed) and\nno additional completion queue entries have been consumed by the host (i.e., 2 completion queue entries\nhave been consumed). As a result of the additional command having been completed, the Phase Tag bit\nhas been inverted to ‘0’ in completion queue entry 0 (i.e., accounting for the queue wrap condition). The\ncontroller has updated the internal Completion Queue Tail Pointer to indicate that completion queue slot 1\nis the next completion queue slot into which the controller posts a completion queue entry **.** The queue, at\nthis time, is in the Full condition (refer to section 3.3.1.5).\n\nAt time 4, the controller has completed no additional commands (i.e., 7 commands have been completed)\nand the host has consumed 2 additional completion queue entries (i.e., 4 completion queue entries have\nbeen consumed). As a result of 2 additional completion queue entries having been consumed, the host has\nupdated the Completion Queue Head Pointer to indicate that completion queue entry 2 and completion\nqueue entry 3 have now been consumed (i.e., completion queue entry 4 is the next completion queue entry\nfor the host to consume). The controller internal Completion Queue Tail Pointer has not changed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1305,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1120",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.9257858395576477
  },
  {
    "content": "At time 5, the controller has completed 11 commands and the host has consumed 8 of the completion\nqueue entries. As a result of the 4 additional commands having been completed, the Phase Tag bit has\nbeen inverted to ‘0’ in completion queue entry 1 through completion queue entry 4. As a result of the 4\nadditional completion queue entries having been consumed, the host has updated the Completion Queue\nHead Pointer to indicate that completion queue entry 5 through completion queue entry 1 (i.e., accounting\nfor the queue wrap condition) have now been consumed (i.e., completion queue entry 2 is the next\ncompletion queue entry for the host to consume). The controller has updated the internal Completion Queue\nTail Pointer to indicate that completion queue slot 5 is the next completion queue slot into which the\ncontroller posts a completion queue entry.\n\nAt time 6, the controller has completed 11 commands and the host has consumed all 11 of the completion\nqueue entries. As a result of no new command completions, there are no changes to the Phase Tag bit\nvalues. As a result of the 3 additional completion queue entries having been consumed, the host has\nupdated the Completion Queue Head Pointer to indicate that completion queue entry 2 through completion\nqueue entry 4 have now been consumed (i.e., completion queue slot 5 is the next completion queue slot\nfrom which the host consumes a completion queue entry). The queue, at this time, is in the Empty condition\n(refer to section 3.3.1.4).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1501,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1121",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4058709144592285
  },
  {
    "content": "**3.3.3.3** **Queue Size**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1122",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6124591827392578
  },
  {
    "content": "The Queue Size is indicated in a 16-bit 0’s based field that indicates the number of slots in the queue. The\nminimum size for a queue is two slots. The maximum size for either an I/O Submission Queue or an I/O\nCompletion Queue is defined as 64 Ki slots, limited by the maximum queue size supported by the controller\nthat is reported in the CAP.MQES field. The maximum size for the Admin Submission and Admin\nCompletion Queue is defined as 4 Ki slots. One slot in each queue is not available for use due to Head and\nTail entry pointer definition.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 545,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1123",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4623311758041382
  },
  {
    "content": "**3.3.3.4** **Queue Identifier**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1124",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5554730892181396
  },
  {
    "content": "Each queue is identified through a 16-bit ID value that is assigned to the queue when it is created. Both I/O\nSubmission Queue identifiers and I/O Completion Queue identifiers are a value from 1 to 65,535.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1125",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20187623798847198
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1126",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1377106010913849
  },
  {
    "content": "**3.3.3.5** **Queue Priority**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1127",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5458853244781494
  },
  {
    "content": "If the weighted round robin with urgent priority class arbitration mechanism is supported, then host software\nmay assign a queue priority service class of Urgent, High, Medium, or Low. If the weighted round robin with\nurgent priority class arbitration mechanism is not supported, then the priority setting is not used and is\nignored by the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 351,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1128",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45541688799858093
  },
  {
    "content": "**3.3.3.6** **Queue Coordination**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1129",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4026945233345032
  },
  {
    "content": "There is one Admin Queue pair associated with multiple I/O queue pairs. The Admin Submission Queue\nand Completion Queue are used to carry out functions that impact the entire controller. An I/O Submission\nQueue and Completion Queue may be used to carry out I/O (read/write) operations and may be distributed\nacross CPU cores and threads.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 337,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1130",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6482594609260559
  },
  {
    "content": "An Admin command may impact one or more I/O queue pairs. The host should ensure that Admin actions\nare coordinated with threads that are responsible for the I/O queue pairs to avoid unnecessary error\nconditions. The details of this coordination are outside the scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1131",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34569552540779114
  },
  {
    "content": "**3.4** **Command Architecture Submission and Completion Mechanism**\n\nThis section describes the command issue and completion mechanism. It also describes how commands\nare built by host software and command completion processing.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1132",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5037777423858643
  },
  {
    "content": "Commands shall only be submitted by the host when the controller is ready as indicated in the Controller\nStatus property (CSTS.RDY) and after appropriate I/O Submission Queue(s) and I/O Completion Queue(s)\nhave been created.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 224,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1133",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37078598141670227
  },
  {
    "content": "**Command Ordering Requirements**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1134",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47395581007003784
  },
  {
    "content": "Commands which are not part of a fused operation (refer to section 3.4.2) and which comply with atomic\noperations requirements (refer to section 3.4.3), are processed as independent entities without reference\nto other commands submitted to the same I/O Submission Queue or to commands submitted to other I/O\nSubmission Queues. For example, the controller is not responsible for checking the LBA of a NVM\nCommand Set Read command or Write command to ensure any type of ordering between commands. If a\nRead command is submitted for LBA *x* and there is a Write command also submitted for LBA *x*, there is no\nguarantee of the order of completion for those commands (the Read command may finish first or the Write\ncommand may finish first). If there are ordering requirements between these commands, host software or\nthe associated application is required to enforce that ordering above the level of the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 912,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1135",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5581164360046387
  },
  {
    "content": "Fused operations enable a more complex command by “fusing” together two simpler commands. This\nfeature is optional; support for this feature is indicated in the FUSES field in the Identify Controller data\nstructure in Figure 275. In a fused operation, the requirements are:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 273,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1136",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3869013488292694
  },
  {
    "content": "- The commands shall be executed in sequence as an atomic unit. The controller shall behave as if\nno other operations have been executed between these two commands;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1137",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5700605511665344
  },
  {
    "content": "- The operation ends at the point an error is encountered in either command. If the first command in\nthe sequence failed, then the second command in the sequence shall be aborted. If the second\ncommand in the sequence failed, then the completion status of the first command is sequence\nspecific and is defined within the Fused Operation section of the applicable I/O Command Set\nspecification;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 393,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1138",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3730943202972412
  },
  {
    "content": "- The commands shall be inserted next to each other in the same Submission Queue. If the first\ncommand is in the last slot in the Submission Queue, then the second command shall be the first\nslot in the Submission Queue as part of wrapping around. In the memory-based transport queue\nmodel, the Submission Queue Tail doorbell pointer update shall indicate both commands as part\nof one doorbell update. In the message-based transport queue model, the command capsules shall\nbe submitted in-order.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 495,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1139",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2968725562095642
  },
  {
    "content": "- To abort the fused operation, the host shall submit an Abort command separately for each of the\ncommands; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1140",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08518773317337036
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1141",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08250289410352707
  },
  {
    "content": "- A completion queue entry is posted by the controller for each of the commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 80,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1142",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32680070400238037
  },
  {
    "content": "Whether a command is part of a fused operation is indicated in the Fused Operation (FUSE) field of\nCommand Dword 0 shown in Figure 86. The FUSE field also indicates whether each command is the first\ncommand in the fused operation or the second command in the fused operation. If the FUSE field is set to\na non-zero value and the controller does not support the requested fused operation, then the controller\nshould abort the command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 480,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1143",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34254035353660583
  },
  {
    "content": "Refer to each I/O Command Set specification for applicability and additional details, if any.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1144",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23288275301456451
  },
  {
    "content": "**Atomic Operations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1145",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.648172914981842
  },
  {
    "content": "The definition for atomic operations is command set specific. Refer to each I/O Command Set specification\nfor applicability and additional details, if any.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1146",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.411767840385437
  },
  {
    "content": "**Command Arbitration**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1147",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32106879353523254
  },
  {
    "content": "After a command has been submitted to the controller (refer to section 1.5.13), the controller transfers\nsubmitted commands into the controller for subsequent processing using a vendor specific algorithm.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 204,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1148",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5633808970451355
  },
  {
    "content": "A command is being processed when the controller and/or namespace state is being accessed or modified\nby the command (e.g., a Feature setting is being accessed or modified or a logical block is being accessed\nor modified).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 222,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1149",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6747646331787109
  },
  {
    "content": "A command is completed when a completion queue entry for the command has been posted to the\ncorresponding Completion Queue. Upon completion, all controller state and/or namespace state\nmodifications made by that command are globally visible to all subsequently submitted commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 280,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1150",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5037906765937805
  },
  {
    "content": "A candidate command is a submitted command which has been transferred into the controller that the\ncontroller deems ready for processing. The controller selects command(s) for processing from the pool of\nsubmitted commands for each Submission Queue. The commands that comprise a fused operation shall\nbe processed together and in order by the controller. The controller may select candidate commands for\nprocessing in any order. The order in which commands are selected for processing does not imply the order\nin which commands are completed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 542,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1151",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42235997319221497
  },
  {
    "content": "Arbitration is the method used to determine the Submission Queue from which the controller starts\nprocessing the next candidate command(s). Once a Submission Queue is selected using arbitration, the\nArbitration Burst setting determines the maximum number of commands that the controller may start\nprocessing from that Submission Queue before arbitration shall again take place. A fused operation may\nbe considered as one or two commands by the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 455,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1152",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5737138390541077
  },
  {
    "content": "All controllers shall support the round robin command arbitration mechanism. A controller may optionally\nimplement weighted round robin with urgent priority class and/or a vendor specific arbitration mechanism.\nThe Arbitration Mechanism Supported field in the Controller Capabilities property (CC.AMS) indicates\noptional arbitration mechanisms supported by the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 372,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1153",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6553413271903992
  },
  {
    "content": "In order to make efficient use of the non-volatile memory, it is often advantageous to execute multiple\ncommands from a Submission Queue in parallel. For Submission Queues that are using weighted round\nrobin with urgent priority class or round robin arbitration, host software may configure an Arbitration Burst\nsetting. The Arbitration Burst setting indicates the maximum number of commands that the controller may\nlaunch at one time from a particular Submission Queue. It is recommended that host software configure\nthe Arbitration Burst setting as close to the recommended value by the controller as possible (specified in\nthe Recommended Arbitration Burst field of the Identify Controller data structure in Figure 275), taking into\nconsideration any latency requirements. Refer to section 5.27.1.1.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 802,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1154",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46441760659217834
  },
  {
    "content": "**3.4.4.1** **Round Robin Arbitration**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1155",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5135064721107483
  },
  {
    "content": "If the round robin arbitration mechanism is selected, the controller shall implement round robin command\narbitration amongst all Submission Queues, including the Admin Submission Queue. In this case, all\nSubmission Queues are treated with equal priority. The controller may select multiple candidate commands\nfor processing from each Submission Queue per round based on the Arbitration Burst setting.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 400,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1156",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0342462919652462
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1157",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14292089641094208
  },
  {
    "content": "**Figure 101: Round Robin Arbitration**\n#### ASQ SQ SQ SQ",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1158",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6707653999328613
  },
  {
    "content": "**3.4.4.2** **Weighted Round Robin with Urgent Priority Class Arbitration**\n\nIn this arbitration mechanism, there are three strict priority classes and three weighted round robin priority\nlevels. If Submission Queue A is of higher strict priority than Submission Queue B, then all candidate\ncommands in Submission Queue A shall start processing before candidate commands from Submission\nQueue B start processing.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 412,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1159",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5289046764373779
  },
  {
    "content": "The highest strict priority class is the Admin class that includes any command submitted to the Admin\nSubmission Queue. This class has the highest strict priority above commands submitted to any other\nSubmission Queue.\n\nThe next highest strict priority class is the Urgent class. Any I/O Submission Queue assigned to the Urgent\npriority class is serviced next after commands submitted to the Admin Submission Queue, and before any\ncommands submitted to a weighted round robin priority level. Host software should use care in assigning\nany Submission Queue to the Urgent priority class since there is the potential to starve I/O Submission\nQueues in the weighted round robin priority levels as there is no fairness protocol between Urgent and non\nUrgent I/O Submission Queues.\n\nThe lowest strict priority class is the Weighted Round Robin class. This class consists of the three weighted\nround robin priority levels (High, Medium, and Low) that share the remaining bandwidth using weighted\nround robin arbitration. Host software controls the weights for the High, Medium, and Low service classes\nvia the Set Features command. Round robin is used to arbitrate within multiple Submission Queues\nassigned to the same weighted round robin level. The number of candidate commands that may start\nprocessing from each Submission Queue per round is either the Arbitration Burst setting or the remaining\nweighted round robin credits, whichever is smaller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1445,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1160",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15734069049358368
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1161",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1643962860107422
  },
  {
    "content": "**Figure 102: Weighted Round Robin with Urgent Priority Class Arbitration**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 75,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1162",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11980253458023071
  },
  {
    "content": "|Col1|Col2|Col3|\n|---|---|---|\n|RR|Weig|ht(Medium)|\n|RR|||\n|RR|||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1163",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09282971918582916
  },
  {
    "content": "In Figure 102, the Priority decision point selects the highest priority candidate command selected next to\nstart processing.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1164",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14505498111248016
  },
  {
    "content": "**3.4.4.3** **Vendor Specific Arbitration**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1165",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6390062570571899
  },
  {
    "content": "A vendor may choose to implement a vendor specific arbitration mechanism. The mechanism(s) are outside\nthe scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 135,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1166",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.015050914138555527
  },
  {
    "content": "**3.5** **Controller Initialization**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1167",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6783105134963989
  },
  {
    "content": "This section describes the recommended procedure for initializing a controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1168",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5428791046142578
  },
  {
    "content": "**Memory-based Transport Controller Initialization**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1169",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5691149234771729
  },
  {
    "content": "Upon completion of the transport-specific controller initialization steps defined within the relevant NVMe\nTransport binding specification, the host should perform the following sequence of actions to initialize the\ncontroller to begin executing commands:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 255,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1170",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3816063702106476
  },
  {
    "content": "1. The host waits for the controller to indicate that any previous reset is complete by waiting for",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1171",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1945842206478119
  },
  {
    "content": "CSTS.RDY to become ‘0’;\n2. The host configures the Admin Queue by setting the Admin Queue Attributes (AQA), Admin",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 113,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1172",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.435817152261734
  },
  {
    "content": "Submission Queue Base Address (ASQ), and Admin Completion Queue Base Address (ACQ) to\nappropriate values;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 105,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1173",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2776402235031128
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1174",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31803756952285767
  },
  {
    "content": "3. The host determines the supported I/O Command Sets by checking the state of CAP.CSS and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1175",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3862089216709137
  },
  {
    "content": "appropriately initializing CC.CSS as follows:\n\na. If the CAP.CSS bit 7 is set to ‘1’, then the CC.CSS field should be set to 111b;\nb. If the CAP.CSS bit 6 is set to ‘1’, then the CC.CSS field should be set to 110b; and\nc. If the CAP.CSS bit 6 is cleared to ‘0’ and bit 0 is set to ‘1’, then the CC.CSS field should be set",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 321,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1176",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19802825152873993
  },
  {
    "content": "4. The controller settings should be configured. Specifically:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1177",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27434366941452026
  },
  {
    "content": "a. The arbitration mechanism should be selected in CC.AMS; and\nb. The memory page size should be initialized in CC.MPS;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 119,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1178",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3891587257385254
  },
  {
    "content": "5. The host enables the controller by setting CC.EN to ‘1’;\n6. The host waits for the controller to indicate that the controller is ready to process commands. The",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1179",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.593984067440033
  },
  {
    "content": "controller is ready to process commands when CSTS.RDY is set to ‘1’;\n7. The host determines the configuration of the controller by issuing the Identify command specifying",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 170,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1180",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4899049699306488
  },
  {
    "content": "the Identify Controller data structure (i.e., CNS 01h);\n8. The host determines any I/O Command Set specific configuration information as follows:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 145,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1181",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28982073068618774
  },
  {
    "content": "a. If the CAP.CSS bit 6 is set to ‘1’, then the host does the following:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1182",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1403144896030426
  },
  {
    "content": "i. Issue the Identify command specifying the Identify I/O Command Set data structure (CNS\n1Ch); and\nii. Issue the Set Features command with the I/O Command Set Profile Feature Identifier (FID\n19h) specifying the index of the I/O Command Set Combination (refer to Figure 289) to be\nenabled;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1183",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5456067323684692
  },
  {
    "content": "b. For each I/O Command Set that is enabled (Note: the NVM Command Set is enabled if the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1184",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1023901179432869
  },
  {
    "content": "CC.CSS field is set to 000b):",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1185",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1495654284954071
  },
  {
    "content": "i. Issue the Identify command specifying the I/O Command Set specific Active Namespace\nID list (CNS 07h) with the appropriate Command Set Identifier (CSI) value of that I/O\nCommand Set; and\nii. For each NSID that is returned:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1186",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30991628766059875
  },
  {
    "content": "1. If the enabled I/O Command Set is the NVM Command Set or an I/O Command Set",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1187",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5042003989219666
  },
  {
    "content": "based on the NVM Command Set (e.g., the Zoned Namespace Command Set) issue\nthe Identify command specifying the Identify Namespace data structure (CNS 00h);\nand\n2. Issue the Identify command specifying each of the following data structures (refer to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 248,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1188",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5681040287017822
  },
  {
    "content": "Figure 274): the I/O Command Set specific Identify Namespace data structure, the I/O\nCommand Set specific Identify Controller data structure, and the I/O Command Set\nindependent Identify Namespace data structure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 212,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1189",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3699793517589569
  },
  {
    "content": "9. If the controller implements I/O queues, then the host should determine the number of I/O",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1190",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6066300272941589
  },
  {
    "content": "Submission Queues and I/O Completion Queues supported using the Set Features command with\nthe Number of Queues feature identifier. After determining the number of I/O Queues, the NVMe\nTransport specific interrupt registers (e.g. MSI and/or MSI-X registers) should be configured;\n10. If the controller implements I/O queues, then the host should allocate the appropriate number of\n\nI/O Completion Queues based on the number required for the system configuration and the number\nsupported by the controller. The I/O Completion Queues are allocated using the Create I/O\nCompletion Queue command;\n11. If the controller implements I/O queues, then the host should allocate the appropriate number of\n\nI/O Submission Queues based on the number required for the system configuration and the number\nsupported by the controller. The I/O Submission Queues are allocated using the Create I/O\nSubmission Queue command; and\n12. To enable asynchronous notification of optional events, the host should issue a Set Features",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1005,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1191",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3442615866661072
  },
  {
    "content": "command specifying the events to enable. To enable asynchronous notification of events, the host",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1192",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.041430480778217316
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1193",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.040241584181785583
  },
  {
    "content": "should submit an appropriate number of Asynchronous Event Request commands. This step may\nbe done at any point after the controller signals that the controller is ready (i.e., CSTS.RDY is set\nto ‘1’).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 200,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1194",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32504820823669434
  },
  {
    "content": "After performing these steps, the controller shall be ready to process Admin or I/O commands issued by\nthe host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 112,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1195",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3566737473011017
  },
  {
    "content": "For exit of the D3 power state, the initialization steps outlined should be followed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1196",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2612174451351166
  },
  {
    "content": "**Message-based Transport Controller Initialization**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1197",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.350432425737381
  },
  {
    "content": "The host selects the NVM subsystem with which to create a host to controller association. The host first\nestablishes an NVMe Transport connection with the NVM subsystem. Next the host forms an association\nwith a controller and creates the Admin Queue using the Fabrics Connect command. Finally, the host\nconfigures the controller and creates I/O Queues. Figure 103 is a ladder diagram that describes the queue\ncreation process for an Admin Queue or an I/O Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 462,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1198",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5154142379760742
  },
  {
    "content": "**Figure 103: Queue Creation Flow**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1199",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06263585388660431
  },
  {
    "content": "The controller initialization steps after an association is established are described below. For determining\ncapabilities or configuring properties, the host uses the Property Get and Property Set commands,\nrespectively.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 220,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1200",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.421420693397522
  },
  {
    "content": "1. NVMe in-band authentication is performed if required (refer to section 8.13.2);\n2. The host determines the controller capabilities;\n3. The host determines the supported I/O Command Sets by checking the state of CAP.CSS and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1201",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19582392275333405
  },
  {
    "content": "appropriately initializing CC.CSS as follows:\n\na. If the CAP.CSS bit 7 is set to ‘1’, then the CC.CSS field should be set to 111b;\nb. If the CAP.CSS bit 6 is set to ‘1’, then the CC.CSS field should be set to 110b; and\nc. If the CAP.CSS bit 6 is cleared to ‘0’ and bit 0 is set to ‘1’, then the CC.CSS field should be set",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 321,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1202",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25117629766464233
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1203",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19954270124435425
  },
  {
    "content": "4. The host configures controller settings. Specific settings include:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1204",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23500612378120422
  },
  {
    "content": "a. The arbitration mechanism should be selected in CC.AMS; and\nb. The memory page size should be initialized in CC.MPS;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 119,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1205",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3681428134441376
  },
  {
    "content": "5. The controller should be enabled by setting CC.EN to ‘1’;\n6. The host should wait for the controller to indicate the controller is ready to process commands. The",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1206",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.583535373210907
  },
  {
    "content": "controller is ready to process commands when CSTS.RDY is set to ‘1’;\n7. The host determines the configuration of the controller by issuing the Identify command specifying",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 170,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1207",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4899049699306488
  },
  {
    "content": "the Identify Controller data structure (i.e., CNS 01h);\n8. The host determines any I/O Command Set specific configuration information as follows:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 145,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1208",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28982073068618774
  },
  {
    "content": "a. If the CAP.CSS bit 6 is set to ‘1’, then the host does the following:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1209",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1403144896030426
  },
  {
    "content": "i. Issue the Identify command specifying the Identify I/O Command Set data structure (CNS\n1Ch); and\nii. Issue the Set Features command with the I/O Command Set Profile Feature Identifier (FID\n19h) specifying the index of the I/O Command Set Combination (refer to Figure 289) to be\nenabled;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1210",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5456067323684692
  },
  {
    "content": "b. For each I/O Command Set that is enabled (Note: the NVM Command Set is enabled if the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1211",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1023901179432869
  },
  {
    "content": "CC.CSS field is set to 000b):",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1212",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1495654284954071
  },
  {
    "content": "i. Issue the Identify command specifying the I/O Command Set specific Active Namespace\nID list (CNS 07h) with the appropriate Command Set Identifier (CSI) value of that I/O\nCommand Set; and\nii. For each NSID that is returned:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1213",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30991628766059875
  },
  {
    "content": "1. If the enabled I/O Command Set is the NVM Command Set or an I/O Command Set",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1214",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5042003989219666
  },
  {
    "content": "based on the NVM Command Set (e.g., the Zoned Namespace Command Set) issue\nthe Identify command specifying the Identify Namespace data structure (CNS 00h);\nand\n2. Issue the Identify command specifying each of the following data structures (refer to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 248,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1215",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5681040287017822
  },
  {
    "content": "Figure 274): the I/O Command Set specific Identify Namespace data structure, the I/O\nCommand Set specific Identify Controller data structure, and the I/O Command Set\nindependent Identify Namespace data structure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 212,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1216",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11730995029211044
  },
  {
    "content": "9. The host should determine:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1217",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23977017402648926
  },
  {
    "content": "a. the maximum I/O Queue size using CAP.MQES; and\nb. the number of I/O Submission Queues and I/O Completion Queues supported using the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 134,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1218",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35673391819000244
  },
  {
    "content": "response from the Set Features command with the Number of Queues feature identifier;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1219",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1740204244852066
  },
  {
    "content": "10. The host should use the Connect command (refer to section 6.3) to create I/O Submission and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1220",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23139701783657074
  },
  {
    "content": "Completion Queue pairs; and\n11. To enable asynchronous notification of optional events, the host should issue a Set Features",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1221",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5064504146575928
  },
  {
    "content": "command specifying the events to enable. The host may submit one or more Asynchronous Event\nRequest commands to be notified of asynchronous events as described by section 5.2. This step\nmay be done at any point after the controller signals that the controller is ready (i.e., CSTS.RDY is\nset to ‘1’).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 300,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1222",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.153422549366951
  },
  {
    "content": "The association may be removed if step 5 (i.e., setting CC.EN to ‘1’) is not completed within 2 minutes after\nestablishing the association.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 139,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1223",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1310727596282959
  },
  {
    "content": "**Controller Ready Modes During Initialization**\n\nThere are two controller ready modes:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1224",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5411487817764282
  },
  {
    "content": "- **Controller Ready With Media:** By the time the controller becomes ready (i.e., by the time that\nCSTS.RDY transitions from ‘0’ to ‘1’) after the controller is enabled (i.e., CC.EN transitions from ‘0’\nto ‘1’), then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 218,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1225",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14931215345859528
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1226",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24541091918945312
  },
  {
    "content": "a) the controller shall be able to process all commands without error as described in section",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1227",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4906785488128662
  },
  {
    "content": "3.5.4.1; and\nb) all namespaces attached to the controller and all media required to process Admin",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1228",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46388304233551025
  },
  {
    "content": "commands shall be ready (i.e., commands are not permitted to be aborted with a status\ncode of Namespace Not Ready with the Do Not Retry bit cleared to ‘0’ or Admin Command\nMedia Not Ready with the Do Not Retry bit cleared to ‘0’).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 230,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1229",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6687807440757751
  },
  {
    "content": "- **Controller Ready Independent of Media:** After the controller is enabled, all namespaces attached\nto the controller and media required to process Admin commands may or may not become ready\nby the time the controller becomes ready. Any NVM command that specifies one or more\nnamespaces attached to the controller is permitted to be aborted with a status code of Namespace\nNot Ready with the Do Not Retry bit cleared to ‘0’ until CRTO.CRWMT amount of time after the\ncontroller is enabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 490,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1230",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6536234617233276
  },
  {
    "content": "Admin commands that require access to the media are permitted to be aborted with a status code\nof Admin Command Media Not Ready with the Do Not Retry bit cleared to ‘0’ until CRTO.CRWMT\namount of time after the controller is enabled. Refer to Figure 104 for a list of Admin commands\nthat are permitted to be aborted with a status code of Admin Command Media Not Ready.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 368,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1231",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42617881298065186
  },
  {
    "content": "The controller shall be able to process without error as described in section 3.5.4.1:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1232",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3849508762359619
  },
  {
    "content": "a) all Admin commands not listed in Figure 104 by the time the controller is ready;\nb) all Admin commands listed in Figure 104 no later than CRTO.CRWMT amount of time after",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 172,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1233",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6835860013961792
  },
  {
    "content": "the controller is enabled; and\nc) all NVM commands no later than CRTO.CRWMT amount of time after the controller is",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 114,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1234",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18366298079490662
  },
  {
    "content": "**Figure** 104 **: Admin Commands Permitted to Return a Status Code of Admin Command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1235",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5103510022163391
  },
  {
    "content": "|Admin Command|Additional Restrictions|\n|---|---|\n|Capacity Management||\n|Device Self-test|If the Device Self-Test would result in testing one or more namespaces,<br>then returning a status code of Admin Command Media Not Ready is<br>permitted. If the Device Self-Test would not result in testing any<br>namespaces, then returning a status code of Admin Command Media<br>Not Ready is not permitted.|\n|Firmware Commit||\n|Firmware Image Download||\n|Get LBA Status||\n|Get Log Page|Get Log Page is only permitted to return a status code of Admin<br>Command Media Not Ready for the following log pages:<br>• Device Self-test<br>• Firmware Slot Information<br>• Telemetry Controller-Initiated<br>• Telemetry Host-Initiated<br>• Predictable Latency Per NVM Set<br>• Predictable Latency Event Aggregate<br>• Persistent Event Log<br>• LBA Status Information<br>• Endurance Group Event Aggregate<br>• Media Unit Status<br>• Supported Capacity Configuration List<br>• Boot Partition<br>• Reservation Notification<br>• Rotational Media Information<br>• Vendor Specific|\n|Namespace Attachment||\n|Namespace Management||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1105,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1236",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16598376631736755
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1237",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09847363084554672
  },
  {
    "content": "**Figure** 104 **: Admin Commands Permitted to Return a Status Code of Admin Command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1238",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3648405373096466
  },
  {
    "content": "|Admin Command|Additional Restrictions|\n|---|---|\n|Format NVM||\n|Sanitize||\n|1<br>Security Receive||\n|1<br>Security Send||\n|Vendor Specific||\n|Notes:<br>1. A host may require discovery operations performed via Security Send/Receive (e.g., TCG Level 0<br>Discovery) to be processed prior to media being ready. Therefore, it is recommended that controllers<br>not return Admin Command Media Not Ready for such discovery operations.|Notes:<br>1. A host may require discovery operations performed via Security Send/Receive (e.g., TCG Level 0<br>Discovery) to be processed prior to media being ready. Therefore, it is recommended that controllers<br>not return Admin Command Media Not Ready for such discovery operations.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 717,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1239",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3716573417186737
  },
  {
    "content": "The Controller Ready Modes Supported (CAP.CRMS) field (refer to Figure 36) indicates which controller\nready modes are supported. The CAP.CRMS field consists of two bits:\n\n- the Controller Ready With Media Support (CAP.CRMS.CRWMS) bit; and\n\n- the Controller Ready Independent of Media Support (CAP.CRMS.CRIMS) bit.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 313,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1240",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6203652620315552
  },
  {
    "content": "Controllers shall set the CAP.CRMS.CRWMS bit to ‘1’ (i.e., set the CAP.CRMS field to 01b or 11b). The\nCAP.CRMS.CRWMS bit was not defined prior to NVM Express Base Specification, Revision 2.0.\nControllers compliant with revisions earlier than NVM Express Base Specification, Revision 2.0 may clear\nthe CAP.CRMS.CRWMS field to 00b.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 329,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1241",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5671908259391785
  },
  {
    "content": "The Controller Ready Independent of Media Enable (CC.CRIME) bit (refer to Figure 46) controls the\ncontroller ready mode based on the value of the CAP.CRMS field as follows:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 172,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1242",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.698392927646637
  },
  {
    "content": "a) If the CAP.CRMS field is cleared to 00b, the controller ready mode is not able to be selected. In",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1243",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45804402232170105
  },
  {
    "content": "this case, the read-only CC.CRIME bit shall be cleared to ‘0’ and should be ignored by host\nsoftware;\nb) If the CAP.CRMS field is set to 01b (i.e., the CAP.CRMS.CRIMS bit is cleared to ‘0’ and the\n\nCAP.CRMS.CRWMS bit is set to ‘1’), then the controller is in Controller Ready With Media mode\nand the read-only CC.CRIME bit shall be cleared to ‘0’; and\nc) If the CAP.CRMS field is set to 11b, then both controller ready modes are supported, and the host",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 452,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1244",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5991215109825134
  },
  {
    "content": "may select the controller ready mode by modifying the value of the CC.CRIME bit. In this situation,\nthe host should set the controller ready mode by writing to the CC.CRIME bit before the controller\nis enabled (e.g., as part of the initialization sequence of actions described in Section 3.5).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 293,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1245",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4448048174381256
  },
  {
    "content": "**Controller Ready Timeouts During Initialization**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1246",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1465912163257599
  },
  {
    "content": "The CAP.CRMS field was not defined prior to NVM Express Base Specification, Revision 2.0. Controllers\ncompliant with revisions earlier than NVM Express Base Specification, Revision 2.0 may clear the\nCAP.CRMS field to 00b. This section is applicable to controllers that clear the CAP.CRMS field to 00b and\ncontrollers that set CAP.CRMS to a non-zero value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 355,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1247",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15511171519756317
  },
  {
    "content": "There are three controller ready timeout fields:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1248",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05873047932982445
  },
  {
    "content": "1. CAP.TO (refer to Figure 36);\n2. CRTO.CRWMT (refer to Figure 62); and\n3. CRTO.CRIMT (refer to Figure 62).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 107,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1249",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.050724588334560394
  },
  {
    "content": "The details regarding these timeouts during controller initialization are as follows:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1250",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13541598618030548
  },
  {
    "content": "a) The CAP.TO field shall be set as described in Figure 36;\nb) If the CAP.CRMS field is cleared to 00b’, then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 110,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1251",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.415240079164505
  },
  {
    "content": "i. the Controller Ready Independent of Media Timeout (CRTO.CRIMT) field is reserved;\nii. the Controller Ready With Media Timeout (CRTO.CRWMT) field is reserved; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1252",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1450914889574051
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1253",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24371649324893951
  },
  {
    "content": "iii. the worst-case time the host should wait after the controller is enabled (i.e., CC.EN\ntransitions from ‘0’ to ‘1’) for the controller to become ready (CSTS.RDY transitions from\n‘0’ to ‘1’) is indicated by CAP.TO;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 217,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1254",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45989489555358887
  },
  {
    "content": "c) If the controller is in Controller Ready With Media mode (i.e., the CC.CRIME bit is cleared to ‘0’),",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1255",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2921905517578125
  },
  {
    "content": "i. the Controller Ready Independent of Media Timeout (CRTO.CRIMT) field is not applicable;\nand\nii. the Controller Ready With Media Timeout (CRTO.CRWMT) indicates the worst-case time\nthe host should wait after the controller is enabled for:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 239,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1256",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3396296203136444
  },
  {
    "content": "1. the controller to become ready and be able to process all commands without error",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1257",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3898942470550537
  },
  {
    "content": "as described in section 3.5.4.1; and\n2. all attached namespaces and media required to process Admin commands to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1258",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17568334937095642
  },
  {
    "content": "d) If the controller is in Controller Ready Independent of Media mode (i.e., the CC.CRIME bit is set to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1259",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3595837950706482
  },
  {
    "content": "i. the Controller Ready With Media Timeout (CRTO.CRWMT) field indicates the worst-case\ntime that host software should wait for all attached namespaces and media required to\nprocess Admin commands to become ready after the controller is enabled; and\nii. the Controller Ready Independent of Media Timeout (CRTO.CRIMT) field indicates the\nworst-case time the host should wait after the controller is enabled for the controller to\nbecome ready and be able to process:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 463,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1260",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2718391716480255
  },
  {
    "content": "1. all commands that do not access attached namespaces; and\n2. Admin commands that do not require access to media",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 113,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1261",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2134712189435959
  },
  {
    "content": "without error as described in section 3.5.4.1.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1262",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18419679999351501
  },
  {
    "content": "Changes to the value of the CC.CRIME bit shall have no effect on the values of the CRTO.CRWMT and\nCRTO.CRIMT fields. Changes to the value of the CC.CRIME bit may have an effect on the value of the\nCAP.TO field (refer to Figure 36).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 231,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1263",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.022348789498209953
  },
  {
    "content": "**3.5.4.1** **Handling Errors During Initialization**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1264",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1769404411315918
  },
  {
    "content": "If the CAP.CRMS field is non-zero and the controller has been enabled by transitioning CC.EN from ‘0’ to\n‘1’ and the controller encounters a failure that prevents:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1265",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10214106738567352
  },
  {
    "content": "- command that does not access attached namespaces; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1266",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3164374530315399
  },
  {
    "content": "- Admin command that does not require access to media (refer to Figure 104),",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1267",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0839097648859024
  },
  {
    "content": "from being able to be processed without error by the amount of time indicated by the:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1268",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24820023775100708
  },
  {
    "content": "- Controller Ready Independent of Media Timeout (CRTO.CRIMT) field since the controller\nwas enabled if the controller is in Controller Ready Independent of Media mode (i.g., the\nCC.CRIME bit is set to ‘1’); or\n\n- Controller Ready With Media Timeout (CRTO.CRWMT) field since the controller was\nenabled if the controller is in Controller Ready With Media mode (i.e., the CC.CRIME bit is\ncleared to ‘0’);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 401,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1269",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3718244135379791
  },
  {
    "content": "b) at least one namespace attached to the controller from becoming ready by the amount of time",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 94,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1270",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46442756056785583
  },
  {
    "content": "indicated by the Controller Ready With Media Timeout (CRTO.CRWMT) field since the controller\nwas enabled; or\nc) media required by at least one Admin command from becoming ready by the amount of time\n\nindicaated by the Controller Ready With media Timeout (CRTO.CRWMT) field since the controller\nwas enabled,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 306,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1271",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04845574498176575
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1272",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1663142442703247
  },
  {
    "content": "a) if the controller has not become ready, then the controller shall become ready (i.e., set CSTS.RDY",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1273",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3926045298576355
  },
  {
    "content": "to ‘1’) no later than CRTO.CRWMT amount of time after the controller was enabled; and\nb) if the Persistent Event log page is supported, then the controller shall record an NVM Subsystem",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 185,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1274",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6218479871749878
  },
  {
    "content": "Hardware Error Event with the NVM Subsystem Hardware Error Event code set to a value of\nController Ready Timeout Exceeded in the Persistent Event log page (refer to Figure 233).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 177,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1275",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23332758247852325
  },
  {
    "content": "**3.6** **Shutdown Processing**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1276",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5477262735366821
  },
  {
    "content": "This section describes the recommended procedure for shutdown processing prior to a power-off condition.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 104,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1277",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39926421642303467
  },
  {
    "content": "**Memory-based Transport Controller Shutdown**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1278",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42728689312934875
  },
  {
    "content": "It is recommended that the host perform an orderly shutdown of the controller by following the procedure\nin this section when a power-off or shutdown condition is imminent.\n\nThe host should perform the following actions in sequence for a normal controller shutdown:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1279",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2804550528526306
  },
  {
    "content": "1. If the controller is enabled (i.e., CC.EN is set to ‘1’):",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1280",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39934757351875305
  },
  {
    "content": "a. Stop submitting any new I/O commands to the controller and allow any outstanding",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1281",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6986653804779053
  },
  {
    "content": "commands to complete;\nb. If the controller implements I/O queues, then the host should delete all I/O Submission\n\nQueues, using the Delete I/O Submission Queue command. A result of the successful\ncompletion of the Delete I/O Submission Queue command is that any remaining\ncommands outstanding are aborted;\nc. If the controller implements I/O queues, then the host should delete all I/O Completion\n\nQueues, using the Delete I/O Completion Queue command;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 452,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1282",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1872830092906952
  },
  {
    "content": "2. The host should set the Shutdown Notification (CC.SHN) field to 01b to indicate a normal controller",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1283",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6719217300415039
  },
  {
    "content": "shutdown operation. The controller indicates when shutdown processing is completed by updating\nthe Shutdown Status (CSTS.SHST) field to 10b and the Shutdown Type (CSTS.ST) field is cleared\nto ‘0’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 196,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1284",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45545512437820435
  },
  {
    "content": "The host should perform the following actions in sequence for an abrupt shutdown:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 81,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1285",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19468280673027039
  },
  {
    "content": "1. If the controller is enabled (i.e., CC.EN is set to ‘1’), then stop submitting any new I/O commands",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1286",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32423943281173706
  },
  {
    "content": "to the controller; and\n2. The host should set the Shutdown Notification (CC.SHN) field to 10b to indicate an abrupt shutdown",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1287",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6227812767028809
  },
  {
    "content": "operation. The controller indicates when shutdown processing is completed by updating the\nShutdown Status (CSTS.SHST) field to 10b and CSTS.ST is cleared to ‘0’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 161,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1288",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4900965690612793
  },
  {
    "content": "For entry to the D3 power state, the shutdown steps outlined for a normal controller shutdown should be\nfollowed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 113,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1289",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5303535461425781
  },
  {
    "content": "It is recommended that the host wait a minimum of the RTD3 Entry Latency reported in the Identify\nController data structure for the shutdown operations to complete; if the value reported in RTD3 Entry\nLatency is 0h, then the host should wait for a minimum of one second. It is not recommended to disable the\ncontroller via the CC.EN field. This causes a Controller Reset which may impact the time required to\ncomplete shutdown processing. While shutdown processing is in progress, the controller may abort any\ncommand with a status code of Commands Aborted due to Power Loss Notification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 588,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1290",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5474368929862976
  },
  {
    "content": "It is safe to power off the controller when CSTS.ST is cleared to ‘0’, and CSTS.SHST indicates controller\nshutdown processing is complete (regardless of the value of CC.EN). It remains safe to power off the\ncontroller until CC.EN transitions from ‘0’ to ‘1’.\n\nTo start executing commands on the controller after that controller reports controller shutdown processing\ncomplete (i.e., CSTS.ST is cleared to ‘0’ and CSTS.SHST is set to 10b) utilizing CC.EN:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 454,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1291",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1780657023191452
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1292",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24687589704990387
  },
  {
    "content": "- if CC.EN is set to ‘1’, then a Controller Reset (CC.EN cleared from ‘1’ to ‘0’) is required on that\ncontroller; or\n\n- if CC.EN is cleared to ‘0’, then the controller is required to be enabled (i.e., CC.EN is set to ‘1’ from\n‘0’).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 231,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1293",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5633693933486938
  },
  {
    "content": "The initialization sequence should then be executed on that controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 71,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1294",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27041417360305786
  },
  {
    "content": "It is an implementation choice whether the host aborts all outstanding commands to the Admin Queue prior\nto the controller shutdown. The only commands that should be outstanding to the Admin Queue when the\ncontroller reports shutdown processing complete are Asynchronous Event Request commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 294,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1295",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4301045835018158
  },
  {
    "content": "**Message-based Transport Controller Shutdown**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1296",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5236310362815857
  },
  {
    "content": "To initiate a shutdown of a controller, the host should use the Property Set command (refer to section 6.6)\nto set the Shutdown Notification (CC.SHN) field to:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 159,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1297",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45524850487709045
  },
  {
    "content": "- 01b to initiate a normal shutdown operation; or\n\n- 10b to initiate an abrupt shutdown.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1298",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46009522676467896
  },
  {
    "content": "After the host initiates a controller shutdown, the host may either disconnect at the NVMe Transport level\nor the host may choose to poll CSTS.SHST to determine when the controller shutdown is complete (i.e.,\nthe controller should not initiate a disconnect at the NVMe Transport level). It is an implementation choice\nwhether the host aborts all outstanding commands prior to initiating the shutdown.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 400,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1299",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4747609794139862
  },
  {
    "content": "The CC.EN field is not used to shutdown the controller (i.e., it is used for Controller Reset).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1300",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5232629776000977
  },
  {
    "content": "From the time a controller shutdown is initiated until:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1301",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5164936184883118
  },
  {
    "content": "- a Controller Level Reset occurs; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1302",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42345282435417175
  },
  {
    "content": "- the controller, if dynamic, is removed from the NVM subsystem,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1303",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45517462491989136
  },
  {
    "content": "the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1304",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07914894819259644
  },
  {
    "content": "- process only Fabrics commands (refer to Figure 375); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1305",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.03421506658196449
  },
  {
    "content": "- disable the Keep Alive timer, if supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1306",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3389638364315033
  },
  {
    "content": "After CC.EN transitions to ‘0’ (i.e., due to Controller Level Reset), the association between the host and\ncontroller shall be preserved for at least 2 minutes. After this time, the association may be removed if the\ncontroller has not been re-enabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 251,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1307",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1800059974193573
  },
  {
    "content": "**NVM Subsystem Shutdown**\n\nAn NVM Subsystem Shutdown initiates a shutdown of all controllers in a domain or NVM subsystem from\na single controller.\n\n**3.6.3.1** **NVM Subsystem Shutdown in a Single Domain NVM Subsystem**\n\nA normal shutdown on all controllers within the NVM subsystem (i.e., normal NVM Subsystem Shutdown)\nis initiated by:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 339,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1308",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18769776821136475
  },
  {
    "content": "- a host writing the value 4E726D6Ch (\"Nrml\") to NSSD.NSSC when CAP.CPS is set to 11b; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1309",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18248258531093597
  },
  {
    "content": "- issuing an NVMe-MI Shutdown command to a Management Endpoint (refer to the NVM Express\nManagement Interface Specification) specifying a normal shutdown.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 154,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1310",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5383406281471252
  },
  {
    "content": "For each controller in the NVM subsystem for this normal NVM Subsystem Shutdown, if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1311",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07209254056215286
  },
  {
    "content": "- CSTS.SHST is set to 00b; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1312",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11837693303823471
  },
  {
    "content": "- An outstanding Asynchronous Event Request command exists,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1313",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17337314784526825
  },
  {
    "content": "then the controller shall issue a Normal NVM Subsystem Shutdown event prior to shutting down the\ncontroller.\n\nAn abrupt shutdown on all controllers within the NVM subsystem (i.e., abrupt NVM Subsystem Shutdown)\nis initiated by:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 227,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1314",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3965151309967041
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1315",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30010613799095154
  },
  {
    "content": "- a host writing the value 41627074h (\"Abpt\") to NSSD.NSSC when CAP.CPS is set to 11b; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1316",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15025284886360168
  },
  {
    "content": "- issuing an NVMe-MI Shutdown command to a Management Endpoint (refer to the NVM Express\nManagement Interface Specification) specifying an abrupt shutdown.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1317",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4986668527126312
  },
  {
    "content": "For either a normal shutdown or an abrupt NVM Subsystem Shutdown, it is safe to power off the NVM\nsubsystem when CSTS.ST is set to ‘1’ and CSTS.SHST indicates shutdown processing complete (i.e.,\nCSTS.SHST is set to 10b) on any controller in the NVM subsystem. It remains safe to power off the NVM\nsubsystem until an NVM Subsystem Reset occurs.\n\nIf a normal or abrupt NVM Subsystem Shutdown is being processed or completed within the NVM\nsubsystem (i.e., CSTS.ST is set to ‘1’ and CSTS.SHST is set to 01b or 10b on all controllers in the NVM\nsubsystem), then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 558,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1318",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6841945648193359
  },
  {
    "content": "- an NVM Subsystem Reset clears CSTS.SHST to 00b in all controllers in the NVM subsystem; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1319",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6989725232124329
  },
  {
    "content": "- any other type of Controller Level Reset has no effect on the processing of that NVM Subsystem\nShutdown.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1320",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4902772605419159
  },
  {
    "content": "**3.6.3.2** **Domain Shutdown in a Multiple Domain NVM Subsystem**\n\nA normal NVM Subsystem Shutdown on this controller and all controllers within the associated domain is\ninitiated by:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 184,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1321",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19914445281028748
  },
  {
    "content": "- a host writing the value 4E726D6Ch (\"Nrml\") to NSSD.NSSC when CAP.CPS is set to 10b; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1322",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18801429867744446
  },
  {
    "content": "- issuing an NVMe-MI Shutdown command to a Management Endpoint (refer to the NVM Express\nManagement Interface Specification) specifying a normal shutdown.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 154,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1323",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5368590950965881
  },
  {
    "content": "For each controller in the domain for this normal NVM subsystem shutdown, if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 77,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1324",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07848265767097473
  },
  {
    "content": "- CSTS.SHST is cleared to 00b; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1325",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15418928861618042
  },
  {
    "content": "- An outstanding Asynchronous Event Request command exists,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1326",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17337314784526825
  },
  {
    "content": "then the controller shall issue a Normal NVM Subsystem Shutdown event prior to shutting down the\ncontroller.\n\nAn abrupt NVM Subsystem Shutdown to this controller and all controllers within the associated domain is\ninitiated by:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 227,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1327",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17267008125782013
  },
  {
    "content": "- a host writing the value 41627074h (\"Abpt\") to NSSD.NSSC when CAP.CPS is set to 10b; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1328",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15115663409233093
  },
  {
    "content": "- issuing an NVMe-MI Shutdown command to a Management Endpoint (refer to the NVM Express\nManagement Interface Specification) specifying an abrupt shutdown.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1329",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4543139636516571
  },
  {
    "content": "For either a normal or abrupt NVM Subsystem Shutdown on the domain, it is safe to power off the domain\nwhen CSTS.ST is set to ‘1’ and CSTS.SHST indicates shutdown processing complete (i.e., CSTS.SHST is\nset to 10b) on any controller in the domain. It remains safe to power off the domain until an NVM Subsystem\nReset occurs on that domain.\n\nIf a normal or abrupt NVM Subsystem Shutdown is being processed or completed within a domain (i.e.,\nCSTS.ST is set to ‘1’ and CSTS.SHST is set to 01b or 10b on all controllers in the domain), then:\n\n- an NVM Subsystem Reset clears CSTS.SHST to 00b in all controllers in the Domain; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 626,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1330",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4770657420158386
  },
  {
    "content": "- any other type of Controller Level Reset has no effect on the processing of that shutdown.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1331",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2583187520503998
  },
  {
    "content": "**NVM Subsystem Reset**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1332",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6043149828910828
  },
  {
    "content": "**3.7.1.1** **Single Domain NVM Subsystems**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1333",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46096178889274597
  },
  {
    "content": "The scope of an NVM Subsystem Reset depends on whether the NVM subsystem supports multiple\ndomains. In an NVM subsystem that does not support multiple domains, the scope of the NVM Subsystem\nReset is the entire NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1334",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35617417097091675
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1335",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.443060964345932
  },
  {
    "content": "An NVM Subsystem Reset is initiated when:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1336",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6034737229347229
  },
  {
    "content": "- Main power is applied to the NVM subsystem;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1337",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37327656149864197
  },
  {
    "content": "- A value of 4E564D65h (“NVMe”) is written to the NSSR.NSSRC field;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1338",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36068373918533325
  },
  {
    "content": "- Requested using a method defined in the NVM Express Management Interface Specification; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1339",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27229198813438416
  },
  {
    "content": "- A vendor specific event occurs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1340",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17669643461704254
  },
  {
    "content": "When an NVM Subsystem Reset occurs, the entire NVM subsystem is reset. This includes the initiation of\na Controller Level Reset on all controllers that make up the NVM subsystem, disabling of the Persistent\nMemory Region associated with all controllers that make up the NVM subsystem, and any transport specific\nactions defined in the applicable NVMe transport specification.\n\nThe occurrence of an NVM Subsystem Reset while power is applied to the NVM subsystem is reported by\nthe initial value of the CSTS.NSSRO field following the NVM Subsystem Reset. This field may be used by\nhost software to determine if the sudden loss of communication with a controller was due to an NVM\nSubsystem Reset or some other condition.\n\nThe ability for host software to initiate an NVM Subsystem Reset by writing to the NSSR.NSSRC field is an\noptional capability of a controller indicated by the state of the CAP.NSSRS field. An implementation may\nprotect the NVM subsystem from an inadvertent NVM Subsystem Reset by not providing this capability to\none or more controllers that make up the NVM subsystem.\n\nThe occurrence of a vendor specific event that results in an NVM Subsystem Reset is intended to allow\nimplementations to recover from a severe NVM subsystem internal error that prevents continued normal\noperation (e.g., fatal hardware or firmware error).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 1345,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1341",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49197494983673096
  },
  {
    "content": "**3.7.1.2** **Multiple Domain NVM Subsystems**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1342",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47900140285491943
  },
  {
    "content": "The scope of an NVM Subsystem Reset depends on whether the NVM subsystem supports multiple\ndomains. In an NVM subsystem that supports multiple domains, the scope of the NVM Subsystem Reset\nis either the controllers that are in a domain or the entire NVM subsystem.\n\nAn NVM Subsystem Reset on a domain is initiated when:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 319,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1343",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27938157320022583
  },
  {
    "content": "- Power is applied to that domain;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1344",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26476284861564636
  },
  {
    "content": "- A value of 4E564D65h (i.e., “NVMe”) is written to the NSSR.NSSRC field of one of the controllers\nin that domain; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 117,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1345",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2677808403968811
  },
  {
    "content": "- A vendor specific event occurs within that domain.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1346",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18200968205928802
  },
  {
    "content": "When an NVM Subsystem Reset occurs the entire domain is reset. This includes the initiation of a Controller\nLevel Reset on all controllers that are in the domain, disabling of the Persistent Memory Region associated\nwith all controllers that are in the domain, and any transport specific actions defined in the applicable NVMe\ntransport specification.\n\nAlternatively, an NVM Subsystem Reset in an NVM subsystem that supports multiple domains may reset\nthe entire NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 477,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1347",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6725232601165771
  },
  {
    "content": "The occurrence of an NVM Subsystem Reset while power is applied to the domain is reported by the initial\nvalue of the CSTS.NSSRO field following the NVM Subsystem Reset. This field may be used by host\nsoftware to determine if the sudden loss of communication with a controller was due to an NVM Subsystem\nReset or some other condition.\n\nThe ability for host software to initiate an NVM Subsystem Reset by writing to the NSSR.NSSRC field is an\noptional capability of a controller indicated by the state of the CAP.NSSRS field. An implementation may\nprotect the domain from an inadvertent NVM Subsystem Reset by not providing this capability to one or\nmore controllers that are in the domain.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 690,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1348",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3700108826160431
  },
  {
    "content": "**Controller Level Reset**\n\nThe following methods initiate a Controller Level Reset:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1349",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4330157935619354
  },
  {
    "content": "- NVM Subsystem Reset;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1350",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44034045934677124
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1351",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20545412600040436
  },
  {
    "content": "- Controller Reset (i.e., CC.EN transitions from ‘1’ to ‘0’); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1352",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45437178015708923
  },
  {
    "content": "- Transport specific reset types (refer to the applicable NVMe Transport binding specification), if any.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 104,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1353",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4237555265426636
  },
  {
    "content": "A Controller Level Reset consists of the following actions:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1354",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4355239272117615
  },
  {
    "content": "- The controller stops processing any outstanding Admin or I/O commands;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1355",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40680763125419617
  },
  {
    "content": "- All I/O Submission Queues are deleted;\n\n- All I/O Completion Queues are deleted;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1356",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.263378769159317
  },
  {
    "content": "- The controller is brought to an Idle state. When this is complete, CSTS.RDY is cleared to ‘0’;\nand",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1357",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47585606575012207
  },
  {
    "content": "- All controller properties defined in section 3.1.3 and internal controller state are reset, with the\nfollowing exceptions:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1358",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2474641352891922
  },
  {
    "content": "`o` for controllers using a memory-based transport:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1359",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18218186497688293
  },
  {
    "content": "- the Admin Queue properties (AQA, ASQ, or ACQ) are not reset as part of a\nController Reset;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1360",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4431188106536865
  },
  {
    "content": "- the Controller Memory Buffer Memory Space Control property (CMBMSC) is\nreset as part of neither a Controller Reset nor a Function Level Reset; and\n\n- the Persistent Memory Region Memory Space Control Upper property\n(PMRMSCU) and the Persistent Memory Region Memory Space Control\nLower property (PMRMSCL) are not reset as part of a Controller Reset;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 350,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1361",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24031932651996613
  },
  {
    "content": "`o` for controllers using a message-based transport:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1362",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04698631912469864
  },
  {
    "content": "- there are no exceptions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1363",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.053046245127916336
  },
  {
    "content": "In all Controller Level Reset cases except a Controller Reset, the controller properties are reset as defined\nby the applicable NVMe Transport binding specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1364",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5901880264282227
  },
  {
    "content": "To continue after a Controller Level Reset, the host shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1365",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26357850432395935
  },
  {
    "content": "- Update transport specific state and controller property state as appropriate;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1366",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10252755135297775
  },
  {
    "content": "- Wait for CSTS.RDY to be set to ‘1’;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1367",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06207655370235443
  },
  {
    "content": "- Configure the controller using Admin commands as needed;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1368",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12131887674331665
  },
  {
    "content": "- Create I/O Completion Queues and I/O Submission Queues as needed; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 71,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1369",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4432313144207001
  },
  {
    "content": "- Proceed with normal I/O operations.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1370",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0918913185596466
  },
  {
    "content": "Note that all Controller Level Reset cases except a Controller Reset result in the controller immediately\nlosing communication with the host. In all these cases, the controller is unable to indicate any aborts or\nupdate any completion queue entries.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 249,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1371",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5018405318260193
  },
  {
    "content": "**Queue Level Reset**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1372",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.531406819820404
  },
  {
    "content": "The host may reset and/or reconfigure the I/O Submission and I/O Completion Queues by resetting them.\nA queue level reset is performed by deleting and then recreating the queue. In this process, the host should\nwait for all pending commands to the appropriate I/O Submission Queue(s) to complete.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 296,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1373",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6842942833900452
  },
  {
    "content": "To perform the queue level reset on a controller using the memory-based transport model, the host submits\nthe Delete I/O Submission Queue or Delete I/O Completion Queue command to the Admin Queue\nspecifying the identifier of the queue to be deleted. After successful command completion of the queue\ndelete operation, the host then recreates the queue by submitting the Create I/O Submission Queue or\nCreate I/O Completion Queue command. As part of the creation operation, the host may modify the\nattributes of the queue. Note that if a queue level reset is performed on an I/O Completion Queue, the I/O\nSubmission Queues that are utilizing the I/O Completion Queue should be deleted before the I/O\nCompletion Queue is reset and recreated after the I/O Completion Queue is recreated. The behavior of an\nI/O Submission Queue without a corresponding I/O Completion Queue is undefined.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 881,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1374",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1655133068561554
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1375",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08903218060731888
  },
  {
    "content": "To perform the queue level reset on a controller using the message-based transport model, the host sends\na Disconnect command to the I/O Queue which is to be deleted. After successful command completion of\nthe Disconnect command, the host then recreates the I/O Submission Queue and I/O Completion Queue\nby submitting the Connect command with a QID specified that is not 00h. As part of the Connect command,\nthe host may modify the attributes of the I/O queues.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 461,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1376",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5187214612960815
  },
  {
    "content": "The host should ensure that the appropriate I/O Submission Queue or I/O Completion Queue is idle before\ndeleting that queue. Submitting a queue deletion command causes any pending commands to be aborted\nby the controller; this may or may not result in a completion queue entry being posted for the aborted\ncommand(s).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 317,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1377",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15781432390213013
  },
  {
    "content": "**3.8** **NVM Capacity Model**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1378",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5849565267562866
  },
  {
    "content": "NVM subsystems may report capacity-related information for multiple entities within the NVM subsystem.\nThis capacity reporting model includes capacity reporting for the NVM subsystem, the domain (refer to\nsection 3.2.4), the Endurance Group (refer to section 3.2.3), the NVM Set (refer to section 3.2.2), the\nnamespace (refer to section 3.2.1), and the Media Unit (refer to section 1.5.34). Some, all, or none of this\nreporting may be supported by an NVM subsystem.\n\nFigure 12 shows the hierarchical relationships of the entities within an NVM subsystem which are used to\nmanage NVM capacity.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 592,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1379",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6097376346588135
  },
  {
    "content": "The capacity in an NVM Set is able to be allocated to one or more namespaces, and each namespace\nexists entirely in that NVM Set (refer to section 3.2.2). Not all of the capacity in the NVM Set is required to\nbe allocated to a namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 237,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1380",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6756795644760132
  },
  {
    "content": "If the controller supports NVM Sets, then the capacity in an Endurance Group is able to be allocated to one\nor more NVM Sets and each NVM Set exists entirely in that Endurance Group (refer to section 3.2.3). Not\nall of the capacity in an Endurance Group is required to be allocated to an NVM Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 296,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1381",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6280651688575745
  },
  {
    "content": "If the controller supports Endurance Groups and does not indicate support for NVM Sets, then in all data\nstructures that contain an NVMSETID field, the NVMSETID field shall be cleared to 0h.\n\nIf the controller does not support Endurance Groups, then in all data structures that contain an ENDGID\nfield, the ENDGID field shall be cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 343,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1382",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5419991612434387
  },
  {
    "content": "If the controller supports Endurance Groups, then the capacity in a domain is able to be allocated to one or\nmore Endurance Groups, and each Endurance Group exists entirely in that domain (refer to section 3.2.4).\nNot all of the capacity in a domain is required to be allocated to an Endurance Group.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 300,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1383",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4597929120063782
  },
  {
    "content": "NVM subsystems may report the composition of Endurance Groups and NVM Sets in terms of Media Units.\nEach Media Unit is allocated to exactly one Endurance Group. If NVM Sets are supported, each Media Unit\nis allocated to exactly one NVM Set. Data is transferred to and from Media Units via Channels. Each Media\nUnit is connected to one or more Channels. Each Channel is connected to one or more Media Units.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 406,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1384",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4005777835845947
  },
  {
    "content": "A host uses Capacity Management (refer to section 8.3) to allocate:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1385",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48187732696533203
  },
  {
    "content": "a) Domain capacity to Endurance Groups;\nb) Endurance Group capacity to NVM Sets;\nc) Media Units to Endurance Groups; and\nd) Media Units to NVM Sets,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1386",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36313340067863464
  },
  {
    "content": "as part of creating those entities.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1387",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29693660140037537
  },
  {
    "content": "A host uses the Namespace Management create operation (refer to section 8.11) to allocate capacity to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1388",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.294880747795105
  },
  {
    "content": "**Media Unit Organization Examples**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1389",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.503041684627533
  },
  {
    "content": "Allocation of Media Units is used to organize the physical NVM resources in an NVM subsystem to meet\nparticular performance goals.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 130,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1390",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.448773056268692
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1391",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3899080455303192
  },
  {
    "content": "The following examples show an NVM subsystem with all resources in a single domain. The domain has\nfour Channels, with four Media Units attached to each Channel.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 161,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1392",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5577955842018127
  },
  {
    "content": "**3.8.2.1** **Simple NVM Subsystem**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1393",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44759443402290344
  },
  {
    "content": "Figure 105 shows an example of a single domain NVM subsystem where endurance is managed across\nall media units. The performance goal is maximum bandwidth, which is achieved by allowing each read or\nwrite operation to simultaneously access all Media Units. All Media Units are in the same Endurance Group\nand in the same NVM Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 328,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1394",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43584999442100525
  },
  {
    "content": "**Figure 105: Simple NVM Subsystem**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1395",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2796251177787781
  },
  {
    "content": "The Capacity Configuration Descriptor for this example contains one Endurance Group Configuration\nDescriptor. The Endurance Group Configuration Descriptor contains one NVM Set Identifier and four\nChannel Configuration Descriptors. Each Channel Configuration Descriptor contains four Media Unit\nConfiguration Descriptors.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 320,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1396",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3698972761631012
  },
  {
    "content": "**3.8.2.2** **Vertically-Organized NVM Subsystem**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1397",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46302443742752075
  },
  {
    "content": "Figure 106 shows an example of a single domain NVM subsystem where the performance goal is isolation\namong four NVM Sets at the cost of bandwidth. Endurance is managed separately for each set. Media\nUnits sharing a Channel are allocated to the same Endurance Group. All Media Units in an Endurance\nGroup are allocated to the same NVM Set. The bandwidth for any NVM Set is likely to be less than or equal\nto the bandwidth of the Channel of that NVM Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 452,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1398",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3143792748451233
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1399",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48829174041748047
  },
  {
    "content": "**Figure 106: Vertically-Organized NVM Subsystem**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1400",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3629010021686554
  },
  {
    "content": "The Capacity Configuration Descriptor for this example contains four Endurance Group Configuration\nDescriptors. Each Endurance Group Configuration Descriptor contains one NVM Set Identifier and one\nChannel Configuration Descriptor. Each Channel Configuration Descriptor contains four Media Unit\nConfiguration Descriptors.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 321,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1401",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3427787721157074
  },
  {
    "content": "**3.8.2.3** **Horizontally-Organized Dual NAND NVM Subsystem**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1402",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5328006744384766
  },
  {
    "content": "Figure 107 shows an example of a single domain NVM subsystem where the Media Units are NAND which\nis capable of being operated as QLC or at a lower density. The performance goal is for maximum bandwidth\nto a small NVM Set operating as SLC and to a larger NVM Set operating as QLC.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 280,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1403",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3620609939098358
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1404",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44408726692199707
  },
  {
    "content": "**Figure 107: Horizontally-Organized Dual NAND NVM Subsystem**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1405",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22907733917236328
  },
  {
    "content": "The Capacity Configuration Descriptor, for this example, contains two Endurance Group Configuration\nDescriptors. The first Endurance Group Configuration Descriptor for this example:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 181,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1406",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5155866146087646
  },
  {
    "content": "- indicates a Capacity Adjustment Factor of approximately 400;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1407",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18425817787647247
  },
  {
    "content": "- contains one NVM Set Identifier; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1408",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34513676166534424
  },
  {
    "content": "- contains four Channel Configuration Descriptors. Each Channel Configuration Descriptor\ncontains one Media Unit Configuration Descriptor.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 138,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1409",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40908950567245483
  },
  {
    "content": "The second Endurance Group Configuration Descriptor for this example:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1410",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3012707829475403
  },
  {
    "content": "- indicates a Capacity Adjustment Factor of 100;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1411",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19827769696712494
  },
  {
    "content": "- contains one NVM Set Identifier; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1412",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32756608724594116
  },
  {
    "content": "- contains four Channel Configuration Descriptors. Each Channel Configuration Descriptor\ncontains three Media Unit Configuration Descriptors.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1413",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17820823192596436
  },
  {
    "content": "**Capacity Reporting**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1414",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3129558563232422
  },
  {
    "content": "For an NVM subsystem that does not support multiple domains, the capacity information reported in the\nIdentify Controller data structure (i.e., the TNVMCAP field and the UNVMCAP field in Figure 275) describes\nthe capacity for the NVM subsystem. If the MEGCAP field is non-zero, that field indicates the largest entity\n(e.g., Endurance Group, NVM Set, namespace) that may be created in the NVM subsystem.\n\nFor an NVM subsystem that supports multiple domains, the capacity information reported in the Identify\nController data structure describes the capacity accessible by the controller processing the Identify\ncommand. The host may use the Identify command to access the Domain List data structure (refer to\nsection 5.17.2.17) to determine the domains that are accessible by the controller and the capacity\ninformation for each of those domains. If the Max Endurance Group Domain Capacity field is non-zero,\nthen the field describes the largest entity (e.g., Endurance Group, namespace) that may be created by this\ncontroller in the domain described by that Domain Attributes Entry.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1082,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1415",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**3 NVM Express Architecture **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7846754193305969
  },
  {
    "content": "For an NVM subsystem that supports Endurance Groups (refer to section 3.2.3), the host may use the\nIdentify command to access the Endurance Group List data structure (refer to section 5.17.2.18) to\ndetermine the Endurance Groups that are accessible by the controller. To determine the capacity\ninformation for each Endurance Group, the host uses the Get Log Page command to access the Endurance\nGroup Information log page (refer to section 5.16.1.10).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 451,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1416",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39003071188926697
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1417",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4758232831954956
  },
  {
    "content": "For an NVM subsystem that supports NVM Sets (refer to section 3.2.2), the host may use the Identify\ncommand to access the NVM Set List data structure (refer to section 5.17.2.4) to determine the NVM Sets\nthat are accessible by the controller and the capacity information for each of those NVM Sets.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 298,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1418",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5883719325065613
  },
  {
    "content": "For the management of Endurance Groups, NVM Sets, and namespaces, Figure 108 describes the effects\nof the support of NVM Sets, Endurance Groups, and domains on which capacity information is used for\neach management operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1419",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5275161862373352
  },
  {
    "content": "**Figure 108: Capacity Information Field Usage**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1420",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38464227318763733
  },
  {
    "content": "|Entity being<br>created / deleted|NVM Sets<br>supported|Endurance<br>Groups<br>supported|Domains<br>supported|1<br>Capacity information used|\n|---|---|---|---|---|\n|7<br>Endurance Group|n/a|Yes|No|3<br>NVM subsystem|\n|7<br>Endurance Group|n/a|Yes|Yes|4<br>Domain|\n|7<br>NVM Set|Yes|2<br>Yes|n/a|5<br>Endurance Group|\n|8<br>Namespace|No|No|No|3<br>NVM subsystem|\n|8<br>Namespace|No|No|Yes|4<br>Domain|\n|8<br>Namespace|No|Yes|n/a|5<br>Endurance Group|\n|8<br>Namespace|Yes|2<br>Yes|n/a|6<br>NVM Set|\n|Notes:<br>1. This information described in this column is used by the host for creating the entity (e.g., to determine if there<br>is sufficient available capacity) and this information is altered by the controller as a result of the creation or<br>deletion of the entity (e.g., unallocated capacity decreased as a result of entity creation, or unallocated capacity<br>increased as a result of entity deletion).<br>2. NVM Set support requires support for Endurance Groups as described in section 3.2.2.<br>3. Capacity information in the Identify Controller data structure (i.e., TNVMCAP field, UNVMCAP field, and<br>MEGCAP fields (refer to Figure 275)).<br>4. Capacity information in the Domain Attributes Entry (i.e., Total Domain Capacity field, Unallocated Domain<br>Capacity field, and Max Endurance Group Domain Capacity field (refer to Figure 287)).<br>5. Capacity information in the Endurance Group Information log page (i.e., TEGCAP field, UEGCAP field (refer<br>to Figure 217)).<br>6. Capacity information in the NVM Set Attributes Entry (i.e., Total NVM Set Capacity field, and Unallocated NVM<br>Set Capacity field (refer to Figure 279)).<br>7. Endurance Groups and NVM Sets are created and deleted using the Capacity Management command (refer<br>to section 5.3)<br>8. Namespaces are created and deleted using the Namespace Management command (refer to section 8.11).<br>Namespaces are deleted using the Capacity Management command.|Notes:<br>1. This information described in this column is used by the host for creating the entity (e.g., to determine if there<br>is sufficient available capacity) and this information is altered by the controller as a result of the creation or<br>deletion of the entity (e.g., unallocated capacity decreased as a result of entity creation, or unallocated capacity<br>increased as a result of entity deletion).<br>2. NVM Set support requires support for Endurance Groups as described in section 3.2.2.<br>3. Capacity information in the Identify Controller data structure (i.e., TNVMCAP field, UNVMCAP field, and<br>MEGCAP fields (refer to Figure 275)).<br>4. Capacity information in the Domain Attributes Entry (i.e., Total Domain Capacity field, Unallocated Domain<br>Capacity field, and Max Endurance Group Domain Capacity field (refer to Figure 287)).<br>5. Capacity information in the Endurance Group Information log page (i.e., TEGCAP field, UEGCAP field (refer<br>to Figure 217)).<br>6. Capacity information in the NVM Set Attributes Entry (i.e., Total NVM Set Capacity field, and Unallocated NVM<br>Set Capacity field (refer to Figure 279)).<br>7. Endurance Groups and NVM Sets are created and deleted using the Capacity Management command (refer<br>to section 5.3)<br>8. Namespaces are created and deleted using the Namespace Management command (refer to section 8.11).<br>Namespaces are deleted using the Capacity Management command.|Notes:<br>1. This information described in this column is used by the host for creating the entity (e.g., to determine if there<br>is sufficient available capacity) and this information is altered by the controller as a result of the creation or<br>deletion of the entity (e.g., unallocated capacity decreased as a result of entity creation, or unallocated capacity<br>increased as a result of entity deletion).<br>2. NVM Set support requires support for Endurance Groups as described in section 3.2.2.<br>3. Capacity information in the Identify Controller data structure (i.e., TNVMCAP field, UNVMCAP field, and<br>MEGCAP fields (refer to Figure 275)).<br>4. Capacity information in the Domain Attributes Entry (i.e., Total Domain Capacity field, Unallocated Domain<br>Capacity field, and Max Endurance Group Domain Capacity field (refer to Figure 287)).<br>5. Capacity information in the Endurance Group Information log page (i.e., TEGCAP field, UEGCAP field (refer<br>to Figure 217)).<br>6. Capacity information in the NVM Set Attributes Entry (i.e., Total NVM Set Capacity field, and Unallocated NVM<br>Set Capacity field (refer to Figure 279)).<br>7. Endurance Groups and NVM Sets are created and deleted using the Capacity Management command (refer<br>to section 5.3)<br>8. Namespaces are created and deleted using the Namespace Management command (refer to section 8.11).<br>Namespaces are deleted using the Capacity Management command.|Notes:<br>1. This information described in this column is used by the host for creating the entity (e.g., to determine if there<br>is sufficient available capacity) and this information is altered by the controller as a result of the creation or<br>deletion of the entity (e.g., unallocated capacity decreased as a result of entity creation, or unallocated capacity<br>increased as a result of entity deletion).<br>2. NVM Set support requires support for Endurance Groups as described in section 3.2.2.<br>3. Capacity information in the Identify Controller data structure (i.e., TNVMCAP field, UNVMCAP field, and<br>MEGCAP fields (refer to Figure 275)).<br>4. Capacity information in the Domain Attributes Entry (i.e., Total Domain Capacity field, Unallocated Domain<br>Capacity field, and Max Endurance Group Domain Capacity field (refer to Figure 287)).<br>5. Capacity information in the Endurance Group Information log page (i.e., TEGCAP field, UEGCAP field (refer<br>to Figure 217)).<br>6. Capacity information in the NVM Set Attributes Entry (i.e., Total NVM Set Capacity field, and Unallocated NVM<br>Set Capacity field (refer to Figure 279)).<br>7. Endurance Groups and NVM Sets are created and deleted using the Capacity Management command (refer<br>to section 5.3)<br>8. Namespaces are created and deleted using the Namespace Management command (refer to section 8.11).<br>Namespaces are deleted using the Capacity Management command.|Notes:<br>1. This information described in this column is used by the host for creating the entity (e.g., to determine if there<br>is sufficient available capacity) and this information is altered by the controller as a result of the creation or<br>deletion of the entity (e.g., unallocated capacity decreased as a result of entity creation, or unallocated capacity<br>increased as a result of entity deletion).<br>2. NVM Set support requires support for Endurance Groups as described in section 3.2.2.<br>3. Capacity information in the Identify Controller data structure (i.e., TNVMCAP field, UNVMCAP field, and<br>MEGCAP fields (refer to Figure 275)).<br>4. Capacity information in the Domain Attributes Entry (i.e., Total Domain Capacity field, Unallocated Domain<br>Capacity field, and Max Endurance Group Domain Capacity field (refer to Figure 287)).<br>5. Capacity information in the Endurance Group Information log page (i.e., TEGCAP field, UEGCAP field (refer<br>to Figure 217)).<br>6. Capacity information in the NVM Set Attributes Entry (i.e., Total NVM Set Capacity field, and Unallocated NVM<br>Set Capacity field (refer to Figure 279)).<br>7. Endurance Groups and NVM Sets are created and deleted using the Capacity Management command (refer<br>to section 5.3)<br>8. Namespaces are created and deleted using the Namespace Management command (refer to section 8.11).<br>Namespaces are deleted using the Capacity Management command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 7719,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1421",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10510274767875671
  },
  {
    "content": "**3.9** **Keep Alive**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1422",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27310052514076233
  },
  {
    "content": "The Keep Alive timer is a watchdog timer intended to detect a malfunctioning connection, controller, or host.\nThe Keep Alive Timeout Interval is the period during which the Keep Alive Timer is activated.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 203,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1423",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6906745433807373
  },
  {
    "content": "A Keep Alive Timeout Interval on the controller starts when:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1424",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20597314834594727
  },
  {
    "content": "- a successful completion queue entry is posted for a Set Features command with Feature Identifier\n0Fh and a non-zero KATO field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 129,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1425",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1972273886203766
  },
  {
    "content": "A Keep Alive Timeout Interval on the host starts when:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1426",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4541453421115875
  },
  {
    "content": "- a Set Features command with Feature Identifier 0Fh and a non-zero Keep Alive Timeout (KATO)\nfield is posted to the Admin submission queue; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 143,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1427",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5838017463684082
  },
  {
    "content": "- a Keep Alive command was posted to the Admin submission queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1428",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05774412304162979
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1429",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.017187662422657013
  },
  {
    "content": "Both on the host and the controller the Keep Alive Timeout Interval ends the time specified by the KATO\nfield after the interval started (refer to Figure 341). A Keep Alive Timeout occurs when the Keep Alive Timer\nexpires. The Keep Alive Timer expires:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 252,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1430",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49720239639282227
  },
  {
    "content": "- if the TBKAS bit is cleared to ‘0’, at the end of the Keep Alive Timeout Interval and no Keep Alive\nCommand was processed during the Keep Alive Timeout Interval (refer to section 3.9.2); and\n\n- if the TBKAS bit is set to ‘1’, at the end of the Keep Alive Timeout Interval and no Admin command\nor I/O command was processed during the Keep Alive Timeout Interval (refer to section 3.9.2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 388,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1431",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5042952299118042
  },
  {
    "content": "The Keep Alive Timeout is the maximum time a connection remains established without processing a Keep\nAlive command. The Keep Alive timer in the controller expires when a Keep Alive command is not received\nwithin the Keep Alive Timeout interval.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 245,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1432",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6756892204284668
  },
  {
    "content": "The Keep Alive timer is active if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1433",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05110397934913635
  },
  {
    "content": "- CC.EN is set to ‘1’;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1434",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49774256348609924
  },
  {
    "content": "- CSTS.RDY is set to ‘1’;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1435",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3822704255580902
  },
  {
    "content": "- CC.SHN is cleared to ‘00b’;\n\n- CSTS.SHST is cleared to ‘00b’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1436",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14236991107463837
  },
  {
    "content": "- the Keep Alive Timer feature has been enabled with a KATO field (refer to section 5.27.1.12 and\nsection 6.3) set to a non-zero value,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 135,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1437",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6054394841194153
  },
  {
    "content": "otherwise, the Keep Alive timer is inactive and a Keep Alive Timeout shall not occur. Activating an inactive\nKeep Alive timer (e.g., enabling a controller with the Keep Alive feature in use, enabling a controller that\nsupports NVMe over Fabrics where the Connect command specified a non-zero Keep Alive Timeout (refer\nto section 3.1.2.3)) shall initialize the Keep Alive timer to the Keep Alive Timeout value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 409,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1438",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6291702389717102
  },
  {
    "content": "The host may consider a Keep Alive Timeout to have occurred when the completion of the Keep Alive\ncommand is not received within the Keep Alive Timeout interval. The host is intended to send Keep Alive\ncommands at a faster rate than the Keep Alive Timeout accounting for transport roundtrip times, transport\ndelays, command execution times, and the Keep Alive Timer granularity.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 378,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1439",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5378395318984985
  },
  {
    "content": "If a Keep Alive Timer expires:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1440",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07031136006116867
  },
  {
    "content": "a) the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1441",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04828513041138649
  },
  {
    "content": "- record an Error Information Log Entry with the status code Keep Alive Timeout Expired,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1442",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23687009513378143
  },
  {
    "content": "- stop processing commands;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1443",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26767364144325256
  },
  {
    "content": "- set the Controller Fatal Status (CSTS.CFS) bit to ‘1’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1444",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.005203431937843561
  },
  {
    "content": "- for message-based NVMe Transports:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1445",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5671245455741882
  },
  {
    "content": "`o` terminate the NVMe Transport connection; and\n`o` break the host to controller association;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 94,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1446",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2938801348209381
  },
  {
    "content": "b) the host assumes all outstanding commands are not completed and re-issues commands as",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1447",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22157315909862518
  },
  {
    "content": "For message-based NVMe Transports, after completing these steps, a controller may accept a Connect\ncommand (refer to section 6.3) for the Admin Queue from the same or another host in order to form a new\nassociation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 215,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1448",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1412399411201477
  },
  {
    "content": "The Keep Alive command restarts the timeout period; other commands have no effect on the timeout. The\ncontroller should process the Keep Alive command as soon as the command is fetched.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 185,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1449",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.03130088374018669
  },
  {
    "content": "The NVMe Transport binding specification defines for the associated NVMe Transport:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1450",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10146042704582214
  },
  {
    "content": "- the minimum Keep Alive Timeout value;\n\n- the maximum Keep Alive Timeout value; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1451",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5502932071685791
  },
  {
    "content": "- if support for the Keep Alive feature is required.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1452",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5173729062080383
  },
  {
    "content": "NVMe Transports that do not detect a connection loss in a timely manner shall require that the Keep Alive\nfeature be enabled. If a command attempts to disable the Keep Alive timer by setting the Keep Alive Timeout",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 213,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1453",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3070729672908783
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1454",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35208672285079956
  },
  {
    "content": "value to 0h or to a value that exceeds the maximum allowed by the associated NVMe Transport binding\nspecification, a status code of Keep Alive Timeout Invalid shall be returned. If a command sets the Keep\nAlive Timeout value to a value that is less than the minimum supported by the NVMe Transport or less than\nthe minimum supported by the specific implementation, then the controller sets the Keep Alive Timeout\nvalue to that minimum value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 441,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1455",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43184971809387207
  },
  {
    "content": "**Keep Alive Command Based Keep Alive**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1456",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6376072764396667
  },
  {
    "content": "Keep Alive Command Based Keep Alive restricts the Keep Alive Timer on both the host and the controller\nto be restarted only upon the processing of a Keep Alive command. This mode is in use if the TBKAS bit is\ncleared to ‘0’.\n\nThe Keep Alive Timeout is the maximum time a connection remains established without processing a Keep\nAlive command. If the Keep Alive Timer in the controller expires and a Keep Alive command has not been\nprocessed within the Keep Alive Timeout Interval, then the controller may consider a Keep Alive Timeout\nto have occurred. If the Keep Alive Timer in the host expires and a completion of a Keep Alive command\nhas not been received with the Keep Alive Timeout Interval, then the host may consider a Keep Alive\nTimeout to have occurred. The host should send Keep Alive commands at half of the Keep Alive Timeout\naccounting for transport roundtrip times, transport delays, command processing times, and the Keep Alive\nTimer granularity.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 962,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1457",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45149755477905273
  },
  {
    "content": "**Traffic Based Keep Alive**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1458",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5936090350151062
  },
  {
    "content": "Traffic Based Keep Alive (TBKAS) allows the host and controller to restart the Traffic Based Keep Alive\nTimer in the presence of Admin or I/O command processing. The controller support for the TBKAS bit is\nindicated in the Controller Attributes in the Identify Controller data structure (refer to Figure 275). If the\nController does not support Traffic Based Keep Alive (TBKAS is cleared to ‘0’), then the operation of the\nKeep Alive feature is described in section 3.9.1.\n\nThe Traffic Based Keep Alive Timeout occurs if a connection remains established without processing an\nAdmin command or an I/O command during the Keep Alive Timeout Interval. If an Admin command or an\nI/O command is processed within the Keep Alive Timeout Interval, then upon the expiration of the Keep\nAlive Timer, the Keep Alive Timer shall be restarted.\n\nThe controller may consider a Keep Alive Timeout to have occurred if no Admin command or no I/O\ncommand is submitted to the controller (as defined in section 3.4.4) within the Keep Alive Timeout Interval.\nIf an Admin command or an I/O command is transferred to the Controller within the Keep Alive Timeout\nInterval, then upon the expiration of the Keep Alive Timer the controller shall restart the Keep Alive Timer.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1459",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.799832284450531
  },
  {
    "content": "The host may consider a Traffic Based Keep Alive Timeout to have occurred if the host does not receive a\ncompletion of any Admin command or any I/O command within the Keep Alive Timeout Interval. If an Admin\ncommand or an I/O command is completed within the Keep Alive Timeout Interval, then upon expiration of\nthe Keep Alive Timer, the host shall restart the Keep Alive Timer. The host should check for a command\ncompletion queue entry for any Admin commands and I/O commands at half of the Keep Alive Timeout\naccounting for transport roundtrip times, transport delays, command processing times, and the Keep Alive\nTimer granularity. To prevent the controller from detecting a Keep Alive Timeout, if no Admin command and\nno I/O command is sent to the controller during half of the Keep Alive Timeout Interval, the host should\nsend a Keep Alive command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 853,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1460",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07155786454677582
  },
  {
    "content": "**3.10 Privileged Actions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1461",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5685263276100159
  },
  {
    "content": "Privileged actions are actions (e.g., command, property write) that affect or have the potential to affect the\nstate beyond the controller and attached namespaces.\n\nExamples of privileged actions are:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 200,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1462",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3001944422721863
  },
  {
    "content": "- Admin commands including Namespace Management, Namespace Attachment, Virtualization\nManagement, Format NVM, Set Features with Feature Identifier 17h (i.e., Sanitize Config, refer to\nsection 5.27.1.19), Sanitize, and Capacity Management;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 238,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1463",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3514452576637268
  },
  {
    "content": "- Property Writes including NVM Subsystem Reset; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1464",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4617640972137451
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1465",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33867624402046204
  },
  {
    "content": "- Some Vendor specific commands and properties.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1466",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2322058230638504
  },
  {
    "content": "**3.11 Firmware Update Process**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1467",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6161559224128723
  },
  {
    "content": "The process for a firmware update to be activated in a domain (refer to section 3.2.4) by a reset is:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1468",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5276927351951599
  },
  {
    "content": "1. The host issues a Firmware Image Download command to download the firmware image to a",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1469",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6913824677467346
  },
  {
    "content": "controller. There may be multiple portions of the firmware image to download, thus the offset for\neach portion of the firmware image being downloaded on that controller is specified in the Firmware\nImage Download command. The data provided in the Firmware Image Download command should\nconform to the Firmware Update Granularity indicated in the Identify Controller data structure or\nthe firmware update may fail;\n2. After the firmware is downloaded to that controller, the next step is for the host to submit a Firmware\n\nCommit command to that controller. The Firmware Commit command verifies that the last firmware\nimage downloaded is valid and commits that firmware image to the firmware slot indicated for future\nuse. A firmware image that does not start at offset zero, contains gaps, or contains overlapping\nregions is considered invalid. A controller may employ additional vendor specific means (e.g.,\nchecksum, CRC, cryptographic hash, or a digital signature) to determine the validity of a firmware\nimage:\n\na. The Firmware Commit command may also be used to activate a firmware image associated\n\nwith a previously committed firmware slot;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 1147,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1470",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6880031824111938
  },
  {
    "content": "3. The last step is to perform a reset that then causes the firmware image specified in the Firmware",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1471",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6214115023612976
  },
  {
    "content": "Slot field in the Firmware Commit command to be activated. The reset may be an NVM Subsystem\nReset, Conventional Reset, Function Level Reset, or Controller Reset (CC.EN transitions from ‘1’\nto ‘0’):",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 198,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1472",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5693652629852295
  },
  {
    "content": "a. In some cases a Conventional Reset or NVM Subsystem Reset is required to activate a",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1473",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26636695861816406
  },
  {
    "content": "firmware image. This requirement is indicated by Firmware Commit command specific status\n(refer to section 5.12.1);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 115,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1474",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22330106794834137
  },
  {
    "content": "4. After the reset has completed, host software re-initializes the controller. This includes re-allocating",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1475",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25530847907066345
  },
  {
    "content": "I/O Submission and Completion Queues. Refer to sections 3.5.1 and 3.5.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1476",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09651882201433182
  },
  {
    "content": "The process for a firmware update to be activated on a domain without a reset is:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 81,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1477",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5360834002494812
  },
  {
    "content": "1. The host issues a Firmware Image Download command to download the firmware image to a",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1478",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6685689091682434
  },
  {
    "content": "controller. There may be multiple portions of the firmware image to download, thus the offset for\neach portion of the firmware image being downloaded on that controller is specified in the Firmware\nImage Download command. The data provided in the Firmware Image Download command should\nconform to the Firmware Update Granularity indicated in the Identify Controller data structure or\nthe firmware update may fail;\n2. The host submits a Firmware Commit command on that controller with a Commit Action of 011b\n\nwhich specifies that the firmware image should be activated immediately without reset. The\ndownloaded firmware image should replace the firmware image in the firmware slot. If no firmware\nimage was downloaded since the last reset or Firmware Commit command, (i.e., the first step was\nskipped), then that controller shall verify and activate the firmware image in the specified slot. If\nthat controller starts to activate the firmware image, any controllers affected by the new firmware\nimage send a Firmware Activation Starting asynchronous event to the host if Firmware Activation\nNotices are enabled (refer to Figure 326):\n\na. The Firmware Commit command may also be used to activate a firmware image associated\n\nwith a previously committed firmware slot;\n\n3. The controller completes the Firmware Commit command. The following actions are taken in",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 1359,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1479",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2979965806007385
  },
  {
    "content": "certain error scenarios:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1480",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17297372221946716
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1481",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23939990997314453
  },
  {
    "content": "a. If the firmware image is invalid, then the controller reports the appropriate error (e.g., Invalid\n\nFirmware Image);\nb. If the firmware activation was not successful because a Controller Level Reset is required to\n\nactivate this firmware, then the controller reports an error of Firmware Activation Requires\nController Level Reset and the firmware image is applied at the next Controller Level Reset;\nc. If the firmware activation was not successful because an NVM Subsystem Reset is required to\n\nactivate this firmware image, then the controller reports an error of Firmware Activation\nRequires NVM Subsystem Reset and the image is applied at the next NVM Subsystem Reset;\nd. If the firmware activation was not successful because a Conventional Reset is required to\n\nactivate this firmware, then the controller reports an error of Firmware Activation Requires\nConventional Reset and the firmware image is applied at the next Conventional Reset; and\ne. If the firmware activation was not successful because the firmware activation time would\n\nexceed the MTFA value reported in the Identify Controller data structure, then the controller\nreports an error of Firmware Activation Requires Maximum Time Violation. In this case, to\nactivate the firmware, the Firmware Commit command needs to be re-issued and the firmware\nimage activated using a reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 6,
      "character_length": 1350,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1482",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5457141995429993
  },
  {
    "content": "If the controller transitions to the D3 cold state (refer to the PCI Express Base Specification) after the\nsubmission of a Firmware Commit command that attempts to activate a firmware image and before the\ncompletion of that command, then the controller may resume operation with either the firmware image\nactive at the time the Firmware Commit command was submitted or the firmware image that was activated\nby that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 423,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1483",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5950129628181458
  },
  {
    "content": "If the firmware image is not able to be successfully loaded, then the controller shall revert to the firmware\nimage present in the most recently activated firmware slot or the baseline read-only firmware image, if\navailable, and indicate the failure as an asynchronous event with a Firmware Image Load Error.\n\nIf a host overwrites (i.e., updates) the firmware image in the active firmware slot, then the previously active\nfirmware image may no longer be available. As a result, any action (e.g., power cycling the controller) that\nrequires the use of that firmware slot may instead use the firmware image that is currently in that firmware\nslot.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 645,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1484",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5798317193984985
  },
  {
    "content": "Host software should not overlap firmware/boot partition image update command sequences (refer to\nsection 1.5.23). During a firmware image update command sequence, if a Firmware Image Download\ncommand or a Firmware Commit command is submitted for another firmware/boot partition image update\ncommand sequence, the results of both that command and the in-progress firmware image update are\nundefined.\n\nHost software should use the same controller or Management Endpoint (refer to the NVM Express\nManagement Interface Specification) for all commands that are part of a firmware image update command\nsequence. If the commands for a single firmware/boot partition image update command sequence are\nsubmitted to more than one controller and/or Management Endpoint, the controller may abort the Firmware\nCommit command with Invalid Firmware Image status.\n\nAfter downloading a firmware image, host software issues a Firmware Commit command before\ndownloading additional firmware images. Processing of the first Firmware Image Download command after\ncompletion of a Firmware Commit command shall cause the controller to discard remaining portions, if any,\nof downloaded images. If a reset occurs between a firmware download and completion of the Firmware\nCommit command, then the controller shall discard all portion(s), if any, of downloaded images.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1342,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1485",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1915189027786255
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **4 Data Structures **\n\nThis section describes data structures used by the NVM Express.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 142,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1486",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28885480761528015
  },
  {
    "content": "**4.1** **Data Layout**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1487",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46309226751327515
  },
  {
    "content": "This section describes the data structures used to describe the layout of data that can be understood by\nthe controller and the host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 133,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1488",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36648061871528625
  },
  {
    "content": "**Physical Region Page Entry and List**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1489",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5476139783859253
  },
  {
    "content": "A physical region page (PRP) entry is a pointer to a physical memory page. PRPs are used as a\nscatter/gather mechanism for data transfers between the controller and memory. To enable efficient out of\norder data transfers between the controller and the host, PRP entries are a fixed size.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 287,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1490",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6148064136505127
  },
  {
    "content": "The size of the physical memory page is configured by host software in CC.MPS. Figure 109 shows the\nlayout of a PRP entry that consists of a Page Base Address and an Offset. The size of the Offset field is\ndetermined by the physical memory page size configured in CC.MPS.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 271,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1491",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38241255283355713
  },
  {
    "content": "**Figure 109: PRP Entry Layout**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1492",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.331093430519104
  },
  {
    "content": "|63 n+1|n 0|\n|---|---|\n|Page Base Address|Offset|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1493",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20149371027946472
  },
  {
    "content": "The definition of a PRP entry is described in Figure 110.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1494",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5952813625335693
  },
  {
    "content": "**Figure 110: PRP Entry – Page Base Address and Offset**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1495",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6341773271560669
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|63:00|Page Base Address and Offset (PBAO): This field indicates the 64-bit physical memory page<br>address. The least significant bits (n:0) of this field indicate the offset within the memory page<br>(e.g., if the memory page size is 4 KiB, then bits 11:00 form the Offset; if the memory page size is<br>8 KiB, then bits 12:00 form the Offset). If this entry is not the first PRP entry in the command or a<br>PRP List pointer in a command, then the Offset portion of this field shall be cleared to 0h. The<br>Offset shall be dword aligned, indicated by bits 1:0 being cleared to 00b.<br>Note: The controller is not required to check that bits 1:0 are cleared to 00b. The controller may<br>report an error of PRP Offset Invalid if bits 1:0 are not cleared to 00b. If the controller does not<br>report an error of PRP Offset Invalid, then the controller shall operate as if bits 1:0 are cleared to<br>00b.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 935,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1496",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5539765357971191
  },
  {
    "content": "A physical region page list (PRP List) is a set of PRP entries in a single page of contiguous memory. A PRP\nList describes additional PRP entries that could not be described within the command itself. Any PRP\nentries described within the command are not duplicated in a PRP List. If the amount of data to transfer\nrequires multiple PRP List memory pages, then the last PRP entry before the end of the memory page shall\nbe a pointer to the next PRP List, indicating the next segment of the PRP List. Figure 111 shows the layout\nof a PRP List where each PRP entry identifies memory pages that are physically contiguous. Figure 112\nshows the layout of a PRP List where each PRP entry identifies a different memory page (i.e., the memory\npages are not physically contiguous).\n\n**Figure 111: PRP List Layout for Physically Contiguous Memory Pages**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 843,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1497",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43083199858665466
  },
  {
    "content": "|63 n+1|n 0|\n|---|---|\n|Page Base Address p|0h|\n|Page Base Address p+1|0h|\n|…|…|\n|Page Base Address p+q|0h|\n|Page Base Address p+q+1|0h|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1498",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22883792221546173
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1499",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22206753492355347
  },
  {
    "content": "**Figure 112: PRP List Layout for Physically Non-Contiguous Memory Pages**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1500",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4555738866329193
  },
  {
    "content": "|63 n+1|n 0|\n|---|---|\n|Page Base Address p|0h|\n|Page Base Address q|0h|\n|…|…|\n|Page Base Address r|0h|\n|Page Base Address s|0h|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1501",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2846156656742096
  },
  {
    "content": "Dependent on the command definition, the first PRP entry contained within the command may have a nonzero offset within the memory page. The first PRP List entry (i.e., the first pointer to a memory page\ncontaining additional PRP entries) that if present is typically contained in the PRP Entry 2 location within\nthe command, shall be qword aligned and may also have a non-zero offset within the memory page.\n\nPRP entries contained within a PRP List shall have a memory page offset of 0h. If a second PRP entry is\npresent within a command, it shall have a memory page offset of 0h. In both cases, the entries are memory\npage aligned based on the value in CC.MPS. If the controller receives a non-zero offset for these PRP\nentries the controller should return an error of PRP Offset Invalid.\n\nPRP Lists shall be minimally sized with packed entries starting with entry 0. If more PRP List pages are\nrequired, then the last entry of the PRP List contains the Page Base Address of the next PRP List page.\nThe next PRP List page shall be memory page aligned. The total number of PRP entries required by a\ncommand is implied by the command parameters and memory page size.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1502",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25276899337768555
  },
  {
    "content": "**Scatter Gather List (SGL)**\n\nA Scatter Gather List (SGL) is a data structure in memory address space used to describe a data buffer.\nThe controller indicates the SGL types that the controller supports in the Identify Controller data structure.\nA data buffer is either a source buffer or a destination buffer. An SGL contains one or more SGL segments.\nThe total length of the Data Block and Bit Bucket descriptors in an SGL shall be equal to or exceed the\namount of data requested to be transferred. If the amount of data requested to be transferred exceeds the\ntotal length of the Data Block and Bit Bucket descriptors in an SGL, data shall not be transferred to or from\nlocations that are not described by the SGL.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 717,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1503",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4719253480434418
  },
  {
    "content": "An SGL segment is a qword aligned data structure in a contiguous region of physical memory describing\nall, part of, or none of a data buffer and the next SGL segment, if any. An SGL segment consists of an array\nof one or more SGL descriptors. Only the last descriptor in an SGL segment may be an SGL Segment\ndescriptor or an SGL Last Segment descriptor.\n\nA last SGL segment is an SGL segment that does not contain an SGL Segment descriptor, or an SGL Last\nSegment descriptor.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 475,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1504",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3467048406600952
  },
  {
    "content": "A controller may support byte or dword alignment and granularity of Data Blocks. If a controller supports\nonly dword alignment and granularity as indicated in the SGL Support field of the Identify Controller data\nstructure (refer to Figure 275), then the values in the Address and Length fields of all Data Block descriptors\nshall have their two least significant bits cleared to 00b. This requirement applies to Data Block descriptors\nthat indicate data and/or metadata memory regions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 486,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1505",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.570392906665802
  },
  {
    "content": "The SGL Descriptor Threshold (SDT) field in the Identify Controller data structure (refer to Figure 275)\nindicates the recommended maximum number of SGL descriptors for a command. If the SDT field is set to\na non-zero value, and a command is submitted for which the sum of:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 273,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1506",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6042304635047913
  },
  {
    "content": "a) the number of SGL Bit Bucket descriptors with non-zero Length field contents; and\nb) the number of SGL Data Block descriptors with a non-zero Length field contents,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1507",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11157048493623734
  },
  {
    "content": "exceeds the value of the SDT field, then the performance of the controller may be reduced.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1508",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5639106631278992
  },
  {
    "content": "The value of the SDT field shall be less than or equal to the value of the Maximum SGL Data Block\nDescriptors (MSDBD) field in the Identify Controller data structure (refer to Figure 275 for the definition of\nthe MSDBD field).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 226,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1509",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23143436014652252
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1510",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13493578135967255
  },
  {
    "content": "A Keyed SGL Data Block descriptor is a Data Block descriptor that includes a key that is used as part of\nthe host memory access. The maximum length that may be specified in a Keyed SGL Data Block descriptor\nis (16 MiB – 1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 223,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1511",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6744511723518372
  },
  {
    "content": "A Transport SGL Data Block descriptor is a Data Block descriptor that specifies a data block that is\ntransferred by the NVMe Transport using a transfer mechanism and data buffers that are specific to the\nNVMe Transport.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 219,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1512",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6518486142158508
  },
  {
    "content": "The SGL Identifier Descriptor Sub Type field may indicate additional information about a descriptor. As an\nexample, the Sub Type may indicate that the Address field is an offset rather than an absolute address.\nThe Sub Type may also indicate NVMe Transport specific information.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 278,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1513",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.016789481043815613
  },
  {
    "content": "The controller shall abort a command if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1514",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05820835009217262
  },
  {
    "content": "- an SGL segment contains an SGL Segment descriptor or an SGL Last Segment descriptor in\nother than the last descriptor in the segment;\n\n- a last SGL segment contains an SGL Segment descriptor, or an SGL Last Segment descriptor;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 228,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1515",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5877933502197266
  },
  {
    "content": "- an SGL descriptor has an unsupported format; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1516",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6359483003616333
  },
  {
    "content": "- an SGL Data Block descriptor contains Address or Length fields with either of the two least\nsignificant bits set to 1b and the controller supports only dword alignment and granularity as\nindicated in the SGL Support field of the Identify Controller data structure. Refer to Figure 275.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 287,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1517",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5437478423118591
  },
  {
    "content": "Figure 113 defines the SGL segment.\n\n**Figure 113: SGL Segment**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1518",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4284215569496155
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|15:00|SGL Descriptor 0|\n|31:16|SGL Descriptor 1|\n|…|…|\n|((n*16)+15):(n*16)|SGL Descriptor n|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 123,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1519",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4721737205982208
  },
  {
    "content": "An SGL segment contains one or more SGL descriptors. Figure 114 defines the generic SGL descriptor\nformat.\n\n**Figure 114: Generic SGL Descriptor Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1520",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6155994534492493
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|14:00|Descriptor Type Specific|\n|15|SGL Identifier: The definition of this field is described in the table below.<br>Bits Description<br>03:00 SGL Descriptor Sub Type (refer to Figure 116)<br>07:04 SGL Descriptor Type (refer to Figure 115)|\n\n|Bits|Description|\n|---|---|\n|03:00|SGL Descriptor Sub Type (refer to Figure 116)|\n|07:04|SGL Descriptor Type (refer to Figure 115)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 405,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1521",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5876333713531494
  },
  {
    "content": "The SGL Descriptor Type field defined in Figure 115 specifies the SGL descriptor type. If the SGL Descriptor\nType field is set to a reserved value or an unsupported value, then the SGL descriptor shall be processed\nas having an SGL Descriptor Type error. If the SGL Descriptor Sub Type field is set to a reserved value or\nan unsupported value, then the descriptor shall be processed as having an SGL Descriptor Type error.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 422,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1522",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5764298439025879
  },
  {
    "content": "An SGL descriptor set to all zeroes is an SGL Data Block descriptor with the Address field cleared to 0h\nand the Length field cleared to 0h may be used as a NULL descriptor.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 173,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1523",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.501499593257904
  },
  {
    "content": "**Figure 115: SGL Descriptor Type**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1524",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5190659165382385
  },
  {
    "content": "|Code|Descriptor|\n|---|---|\n|0h|SGL Data Block descriptor|\n|1h|SGL Bit Bucket descriptor|\n|2h|SGL Segment descriptor|\n|3h|SGL Last Segment descriptor|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 150,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1525",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16668882966041565
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1526",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21130995452404022
  },
  {
    "content": "**Figure 115: SGL Descriptor Type**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1527",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4826979339122772
  },
  {
    "content": "|Code|Descriptor|\n|---|---|\n|4h|Keyed SGL Data Block descriptor|\n|5h|Transport SGL Data Block descriptor|\n|6h to Eh|Reserved|\n|Fh|Vendor specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 146,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1528",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5310947299003601
  },
  {
    "content": "Figure 116 defines the SGL Descriptor Sub Type values and indicates the SGL Descriptor Types to which\neach SGL Descriptor Sub Type applies.\n\n**Figure 116: SGL Descriptor Sub Type Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 187,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1529",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6077417135238647
  },
  {
    "content": "|SGL Descriptor<br>Sub Type|SGL Descriptor<br>Types|Sub Type Description|\n|---|---|---|\n|0h|0h, 2h, 3h, 4h|Address: The Address field specifies the starting 64-bit memory byte address<br>of the Data Block, Segment, or Last Segment descriptor.|\n|0h|1h|For Type 1h, the Sub Type field shall be cleared to 0h.|\n|0h|All other values|Reserved|\n|1h|0h, 2h, 3h|Offset: The Address field contains an offset from the beginning of the location<br>where data may be transferred. For NVMe over PCIe implementations, this<br>Sub Type is reserved. For NVMe over Fabrics implementations, refer to<br>section 3.3.2.1.3.1.|\n|1h|1h|The controller shall abort the command with the status code of SGL Descriptor<br>Type Invalid.|\n|1h|4h|The controller shall abort the command with the status code of SGL Descriptor<br>Type Invalid.|\n|1h|All other values|Reserved|\n|Ah to Fh|All|NVMe Transport Specific: The definitions for this range of Sub Types are<br>defined by the binding section for the associated NVMe Transport.|\n|All other values|All|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1032,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1530",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5909605026245117
  },
  {
    "content": "The SGL Data Block descriptor, defined in Figure 117, describes a data block.\n\n**Figure 117: SGL Data Block descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 120,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1531",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6463077068328857
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Address: If the SGL Identifier Descriptor Sub Type field is cleared to 0h, then the Address field<br>specifies the starting 64-bit memory byte address of the data block. If the SGL Identifier Descriptor<br>Sub Type field is set to 1h, then the Address field contains an offset from the beginning of the<br>location where data may be transferred. If the controller requires dword alignment and granularity<br>as indicated in the SGL Support (SGLS) field of the Identify Controller data structure (refer to<br>Figure 275), then the two least significant bits shall be cleared to 00b.<br>If dword alignment and granularity is required, the controller may report an error of Invalid Field in<br>Command if bits 1:0 are not cleared to 00b. If the controller does not report an error of Invalid Field<br>in Command, then the controller shall operate as if bits 1:0 are cleared to 00b.|\n|11:08|Length: The Length field specifies the length in bytes of the data block. A Length field cleared to<br>0h specifies that no data is transferred. An SGL Data Block descriptor specifying that no data is<br>transferred is a valid SGL Data Block descriptor. If the controller requires dword alignment and<br>granularity as specified in the SGL Support (SGLS) field the of Identify Controller data structure,<br>then the two least significant bits shall be cleared to 00b.<br>If dword alignment and granularity is required, the controller may report an error of Invalid Field in<br>Command if bits 1:0 are not cleared to 00b. If the controller does not report an error of Invalid Field<br>in Command, then the controller shall operate as if bits 1:0 are cleared to 00b.<br>If the value in the Address field plus the value in the Length field is greater than<br>1_00000000_00000000h, then the SGL Data Block descriptor shall be processed as having a<br>Data SGL Length Invalid or Metadata SGL Length Invalid error.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1933,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1532",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23971596360206604
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1533",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20396225154399872
  },
  {
    "content": "**Figure 117: SGL Data Block descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1534",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6226981282234192
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|14:12|Reserved|\n|15|SGL Identifier: The definition of this field is described in the table below.<br>Bits Description<br>03:00 SGL Descriptor Sub Type: Valid values are specified in Figure 116.<br>07:04 SGL Descriptor Type: 0h as specified in Figure 115.|\n\n|Bits|Description|\n|---|---|\n|03:00|SGL Descriptor Sub Type: Valid values are specified in Figure 116.|\n|07:04|SGL Descriptor Type: 0h as specified in Figure 115.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 451,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1535",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6641284227371216
  },
  {
    "content": "The SGL Bit Bucket descriptor, defined in Figure 118, is used to ignore parts of source data.\n\n**Figure 118: SGL Bit Bucket descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1536",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7074158787727356
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Reserved|\n|11:08|Length: The Length field specifies the amount of source data that is discarded. An SGL Bit Bucket<br>descriptor specifying that no source data be discarded (i.e., the length field cleared to 0h) is a valid<br>SGL Bit Bucket descriptor.<br>If the SGL Bit Bucket descriptor describes a destination data buffer (e.g., a read from the controller<br>to host memory), then the Length field specifies the number of bytes of the source data which the<br>controller shall discard (i.e., not transfer to the destination data buffer).<br>If the SGL Bit Bucket descriptor describes a source data buffer (e.g., a write from host memory to<br>the controller), then the Bit Bucket Descriptor shall be treated as if the Length field were cleared<br>to 0h (i.e., the Bit Bucket Descriptor has no effect).<br>If SGL Bit Bucket descriptors are supported, their length in a destination data buffer shall be<br>included in the specified length of data to be transferred (e.g., their length in a source data buffer<br>is not included in the transfer length specified by the NLB parameter).|\n|14:12|Reserved|\n|15|SGL Identifier: The definition of this field is described in the table below.<br>Bits Description<br>03:00 SGL Descriptor Sub Type: Valid values are specified in Figure 116.<br>07:04 SGL Descriptor Type: 1h as specified in Figure 115.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1379,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1537",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.613019585609436
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|03:00|SGL Descriptor Sub Type: Valid values are specified in Figure 116.|\n|07:04|SGL Descriptor Type: 1h as specified in Figure 115.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1538",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5088996291160583
  },
  {
    "content": "The SGL Segment descriptor, defined in Figure 119, describes the next SGL segment, which is not the last\nSGL segment.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 117,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1539",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6952807903289795
  },
  {
    "content": "**Figure 119: SGL Segment descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1540",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.486433207988739
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Address: If the SGL Identifier Descriptor Sub Type field is cleared to 0h, then the Address field<br>specifies the starting 64-bit memory byte address of the next SGL segment, which is an SGL<br>segment. If the SGL Identifier Descriptor Sub Type field is set to 1h, then the Address field contains<br>an offset from the beginning of the location where data may be transferred.|\n|11:08|Length: The Length field specifies the length in bytes of the next SGL segment. The Length field<br>shall be a non-zero value and a multiple of 16.<br>If the value in the Address field plus the value in the Length field is greater than<br>1_00000000_00000000h, then the SGL Segment descriptor shall be processed as having a Data<br>SGL Length Invalid or Metadata SGL Length Invalid error.|\n|14:12|Reserved|\n|15|SGL Identifier: The definition of this field is described in the table below.<br>Bits Description<br>03:00 SGL Descriptor Sub Type: Valid values are specified in Figure 116.<br>07:04 SGL Descriptor Type: 2h as specified in Figure 115.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1068,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1541",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6799457669258118
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|03:00|SGL Descriptor Sub Type: Valid values are specified in Figure 116.|\n|07:04|SGL Descriptor Type: 2h as specified in Figure 115.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1542",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3281155526638031
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1543",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07933247089385986
  },
  {
    "content": "The SGL Last Segment descriptor, defined in Figure 120, describes the next and last SGL segment. A last\nSGL segment that contains an SGL Segment descriptor or an SGL Last Segment descriptor is processed\n\n**Figure 120: SGL Last Segment descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 247,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1544",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5371410250663757
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Address: If the SGL Identifier Descriptor Sub Type field is cleared to 0h, then the Address field<br>specifies the starting 64-bit memory byte address of the next and last SGL segment, which is an<br>SGL segment. If the SGL Identifier Descriptor Sub Type field is set to 1h, then the Address field<br>contains an offset from the beginning of the location where data may be transferred.|\n|11:08|Length: The Length field specifies the length in bytes of the next and last SGL segment. The<br>Length field shall be a non-zero value and a multiple of 16.<br>If the value in the Address field plus the value in the Length field is greater than<br>1_00000000_00000000h, then the SGL Last Segment descriptor shall be processed as having a<br>Data SGL Length Invalid or Metadata SGL Length Invalid error.|\n|14:12|Reserved|\n|15|SGL Identifier: The definition of this field is described in the table below.<br>Bits Description<br>03:00 SGL Descriptor Sub Type: Valid values are specified in Figure 116.<br>07:04 SGL Descriptor Type: 3h as specified in Figure 115.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1091,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1545",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6808742880821228
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|03:00|SGL Descriptor Sub Type: Valid values are specified in Figure 116.|\n|07:04|SGL Descriptor Type: 3h as specified in Figure 115.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1546",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5627810955047607
  },
  {
    "content": "The Keyed SGL Data Block descriptor, defined in Figure 121, describes a keyed data block.\n\n**Figure 121: Keyed SGL Data Block descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 138,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1547",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6349756121635437
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Address: The Address field specifies the starting 64-bit memory byte address of the data block.|\n|10:08|Length: The Length field specifies the length in bytes of the data block. A Length field cleared to<br>0h specifies that no data is transferred. An SGL Data Block descriptor specifying that no data is<br>transferred is a valid SGL Data Block descriptor.<br>If the value in the Address field plus the value in the Length field is greater than<br>1_00000000_00000000h, then the SGL Data Block descriptor shall be processed as having a<br>Data SGL Length Invalid or Metadata SGL Length Invalid error.|\n|14:11|Key: Specifies a 32-bit key that is associated with the data block.|\n|15|SGL Identifier: The definition of this field is described in the table below.<br>Bits Description<br>03:00 SGL Descriptor Sub Type: Valid values are specified in Figure 116.<br>07:04 SGL Descriptor Type: 4h as specified in Figure 115.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 955,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1548",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6658273339271545
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|03:00|SGL Descriptor Sub Type: Valid values are specified in Figure 116.|\n|07:04|SGL Descriptor Type: 4h as specified in Figure 115.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1549",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6473477482795715
  },
  {
    "content": "**Figure 122: Transport SGL Data Block descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1550",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6952329277992249
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Reserved|\n|11:08|Length: The Length field specifies the length in bytes of the data block. A Length field cleared to<br>0h specifies that no data is transferred. A Transport SGL Data Block descriptor specifying that no<br>data is transferred is a valid Transport SGL Data Block descriptor. If the controller requires dword<br>alignment and granularity as specified in the SGL Support field of Identify Controller (refer to Figure<br>275), then the two least significant bits shall be cleared to 00b.<br>The data transfer mechanism and data buffers for data specified by a Transport SGL Data Block<br>descriptor are defined by the binding section for the associated NVMe Transport.|\n|14:12|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 735,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1551",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2071005403995514
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1552",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2313302904367447
  },
  {
    "content": "**Figure 122: Transport SGL Data Block descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1553",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6002576351165771
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|15|SGL Identifier: The definition of this field is described in the table below.<br>Bits Description<br>03:00 SGL Descriptor Sub Type: Valid values are specified in Figure 116.<br>07:04 SGL Descriptor Type: 5h as specified in Figure 115.|\n\n|Bits|Description|\n|---|---|\n|03:00|SGL Descriptor Sub Type: Valid values are specified in Figure 116.|\n|07:04|SGL Descriptor Type: 5h as specified in Figure 115.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 434,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1554",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5016104578971863
  },
  {
    "content": "**4.1.2.1** **SGL Example**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1555",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43818381428718567
  },
  {
    "content": "Figure 123 shows an example of a data read request using SGLs. In the example, the logical block size is\n512B. The total length of the logical blocks accessed is 13 KiB, of which only 11 KiB is transferred to the\nhost. The Number of Logical Blocks (NLB) field in the command shall specify 26, indicating the total length\nof the logical blocks accessed on the controller is 13 KiB. There are three SGL segments describing the\nlocations in memory where the logical block data is transferred.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 489,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1556",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6992852091789246
  },
  {
    "content": "The three SGL segments contain a total of three Data Block descriptors with lengths of 3 KiB, 4 KiB, and\n4 KiB respectively. Segment 1 of the Destination SGL contains a Bit Bucket descriptor with a length of 2 KiB\nthat specifies to not transfer (i.e., ignore) 2 KiB of logical block data from the NVM. Segment 1 of the\ndestination SGL also contains a Last Segment descriptor specifying that the segment pointed to by the\ndescriptor is the last SGL segment.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 456,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1557",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2778424322605133
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1558",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12309712171554565
  },
  {
    "content": "**Figure 123: SGL Read Example**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1559",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24997912347316742
  },
  {
    "content": "NVMe Logical Blocks LBA x+26",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1560",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11335276067256927
  },
  {
    "content": "**Metadata Region (MR)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1561",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23640035092830658
  },
  {
    "content": "|Address = A|Col2|Col3|\n|---|---|---|\n|0||Length = 3KiB|\n|Address = Segment 1|Address = Segment 1|Address = Segment 1|\n|2||Length = 48|\n\n|Address = B|Col2|Col3|\n|---|---|---|\n|0||Length = 4KiB|\n||||\n|1||Length = 2KiB|\n|Address = Segment 2|Address = Segment 2|Address = Segment 2|\n|3||Length = 16|\n\n|Address = C|Col2|Col3|\n|---|---|---|\n|0||Length = 4KiB|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 354,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1562",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20159563422203064
  },
  {
    "content": "The definition for the Metadata Region is command set specific. Refer to each I/O Command Set\nspecification for applicability and additional details, if any.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 157,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1563",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2603002190589905
  },
  {
    "content": "**4.2** **Feature Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1564",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5102129578590393
  },
  {
    "content": "The Get Features command (refer to section 5.15) and Set Features command (refer to section 5.27) may\nbe used to read and modify operating parameters of the controller. The operating parameters are grouped\nand identified by Feature Identifiers. Each Feature Identifier contains one or more attributes that may affect\nthe behavior of the Feature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 345,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1565",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09440188854932785
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1566",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31695374846458435
  },
  {
    "content": "If bit 4 is set to ‘1’ in the Optional NVM Command Support (ONCS) field of the Identify Controller data\nstructure in Figure 275, then for each Feature, there are three settings: default, saved, and current. If bit 4\nis cleared to ‘0’ in the Optional NVM Command Support field of the Identify Controller data structure, then\nthe controller only supports a current and default value for each Feature. In this case, the current value may\nbe persistent across power cycles and resets based on the information specified in Figure 316.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 529,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1567",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4852552115917206
  },
  {
    "content": "If bit 4 is set to ‘1’ in the ONCS field, then each Feature has supported capabilities (refer to Figure 195),\nwhich are discovered using the Supported Capabilities value in the Select field in Get Features (refer to\nFigure 192).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 228,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1568",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3373805284500122
  },
  {
    "content": "The default value for each Feature is vendor specific and set by the manufacturer unless otherwise\nspecified. The default value is not changeable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 146,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1569",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4128111004829407
  },
  {
    "content": "A Feature may be saveable. The saved value is the value that the Feature has after a Controller Level\nReset. If a Feature is not saveable, then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 144,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1570",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6455532312393188
  },
  {
    "content": "a) the default value is used after a Controller Level Reset; and\nb) a Get Features command to read the saved value returns the default value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1571",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5654972195625305
  },
  {
    "content": "The current value for a Feature is the value in active use by the controller for that Feature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 94,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1572",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42356741428375244
  },
  {
    "content": "A Set Features command uses the value specified by the command to set:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1573",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45356324315071106
  },
  {
    "content": "a) the current value for that Feature; or\nb) the current value for that Feature and the saved value for that Feature, if that Feature is saveable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 146,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1574",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4208919107913971
  },
  {
    "content": "Feature settings may apply to:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1575",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37077710032463074
  },
  {
    "content": "a) the controller (i.e., the feature is not namespace specific); or\nb) a namespace (i.e., the feature is namespace specific).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 125,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1576",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.518248438835144
  },
  {
    "content": "For feature values that apply to the controller:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1577",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13808661699295044
  },
  {
    "content": "a) if the NSID field is cleared to 0h or set to FFFFFFFFh, then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1578",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15403878688812256
  },
  {
    "content": "- the Set Features command shall set the specified feature value for the controller; and\n\n- the Get Features command shall return the current setting of the requested feature value for\nthe controller;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 200,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1579",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09414127469062805
  },
  {
    "content": "b) if the NSID field is set to a valid namespace identifier (refer to section 3.2.1.2), then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1580",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24607664346694946
  },
  {
    "content": "- the Set Features command shall abort with a status code of Feature Not Namespace Specific;\nand",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1581",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36092668771743774
  },
  {
    "content": "- the Get Features command shall return the current setting of the requested feature value for\nthe controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 110,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1582",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3102570176124573
  },
  {
    "content": "For feature values that apply to a namespace:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1583",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3504975140094757
  },
  {
    "content": "a) if the NSID field is set to an active namespace identifier (refer to section 3.2.1.4), then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1584",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28408360481262207
  },
  {
    "content": "- the Set Features command shall set the specified feature value of the specified namespace;\nand\n\n- the Get Features command shall return the current setting of the requested feature value for\nthe specified namespace;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 217,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1585",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1088026836514473
  },
  {
    "content": "b) if the NSID field is set to FFFFFFFFh, then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1586",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1808561533689499
  },
  {
    "content": "- for the Set Features command, the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1587",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2883460521697998
  },
  {
    "content": "`o` if the MDS bit is set to ‘1’ in the Identify Controller data structure, abort the command with\nInvalid Field in Command; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1588",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10948652774095535
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1589",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1437792181968689
  },
  {
    "content": "`o` if the MDS bit is cleared to ‘0’ in the Identify Controller data structure, unless otherwise\nspecified, set the specified feature value for all namespaces attached to the controller\nprocessing the command;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 209,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1590",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46722933650016785
  },
  {
    "content": "- for the Get Features command, the controller shall, unless otherwise specified in section\n5.27.1, abort the command with a status code of Invalid Namespace or Format;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1591",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36049529910087585
  },
  {
    "content": "c) if the NSID field is set to any other value, then the Set Features command and the Get Features",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1592",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14901947975158691
  },
  {
    "content": "command shall abort as described in the rules for namespace identifier usage in Figure 87.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1593",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3006245493888855
  },
  {
    "content": "If the controller supports the Save field in the Set Features command and the Select field in the Get Features\ncommand, then any Feature Identifier that is namespace specific may be saved on a per namespace basis.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 213,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1594",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25478804111480713
  },
  {
    "content": "There are mandatory and optional Feature Identifiers defined in Figure 316. If a Get Features command or\nSet Features command is processed that specifies a Feature Identifier that is not supported, then the\ncontroller shall abort the command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1595",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20065748691558838
  },
  {
    "content": "**4.3** **Identifier Format and Layout (Informative)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1596",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41854122281074524
  },
  {
    "content": "This section provides guidance for proper implementation of various identifiers defined in the Identify\nController, Identify Namespace, and Namespace Identification Descriptor data structures.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 192,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1597",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4014565050601959
  },
  {
    "content": "**PCI Vendor ID (VID) and PCI Subsystem Vendor ID (SSVID)**\n\nThe PCI Vendor ID (VID, bytes 01:00) and PCI Subsystem Vendor ID (SSVID, bytes 03:02) are defined in\nthe Identify Controller data structure. The values are assigned by the PCI SIG. Each identifier is a 16-bit\nnumber in little endian format.\n\n**Figure 124: PCI Vendor ID (VID) and PCI Subsystem**\n\n**Vendor ID (SSVID)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 379,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1598",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1205148696899414
  },
  {
    "content": "|Byte|00|01|02|03|\n|---|---|---|---|---|\n|Value|CDh|ABh|34h|12h|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1599",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.328059583902359
  },
  {
    "content": "**Serial Number (SN) and Model Number (MN)**\n\nThe Serial Number (SN, bytes 23:04) and Model Number (MN, bytes 63:24) are defined in the Identify\nController data structure. The values are ASCII strings assigned by the vendor. Each identifier is in big\nendian format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1600",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32320472598075867
  },
  {
    "content": "Example (Value shown as ASCII characters):",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1601",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30973508954048157
  },
  {
    "content": "**Figure 125: Serial Number (SN) and Model Number (MN)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1602",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2753649950027466
  },
  {
    "content": "|Bytes|04|05|06|23 to 07|24|25|63 to 26|\n|---|---|---|---|---|---|---|---|\n|Value|53h (‘S’)|4Eh (‘N’)|31h (‘1’)|20h (‘ ‘)|4Dh (‘M’)|32h (‘2’)|20h (‘ ‘)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 152,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1603",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11795080453157425
  },
  {
    "content": "**IEEE OUI Identifier (IEEE)**\n\nThe IEEE OUI Identifier (OUI, bytes 75:73) is defined in the Identify Controller data structure. The value is\nassigned by the IEEE Registration Authority. The identifier is in little endian format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1604",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2264350950717926
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1605",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24496538937091827
  },
  {
    "content": "**Figure 126: IEEE OUI Identifier (IEEE)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1606",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31758734583854675
  },
  {
    "content": "|Byte|73|74|75|\n|---|---|---|---|\n|Value|EFh|CDh|ABh|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1607",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3661104440689087
  },
  {
    "content": "**IEEE Extended Unique Identifier (EUI64)**\n\nThe IEEE Extended Unique Identifier (EUI64, bytes 127:120) is defined in the Identify Namespace data\n[structure. Tutorials are available at https://standards.ieee.org/develop/regauth/tut/index.html. IEEE defines](https://standards.ieee.org/develop/regauth/tut/index.html)\nthree formats that may be used in this field: MA-L, MA-M, and MA-S. The examples in this section use the\nMA-L format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 434,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1608",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31251731514930725
  },
  {
    "content": "The MA-L format is defined as a string of eight octets:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1609",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4581668972969055
  },
  {
    "content": "**Figure 127: IEEE Extended Unique Identifier (EUI64), MA-L Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1610",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33373087644577026
  },
  {
    "content": "|EUI[0]|EUI[1]|EUI[2]|EUI[3]|EUI[4]|EUI[5]|EUI[6]|EUI[7]|\n|---|---|---|---|---|---|---|---|\n|OUI|OUI|OUI|Extension Identifier|Extension Identifier|Extension Identifier|Extension Identifier|Extension Identifier|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1611",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45771998167037964
  },
  {
    "content": "EUI64 is defined in big endian format. The OUI field differs from the OUI Identifier which is in little endian\nformat as described in section 4.3.3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1612",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4793272316455841
  },
  {
    "content": "- OUI Identifier = ABCDEFh; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1613",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4616159200668335
  },
  {
    "content": "- Extension Identifier = 0123456789h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1614",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4906366169452667
  },
  {
    "content": "**Figure 128: IEEE Extended Unique Identifier (EUI64), OUI Identifier**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 71,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1615",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44103625416755676
  },
  {
    "content": "|Byte|120|121|122|123|124|125|\n|---|---|---|---|---|---|---|\n|Value|ABh|CDh|EFh|01h|23h|45h|\n|Field|OUI|OUI|OUI|Extension Identifier|Extension Identifier|Extension Identifier|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 175,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1616",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38730472326278687
  },
  {
    "content": "**Figure 129: IEEE Extended**\n**Unique Identifier (EUI64), Ext. ID**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1617",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47480982542037964
  },
  {
    "content": "|Byte|126|127|\n|---|---|---|\n|Value|67h|89h|\n|Field|Ext ID (cont)|Ext ID (cont)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 80,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1618",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19553527235984802
  },
  {
    "content": "The MA-L format is similar to the World Wide Name (WWN) format defined as IEEE Registered designator\n(NAA = 5) as shown below.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 126,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1619",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.484345406293869
  },
  {
    "content": "**Figure 130: MA-L similarity to WWN**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1620",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23547430336475372
  },
  {
    "content": "|Byte|0|Col3|1|2|3|Col7|4|5|6|7|\n|---|---|---|---|---|---|---|---|---|---|---|\n|EUI64|OUI|OUI|OUI|OUI|Extension Identifier|Extension Identifier|Extension Identifier|Extension Identifier|Extension Identifier|Extension Identifier|\n|WWN<br>(NAA = 5)|5h|OUI|OUI|OUI|OUI|Vendor Specific Identifier|Vendor Specific Identifier|Vendor Specific Identifier|Vendor Specific Identifier|Vendor Specific Identifier|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 401,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1621",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3115052282810211
  },
  {
    "content": "**Namespace Globally Unique Identifier (NGUID)**\n\nThe Namespace Globally Unique Identifier (NGUID, bytes 119:104) is defined in the Identify Namespace\ndata structure. The NGUID is composed of an IEEE OUI, an extension identifier, and a vendor specific\nextension identifier. The extension identifier and vendor specific extension identifier are both assigned by",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 360,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1622",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2923996150493622
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1623",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2922664284706116
  },
  {
    "content": "the vendor and may be considered as a single field. NGUID is defined in big endian format. The OUI field\ndiffers from the OUI Identifier which is in little endian format as described in section 4.3.3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 200,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1624",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2300557643175125
  },
  {
    "content": "- OUI Identifier = ABCDEFh;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1625",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5259434580802917
  },
  {
    "content": "- Extension Identifier = 0123456789h; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1626",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5967845320701599
  },
  {
    "content": "- Vendor Specific Extension Identifier = FEDCBA9876543210h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1627",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2561720311641693
  },
  {
    "content": "**Figure 131: Namespace Globally Unique Identifier (NGUID)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1628",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21101239323616028
  },
  {
    "content": "|Byte|104|105|106|107|108|109|\n|---|---|---|---|---|---|---|\n|Value|FEh|DCh|BAh|98h|76h|54h|\n|Field|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 322,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1629",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20095741748809814
  },
  {
    "content": "**Figure 132: Namespace Globally Unique Identifier (NGUID), OUI**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1630",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2829526662826538
  },
  {
    "content": "|Byte|110|111|112|113|114|115|\n|---|---|---|---|---|---|---|\n|Value|32h|10h|ABh|CDh|EFh|01h|\n|Field|VSP Ex ID (cont)|VSP Ex ID (cont)|OUI|OUI|OUI|Ex ID|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 152,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1631",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2731085419654846
  },
  {
    "content": "**Figure 133: Namespace Globally Unique Identifier**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1632",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42783480882644653
  },
  {
    "content": "**(NGUID), Extension Identifier (continued)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1633",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.470553457736969
  },
  {
    "content": "|Byte|116|117|118|119|\n|---|---|---|---|---|\n|Value|23h|45h|67h|89h|\n|Field|Extension Identifier (continued)|Extension Identifier (continued)|Extension Identifier (continued)|Extension Identifier (continued)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 208,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1634",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23572896420955658
  },
  {
    "content": "The NGUID format is similar to the World Wide Name (WWN) format as IEEE Registered Extended\ndesignator (NAA = 6) as shown below.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1635",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5660772323608398
  },
  {
    "content": "**Figure 134: Namespace Globally Unique Identifier (NGUID), NGUID similarity to WWN**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1636",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3102600872516632
  },
  {
    "content": "|Byte|0|Col3|1|2|3|Col7|4|5|6|7|8|9|10|11|12|13|14|15|\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\n|NGUID|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|Vendor Specific Extension Identifier|OUI|OUI|OUI|Extension Identifier|Extension Identifier|Extension Identifier|Extension Identifier|Extension Identifier|\n|WWN<br>(NAA = 6)|6h|OUI|OUI|OUI|OUI|Vendor Specific Identifier|Vendor Specific Identifier|Vendor Specific Identifier|Vendor Specific Identifier|Vendor Specific Identifier|Vendor Specific Identifier Extension|Vendor Specific Identifier Extension|Vendor Specific Identifier Extension|Vendor Specific Identifier Extension|Vendor Specific Identifier Extension|Vendor Specific Identifier Extension|Vendor Specific Identifier Extension|Vendor Specific Identifier Extension|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1096,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1637",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32808926701545715
  },
  {
    "content": "**Universally Unique Identifier (UUID)**\n\nThe Universally Unique Identifier is defined in RFC 4122 and contained in the Namespace Identification\nDescriptor (refer to Figure 277). Byte ordering requirements for a UUID are described in RFC 4122.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 243,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1638",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2485981434583664
  },
  {
    "content": "**4.4** **List Data Structures**\n\nThis section describes list data structures used in this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 105,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1639",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39572227001190186
  },
  {
    "content": "A Controller List, defined in Figure 135, is an ordered list of ascending controller IDs. The controller identifier\nis defined in bytes 79:78 of the Identify data structure in Figure 135. Unused entries are zero filled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 219,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1640",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6806474924087524
  },
  {
    "content": "**Figure 135: Controller List Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1641",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4506560266017914
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Number of Identifiers: This field contains the number of controller entries in the list. There may<br>be up to 2,047 identifiers in the list. A value of 0h indicates there are no controllers in the list.|\n|03:02|Identifier 0: This field contains the NVM subsystem unique controller identifier for the first<br>controller in the list, if present.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 383,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1642",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4010862410068512
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1643",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12333965301513672
  },
  {
    "content": "**Figure 135: Controller List Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1644",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3725723624229431
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|05:04|Identifier 1: This field contains the NVM subsystem unique controller identifier for the second<br>controller in the list, if present.|\n|…|…|\n|(N*2+3):(N*2+2)|Identifier N: This field contains the NVM subsystem unique controller identifier for the N+1<br>controller in the list, if present.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 328,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1645",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1878606230020523
  },
  {
    "content": "A Namespace List, defined in Figure 136, is an ordered list of namespace IDs. Unused entries are zero\nfilled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1646",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6958966851234436
  },
  {
    "content": "**Figure 136: Namespace List Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1647",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4262663424015045
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Identifier 0: This field contains the lowest namespace ID in the list or 0h if the list is empty.|\n|07:04|Identifier 1: This field contains the second lowest namespace ID in the list or 0h if the list contains<br>less than two entries.|\n|…|…|\n|(N*4+3):(N*4)|Identifier N: This field contains the N+1 lowest namespace ID in the list or 0h if the list contains<br>fewer than N entries.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 421,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1648",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2409505993127823
  },
  {
    "content": "**4.5** **NVMe Qualified Names**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1649",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5305989384651184
  },
  {
    "content": "NVMe Qualified Names (NQNs) are used to uniquely describe a host or NVM subsystem for the purposes\nof identification and authentication. The NVMe Qualified Name for the NVM subsystem is specified in the\nIdentify Controller data structure. An NQN is permanent for the lifetime of the host or NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 305,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1650",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6596049070358276
  },
  {
    "content": "An NVMe Qualified Name is encoded as a string of Unicode characters with the following properties:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1651",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4787442088127136
  },
  {
    "content": "- The encoding is UTF-8 (refer to RFC 3629);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1652",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4899890720844269
  },
  {
    "content": "- The following characters are used in formatting:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1653",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4981817305088043
  },
  {
    "content": "`o` dash (‘-‘=U+002d);\n`o` dot (‘.’=U+002e); and\n`o` colon (‘:’=U+003a);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1654",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2499806433916092
  },
  {
    "content": "- The maximum name is 223 bytes in length; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1655",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3156142234802246
  },
  {
    "content": "- The string is null terminated.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1656",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08508838713169098
  },
  {
    "content": "There are two supported NQN formats. The first format may be used by any organization that owns a\ndomain name. This naming format may be used to create a human interpretable string to describe the host\nor NVM subsystem. This format consists of:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 244,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1657",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23637904226779938
  },
  {
    "content": "- The string “.” (i.e., the ASCII period character);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1658",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4222094714641571
  },
  {
    "content": "- A date code, in “yyyy-mm” format. This date shall be during a time interval when the naming\nauthority owned the domain name used in this format. The date code uses the Gregorian\ncalendar. All digits and the dash shall be included;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 232,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1659",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4222094714641571
  },
  {
    "content": "- The string “.” (i.e., the ASCII period character);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1660",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24630995094776154
  },
  {
    "content": "- The reverse domain name of the naming authority that is creating the NQN; and\n\n- A colon (:) prefixed string that the owner of the domain name assigns that does not exceed the\nmaximum length. The naming authority is responsible to ensure that the NQN is worldwide\nunique.\n\nThe reverse domain name in an NQN that uses this format shall not be “org.nvmexpress”.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 361,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1661",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.587074875831604
  },
  {
    "content": "The following are examples of NVMe Qualified Names that may be generated by “Example NVMe, Inc.”",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1662",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5215742588043213
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1663",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4773865342140198
  },
  {
    "content": "- The string “nqn.2014-08.com.example:nvme:nvm-subsystem-sn-d78432”; and\n\n- The string “nqn.2014-08.com.example:nvme.host.sys.xyz”.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 131,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1664",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25096824765205383
  },
  {
    "content": "The second format may be used to create a unique identifier when there is not a naming authority or there\nis not a requirement for a human interpretable string. This format consists of:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 185,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1665",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3855288326740265
  },
  {
    "content": "- The string “.” (i.e., the ASCII period character);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1666",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24906395375728607
  },
  {
    "content": "- The string “2014-08.org.nvmexpress:uuid:”; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1667",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.638597309589386
  },
  {
    "content": "- A 128-bit UUID based on the definition in RFC 4122 represented as a string formatted as",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1668",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30024316906929016
  },
  {
    "content": "“\n*11111111-2222-3333-4444-555555555555”* .",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1669",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16862602531909943
  },
  {
    "content": "The following is an example of an NVMe Qualified Name using the UUID-based format:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1670",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6798191070556641
  },
  {
    "content": "- The string “nqn.2014-08.org.nvmexpress:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6”.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1671",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4225200116634369
  },
  {
    "content": "NVMe hosts, controllers and NVM subsystems compare (e.g., for equality) NVMe Qualified Names used\nby NVMe as binary strings without any text processing or text comparison logic that is specific to the\nUnicode character set or locale (e.g., case folding or conversion to lower case, Unicode normalization). Any\nsuch text processing:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 331,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1672",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5161290764808655
  },
  {
    "content": "a) may occur as part of entry of NVMe Qualified Names into NVMe hosts and NVM subsystems; and\nb) should not occur as part of receiving NVMe Qualified Names via an NVMe connection, as shown",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 188,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1673",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6952411532402039
  },
  {
    "content": "Upon entry (e.g., at point 1 in Figure 137, described as “input” in RFC4122), NVMe host software may\nprocess an NVMe Qualified Name (e.g., for conversion to lower case based on the Unicode locale). Upon\nentry (e.g., at point 3 in Figure 137, described as “input” in RFC4122), a controller may process an NVMe\nQualified Name (e.g., for conversion to lower case based on the Unicode locale). Upon receipt by the host\n(e.g., at point 2 in Figure 137) of an NVMe Qualified Name from the controller, no text process (e.g., no\ncase folding) should occur. Upon receipt by the controller (e.g., at point 4 in Figure 137) of an NVMe\nQualified Name from the host, no text processing (e.g., no case folding) should occur.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 710,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1674",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3860640525817871
  },
  {
    "content": "**Figure 137: NQN Processing**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1675",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22902408242225647
  },
  {
    "content": "**Unique Identifier**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1676",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16780534386634827
  },
  {
    "content": "|Col1|Text<br>Text processed<br>processed<br>upon entry to<br>upon entry<br>subsystem<br>to Host|Col3|\n|---|---|---|\n|No text<br>No text<br>processing<br>processing<br>upon<br>upon receipt<br>receipt|No text<br>No text<br>processing<br>processing<br>upon<br>upon receipt<br>receipt|No text<br>No text<br>processing<br>processing<br>upon<br>upon receipt<br>receipt|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 364,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1677",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08289321511983871
  },
  {
    "content": "The NVM Subsystem NVMe Qualified Name specified in the Identify Controller data structure (refer to\nFigure 275) should be used (e.g., by host software) as the unique identifier for the NVM subsystem. If the\ncontroller complies with an older version of the NVM Express specification that does not include the NVM\nSubsystem NQN, then the PCI Vendor ID, Serial Number, and Model Number fields in the Identify Controller\ndata structure and the NQN Starting String “nqn.2014.08.org.nvmexpress:” may be combined by the host",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 517,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1678",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6798837184906006
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1679",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.525329053401947
  },
  {
    "content": "to form a globally unique value that identifies the NVM subsystem (e.g., for host software that uses NQNs).\nThe method shown in Figure 138 should be used by the host to construct an NVM Subsystem NQN for\nolder NVM subsystems that do not provide an NQN in the Identify Controller data structure. The mechanism\nused by the vendor to assign Serial Number and Model Number values to ensure uniqueness is outside\nthe scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 440,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1680",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5746201276779175
  },
  {
    "content": "**Figure 138: NQN Construction for Older NVM Subsystems**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1681",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35516440868377686
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|26:00|NQN Starting String (NSS): Contains the 27 letter ASCII string ”nqn.2014-<br>08.org.nvmexpress:”.|\n|30:27|PCI Vendor ID (VID): Contains the company vendor identifier that is assigned by the PCI<br>SIG as a hexadecimal ASCII string.|\n|34:31|PCI Subsystem Vendor ID (SSVID): Contains the company vendor identifier that is<br>assigned by the PCI SIG for the subsystem as a hexadecimal ASCII string.|\n|54:35|Serial Number (SN): Contains the serial number for the NVM subsystem that is assigned<br>by the vendor as an ASCII string.|\n|94:55|Model Number (MN): Contains the model number for the NVM subsystem that is<br>assigned by the vendor as an ASCII string.|\n|222:95|Padding (PAD): Contains spaces (ASCII character 20h).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 756,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1682",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37405824661254883
  },
  {
    "content": "An NVM subsystem may contain multiple controllers. All controllers contained in the NVM subsystem share\nthe same NVM subsystem unique identifier. The Controller ID (CNTLID) value returned in the Identify\nController data structure may be used to uniquely identify a controller within an NVM subsystem. The\nController ID value when combined with the NVM subsystem identifier forms a globally unique value that\nidentifies the controller. The mechanism used by the vendor to assign Controller ID values is outside the\nscope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 542,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1683",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49712619185447693
  },
  {
    "content": "The Identify Namespace data structure (refer to the applicable I/O Command Set specification) contains\nthe IEEE Extended Unique Identifier (EUI64) and the Namespace Globally Unique Identifier (NGUID) fields.\nThe Namespace Identification Descriptor data structure (refer to Figure 277) contains the Namespace\nUUID. EUI64 is an 8-byte EUI-64 identifier (refer to section 4.3.4), NGUID is a 16-byte identifier based on\nEUI-64 (refer to section 4.3.5), and Namespace UUID is a 16-byte identifier described in RFC 4122 (refer\nto section 4.3.6).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 539,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1684",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41285207867622375
  },
  {
    "content": "When creating a namespace, the controller shall indicate a globally unique value in one or more of the\nfollowing:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 113,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1685",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.381475567817688
  },
  {
    "content": "a) the EUI64 field;\nb) the NGUID field; or\nc) a Namespace Identification Descriptor with the Namespace Identifier Type field set to 3h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 135,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1686",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6127846240997314
  },
  {
    "content": "If the EUI64 field is cleared to 0h and the NGUID field is cleared to 0h, then the namespace shall support\na valid Namespace UUID in the Namespace Identification Descriptor data structure.\nIf the UIDREUSE bit in the NSFEAT field is cleared to ‘0’, then a controller may reuse a non-zero\nNGUID/EUI64 value for a new namespace after the original namespace using the value has been\ndeleted. If the UIDREUSE bit is set to ‘1’, then a controller shall not reuse a non-zero NGUID/EUI64 for a\nnew namespace after the original namespace using the value has been deleted.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 562,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1687",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27243971824645996
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **5 Admin Command Set **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1688",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48055499792099
  },
  {
    "content": "The Admin Command Set defines the commands that may be submitted to the Admin Submission Queue.\n\nThe submission queue entry (SQE) structure and the fields that are common to all Admin commands are\ndefined in section 3.3.3. The completion queue entry (CQE) structure and the fields that are common to all\nAdmin commands are defined in section 3.3.3.2. The command specific fields in the SQE and CQE\nstructures (i.e., SQE Command Dwords 10 to 15, CQE Dword 0, and CQE Dword 1) for the Admin\nCommand Set are defined in this section.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 529,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1689",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5879518389701843
  },
  {
    "content": "Admin commands should not be impacted by the state of I/O queues (e.g., a full I/O Completion Queue\nshould not delay or stall the Delete I/O Submission Queue command).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1690",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3650495409965515
  },
  {
    "content": "Figure 139 defines all Admin commands. Refer to Figure 22, Figure 28, and Figure 32 for mandatory,\noptional, and prohibited commands for the various controller types.\n\n**Figure 139: Opcodes for Admin Commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1691",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17489755153656006
  },
  {
    "content": "|Opcode by Field|Col2|Col3|Combined<br>1<br>Opcode|Namespace<br>Identifier<br>2<br>Used|Command|Command Set<br>8<br>Specific|\n|---|---|---|---|---|---|---|\n|(07)|(06:02)|(01:00)|(01:00)|(01:00)|(01:00)|(01:00)|\n|Generic<br>Command|Function|Data<br>Transfer3|Data<br>Transfer3|Data<br>Transfer3|Data<br>Transfer3|Data<br>Transfer3|\n|0b|000 00b|00b|00h|No|Delete I/O Submission Queue|No|\n|0b|000 00b|01b|01h|No|Create I/O Submission Queue|No|\n|0b|000 00b|10b|02h|Yes|Get Log Page|No|\n|0b|000 01b|00b|04h|No|Delete I/O Completion Queue|No|\n|0b|000 01b|01b|05h|No|Create I/O Completion Queue|No|\n|0b|000 01b|10b|06h|NOTE 6|Identify|No|\n|0b|000 10b|00b|08h|No|Abort|No|\n|0b|000 10b|01b|09h|Yes|Set Features|No|\n|0b|000 10b|10b|0Ah|Yes|Get Features|No|\n|0b|000 11b|00b|0Ch|No|Asynchronous Event Request|No|\n|0b|000 11b|01b|0Dh|Yes|Namespace Management|No|\n|0b|001 00b|00b|10h|No|Firmware Commit|No|\n|0b|001 00b|01b|11h|No|Firmware Image Download|No|\n|0b|001 01b|00b|14h|Yes|Device Self-test|No|\n|0b|001 01b|01b|15h|4<br>Yes|Namespace Attachment|No|\n|0b|001 10b|00b|18h|No|Keep Alive|No|\n|0b|001 10b|01b|19h|5<br>Yes|Directive Send|No|\n|0b|001 10b|10b|1Ah|5<br>Yes|Directive Receive|No|\n|0b|001 11b|00b|1Ch|No|Virtualization Management|No|\n|0b|001 11b|01b|1Dh|No|NVMe-MI Send|No|\n|0b|001 11b|10b|1Eh|No|NVMe-MI Receive|No|\n|0b|010 00b|00b|20h|No|Capacity Management|No|\n|0b|010 01b|00b|24h|No|Lockdown|No|\n|0b|111 11b|00b|7Ch|No|Doorbell Buffer Config|No|\n|0b|111 11b|11b|7Fh|NOTE 9|Fabrics Commands9|No|\n|1b|000 00b|00b|80h|Yes|Format NVM|No|\n|1b|000 00b|01b|81h|NOTE 7|Security Send|No|\n|1b|000 00b|10b|82h|NOTE 7|Security Receive|No|\n|1b|000 01b|00b|84h|No|Sanitize|No|\n|1b|000 01b|10b|86h|NOTE 4|Get LBA Status|NVM, ZNS|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1717,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1692",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.049996763467788696
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1693",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10146071016788483
  },
  {
    "content": "**Figure 139: Opcodes for Admin Commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1694",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2669621407985687
  },
  {
    "content": "|Opcode by Field|Col2|Col3|Combined<br>1<br>Opcode|Namespace<br>Identifier<br>2<br>Used|Command|Command Set<br>8<br>Specific|\n|---|---|---|---|---|---|---|\n|(07)|(06:02)|(01:00)|(01:00)|(01:00)|(01:00)|(01:00)|\n|Generic<br>Command|Function|Data<br>Transfer3|Data<br>Transfer3|Data<br>Transfer3|Data<br>Transfer3|Data<br>Transfer3|\n||Vendor Specific|Vendor Specific|Vendor Specific|Vendor Specific|Vendor Specific||\n|1b|n/a|NOTE 3|C0h to<br>FFh||Vendor specific||\n|Notes:<br>1. Opcodes not listed are reserved.<br>2. A subset of commands use the Namespace Identifier (NSID) field. If the Namespace Identifier field is used, then the<br>value FFFFFFFFh is supported in this field unless otherwise indicated in footnotes in this figure that a specific command<br>does not support that value or supports that value only under specific conditions. When this field is not used, the field<br>is cleared to 0h as described in Figure 87.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified or<br>transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no data<br>transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command does not support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.<br>5. Support for the Namespace Identifier field set to FFFFFFFFh depends on the Directive Operation (refer to section 8.7).<br>6. Use of the Namespace Identifier field depends on the CNS value in the Identify Command as described in Figure 273.<br>7. The use of the Namespace Identifier is Security Protocol specific.<br>8. No = Not I/O Command Set specific, A = All I/O Command Sets, NVM = NVM Command Set specific, ZNS = Zoned<br>Namespace Command Set.<br>9. All Fabrics commands use the opcode 7Fh. Refer to section 6 for details.|Notes:<br>1. Opcodes not listed are reserved.<br>2. A subset of commands use the Namespace Identifier (NSID) field. If the Namespace Identifier field is used, then the<br>value FFFFFFFFh is supported in this field unless otherwise indicated in footnotes in this figure that a specific command<br>does not support that value or supports that value only under specific conditions. When this field is not used, the field<br>is cleared to 0h as described in Figure 87.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified or<br>transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no data<br>transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command does not support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.<br>5. Support for the Namespace Identifier field set to FFFFFFFFh depends on the Directive Operation (refer to section 8.7).<br>6. Use of the Namespace Identifier field depends on the CNS value in the Identify Command as described in Figure 273.<br>7. The use of the Namespace Identifier is Security Protocol specific.<br>8. No = Not I/O Command Set specific, A = All I/O Command Sets, NVM = NVM Command Set specific, ZNS = Zoned<br>Namespace Command Set.<br>9. All Fabrics commands use the opcode 7Fh. Refer to section 6 for details.|Notes:<br>1. Opcodes not listed are reserved.<br>2. A subset of commands use the Namespace Identifier (NSID) field. If the Namespace Identifier field is used, then the<br>value FFFFFFFFh is supported in this field unless otherwise indicated in footnotes in this figure that a specific command<br>does not support that value or supports that value only under specific conditions. When this field is not used, the field<br>is cleared to 0h as described in Figure 87.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified or<br>transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no data<br>transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command does not support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.<br>5. Support for the Namespace Identifier field set to FFFFFFFFh depends on the Directive Operation (refer to section 8.7).<br>6. Use of the Namespace Identifier field depends on the CNS value in the Identify Command as described in Figure 273.<br>7. The use of the Namespace Identifier is Security Protocol specific.<br>8. No = Not I/O Command Set specific, A = All I/O Command Sets, NVM = NVM Command Set specific, ZNS = Zoned<br>Namespace Command Set.<br>9. All Fabrics commands use the opcode 7Fh. Refer to section 6 for details.|Notes:<br>1. Opcodes not listed are reserved.<br>2. A subset of commands use the Namespace Identifier (NSID) field. If the Namespace Identifier field is used, then the<br>value FFFFFFFFh is supported in this field unless otherwise indicated in footnotes in this figure that a specific command<br>does not support that value or supports that value only under specific conditions. When this field is not used, the field<br>is cleared to 0h as described in Figure 87.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified or<br>transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no data<br>transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command does not support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.<br>5. Support for the Namespace Identifier field set to FFFFFFFFh depends on the Directive Operation (refer to section 8.7).<br>6. Use of the Namespace Identifier field depends on the CNS value in the Identify Command as described in Figure 273.<br>7. The use of the Namespace Identifier is Security Protocol specific.<br>8. No = Not I/O Command Set specific, A = All I/O Command Sets, NVM = NVM Command Set specific, ZNS = Zoned<br>Namespace Command Set.<br>9. All Fabrics commands use the opcode 7Fh. Refer to section 6 for details.|Notes:<br>1. Opcodes not listed are reserved.<br>2. A subset of commands use the Namespace Identifier (NSID) field. If the Namespace Identifier field is used, then the<br>value FFFFFFFFh is supported in this field unless otherwise indicated in footnotes in this figure that a specific command<br>does not support that value or supports that value only under specific conditions. When this field is not used, the field<br>is cleared to 0h as described in Figure 87.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified or<br>transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no data<br>transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command does not support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.<br>5. Support for the Namespace Identifier field set to FFFFFFFFh depends on the Directive Operation (refer to section 8.7).<br>6. Use of the Namespace Identifier field depends on the CNS value in the Identify Command as described in Figure 273.<br>7. The use of the Namespace Identifier is Security Protocol specific.<br>8. No = Not I/O Command Set specific, A = All I/O Command Sets, NVM = NVM Command Set specific, ZNS = Zoned<br>Namespace Command Set.<br>9. All Fabrics commands use the opcode 7Fh. Refer to section 6 for details.|Notes:<br>1. Opcodes not listed are reserved.<br>2. A subset of commands use the Namespace Identifier (NSID) field. If the Namespace Identifier field is used, then the<br>value FFFFFFFFh is supported in this field unless otherwise indicated in footnotes in this figure that a specific command<br>does not support that value or supports that value only under specific conditions. When this field is not used, the field<br>is cleared to 0h as described in Figure 87.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified or<br>transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no data<br>transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command does not support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.<br>5. Support for the Namespace Identifier field set to FFFFFFFFh depends on the Directive Operation (refer to section 8.7).<br>6. Use of the Namespace Identifier field depends on the CNS value in the Identify Command as described in Figure 273.<br>7. The use of the Namespace Identifier is Security Protocol specific.<br>8. No = Not I/O Command Set specific, A = All I/O Command Sets, NVM = NVM Command Set specific, ZNS = Zoned<br>Namespace Command Set.<br>9. All Fabrics commands use the opcode 7Fh. Refer to section 6 for details.|Notes:<br>1. Opcodes not listed are reserved.<br>2. A subset of commands use the Namespace Identifier (NSID) field. If the Namespace Identifier field is used, then the<br>value FFFFFFFFh is supported in this field unless otherwise indicated in footnotes in this figure that a specific command<br>does not support that value or supports that value only under specific conditions. When this field is not used, the field<br>is cleared to 0h as described in Figure 87.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified or<br>transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no data<br>transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command does not support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.<br>5. Support for the Namespace Identifier field set to FFFFFFFFh depends on the Directive Operation (refer to section 8.7).<br>6. Use of the Namespace Identifier field depends on the CNS value in the Identify Command as described in Figure 273.<br>7. The use of the Namespace Identifier is Security Protocol specific.<br>8. No = Not I/O Command Set specific, A = All I/O Command Sets, NVM = NVM Command Set specific, ZNS = Zoned<br>Namespace Command Set.<br>9. All Fabrics commands use the opcode 7Fh. Refer to section 6 for details.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 10453,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1695",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18281784653663635
  },
  {
    "content": "Figure 140 lists the Admin commands that are allowed during the processing of a sanitize operation and\nthe Admin commands that should be allowed during the processing of a Format NVM command .",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 192,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1696",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6325481534004211
  },
  {
    "content": "If a Format NVM command is in progress, then an Admin command not listed in Figure 140 that is submitted\nfor any namespace affected by that Format NVM command may be aborted. If aborted for that reason, then\na status code of Format in Progress should be returned.\n\nIf there are Admin commands not listed in Figure 140 being processed for a namespace, then a Format\nNVM command which is submitted that affects that namespace may be aborted. If aborted for that reason,\nthen a status code of Command Sequence Error should be returned.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 532,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1697",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6821786761283875
  },
  {
    "content": "**Figure 140: Sanitize Operations and Format NVM Command – Admin Commands Allowed**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1698",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6460602283477783
  },
  {
    "content": "|Admin Command|Additional Restrictions for Format NVM<br>command|Additional Restrictions for<br>sanitize operations|\n|---|---|---|\n|Abort|||\n|Asynchronous Event Request|||\n|Create I/O Completion Queue|||\n|Create I/O Submission Queue|||\n|Device Self–test|Only Controller DST should be allowed|Prohibited|\n|Delete I/O Completion Queue|||\n|Delete I/O Submission Queue|||\n|Get Features|||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 384,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1699",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40759432315826416
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1700",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4332468509674072
  },
  {
    "content": "**Figure 140: Sanitize Operations and Format NVM Command – Admin Commands Allowed**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1701",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5525410771369934
  },
  {
    "content": "|Log Pages|Additional Restrictions for both<br>Format NVM command and<br>sanitize operations|\n|---|---|\n|Error Information|Return 0h in the LBA field.|\n|SMART / Health Information||\n|Changed Namespace List||\n|Reservation Notification||\n|Asymmetric Namespace Access||\n|Sanitize Status||\n|Vendor specific|Prohibited for Sanitize|\n|Persistent Event Log|Prohibited for Sanitize|\n|Boot Partition||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 392,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1702",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.9110988974571228
  },
  {
    "content": "|Admin Command|Additional Restrictions for Format NVM<br>command|Additional Restrictions for<br>sanitize operations|\n|---|---|---|\n|Get Log Page|The log pages allowed for both Format NVM command and sanitize operations<br>are listed below.<br>Additional Restrictions for both<br>Log Pages Format NVM command and<br>sanitize operations<br>Error Information Return 0h in the LBA field.<br>SMART / Health Information<br>Changed Namespace List<br>Reservation Notification<br>Asymmetric Namespace Access<br>Sanitize Status<br>Vendor specific Prohibited for Sanitize<br>Persistent Event Log Prohibited for Sanitize<br>Boot Partition|The log pages allowed for both Format NVM command and sanitize operations<br>are listed below.<br>Additional Restrictions for both<br>Log Pages Format NVM command and<br>sanitize operations<br>Error Information Return 0h in the LBA field.<br>SMART / Health Information<br>Changed Namespace List<br>Reservation Notification<br>Asymmetric Namespace Access<br>Sanitize Status<br>Vendor specific Prohibited for Sanitize<br>Persistent Event Log Prohibited for Sanitize<br>Boot Partition|\n|Identify|||\n|Keep Alive|||\n|NVMe-MI Receive|Allowed unless explicitly prohibited in the NVM Express Management Interface<br>Specification.|Allowed unless explicitly prohibited in the NVM Express Management Interface<br>Specification.|\n|NVMe-MI Send|NVMe-MI Send|NVMe-MI Send|\n|Sanitize||Prohibited|\n|Set Features|Namespace Write Protection Config Feature is not allowed.|Namespace Write Protection Config Feature is not allowed.|\n|Opcode 7Fh|The Fabric Commands allowed are listed below. Refer to section 6.<br>Additional Restrictions for both<br>Fabrics Commands Format NVM command and<br>sanitize operations<br>Property Set<br>Connect<br>Disconnect<br>Property Get<br>Authentication Send<br>Authentication Receive<br>Commands are allowed that do not<br>Vendor Specific<br>affect or retrieve user data.|The Fabric Commands allowed are listed below. Refer to section 6.<br>Additional Restrictions for both<br>Fabrics Commands Format NVM command and<br>sanitize operations<br>Property Set<br>Connect<br>Disconnect<br>Property Get<br>Authentication Send<br>Authentication Receive<br>Commands are allowed that do not<br>Vendor Specific<br>affect or retrieve user data.|\n|Vendor Specific|Commands are allowed that do not affect or retrieve user data.|Commands are allowed that do not affect or retrieve user data.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2421,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1703",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21987567842006683
  },
  {
    "content": "**5.1** **Abort command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1704",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17885738611221313
  },
  {
    "content": "|Fabrics Commands|Additional Restrictions for both<br>Format NVM command and<br>sanitize operations|\n|---|---|\n|Property Set||\n|Connect||\n|Disconnect||\n|Property Get||\n|Authentication Send||\n|Authentication Receive||\n|Vendor Specific|Commands are allowed that do not<br>affect or retrieve user data.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 300,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1705",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14895066618919373
  },
  {
    "content": "The Abort command is used to abort a specific command previously submitted to the Admin Submission\nQueue or an I/O Submission Queue. An Abort command is a best effort command; the command to abort\nmay have already completed, currently be in execution, or may be deeply queued.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 276,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1706",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6064373850822449
  },
  {
    "content": "To abort a large number of commands (e.g., a larger number of commands than the limit listed in the ACL\nfield), the host should follow the procedures described in section 3.7.3 to delete the I/O Submission Queue\nand recreate the I/O Submission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 250,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1707",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5769409537315369
  },
  {
    "content": "The Abort command uses the Command Dword 10 field. All other command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1708",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6569324731826782
  },
  {
    "content": "The Abort Command Limit field in the Identify Controller data structure (refer to Figure 275) indicates the\ncontroller limit on concurrent execution of Abort commands. A host should not allow the number of\noutstanding Abort commands to exceed this value. The controller may complete any excess Abort\ncommands with Abort Command Limit Exceeded status.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 350,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1709",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14371390640735626
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1710",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04400575906038284
  },
  {
    "content": "**Figure 141: Abort – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1711",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2801182270050049
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Command Identifier (CID): This field specifies the command identifier of the command to be<br>aborted, that was specified in the CDW0.CID field within the command itself.|\n|15:00|Submission Queue Identifier (SQID): This field specifies the identifier of the Submission Queue<br>that the command to be aborted is associated with.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 365,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1712",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27693361043930054
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1713",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4005235731601715
  },
  {
    "content": "Upon completion of the Abort command, the controller posts a completion queue entry to the Admin\nCompletion Queue indicating the status for the Abort command and indicating whether the command to\nabort was aborted. Dword 0 of the completion queue entry indicates whether the command to abort was\naborted.\n\nIf the command to abort was successfully aborted, then a completion queue entry for the aborted command\nshall be posted to the appropriate Admin or I/O Completion Queue with a status code of Command Abort\nRequested before the completion queue entry for the Abort command is posted to the Admin Completion\nQueue, and bit 0 of Dword 0 shall be cleared to ‘0’ in the completion queue entry for the Abort command.\nIf the command to abort was not aborted for any reason, then bit 0 of Dword 0 shall be set to ‘1’ in the\ncompletion queue entry for the Abort command.\n\nCommand specific status values associated with the Abort command are defined in Figure 142.\n\n**Figure 142: Abort – Command Specific Status Values**\n\n|Value|Description|\n|---|---|\n|3h|Abort Command Limit Exceeded: The number of concurrently outstanding Abort commands has<br>exceeded the limit indicated in the Identify Controller data structure.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 1214,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1714",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2746123969554901
  },
  {
    "content": "**5.2** **Asynchronous Event Request command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1715",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5220063924789429
  },
  {
    "content": "Asynchronous events are used to notify host software of status, error, and health information as these\nevents occur. To enable asynchronous events to be reported by the controller, host software needs to\nsubmit one or more Asynchronous Event Request commands to the controller. The controller specifies an\nevent to the host by completing an Asynchronous Event Request command. Host software should expect\nthat the controller may not execute the command immediately; the command should be completed when\nthere is an event to be reported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 536,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1716",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.625577986240387
  },
  {
    "content": "The Asynchronous Event Request command is submitted by host software to enable the reporting of\nasynchronous events from the controller. This command has no timeout. The controller posts a completion\nqueue entry for this command when there is an asynchronous event to report to the host. If Asynchronous\nEvent Request commands are outstanding when the controller is reset, then each of those commands is\naborted and should not return a CQE.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 440,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1717",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1765846461057663
  },
  {
    "content": "All command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1718",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17715419828891754
  },
  {
    "content": "Host software may submit multiple Asynchronous Event Request commands to reduce event reporting\nlatency. The total number of simultaneously outstanding Asynchronous Event Request commands is limited\nby the value indicated in the Asynchronous Event Request Limit field in the Identify Controller data structure\nin Figure 275.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 324,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1719",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4878508150577545
  },
  {
    "content": "Asynchronous events are grouped into event types. The event type is indicated in the Asynchronous Event\nType field in Dword 0 of the completion queue entry for the Asynchronous Event Request command. When\nthe controller posts a completion queue entry for an outstanding Asynchronous Event Request command\nand thus reports an asynchronous event, subsequent events of that event type are automatically masked\nby the controller until the host clears that event. Unless otherwise stated, an event is cleared by reading\nthe log page associated with that event using the Get Log Page command (refer to section 5.16). If that log\npage is not accessible because media is not ready (i.e., the controller aborts the Get Log Page command\nwith a status code of Admin Command Media Not Ready), then the controller shall not post a completion",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 828,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1720",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.029934145510196686
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1721",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.07340078800916672
  },
  {
    "content": "queue entry for that asynchronous event until the controller is able to successfully return the log page that\nis required to be read to clear the asynchronous event.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1722",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15425926446914673
  },
  {
    "content": "The following event types are defined:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1723",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47908830642700195
  },
  {
    "content": "a) **Error event:** Indicates a general error that is not associated with a specific command (refer to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1724",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.420215904712677
  },
  {
    "content": "Figure 145). To clear this event, host software reads the Error Information log page (refer to section\n5.16.1.2) using the Get Log Page command with the Retain Asynchronous Event bit cleared to ‘0’;\nb) **SMART / Health Status event:** Indicates a SMART or health status event (refer to Figure 146). To\n\nclear this event, host software reads the SMART / Health Information log (refer to section 5.16.1.3)\nusing the Get Log Page command with the Retain Asynchronous Event bit cleared to ‘0’. The\nSMART / Health conditions that trigger asynchronous events may be configured in the\nAsynchronous Event Configuration feature using the Set Features command (refer to section\n5.27.1.8);\nc) **Notice event:** Indicates a general event (refer to Figure 147). To clear this event, host software",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 783,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1725",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.541090190410614
  },
  {
    "content": "reads the appropriate log page as described in Figure 147. The conditions that trigger\nasynchronous events may be configured in the Asynchronous Event Configuration feature using\nthe Set Features command (refer to section 5.27.1.8);\nd) **I/O Command Specific Status events:** Events that are specific to an I/O command (refer to Figure",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 335,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1726",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5871686935424805
  },
  {
    "content": "148);\ne) **Immediate events:** Events that are only reported when an outstanding Asynchronous Event",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1727",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47106900811195374
  },
  {
    "content": "Request command exists at the time the event occurs. If the event occurs and there is no\noutstanding Asynchronous Event Request command, then the event shall not be reported. No log\npage is associated with these events. These events include:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 241,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1728",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25232937932014465
  },
  {
    "content": "A. Normal NVM Subsystem Shutdown event;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1729",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33242371678352356
  },
  {
    "content": "f) **Vendor Specific event:** Indicates a vendor specific event. To clear this event, host software reads\nthe indicated vendor specific log page using the Get Log Page command with the Retain\nAsynchronous Event bit cleared to ‘0’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 230,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1730",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25599268078804016
  },
  {
    "content": "The Sanitize Operation Completed With Unexpected Deallocation asynchronous event shall be supported\nif the controller supports the Sanitize Config feature (refer to section 5.27.1.19).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 184,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1731",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4008628726005554
  },
  {
    "content": "Asynchronous events are reported due to a new entry being added to a log page (e.g., Error Information\nlog page) or a status update (e.g., status in the SMART / Health log page). A status change may be\npermanent (e.g., the media has become read only) or transient (e.g., the temperature reached or exceeded\na threshold for a period of time). Host software should modify the event threshold or mask the event for\ntransient and permanent status changes before issuing another Asynchronous Event Request command\nto avoid repeated reporting of asynchronous events.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 560,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1732",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5788298845291138
  },
  {
    "content": "If an event occurs for which reporting is enabled and there are no Asynchronous Event Request\ncommands outstanding, the controller should retain the event information for that Asynchronous Event\nType and use that information as a response to the next Asynchronous Event Request command that\nis received. If a Get Log Page command clears the event prior to receiving the Asynchronous Event\nRequest command or if a power off condition occurs, then a notification is not sent. If multiple events\nof the same type occur that have identical responses to the Asynchronous Event Request command,\nthen those events may be reported as a single response to an Asynchronous Event Request command.\nIf multiple events occur that are of different types or have different responses to the Asynchronous\nEvent Request command, then the controller should retain a queue of those events for reporting in\nresponses to subsequent Asynchronous Event Request commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 945,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1733",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11286673694849014
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1734",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4272562563419342
  },
  {
    "content": "A completion queue entry is posted to the Admin Completion Queue if there is an asynchronous event to\nreport to the host. Command specific status values associated with Asynchronous Event Request are\ndefined in Figure 143.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 222,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1735",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08053211867809296
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1736",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1397554725408554
  },
  {
    "content": "**Figure 143: Status Code – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1737",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.403738796710968
  },
  {
    "content": "|Value|Description|\n|---|---|\n|05h|Asynchronous Event Request Limit Exceeded: The number of concurrently outstanding<br>Asynchronous Event Request commands has been exceeded.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 175,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1738",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30577167868614197
  },
  {
    "content": "Dword 0 of the completion queue entry contains information about the asynchronous event. The definition\nof Dword 0 of the completion queue entry is in Figure 144.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1739",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6298763155937195
  },
  {
    "content": "**Figure 144: Asynchronous Event Request – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 75,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1740",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47203174233436584
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:24|Reserved|\n|23:16|Log Page Identifier: Indicates the log page associated with the asynchronous event. This log<br>page needs to be read by the host to clear the event.|\n|15:08|Asynchronous Event Information: Refer to Figure 145, Figure 146, Figure 147, and Figure 148<br>for detailed information regarding the asynchronous event.|\n|07:03|Reserved|\n|02:00|Asynchronous Event Type: Indicates the event type of the asynchronous event. More specific<br>information on the event is provided in the Asynchronous Event Information field.<br>Value Definition Reference<br>000b Error status Figure 145<br>001b SMART / Health status Figure 146<br>010b Notice Figure 147<br>011b Immediate Figure 149<br>100b to 101b Reserved -<br>110b I/O Command specific status Figure 148<br>111b Vendor specific -|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 824,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1741",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3066948652267456
  },
  {
    "content": "|Value|Definition|Reference|\n|---|---|---|\n|000b|Error status|Figure 145|\n|001b|SMART / Health status|Figure 146|\n|010b|Notice|Figure 147|\n|011b|Immediate|Figure 149|\n|100b to 101b|Reserved|-|\n|110b|I/O Command specific status|Figure 148|\n|111b|Vendor specific|-|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 263,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1742",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3814435303211212
  },
  {
    "content": "The information in either Figure 145, Figure 146, Figure 147, or Figure 148 is returned in the Asynchronous\nEvent Information field, depending on the Asynchronous Event Type.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 174,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1743",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6243987679481506
  },
  {
    "content": "**Figure 145: Asynchronous Event Information – Error Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1744",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3049389719963074
  },
  {
    "content": "|Value|Description|\n|---|---|\n|00h|Write to Invalid Doorbell Register: Host software wrote the doorbell of a queue that was not<br>created.|\n|01h|Invalid Doorbell Write Value: Host software attempted to write an invalid doorbell value. Some<br>possible causes of this error are:<br>• the value written was out of range of the corresponding queue’s base address and size;<br>• the value written is the same as the previously written doorbell value;<br>• the number of commands that would be added as part of a doorbell write would exceed<br>the number of available entries;<br>• host software attempts to add a command to a full Submission Queue; and<br>• host software attempts to remove a completion queue entry from an empty Completion<br>Queue.|\n|02h|Diagnostic Failure: A diagnostic failure was detected. This may include a self-test operation.|\n|03h|Persistent Internal Error: A failure occurred that is persistent and the controller is unable to isolate<br>to a specific set of commands. If this error is indicated, then the CSTS.CFS bit may be set to ‘1’ and<br>the host should perform a reset as described in section 3.6.|\n|04h|Transient Internal Error: A transient error occurred that is specific to a particular set of commands;<br>controller operation may continue without a reset.|\n|05h|Firmware Image Load Error: The firmware image could not be loaded. The controller reverted to<br>the previously active firmware image or a baseline read-only firmware image.|\n|06h to FFh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1495,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1745",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23114444315433502
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1746",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12988074123859406
  },
  {
    "content": "**Figure 146: Asynchronous Event Information – SMART / Health Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1747",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29094070196151733
  },
  {
    "content": "|Value|Description|\n|---|---|\n|00h|NVM subsystem Reliability: NVM subsystem reliability has been compromised. This may be due<br>to significant media errors, an internal error, the media being placed in read only mode, or a volatile<br>memory backup device failing. This status value shall not be used if the read-only condition on the<br>media is due to a change in the write protection state of a namespace (refer to section 8.12.1).|\n|01h|Temperature Threshold: A temperature is greater than or equal to an over temperature threshold<br>or less than or equal to an under temperature threshold (refer to section 5.27.1.3).|\n|02h|Spare Below Threshold: Available spare capacity has fallen below the threshold.|\n|03h to FFh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 733,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1748",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.218872532248497
  },
  {
    "content": "**Figure 147: Asynchronous Event Information – Notice**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1749",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26383495330810547
  },
  {
    "content": "|Value|Description|\n|---|---|\n|00h|Namespace Attribute Changed: Indicates a change to one or more of the following:<br>• the Identify Namespace data structure (refer to the applicable NVMe I/O Command Set<br>specification) for one or more namespaces;<br>• the I/O Command Set Independent Identify Namespace data structure;<br>• the Namespace List returned when the Identify command is issued with the CNS field<br>set to 02h; or<br>• other data structures as specified in applicable NVMe I/O Command Set specifications.<br>To clear this event, host software issues a Get Log Page command for the Changed Namespace<br>List log page (refer to section 5.16.1.5) with the Retain Asynchronous Event bit cleared to ‘0’.<br>A controller shall not send this event if:<br>a) Namespace Status (refer to Figure 280) has changed and shutdown processing is either<br>occurring (i.e., CSTS.SHST is set to 01b) or complete (i.e., CSTS.SHST is set to 10b);<br>b) the ANAGRPID field (refer to Figure 280) has changed; or<br>c) an I/O Command Set specific change occurs (refer to the applicable I/O Command Set<br>specification).<br>A controller shall only send this event for changes to the Format Progress Indicator field when<br>bits 6:0 of that field transition from a non-zero value to 0h, or from 0h to a non-zero value.|\n|01h|Firmware Activation Starting: The controller is starting a firmware activation process during<br>which command processing is paused. Host software may use CSTS.PP to determine when<br>command processing has resumed. To clear this event, host software reads the Firmware Slot<br>Information log page.|\n|02h|Telemetry Log Changed: The controller has saved the controller internal state in the Telemetry<br>Controller-Initiated log page and set the Telemetry Controller-Initiated Data Available field to 1h<br>in that log page. To clear this event, the host issues a Get Log Page command with Retain<br>Asynchronous Event bit cleared to ‘0’ for the Telemetry Controller-Initiated log.|\n|03h|Asymmetric Namespace Access Change: The Asymmetric Namespace Access information<br>(refer to section 5.16.1.13) related to an ANA Group that contains namespaces attached to this<br>controller has changed (e.g., an ANA state has changed, an ANAGRPID has changed). The<br>current Asymmetric Namespace Access information for attached namespaces is indicated in the<br>Asymmetric Namespace Access log page (refer to section 5.16.1.13). To clear this event, the<br>host issues a Get Log Page command (refer to section 5.16) with the Retain Asynchronous Event<br>bit cleared to ‘0’ for the Asymmetric Namespace Access log.<br>A controller shall not send this event if a Namespace Attribute Changed notice is sent for the<br>same event, such as a change due to:<br>a) the attachment of a namespace (refer to section 5.22);<br>b) the deletion of a namespace (refer to section 5.23); or<br>c) the detachment of a namespace (refer to section 5.22).|\n|04h|Predictable Latency Event Aggregate Log Change: Indicates that event pending entries for<br>one or more NVM Sets (refer to section 5.16.1.12) have been added to the Predictable Latency<br>Event Aggregate log.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3157,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1750",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4512765407562256
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1751",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16077083349227905
  },
  {
    "content": "**Figure 147: Asynchronous Event Information – Notice**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1752",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4118412733078003
  },
  {
    "content": "|Value|Description|\n|---|---|\n|1<br>05h|LBA Status Information Alert: I/O Command Set specific definition.|\n|06h|Endurance Group Event Aggregate Log Page Change: Indicates that event entries for one or<br>more Endurance Groups (refer to section 5.16.1.10) have been added to the Endurance Group<br>Event Aggregate log. To clear this event, the host issues a Get Log Page command with the<br>Retain Asynchronous Event bit cleared to ‘0’ for the Endurance Group Event Aggregate log.|\n|07h to EEh|Reserved|\n|2<br>EFh|Zone Descriptor Changed: I/O Command Set specific definition.|\n|F0h|Discovery Log Page Change: A change has occurred to one or more of the Discovery Log<br>Pages. The host should submit a Get Log Page command to receive updated Discovery Log<br>Pages.|\n|F1h to FFh|Reserved for future NVMe over Fabrics Asynchronous Event Notifications|\n|NOTE:<br>1. Refer to the NVM Command Set Specification.<br>2. Refer to the Zoned Namespace Command Set Specification.|NOTE:<br>1. Refer to the NVM Command Set Specification.<br>2. Refer to the Zoned Namespace Command Set Specification.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1088,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1753",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5194182991981506
  },
  {
    "content": "**Figure 148: Asynchronous Event Information – I/O Command Specific Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1754",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3077537715435028
  },
  {
    "content": "|Value|Description|\n|---|---|\n|00h|Reservation Log Page Available: Indicates that one or more Reservation Notification log pages<br>(refer to section 5.16.1.24) have been added to the Reservation Notification log.|\n|01h|Sanitize Operation Completed: Indicates that a sanitize operation has completed (including any<br>associated additional media modification, refer to the No-Deallocate Modifies Media After Sanitize<br>field in Figure 275) without unexpected deallocation of all user data (refer to section 5.27.1.19) and<br>status is available in the Sanitize Status log page (refer to section 5.16.1.25).|\n|02h|Sanitize Operation Completed With Unexpected Deallocation: Indicates that a sanitize operation<br>for which No-Deallocate After Sanitize (refer to Figure 303) was requested has completed with the<br>unexpected deallocation of all user data (refer to section 5.27.1.19) and status is available in the<br>Sanitize Status log page (refer to section 5.16.1.25).|\n|03h to FFh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 994,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1755",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2721635103225708
  },
  {
    "content": "**Figure 149: Asynchronous Event Information – Immediate**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1756",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18911287188529968
  },
  {
    "content": "|Value|Description|\n|---|---|\n|00h|NVM Subsystem Normal Shutdown: This controller has started performing a normal NVM<br>Subsystem Shutdown that is due to:<br>• the value 4E726D6Ch (\"Nrml\") has been written to an NSS.NCCR register within the<br>NVM subsystem or Domain; or<br>• an NVMe-MI Shutdown command (refer to the NVM Express Management Interface<br>Specification) being processed.<br>Refer to section 3.6.3.|\n|01h to FFh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 437,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1757",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37852248549461365
  },
  {
    "content": "**5.3** **Capacity Management command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1758",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6104691624641418
  },
  {
    "content": "Host software uses the Capacity Management command to configure Endurance Groups and NVM Sets in\nan NVM subsystem by either selecting one of a set of supported configurations (i.e., Fixed Capacity\nManagement; refer to section 8.3.2) or by specifying the capacity of the Endurance Group or NVM Set to\nbe created (i.e., Variable Capacity Management; refer to section 8.3.3). The Capacity Management\ncommand specifies the operations defined in Figure 150.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 452,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1759",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6473367214202881
  },
  {
    "content": "The Capacity Management command uses the Command Dword 10, Command Dword 11, and Command\nDword 12 fields. All other command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1760",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2857401967048645
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1761",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3282677233219147
  },
  {
    "content": "For requirements to support the operations in Figure 150, refer to section 8.3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1762",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49702855944633484
  },
  {
    "content": "**Figure 150: Capacity Management – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1763",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5149765014648438
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|1<br>Element Identifier: This field contains a value specific to the value of the Operation field.|\n|15:04|Reserved|\n|03:00|Operation: Specifies the operation to be performed by the controller:<br>Value Description Element Identifier Field<br>Select Capacity Configuration: Endurance<br>Groups and NVM Sets are configured as indicated Capacity Configuration Identifier (refer<br>0h<br>by the Capacity Configuration Descriptor specified to Figure 251).<br>by this command (refer to section 5.3.1).<br>Domain Identifier (refer to section<br>Create Endurance Group: An Endurance Group<br>3.2.4.3) of the domain in which the<br>is created (refer to section 8.3.3) with the capacity<br>Endurance Group is to be created. A<br>1h specified by the Capacity Lower field (refer to<br>value of 0h specifies that the controller<br>Figure 151) and the Capacity Upper field (refer to<br>selects the domain in which the<br>Figure 152).<br>Endurance Group is created.<br>Delete Endurance Group: The Endurance Group<br>specified by this command is deleted (refer to Endurance Group Identifier of the<br>2h<br>section 8.3.3). All namespaces and NVM Sets Endurance Group to be deleted.<br>contained by the Endurance Group are deleted.<br>Create NVM Set: An NVM Set is created (refer to Endurance Group Identifier of the<br>section 8.3.3) in the specified Endurance Group Endurance Group in which the NVM<br>with the capacity specified by the Capacity Lower Set is to be created. A value of 0h<br>3h field and the Capacity Upper field. specifies that the controller selects the<br>If the controller does not support NVM Sets, then Endurance Group in which the NVM<br>this operation is not supported. Set is created.<br>Delete NVM Set: The NVM Set specified by this<br>command is deleted (refer to section 8.3.3). All<br>4h namespaces in the NVM Set are deleted. NVM Set identifier of the NVM Set to be<br>deleted.<br>If the controller does not support NVM Sets, then<br>this operation is not supported.<br>5h to Fh Reserved|\n|Notes:<br>1. If the Element Identifier field specifies a non-zero value which does not correspond to an existing capacity entity,<br>then the controller shall abort the command with a status code of Invalid Field in Command.|Notes:<br>1. If the Element Identifier field specifies a non-zero value which does not correspond to an existing capacity entity,<br>then the controller shall abort the command with a status code of Invalid Field in Command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2492,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1764",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8184995651245117
  },
  {
    "content": "|Value|Description|Element Identifier Field|\n|---|---|---|\n|0h|Select Capacity Configuration: Endurance<br>Groups and NVM Sets are configured as indicated<br>by the Capacity Configuration Descriptor specified<br>by this command (refer to section 5.3.1).|Capacity Configuration Identifier (refer<br>to Figure 251).|\n|1h|Create Endurance Group: An Endurance Group<br>is created (refer to section 8.3.3) with the capacity<br>specified by the Capacity Lower field (refer to<br>Figure 151) and the Capacity Upper field (refer to<br>Figure 152).|Domain Identifier (refer to section<br>3.2.4.3) of the domain in which the<br>Endurance Group is to be created. A<br>value of 0h specifies that the controller<br>selects the domain in which the<br>Endurance Group is created.|\n|2h|Delete Endurance Group: The Endurance Group<br>specified by this command is deleted (refer to<br>section 8.3.3). All namespaces and NVM Sets<br>contained by the Endurance Group are deleted.|Endurance Group Identifier of the<br>Endurance Group to be deleted.|\n|3h|Create NVM Set: An NVM Set is created (refer to<br>section 8.3.3) in the specified Endurance Group<br>with the capacity specified by the Capacity Lower<br>field and the Capacity Upper field.<br>If the controller does not support NVM Sets, then<br>this operation is not supported.|Endurance Group Identifier of the<br>Endurance Group in which the NVM<br>Set is to be created. A value of 0h<br>specifies that the controller selects the<br>Endurance Group in which the NVM<br>Set is created.|\n|4h|Delete NVM Set: The NVM Set specified by this<br>command is deleted (refer to section 8.3.3). All<br>namespaces in the NVM Set are deleted.<br>If the controller does not support NVM Sets, then<br>this operation is not supported.|NVM Set identifier of the NVM Set to be<br>deleted.|\n|5h to Fh|Reserved||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1829,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1765",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5494620203971863
  },
  {
    "content": "**Figure 151: Capacity Management – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1766",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5045863389968872
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Capacity Lower: This field specifies the least significant 32 bits of the capacity in bytes of the Endurance<br>Group or NVM Set to be created.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 180,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1767",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.501524031162262
  },
  {
    "content": "**Figure 152: Capacity Management – Command Dword 12**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1768",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5107688903808594
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Capacity Upper: This field specifies the most significant 32 bits of the capacity in bytes of the Endurance<br>Group or NVM Set to be created.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 179,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1769",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6547544002532959
  },
  {
    "content": "If the Operation field specifies the Create Endurance Group operation or the Create NVM Set operation,\nthen the Capacity Upper and Capacity Lower fields specify the capacity of the Endurance Group or NVM\nSet to be created. If the Operation field specifies any other operation, then the Capacity Upper field and the\nCapacity Lower field are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 349,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1770",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4363834857940674
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1771",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21349728107452393
  },
  {
    "content": "**Media Unit Configuration Selection**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1772",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4453786313533783
  },
  {
    "content": "a) the Operation field specifies the Select Capacity Configuration operation;\nb) the Element Identifier field specifies a Capacity Configuration Descriptor in the Supported",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 172,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1773",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5317731499671936
  },
  {
    "content": "Capacity Configuration List; and\nc) the Selected Configuration field of the Media Unit Status log page (refer to Figure 248) is cleared",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 135,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1774",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13039647042751312
  },
  {
    "content": "then the controller shall perform all of the following actions in sequence:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 75,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1775",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23333120346069336
  },
  {
    "content": "1) Create an Endurance Group for each Endurance Group Configuration Descriptor in the selected\n\nCapacity Configuration Descriptor.\n2) Create an NVM Set for each NVM Set Identifier specified in each Endurance Group Configuration",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 227,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1776",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36792945861816406
  },
  {
    "content": "If the Operation field specifies the Select Capacity Configuration operation and the Element Identifier field\nis cleared to ‘0’, then the controller shall clear the configuration by performing all of the following actions in",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 224,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1777",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4186497926712036
  },
  {
    "content": "1) Delete all namespaces in the domain that contains the controller processing the command, as",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 94,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1778",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5732743740081787
  },
  {
    "content": "described in section 8.11.\n2) Delete all NVM Sets in the domain that contains the controller processing the command, if any.\n3) Delete all Endurance Groups in the domain that contains the controller processing the command.\n4) Clear the Selected Configuration field to 0h in the Media Unit Status log page.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 305,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1779",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5408817529678345
  },
  {
    "content": "If the Operation field specifies the Select Capacity Configuration operation and the Element Identifier field\nspecifies the value reported in the Selected Configuration field of the Media Unit Status log page (i.e., the\ncurrently-selected configuration), then the controller shall complete the command without error and shall\nmake no change to the capacity configuration.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 371,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1780",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6593490242958069
  },
  {
    "content": "If the Operation field specifies the Select Capacity Configuration operation and:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 81,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1781",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5794474482536316
  },
  {
    "content": "a) the Element Identifier field does not specify either a value of 0h or the Capacity Configuration",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1782",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5434557795524597
  },
  {
    "content": "Identifier of a Capacity Configuration Descriptor in the Capacity Configuration List; or\nb) the Selected Configuration field of the Media Unit Status log page (refer to Figure 248) is not",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 187,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1783",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43547314405441284
  },
  {
    "content": "then the controller shall abort the command with a status code of Invalid Field in Command and no changes\nshall be made to the configuration of any Media Unit.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 159,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_1784",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08466989547014236
  },
  {
    "content": "**Endurance Group Operations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1785",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5392236113548279
  },
  {
    "content": "If the Operation field specifies the Create Endurance Group operation, the controller shall select a non-zero\nEndurance Group Identifier not assigned to an existing Endurance Group in the specified domain (refer to\nFigure 150) and indicate that value in Dword 0 of the completion queue entry (refer to Figure 154). If a nonzero unassigned Endurance Group Identier is unavailable, then the controller shall abort the command with\na status code of Identifier Unavailable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 469,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1786",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6269386410713196
  },
  {
    "content": "If the Operation field specifies the Create Endurance Group operation and Media Units are supported, then\nthe controller selects Media Units from the specified domain to be allocated to the Endurance Group.\n\nIf the Operation field specifies the Create Endurance Group operation and Media Units are not supported,\nthen the controller selects NVM capacity from the specified domain to be allocated to the Endurance Group.\n\nIf the Operation field specifies the Create Endurance Group operation and the Capacity Lower and Capacity\nUpper fields specify a value that requires allocation of NVM capacity that is greater than the value in:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 631,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1787",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.656059741973877
  },
  {
    "content": "a) the Max Endurance Group Capacity (MEGCAP) field in the Identify Controller data structure;\nb) the Unallocated NVM Capacity (UNVMCAP) field in the Identify Controller data structure; or\nc) the Max Endurance Group Capacity (MEGCAP) field in the Domain Attributes Entry for the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 277,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1788",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.480270117521286
  },
  {
    "content": "domain in which the Endurance Group is being created,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1789",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1419895440340042
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1790",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2245975136756897
  },
  {
    "content": "a) shall abort the command with Insufficient Capacity status; and\nb) if the Error Information log page is supported, shall indicate in the Command Specific Information",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1791",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29381173849105835
  },
  {
    "content": "field the total amount of NVM capacity in bytes of the largest Endurance Group that is able to be\ncreated.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1792",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32183805108070374
  },
  {
    "content": "If the Operation field specifies the Delete Endurance Group operation and the Element Identifier field\nspecifies a value of 0h or the identifier of an Endurance Group that does not exist, then the controller shall\nabort the command with Invalid Field in Command status.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 269,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1793",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2249474823474884
  },
  {
    "content": "**NVM Set Operations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1794",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5467506647109985
  },
  {
    "content": "If the Operation field specifies the Create NVM Set operation, the controller shall select a non-zero NVM\nSet Identifier not assigned to an existing NVM Set in the specified Endurance Group (refer to Figure 150)\nand indicate that value in the completion queue entry. If a non-zero unassigned NVM Set Identifier is\nunavailable, then the controller shall abort the command with a status code of Identifier Unavailable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 416,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1795",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6470537781715393
  },
  {
    "content": "If the Operation field specifies the Create NVM Set operation and the Capacity Lower and Capacity Upper\nfields specify a value that requires allocation of NVM capacity that is greater than the value in the\nUnallocated Endurance Group Capacity (UEGCAP) field in the Endurance Group Information log page\n(refer to Figure 217) for the specified Endurance Group, then the controller:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 379,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1796",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.184715136885643
  },
  {
    "content": "a) if the Error Information log page is supported, shall indicate in the Command Specific Information",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1797",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22813963890075684
  },
  {
    "content": "field the total amount of NVM capacity in bytes of the largest NVM Set that is able to be created;\nand\nb) shall abort the command with Insufficient Capacity status.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1798",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46377506852149963
  },
  {
    "content": "If the Operation field specifies the Create NVM Set operation and the Element Identifier field is cleared to\n0h, then the controller shall choose an existing Endurance Group in an existing domain in which to create\nthe NVM Set.\n\nIf the Operation field specifies the Create NVM Set operation and Media Units are supported, then the\ncontroller selects Media Units from the Endurance Group to be allocated to the NVM Set.\n\nIf the Operation field specifies the Create NVM Set operation and Media Units are not supported, then the\ncontroller selects NVM capacity from the Endurance Group to be allocated to the NVM Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 614,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1799",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5207316875457764
  },
  {
    "content": "If the Operation field specifies the Delete NVM Set operation and the Element Identifier field specifies a\nvalue of 0h or the identifier of an NVM Set that does not exist, then the controller shall abort the command\nwith Invalid Field in Command status.\n\nIf the controller does not support NVM Sets and the Operation field specifies either the Create NVM Set\noperation or the Delete NVM Set operation, then the controller shall abort the command with Invalid Field\nin Command status.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 483,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1800",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25387686491012573
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1801",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.327737033367157
  },
  {
    "content": "Upon completion of the Capacity Management command, the controller posts a completion queue entry to\nthe Admin Completion Queue. Capacity Management command specific status values are defined in Figure\n153.\n\n**Figure 153: Capacity Management – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 276,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1802",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6305997967720032
  },
  {
    "content": "|Value|Description|\n|---|---|\n|26h|Insufficient Capacity: The requested operation requires more free space than is currently available.<br>The Command Specific Information field of the Error Information log page (refer to Figure 193) specifies<br>the total amount of NVM capacity in bytes required to create the Endurance Group or NVM Set.|\n|2Dh|Identifer Unavailable: The number of Endurance Groups or NVM Sets supported has been exceeded.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 441,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1803",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5892524123191833
  },
  {
    "content": "Dword 0 of the completion queue entry contains the identifier of the Endurance Group or NVM Set created,\nif any. Completion queue entry Dword 0 is defined in Figure 154.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1804",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4223383963108063
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1805",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2712869346141815
  },
  {
    "content": "**Figure 154: Capacity Management – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1806",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35544872283935547
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|Created Element Identifier: This field indicates the identifier of the NVM Set that was created if<br>the Create NVM Set operation was used.<br>This field indicates the identifier of the Endurance Group Identifier if the Create Endurance Group<br>operation was used.<br>This field is reserved for all other operations.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 372,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1807",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22950223088264465
  },
  {
    "content": "**5.4** **Create I/O Completion Queue command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1808",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6359984278678894
  },
  {
    "content": "The Create I/O Completion Queue command is used to create all I/O Completion Queues with the exception\nof the Admin Completion Queue. The Admin Completion Queue is created by specifying its base address\nin the ACQ property. If a PRP List is provided to describe the CQ, then the PRP List shall be maintained by\nhost software at the same location in host physical memory and the values in the PRP List shall not be\nmodified until the corresponding Delete I/O Completion Queue command for this CQ is completed\nsuccessfully or the controller is reset. If the PRP List values are modified, the behavior is undefined.\n\nThe Create I/O Completion Queue command uses the PRP Entry 1, Command Dword 10, and Command\nDword 11 fields. All other command specific fields are reserved.\n\n**Figure 155: Create I/O Completion Queue – PRP Entry 1**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 829,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1809",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5847240686416626
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|63:00|PRP Entry 1 (PRP1): If CDW11.PC is set to ‘1’, then this field specifies a 64-bit base memory<br>address pointer of the Completion Queue that is physically contiguous. The address pointer is<br>memory page aligned (based on the value in CC.MPS) unless otherwise specified. If CDW11.PC<br>is cleared to ‘0’, then this field specifies a PRP List pointer that describes the list of pages that<br>constitute the Completion Queue. The list of pages is memory page aligned (based on the value<br>in CC.MPS) unless otherwise specified. In both cases the PRP Entry shall have an offset of 0h. In<br>a non-contiguous Completion Queue, each PRP Entry in the PRP List shall have an offset of 0h.<br>If there is a PRP Entry with a non-zero offset, then the controller should return an error of PRP<br>Offset Invalid.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 841,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1810",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4104618728160858
  },
  {
    "content": "**Figure 156: Create I/O Completion Queue – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1811",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42926281690597534
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Queue Size (QSIZE): This field indicates the size of the Completion Queue to be created. If the<br>size is 0h or larger than the controller supports, the controller should return an error of Invalid<br>Queue Size. Refer to section 3.3.3.2.2. This is a 0’s based value.|\n|15:00|Queue Identifier (QID): This field indicates the identifier to assign to the Completion Queue to be<br>created. This identifier corresponds to the Completion Queue Head Doorbell used for this<br>command (i.e., the value y in the CQyHDBL section of the NVMe over PCIe Transport<br>Specification). This value shall not exceed the value reported in the Number of Queues feature<br>(refer to section 5.27.1.5) for I/O Completion Queues. If the value specified is 0h, exceeds the<br>Number of Queues reported, or corresponds to an identifier already in use, the controller should<br>return an error of Invalid Queue Identifier.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 936,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1812",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42459335923194885
  },
  {
    "content": "**Figure 157: Create I/O Completion Queue – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1813",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24324660003185272
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Interrupt Vector (IV): This field’s value is transport specific and is described in the applicable<br>NVMe Transport binding specification if required. If not defined by the transport, then this field<br>shall be cleared to 0h.|\n|15:02|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 281,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1814",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4294685125350952
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1815",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1211414784193039
  },
  {
    "content": "**Figure 157: Create I/O Completion Queue – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1816",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42481812834739685
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|01|Interrupts Enabled (IEN): If set to ‘1’, then interrupts are enabled for this Completion Queue. If<br>cleared to ‘0’, then interrupts are disabled for this Completion Queue.|\n|00|Physically Contiguous (PC): If set to ‘1’, then the Completion Queue is physically contiguous<br>and PRP Entry 1 (PRP1) is the address of a contiguous physical buffer. If cleared to ‘0’, then the<br>Completion Queue is not physically contiguous and PRP Entry 1 (PRP1) is a PRP List pointer. If<br>this bit is cleared to ‘0’ and CAP.CQR is set to ‘1’, then the controller should return an error of<br>Invalid Field in Command.<br>If the:<br>• queue is located in the Controller Memory Buffer;<br>• PC is cleared to ‘0’; and<br>• CMBLOC.CQPDS is cleared to ‘0’,<br>then the controller shall abort the command with Invalid Use of Controller Memory Buffer status.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 872,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1817",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2901774048805237
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1818",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49581897258758545
  },
  {
    "content": "If the command is completed, then the controller shall post a completion queue entry to the Admin\nCompletion Queue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1819",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6378467082977295
  },
  {
    "content": "Create I/O Completion Queue command specific status values are defined in Figure 158.\n\n**Figure 158: Create I/O Completion Queue – Command Specific Status Values**\n\n|Value|Description|\n|---|---|\n|1h|Invalid Queue Identifier: The creation of the I/O Completion Queue failed due to an invalid queue<br>identifier specified as part of the command. An invalid queue identifier is one that identifies the<br>Admin Queue (i.e., 0h), is outside the range supported by the controller, or is a Completion Queue<br>Identifier that is already in use.|\n|2h|Invalid Queue Size: The host attempted to create an I/O Completion Queue:<br>• with an invalid number of entries (e.g., a value of 0h or a value which exceeds the<br>maximum supported by the controller, specified in CAP.MQES); or<br>• before initializing the CC.IOCQES field.|\n|8h|Invalid Interrupt Vector: The creation of the I/O Completion Queue failed due to an invalid interrupt<br>vector specified as part of the command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 972,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1820",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6395944952964783
  },
  {
    "content": "**5.5** **Create I/O Submission Queue command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1821",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.582802951335907
  },
  {
    "content": "The Create I/O Submission Queue command is used to create I/O Submission Queues. The Admin\nSubmission Queue is created by specifying its base address in the ASQ property. If a PRP List is provided\nto describe the SQ to be created, then the PRP List shall be maintained by host software at the same\nlocation in host physical memory and the values in the PRP List shall not be modified until the corresponding\nDelete I/O Submission Queue command for that SQ is completed or the controller is reset. If the PRP List\nvalues are modified, the behavior is undefined.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 560,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1822",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17575448751449585
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1823",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22709333896636963
  },
  {
    "content": "The Create I/O Submission Queue command uses the PRP Entry 1, Command Dword 10, Command\nDword 11, and Command Dword 12 fields. All other command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 174,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1824",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6868759393692017
  },
  {
    "content": "**Figure 159: Create I/O Submission Queue – PRP Entry 1**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1825",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48826107382774353
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|63:00|PRP Entry 1 (PRP1): If CDW11.PC is set to ‘1’, then this field specifies a 64-bit base memory<br>address pointer of the Submission Queue that is physically contiguous. The address pointer is<br>memory page aligned (based on the value in CC.MPS) unless otherwise specified. If CDW11.PC<br>is cleared to ‘0’, then this field specifies a PRP List pointer that describes the list of pages that<br>constitute the Submission Queue. The list of pages is memory page aligned (based on the value<br>in CC.MPS) unless otherwise specified. In both cases, the PRP Entry shall have an offset of 0h.<br>In a non-contiguous Submission Queue, each PRP Entry in the PRP List shall have an offset of<br>0h. If there is a PRP Entry with a non-zero offset, then the controller should return an error of PRP<br>Offset Invalid.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 842,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1826",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3602312207221985
  },
  {
    "content": "**Figure 160: Create I/O Submission Queue – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1827",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4372738003730774
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Queue Size (QSIZE): This field indicates the size of the Submission Queue to be created. If the<br>size is 0h or larger than the controller supports, the controller should return an error of Invalid<br>Queue Size. Refer to section 3.3.3.2.2. This is a 0’s based value.|\n|15:00|Queue Identifier (QID): This field indicates the identifier to assign to the Submission Queue to be<br>created. This identifier corresponds to the Submission Queue Tail Doorbell used for this command<br>(i.e., the value y in SQyTDBL section of the NVMe over PCIe Transport Specification). This value<br>shall not exceed the value reported in the Number of Queues feature (refer to section 5.27.1.5) for<br>I/O Submission Queues. If the value specified is 0h, exceeds the Number of Queues reported, or<br>corresponds to an identifier already in use, the controller should return an error of Invalid Queue<br>Identifier.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 932,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1828",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4530109465122223
  },
  {
    "content": "**Figure 161: Create I/O Submission Queue – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1829",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47628089785575867
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Completion Queue Identifier (CQID): This field indicates the identifier of the I/O Completion<br>Queue to utilize for any command completions entries associated with this Submission Queue.<br>If the value specified:<br>a) is 0h (i.e., the Admin Completion Queue), then the controller should return an error of<br>Invalid Queue Identifier;<br>b) is outside the range supported by the controller, then the controller should return an error<br>of Invalid Queue Identifier; or<br>c) is within the range supported by the controller and does not identify an I/O Completion<br>Queue that has been created,<br>then the controller should return an error of Completion Queue Invalid.|\n|15:03|Reserved|\n|02:01|Queue Priority (QPRIO): This field indicates the priority class to use for commands within this<br>Submission Queue. This field is only used when the weighted round robin with urgent priority class<br>is the arbitration mechanism selected, the field is ignored if weighted round robin with urgent<br>priority class is not used. Refer to section 3.4.4.<br>Value Definition<br>00b Urgent<br>01b High<br>10b Medium<br>11b Low|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1158,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1830",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24583446979522705
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Urgent|\n|01b|High|\n|10b|Medium|\n|11b|Low|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 75,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1831",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11532062292098999
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1832",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17910608649253845
  },
  {
    "content": "**Figure 161: Create I/O Submission Queue – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1833",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46807044744491577
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|00|Physically Contiguous (PC): If set to ‘1’, then the Submission Queue is physically contiguous<br>and PRP Entry 1 (PRP1) is the address of a contiguous physical buffer. If cleared to ‘0’, then the<br>Submission Queue is not physically contiguous and PRP Entry 1 (PRP1) is a PRP List pointer. If<br>this bit is cleared to ‘0’ and CAP.CQR is set to ‘1’, then the controller should return an error of<br>Invalid Field in Command.<br>If the:<br>• queue is located in the Controller Memory Buffer;<br>• PC is cleared to ‘0’; and<br>• CMBLOC.CQPDS is cleared to ‘0’,<br>then the controller shall abort the command with Invalid Use of Controller Memory Buffer status.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 693,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1834",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4923511743545532
  },
  {
    "content": "**Figure 162: Create I/O Submission Queue – Command Dword 12**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1835",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39109933376312256
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|NVM Set Identifier (NVMSETID): This field indicates the identifier of the NVM Set to be<br>associated with this Submission Queue.<br>If this field is cleared to 0h or the SQ Associations capability is not supported (refer to section<br>8.22), then this Submission Queue is not associated with any specific NVM Set.<br>If this field is set to a non-zero value that is not specified in the NVM Set List (refer to Figure 278)<br>and the SQ Associations feature is supported (refer to section 8.22), then the controller shall abort<br>the command with a status code of Invalid Field in Command.<br>The host should not submit commands for namespaces associated with other NVM Sets in this<br>Submission Queue (refer to section 8.22).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 782,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1836",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1089949905872345
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1837",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3119457960128784
  },
  {
    "content": "Upon completion of the Create I/O Submission Queue command, the controller posts a completion queue\nentry to the Admin Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1838",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5589296221733093
  },
  {
    "content": "Create I/O Submission Queue command specific status values are defined in Figure 163.\n\n**Figure 163: Create I/O Submission Queue – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1839",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6979528665542603
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0h|Completion Queue Invalid: The Completion Queue identifier specified in the command has not<br>been created.|\n|1h|Invalid Queue Identifier: The creation of the I/O Submission Queue failed due an invalid queue<br>identifier specified as part of the command. An invalid queue identifier is one that identifies the<br>Admin Queue (i.e., 0h), is outside the range supported by the controller, or is a Submission Queue<br>Identifier that is already in use.|\n|2h|Invalid Queue Size: The host attempted to create an I/O Submission Queue:<br>• with an invalid number of entries (e.g., a value of 0h or a value which exceeds the<br>maximum supported by the controller, specified in CAP.MQES); or<br>• before initializing the CC.IOSQES field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 766,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1840",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5599501729011536
  },
  {
    "content": "**5.6** **Delete I/O Completion Queue command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1841",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6951542496681213
  },
  {
    "content": "The Delete I/O Completion Queue command is used to delete an I/O Completion Queue. The Delete I/O\nCompletion Queue command uses the Command Dword 10 field. All other command specific fields are\nreserved. After this command has completed, the PRP List that describes the Completion Queue may be\ndeallocated by host software.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 323,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1842",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15839669108390808
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1843",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11689872294664383
  },
  {
    "content": "Host software shall ensure that any associated I/O Submission Queue is deleted prior to deleting a\nCompletion Queue. If there are any associated I/O Submission Queues present, then the Delete I/O\nCompletion Queue command shall abort with a status code of Invalid Queue Deletion.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 278,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1844",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5868361592292786
  },
  {
    "content": "Note: It is not possible to delete the Admin Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1845",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6356042623519897
  },
  {
    "content": "**Figure 164: Delete I/O Completion Queue – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1846",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5814633965492249
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|Queue Identifier (QID): This field indicates the identifier of the Completion Queue to be deleted.<br>The value of 0h (Admin Completion Queue) shall not be specified.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 220,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1847",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3533550500869751
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1848",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.321706622838974
  },
  {
    "content": "Upon completion of the Delete I/O command, the controller posts a completion queue entry to the Admin\nCompletion Queue. Delete I/O Completion Queue command specific status values are defined in Figure\n165.\n\n**Figure 165: Delete I/O Completion Queue – Command Specific Status Values**\n\n|Value|Description|\n|---|---|\n|01h|Invalid Queue Identifier: The Queue Identifier specified in the command is invalid. This error is<br>also indicated if the Admin Completion Queue identifier is specified.|\n|0Ch|Invalid Queue Deletion: This error indicates that it is invalid to delete the I/O Completion Queue<br>specified. The typical reason for this error condition is that there is an associated I/O Submission<br>Queue that has not been deleted.|\n\n**5.7** **Delete I/O Submission Queue command**\n\nThe Delete I/O Submission Queue command is used to delete an I/O Submission Queue. The Delete I/O\nSubmission Queue command uses the Command Dword 10 field. All other command specific fields are\nreserved. After this command has completed, the PRP List that describes the Submission Queue may be\ndeallocated by host software.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 1110,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1849",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7816423773765564
  },
  {
    "content": "Upon successful completion of the Delete I/O Submission Queue command, all I/O commands previously\nsubmitted to the indicated Submission Queue shall be either explicitly completed or implicitly completed.\nPrior to returning a completion queue entry for the Delete I/O Submission Queue command, other\ncommands previously submitted to the I/O Submission Queue to be deleted may be completed with\nappropriate status (e.g., Successful Completion, Command Aborted due to SQ Deletion). After successful\ncompletion of the Delete I/O Submission Queue command, the controller shall not post completion status\nfor any I/O commands that were submitted to the deleted I/O Submission Queue. The successful\ncompletion of the Delete I/O Submission Queue command indicates an implicit completion status of\nCommand Aborted due to SQ Deletion for any previously submitted I/O commands that did not have a\ncompletion queue entry posted by the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 935,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1850",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5029000043869019
  },
  {
    "content": "Note: It is not possible to delete the Admin Submission Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1851",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6256886720657349
  },
  {
    "content": "**Figure 166: Delete I/O Submission Queue – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1852",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5654498934745789
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|Queue Identifier (QID): This field indicates the identifier of the Submission Queue to be deleted.<br>The value of 0h (Admin Submission Queue) shall not be specified.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 220,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1853",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1762462854385376
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1854",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40101683139801025
  },
  {
    "content": "After all commands submitted to the indicated I/O Submission Queue are either completed or aborted, a\ncompletion queue entry is posted to the Admin Completion Queue when the queue has been deleted.\nDelete I/O Submission Queue command specific status values are defined in Figure 167.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 283,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1855",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10123328864574432
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1856",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1272018849849701
  },
  {
    "content": "**Figure 167: Delete I/O Submission Queue – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1857",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5956565141677856
  },
  {
    "content": "|Value|Description|\n|---|---|\n|1h|Invalid Queue Identifier: The Queue Identifier specified in the command is invalid. This error is<br>also indicated if the Admin Submission Queue identifier is specified.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1858",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2224704772233963
  },
  {
    "content": "**5.8** **Doorbell Buffer Config command**\n\nThe Doorbell Buffer Config command is used to provide two separate memory buffers that mirror the\ncontroller's doorbell properties defined in section 3.1.3. This command is intended for emulated controllers\nand is not typically supported by a physical NVMe controller. The two buffers are known as “Shadow\nDoorbell” and “EventIdx”, respectively. Refer to “Updating Controller Doorbell Properties using a Shadow\nDoorbell Buffer” in the annex for an example of how these buffers may be used.\n\nThe Doorbell Buffer Config command uses the PRP Entry 1 and PRP Entry 2 fields. All other command\nspecific fields are reserved. The command is not namespace specific, does not support metadata, and does\nnot support SGLs. The settings are not retained across a Controller Level Reset.\n\nEach buffer supplied with the Doorbell Buffer Config command shall be a single physical memory page as\ndefined by the CC.MPS field. The controller shall ensure that the following condition is satisfied:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 1022,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1859",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09155594557523727
  },
  {
    "content": "(4 << CAP.DSTRD) * (max(NSQA, NCQA)+1) <= (2^(12+CC.MPS))",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1860",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05951264128088951
  },
  {
    "content": "**Figure 168: Doorbell Buffer Config – Shadow Doorbell and EventIdx**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1861",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6698611378669739
  },
  {
    "content": "|Start<br>1, 2<br>(Offset in Buffer)|End<br>1, 2<br>(Offset in Buffer)|2<br>Description|\n|---|---|---|\n|00h|03h|Submission Queue 0 Tail Doorbell or EventIdx (Admin)|\n|00h + (1 *<br>(4 << CAP.DSTRD))|03h + (1 *<br>(4 << CAP.DSTRD))|Completion Queue 0 Head Doorbell or EventIdx (Admin)|\n|00h + (2 *<br>(4 << CAP.DSTRD))|03h + (2 *<br>(4 << CAP.DSTRD))|Submission Queue 1 Tail Doorbell or EventIdx|\n|00h + (3 *<br>(4 << CAP.DSTRD))|03h + (3 *<br>(4 << CAP.DSTRD))|Completion Queue 1 Head Doorbell or EventIdx|\n|…|…|...|\n|00h + (2y *<br>(4 << CAP.DSTRD))|03h + (2y *<br>(4 << CAP.DSTRD))|Submission Queue y Tail Doorbell or EventIdx|\n|00h + ((2y + 1) *<br>(4 << CAP.DSTRD))|03h + ((2y + 1) *<br>(4 << CAP.DSTRD))|Completion Queue y Head Doorbell or EventIdx|\n|Notes:<br>1. The offsets in Start and End are referenced to the value provided in PRP1 for the doorbell buffer and to the<br>value provided in PRP2 for the EventIdx buffer.<br>2. The value of y is equal to max(NSQA, NCQA).|Notes:<br>1. The offsets in Start and End are referenced to the value provided in PRP1 for the doorbell buffer and to the<br>value provided in PRP2 for the EventIdx buffer.<br>2. The value of y is equal to max(NSQA, NCQA).|Notes:<br>1. The offsets in Start and End are referenced to the value provided in PRP1 for the doorbell buffer and to the<br>value provided in PRP2 for the EventIdx buffer.<br>2. The value of y is equal to max(NSQA, NCQA).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1425,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1862",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5759640336036682
  },
  {
    "content": "**Figure 169: Doorbell Buffer Config – PRP Entry 1**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1863",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6793892979621887
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|63:00|PRP Entry 1 (PRP1): This field specifies a 64-bit base memory address pointer to the Shadow<br>Doorbell buffer with the definition specified in Figure 168. The Shadow Doorbell buffer is updated<br>by the host. This buffer shall be memory page aligned.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 288,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1864",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.681389570236206
  },
  {
    "content": "**Figure 170: Doorbell Buffer Config – PRP Entry 2**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1865",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4104081392288208
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|63:00|PRP Entry 2 (PRP2): This field specifies a 64-bit base memory address pointer to the EventIdx<br>buffer with the definition specified in Figure 168. The EventIdx buffer is updated by the para-<br>virtualized controller. This buffer shall be memory page aligned.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 298,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1866",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.321940153837204
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1867",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.019438503310084343
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1868",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37758076190948486
  },
  {
    "content": "When the command is completed, the controller posts a completion queue entry to the Admin Completion\nQueue indicating the status for the command. If the Shadow Doorbell buffer or EventIdx buffer memory\naddresses are invalid, then a status code of Invalid Field in Command shall be returned.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 290,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1869",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23300984501838684
  },
  {
    "content": "**5.9** **Device Self-test command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1870",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6962209939956665
  },
  {
    "content": "The Device Self-test command is used to start a device self-test operation or abort a device self-test\noperation (refer to section 8.6). The Device Self-test command is used specifically to:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 190,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1871",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6427472829818726
  },
  {
    "content": "a) start a short device self-test operation;\nb) start an extended device self-test operation;\nc) start a vendor specific device self-test operation; or\nd) abort a device self-test operation already in process.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 209,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1872",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5339937806129456
  },
  {
    "content": "The device self-test operation is performed by the controller that the Device Self-test command was\nsubmitted to. The Namespace Identifier field controls which namespaces are included in the device selftest operation as specified in Figure 171.\n\n**Figure 171: Device Self-test Namespace Test Action**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 300,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1873",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6935849189758301
  },
  {
    "content": "|NSID Value|Description|\n|---|---|\n|00000000h|Specifies that the device self-test operation shall not include any namespaces, and only the<br>controller is included as part of the device self-test operation.|\n|00000001h to<br>FFFFFFFEh|Specifies that the device self-test operation shall include the namespace specified by this<br>field. If this field specifies an invalid namespace ID, then the controller shall abort the<br>command with a status code of Invalid Namespace or Format. If this field specifies an inactive<br>namespace ID, then the controller shall abort the command with a status code of Invalid Field<br>in Command.|\n|FFFFFFFFh|Specifies that the device self-test operation shall include all active namespaces accessible<br>through the controller at the time the device self-test operation is started.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 819,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1874",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.601125180721283
  },
  {
    "content": "The Device Self-test command uses the Command Dword 10 field. All other command specific fields are\nreserved.\n\n**Figure 172: Device Self-test – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1875",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6534486413002014
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:04|Reserved|\n|03:00|Self-test Code (STC): This field specifies the action taken by the Device Self-test command.<br>Value Definition<br>0h Reserved<br>1h Start a short device self-test operation<br>2h Start an extended device self-test operation<br>3h to Dh Reserved<br>Eh Vendor specific<br>Fh Abort device self-test operation|\n\n|Value|Definition|\n|---|---|\n|0h|Reserved|\n|1h|Start a short device self-test operation|\n|2h|Start an extended device self-test operation|\n|3h to Dh|Reserved|\n|Eh|Vendor specific|\n|Fh|Abort device self-test operation|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 580,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1876",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6690335869789124
  },
  {
    "content": "The processing of a Device Self-test command and interactions with a device self-test operation already in\nprogress is defined in Figure 173.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1877",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18026770651340485
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1878",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2396957278251648
  },
  {
    "content": "**Figure 173: Device Self-test – Command Processing**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1879",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6368182897567749
  },
  {
    "content": "|Self-test in<br>1<br>Progress|Self-test Code value in new<br>Drive Self-test command|Controller Action|\n|---|---|---|\n|Yes|1h – Short device self-test|Abort the new Device Self-test command with a status<br>code of Device Self-test in Progress.|\n|Yes|2h – Extended device self-test|2h – Extended device self-test|\n|Yes|Eh – Vendor specific|Vendor specific|\n|Yes|Fh – Abort device self-test|The controller takes the following actions in order:<br>1. Abort device self-test operation in progress;<br>2. Create log entry in the Newest Self-test Result<br>Data Structure in the Device Self-test Log;<br>3. Set the Current Device Self-test Status field in the<br>Device Self-test Log to 0h; and<br>4. Completes command successfully.|\n|No|1h – Short device self-test|The controller takes the following actions in order:<br>1. Validate the command parameters;<br>2. Set the Current Device Self-test Status field in the<br>Device Self-test Log to 1h;<br>3. Start a device self-test operation; and<br>4. Completes command successfully.|\n|No|2h – Extended device self-test|The controller takes the following actions in order:<br>1. Validate the command parameters;<br>2. Set the Current Device Self-test Status field in the<br>Device Self-test Log to 2h;<br>3. Start a device self-test operation; and<br>4. Completes command successfully.|\n|No|Eh – Vendor specific|Vendor specific|\n|No|Fh – Abort device self-test|Completes command successfully. The Device Self-test<br>Log is not modified.|\n|Notes:<br>1. If bit 0 is cleared to ‘0’ in the Device Self-test Options (DSTO) of the Identify Controller data structure (refer to<br>Figure 275), then the Self-test in Progress column represents that a device self-test operation is in progress on<br>the controller that the new Device Self-test command was received on. If bit 0 is set to ‘1’ in the Device Self-test<br>Options (DSTO) of the Identify Controller data structure, then the Self-test in Progress column represents that<br>a device self-test operation is in progress on the NVM subsystem.|Notes:<br>1. If bit 0 is cleared to ‘0’ in the Device Self-test Options (DSTO) of the Identify Controller data structure (refer to<br>Figure 275), then the Self-test in Progress column represents that a device self-test operation is in progress on<br>the controller that the new Device Self-test command was received on. If bit 0 is set to ‘1’ in the Device Self-test<br>Options (DSTO) of the Identify Controller data structure, then the Self-test in Progress column represents that<br>a device self-test operation is in progress on the NVM subsystem.|Notes:<br>1. If bit 0 is cleared to ‘0’ in the Device Self-test Options (DSTO) of the Identify Controller data structure (refer to<br>Figure 275), then the Self-test in Progress column represents that a device self-test operation is in progress on<br>the controller that the new Device Self-test command was received on. If bit 0 is set to ‘1’ in the Device Self-test<br>Options (DSTO) of the Identify Controller data structure, then the Self-test in Progress column represents that<br>a device self-test operation is in progress on the NVM subsystem.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1880",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21346740424633026
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1881",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3724495768547058
  },
  {
    "content": "A completion queue entry is posted to the Admin Completion Queue after the appropriate actions are taken\nas specified in Figure 173. Device Self-test command specific status values are defined in Figure 174.\n\n**Figure 174: Device Self-test – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 274,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1882",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.636954128742218
  },
  {
    "content": "|Value|Description|\n|---|---|\n|1Dh|Device Self-test in Progress: The controller or NVM subsystem already has a device self-test<br>operation in process.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1883",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21252301335334778
  },
  {
    "content": "**5.10 Directive Receive command**\n\nThe Directive Receive command returns a data buffer that is dependent on the Directive Type. Refer to\nsection 8.7.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 150,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1884",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15622812509536743
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1885",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19630709290504456
  },
  {
    "content": "The Directive Receive command uses the Data Pointer, Command Dword 10, and Command Dword 11\nfields. Command Dword 12 and Dword 13 may be used based on the Directive Type field and the Directive\nOperation field. All other command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 258,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1886",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2524960935115814
  },
  {
    "content": "If the Number of Dwords (NUMD) field corresponds to a length that is less than the size of the data structure\nto be returned, then only that specified portion of the data structure is transferred. If the NUMD field\ncorresponds to a length that is greater than the size of the associated data structure, then the entire contents\nof the data structure are transferred and no additional data is transferred.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 404,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1887",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12664079666137695
  },
  {
    "content": "**Figure 175: Directive Receive – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1888",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3533472716808319
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the start of the data buffer. Refer to Figure 87 for the<br>definition of this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1889",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20897959172725677
  },
  {
    "content": "**Figure 176: Directive Receive – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1890",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2547330856323242
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Number of Dwords (NUMD): This field specifies the number of dwords to transfer. This is a 0’s<br>based value.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 146,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1891",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23923924565315247
  },
  {
    "content": "**Figure 177: Directive Receive – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1892",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48719868063926697
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Directive Specific (DSPEC): The interpretation of this field is Directive Type dependent. Refer to<br>section 8.7.|\n|15:08|Directive Type (DTYPE): This field specifies the Directive Type. Refer to Figure 416 for the list of<br>Directive Types.|\n|07:00|Directive Operation (DOPER): This field specifies the Directive Operation to perform. The<br>interpretation of this field is Directive Type dependent. Refer to section 8.7.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 461,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1893",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18380999565124512
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1894",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4509662389755249
  },
  {
    "content": "When the command is completed, the controller posts a completion queue entry to the Admin Completion\nQueue indicating the status for the command. Command specific status values that may be returned are\ndependent on the Directive Type, refer to section 8.7.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 256,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1895",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42974504828453064
  },
  {
    "content": "**5.11 Directive Send command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1896",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6345843076705933
  },
  {
    "content": "The Directive Send command transfers a data buffer that is dependent on the Directive Type to the\ncontroller. Refer to section 8.7.\n\nThe Directive Send command uses the Data Pointer, Command Dword 10, and Command Dword 11 fields.\nCommand Dword 12 and Command Dword 13 may be used based on the Directive Type field and the\nDirective Operation field. All other command specific fields are reserved.\n\n**Figure 178: Directive Send – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 443,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1897",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33570513129234314
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the start of the data buffer. Refer to Figure 87 for the<br>definition of this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1898",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17061445116996765
  },
  {
    "content": "**Figure 179: Directive Send – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1899",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2111092060804367
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Number of Dwords (NUMD): This field specifies the number of dwords to transfer. This is a 0’s<br>based value.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 146,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1900",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28075703978538513
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1901",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10521522164344788
  },
  {
    "content": "**Figure 180: Directive Send – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1902",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4375288784503937
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Directive Specific (DSPEC): The interpretation of this field is Directive Type dependent. Refer to<br>section 8.7.|\n|15:08|Directive Type (DTYPE): This field specifies the Directive Type. Refer to Figure 416 for the list of<br>Directive Types.|\n|07:00|Directive Operation (DOPER): This field specifies the Directive Operation to perform. The<br>interpretation of this field is Directive Type dependent. Refer to section 8.7.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 461,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1903",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18380999565124512
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1904",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4509662389755249
  },
  {
    "content": "When the command is completed, the controller posts a completion queue entry to the Admin Completion\nQueue indicating the status for the command. Command specific status values that may be returned are\ndependent on the Directive Type, refer to section 8.7.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 256,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1905",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22074608504772186
  },
  {
    "content": "**5.12 Firmware Commit command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1906",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6056634187698364
  },
  {
    "content": "Note: This command was known in NVM Express Base Specification revisions prior to revision 1.2 as\n“Firmware Activate.”",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1907",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5905547738075256
  },
  {
    "content": "The Firmware Commit command is used to modify the firmware image or Boot Partitions.\n\nWhen modifying a firmware image, the Firmware Commit command verifies that a valid firmware image\nhas been downloaded and commits that revision to a specific firmware slot. The host may select the\nfirmware image to activate on the next Controller Level Reset as part of this command. The host may\ndetermine the currently executing firmware revision by examining the Firmware Revision field in the Identify\nController data structure in Figure 275. The host may determine the firmware revision to be executed on\nthe next Controller Level Reset by examining the Firmware Slot Information log page. All controllers in a\ndomain share firmware slots and the same firmware image is applied to all controllers in that domain (i.e.,\nall the controllers in the NVM subsystem if multiple domains are not supported or all the controllers in that\ndomain if multiple domains are supported).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 962,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1908",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6765981912612915
  },
  {
    "content": "Activation of a firmware image may result in a change in controller behavior that is not expected by the host\n(e.g., an incompatible change in the UUID List (refer to section 8.25.2)). In this case, if the Commit Action\nfield is set to 011b, then the controller shall abort the command with a status code of Firmware Activation\nRequires Conventional Reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 356,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1909",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32137101888656616
  },
  {
    "content": "When modifying Boot Partitions, the host may select the Boot Partition to mark as active or replace. A Boot\nPartition is only able to be written when unlocked (refer to section 8.2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 182,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1910",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23104383051395416
  },
  {
    "content": "The Firmware Commit command uses the Command Dword 10 field. All other command specific fields are\nreserved.\n\n**Figure 181: Firmware Commit – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 160,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1911",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49730977416038513
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31|Boot Partition ID (BPID): Specifies the Boot Partition that shall be used for the Commit Action, if<br>applicable.|\n|30:06|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1912",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28800061345100403
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1913",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23144641518592834
  },
  {
    "content": "**Figure 181: Firmware Commit – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1914",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48163142800331116
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|000b|Downloaded image replaces the existing image, if any, in the specified<br>Firmware Slot. The newly placed image is not activated.|\n|001b|Downloaded image replaces the existing image, if any, in the specified<br>Firmware Slot. The newly placed image is activated at the next<br>Controller Level Reset.|\n|010b|The existing image in the specified Firmware Slot is activated at the next<br>Controller Level Reset.|\n|011b|Downloaded image replaces the existing image, if any, in the specified<br>Firmware Slot and is then activated immediately. If there is not a newly<br>downloaded image, then the existing image in the specified firmware<br>slot is activated immediately.|\n|100b to 101b|Reserved|\n|110b|Downloaded image replaces the Boot Partition specified by the Boot<br>Partition ID field.|\n|111b|Mark the Boot Partition specified in the BPID field as active and update<br>BPINFO.ABPID.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 922,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1915",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7448961734771729
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|05:03|Commit Action (CA): This field specifies the action that is taken (refer to section 3.11) on the<br>image downloaded with the Firmware Image Download command or on a previously downloaded<br>and placed image. The actions are indicated in the following table.<br>Value Definition<br>Downloaded image replaces the existing image, if any, in the specified<br>000b<br>Firmware Slot. The newly placed image is not activated.<br>Downloaded image replaces the existing image, if any, in the specified<br>001b Firmware Slot. The newly placed image is activated at the next<br>Controller Level Reset.<br>The existing image in the specified Firmware Slot is activated at the next<br>010b<br>Controller Level Reset.<br>Downloaded image replaces the existing image, if any, in the specified<br>Firmware Slot and is then activated immediately. If there is not a newly<br>011b<br>downloaded image, then the existing image in the specified firmware<br>slot is activated immediately.<br>100b to 101b Reserved<br>Downloaded image replaces the Boot Partition specified by the Boot<br>110b<br>Partition ID field.<br>Mark the Boot Partition specified in the BPID field as active and update<br>111b<br>BPINFO.ABPID.|\n|02:00|Firmware Slot (FS): Specifies the firmware slot that shall be used for the Commit Action, if<br>applicable. If the value specified is 0h, then the controller shall choose the firmware slot (i.e., slot<br>1 to slot 7) to use for the operation.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1482,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1916",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17754928767681122
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1917",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3772832751274109
  },
  {
    "content": "Upon completion of the Firmware Commit command, the controller posts a completion queue entry to the\nAdmin Completion Queue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1918",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6597148180007935
  },
  {
    "content": "For Firmware Commit commands that specify activation of a new firmware image at the next Controller\nLevel Reset (i.e., the CA field was set to 001b or 010b) and complete with a status code value of 0h (i.e.,\nSuccess Completion), a Controller Level Reset initiated by any of the methods defined in section 3.7.2\nactivates the specified firmware.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 344,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1919",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5770220160484314
  },
  {
    "content": "If the controller detects overlapping firmware/boot partition image update command sequences (refer to\nsection 1.5.23) of more than one firmware image and/or Boot Partition or the use of more than one controller\nand/or Management Endpoint to update a single firmware image, then the results of that detection are\nreported in Dword 0 of the completion queue entry as defined in Figure 182. Refer to section 3.11 and\nsection 8.2.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 429,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1920",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6615747809410095
  },
  {
    "content": "**Figure 182: Firmware Commit – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1921",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3801215589046478
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:02|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1922",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23147746920585632
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1923",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25261667370796204
  },
  {
    "content": "**Figure 182: Firmware Commit – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1924",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5041523575782776
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|01:00|Multiple Update Detected (MUD): This field indicates if a controller detected overlapping firmware/boot<br>partition image update command sequences of Boot Partitions and/or firmware images (refer to section<br>3.11 and section 8.2.2). If the SMUD bit in the Firmware Update field of the Identify Controller data<br>structure is cleared to ‘0’, then this field shall be cleared to 00b.<br>This field is valid if the command is successful or aborted.<br>Bits Description<br>If set to ‘1’, then the controller detected an overlapping firmware/boot partition image update<br>command sequence due to processing a command from a Management Endpoint. If cleared<br>1<br>to ‘0’, then the controller did not detect an overlapping firmware/boot partition image update<br>command sequence due to processing a command from a Management Endpoint.<br>If set to ‘1’, then the controller detected an overlapping firmware/boot partition image update<br>command sequence due to processing a command from an Admin Submission Queue on a<br>0 controller. If cleared to ‘0’, then the controller did not detect an overlapping firmware/boot<br>partition image update command sequence due to processing a command from an Admin<br>Submission Queue on a controller.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1276,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1925",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8077245354652405
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|1|If set to ‘1’, then the controller detected an overlapping firmware/boot partition image update<br>command sequence due to processing a command from a Management Endpoint. If cleared<br>to ‘0’, then the controller did not detect an overlapping firmware/boot partition image update<br>command sequence due to processing a command from a Management Endpoint.|\n|0|If set to ‘1’, then the controller detected an overlapping firmware/boot partition image update<br>command sequence due to processing a command from an Admin Submission Queue on a<br>controller. If cleared to ‘0’, then the controller did not detect an overlapping firmware/boot<br>partition image update command sequence due to processing a command from an Admin<br>Submission Queue on a controller.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 793,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1926",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4861212372779846
  },
  {
    "content": "Firmware Commit command specific status values (i.e., SCT field set to 1h) are shown in Figure 183.\n\n**Figure 183: Firmware Commit – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1927",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6309516429901123
  },
  {
    "content": "|Value|Description|\n|---|---|\n|06h|Invalid Firmware Slot: The firmware slot indicated is invalid or read only. This error is indicated if<br>the firmware slot exceeds the number supported.|\n|07h|Invalid Firmware Image: The firmware image specified for activation is:<br>• invalid and not loaded by the controller; or<br>• the specified firmware slot does not contain a firmware image.|\n|0Bh|Firmware Activation Requires Conventional Reset: The firmware commit was successful,<br>however, activation of the firmware image requires a Conventional Reset. If an FLR or Controller<br>Reset occurs prior to a Conventional Reset, the controller shall continue operation with the currently<br>executing firmware image.|\n|10h|Firmware Activation Requires NVM Subsystem Reset: The firmware commit was successful,<br>however, activation of the firmware image requires an NVM Subsystem Reset. If any other type of<br>Controller Level Reset occurs prior to an NVM Subsystem Reset, the controller shall continue<br>operation with the currently executing firmware image.|\n|11h|Firmware Activation Requires Controller Level Reset: The firmware commit was successful;<br>however, the image specified does not support being activated without a Controller Level Reset.<br>The image shall be activated at the next Controller Level Reset. This status code should be returned<br>only if the Commit Action field in the Firmware Commit command is set to 011b (i.e., activate<br>immediately).|\n|12h|Firmware Activation Requires Maximum Time Violation: The image specified if activated<br>immediately would exceed the Maximum Time for Firmware Activation (MTFA) value reported in<br>the Identify Controller data structure (refer to Figure 275). To activate the firmware, the Firmware<br>Commit command needs to be re-issued and the image activated using a reset.|\n|13h|Firmware Activation Prohibited: The image specified is being prohibited from activation by the<br>controller for vendor specific reasons (e.g., controller does not support down revision firmware).|\n|14h|Overlapping Range: This error is indicated if the firmware image has overlapping ranges.|\n|1Eh|Boot Partition Write Prohibited: This error is indicated if a command attempts to modify a Boot<br>Partition while locked (refer to section 8.2.3).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1928",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6462802886962891
  },
  {
    "content": "**5.13 Firmware Image Download command**\n\nThe Firmware Image Download command is used to download all or a portion of an image for a future\nupdate to the controller. The Firmware Image Download command may be submitted while other",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 230,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1929",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12801715731620789
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1930",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12006492912769318
  },
  {
    "content": "commands on the Admin Submission Queue or I/O Submission Queues are outstanding. The Firmware\nImage Download command downloads a new image (in whole or in part) to the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 179,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1931",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45493316650390625
  },
  {
    "content": "The image may be constructed of multiple pieces that are individually downloaded with separate Firmware\nImage Download commands. Each Firmware Image Download command includes a Dword Offset and\nNumber of Dwords that specify a dword range. The host software should ensure that image pieces do not\nhave dword ranges that overlap and that the NUMD field and OFST field meet the alignment and granularity\nrequirements indicated in the FWUG field (refer to Figure 275). Firmware portions may be submitted out of\norder to the controller. Host software shall submit image portions in order when updating a Boot Partition.\nIf ranges overlap, the controller may return an error of Overlapping Range.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 690,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1932",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5081192255020142
  },
  {
    "content": "The new firmware image is not activated as part of the Firmware Image Download command. Refer to\nsection 3.11 for details on the firmware update process. The firmware update process does not modify the\ncontents of Boot Partitions. Refer to section 8.2.2 for details on the Boot Partition update process.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 303,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1933",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6108807921409607
  },
  {
    "content": "Host software should not overlap command sequences that update Boot Partitions and/or firmware images\n(refer to section 3.11 and section 8.2.2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 144,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1934",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5270363092422485
  },
  {
    "content": "After downloading an image, host software issues a Firmware Commit command before downloading\nanother image. Processing of the first Firmware Image Download command after completion of a Firmware\nCommit command shall cause the controller to discard all remaining portion(s), if any, of downloaded\nimages. If a reset occurs between a firmware download and completion of the Firmware Commit command,\nthen the controller shall discard all portion(s), if any, of downloaded images.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 477,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1935",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6149483919143677
  },
  {
    "content": "The Firmware Image Download command uses the Data Pointer, Command Dword 10, and Command\nDword 11 fields. All other command specific fields are reserved.\n\n**Figure 184: Firmware Image Download – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 209,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1936",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3695310354232788
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the location where data should be transferred from.<br>Refer to Figure 87 for the definition of this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 187,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1937",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1746612936258316
  },
  {
    "content": "**Figure 185: Firmware Image Download – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1938",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.511887788772583
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Number of Dwords (NUMD): This field specifies the number of dwords to transfer for this portion<br>of the firmware. This is a 0’s based value. If the value specified in this field does not meet the<br>requirement indicated by the FWUG field (refer to Figure 275), the firmware update may abort with<br>status code of Invalid Field in Command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 379,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1939",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5108180046081543
  },
  {
    "content": "**Figure 186: Firmware Image Download – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1940",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5432924628257751
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Offset (OFST): This field specifies the number of dwords offset from the start of the firmware<br>image being downloaded to the controller. The offset is used to construct the complete firmware<br>image when the firmware is downloaded in multiple pieces. The piece corresponding to the start<br>of the firmware image shall have an Offset of 0h. If the value specified in this field does not meet<br>the requirement indicated by the FWUG field (refer to Figure 275), the firmware update may fail<br>with status code of Invalid Field in Command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 580,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1941",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07611899822950363
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1942",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3160542845726013
  },
  {
    "content": "Upon completion of the Firmware Image Download command, the controller posts a completion queue\nentry to the Admin Completion Queue. Firmware Image Download command specific status values are\ndefined in Figure 187.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 214,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1943",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14168232679367065
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1944",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1954120248556137
  },
  {
    "content": "**Figure 187: Firmware Image Download – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1945",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6301440000534058
  },
  {
    "content": "|Value|Description|\n|---|---|\n|14h|Overlapping Range: This error is indicated if the firmware image has overlapping<br>ranges. This error may indicate that the granularity or alignment of the firmware<br>image downloaded does not conform to the Firmware Update Granularity field<br>indicated in the Identify Controller data structure.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 335,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1946",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5449801087379456
  },
  {
    "content": "If the controller detects overlapping firmware/boot partition image update command sequences (refer to\nsection 1.5.23) of more than one firmware image and/or Boot Partition or the use of more than one controller\nand/or Management Endpoint to update a single firmware image, then the results of that detection are\nreported in Dword 0 of the completion queue entry as defined in Figure 182. Refer to section 3.11 and\nsection 8.2.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 429,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1947",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1089491993188858
  },
  {
    "content": "**5.14 Format NVM command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1948",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6667672991752625
  },
  {
    "content": "The Format NVM command is used to low level format the NVM media. This command is used by the host\nto change the attributes of the NVM media (e.g., the LBA data size and/or metadata size for the NVM\nCommand Set). A low level format may destroy all data and metadata associated with all namespaces or\nonly the specific namespace associated with the command (refer to the Format NVM Attributes field in the\nIdentify Controller data structure, Figure 275). After the Format NVM command successfully completes, the\ncontroller shall not return any user data that was previously contained in an affected namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 608,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1949",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6319727301597595
  },
  {
    "content": "As part of the Format NVM command, the host requests a format operation and may request a secure\nerase of the contents of the NVM (refer to the SES field in Figure 189). There are two types of secure erase.\nThe User Data Erase erases all user content present in the NVM subsystem. The Cryptographic Erase\nerases all user content present in the NVM subsystem by deleting the encryption key with which the user\ndata was previously encrypted.\n\nThe scope of the format operation and the scope of the format with secure erase depend on the attributes\nthat the controller supports for the Format NVM command and the Namespace Identifier specified in the\ncommand as described in Figure 188. The type of secure erase, if applicable, is based on the setting of the\nSecure Erase Settings field in Command Dword 10 as defined in Figure 189.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 829,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1950",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5063636302947998
  },
  {
    "content": "**Figure 188: Format NVM – Operation Scope**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1951",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5403940677642822
  },
  {
    "content": "|1<br>FNA Bit|NSID|Format Operation|\n|---|---|---|\n|0|2<br>FFFFFFFFh|All namespaces attached to the controller. Other namespaces are<br>not affected.|\n|0|Any allocated value (refer<br>to section 3.2.1.3)|Particular namespace specified. Other namespaces are not<br>affected.|\n|3<br>1|Any allocated value (refer<br>to section 3.2.1.3) or<br>FFFFFFFFh|All namespaces that exist in the NVM subsystem.|\n|Notes:<br>1. For a Format NVM command with Secure Erase, this column refers to bit 1 in the FNA field in the Identify<br>Controller data structure (refer to Figure 275) and bit 0 in the FNA field is ignored. For a Format NVM command<br>without Secure Erase, this column refers to bit 0 in the FNA field, and bit 1 in the FNA field is ignored.<br>2. If bit 3 in the FNA field is set to ‘1’, then this value is not supported.<br>3. If bit 3 in the FNA field is set to ‘1’, then this value does not occur. Refer to Figure 275.|Notes:<br>1. For a Format NVM command with Secure Erase, this column refers to bit 1 in the FNA field in the Identify<br>Controller data structure (refer to Figure 275) and bit 0 in the FNA field is ignored. For a Format NVM command<br>without Secure Erase, this column refers to bit 0 in the FNA field, and bit 1 in the FNA field is ignored.<br>2. If bit 3 in the FNA field is set to ‘1’, then this value is not supported.<br>3. If bit 3 in the FNA field is set to ‘1’, then this value does not occur. Refer to Figure 275.|Notes:<br>1. For a Format NVM command with Secure Erase, this column refers to bit 1 in the FNA field in the Identify<br>Controller data structure (refer to Figure 275) and bit 0 in the FNA field is ignored. For a Format NVM command<br>without Secure Erase, this column refers to bit 0 in the FNA field, and bit 1 in the FNA field is ignored.<br>2. If bit 3 in the FNA field is set to ‘1’, then this value is not supported.<br>3. If bit 3 in the FNA field is set to ‘1’, then this value does not occur. Refer to Figure 275.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1971,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1952",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6363405585289001
  },
  {
    "content": "If the NVM subsystem supports multiple domains and the Format NVM command is not able to format the\nspecified namespaces as a result of the NVM subsystem being divided (refer to section 3.2.4), then the\nFormat NVM command shall be aborted with a status code of Asymmetric Access Inaccessible or\nAsymmetric Access Persistent Loss.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 329,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1953",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6881213784217834
  },
  {
    "content": "The Format NVM command may be aborted with a status code defined in this specification under\ncircumstances defined by a security specification (e.g., invalid security state as specified in TCG Storage",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 200,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1954",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6041711568832397
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1955",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4160950481891632
  },
  {
    "content": "Interface Interactions specification). If there are I/O commands being processed for a namespace, then a\nFormat NVM command that is submitted affecting that namespace may be aborted; if aborted, then a status\ncode of Command Sequence Error should be returned. If a Format NVM command is in progress, then an\nI/O command that is submitted for any namespace affected by that Format NVM command may be aborted;\nif aborted, then a status code of Format in Progress should be returned. Refer to section 5 for further\ninformation about restrictions on Admin Commands during Format NVM.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 579,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1956",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36769193410873413
  },
  {
    "content": "For a Format NVM command with the NSID field set to FFFFFFFFh that specifies secure erase:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1957",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3579626679420471
  },
  {
    "content": "a) if bit 1 is set to ‘1’ in the FNA field (refer to Figure 275) and there are no namespaces in the NVM\n\nsubsystem, then that Format NVM command shall complete without error; and\nb) if bit 1 is cleared to ‘0’ in the FNA field and there are no attached namespaces, then that Format",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 280,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1958",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5716889500617981
  },
  {
    "content": "NVM command shall complete without error.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1959",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4799674451351166
  },
  {
    "content": "For a Format NVM command with an NSID field set to FFFFFFFFh that does not specify a secure erase:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1960",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39061078429222107
  },
  {
    "content": "a) if bit 0 is set to ‘1’ in the FNA field and there are no namespaces in the NVM subsystem, then that\n\nFormat NVM command shall complete without error; and\nb) if bit 0 is cleared to ‘0’ in the FNA field and there are no attached namespaces, then that Format",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 258,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1961",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6202589273452759
  },
  {
    "content": "NVM command shall complete without error.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1962",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37231549620628357
  },
  {
    "content": "If a host does not set the LBA Format Extension Enable (LBAFEE) field to 1h in the Host Behavior Support\nfeature (refer to section 5.27.1.18), then the 0h value of the LBAFEE field disables any I/O Command Set\nspecific format that requires the LBAFEE field to be set to 1h (refer to the applicable I/O Command Set\nspecification). If a Format NVM command specifies a format that is disabled (e.g., the LBAFEE field is\ncleared to 0h), then the controller shall abort that Format NVM command with a status code of Invalid\nNamespace or Format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 539,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1963",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5818371176719666
  },
  {
    "content": "If the format operation scope (refer to Figure 188) for a Format NVM command includes any namespace\nthat is write protected (refer to section 8.12), then the controller aborts that Format NVM command with a\nstatus code of Namespace is Write Protected.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 251,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1964",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5514869093894958
  },
  {
    "content": "If bit 3 in the FNA field is set to ‘1’ and a Format NVM command has the NSID field set to FFFFFFFFh, then\nthe controller shall abort the command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1965",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3927520215511322
  },
  {
    "content": "After successful completion of a Format NVM command, the settings specified in the Format NVM\ncommand (e.g., PI, MSET, LBAF) are reported as part of the Identify Namespace data structures.\n\nThe Format NVM command uses the Command Dword 10 field. All other command specific fields are\nreserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 293,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1966",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6948809623718262
  },
  {
    "content": "**Figure 189: Format NVM – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1967",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4258005619049072
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:14|Reserved|\n|13:12|LBA Format Upper (LBAFU): This field specifies the most significant 2 bits of the Format Index<br>of the User Data Format to apply to the NVM media. This corresponds to the User Data Formats<br>indicated in the Identify command, refer to the Identify Namespace data structure and the LBA<br>Format data structure in the applicable I/O Command Set specification. If an unsupported User<br>Data Format is selected, the controller shall abort the command with a status code of Invalid<br>Format.<br>This field is ignored if the LBA Format Extension Enable (LBAFEE) field is cleared to 0h in the<br>Host Behavior Support feature (refer to section 5.27.1.18).<br>NOTE: This field applies to all User Data Formats. The original name has been retained for<br>historical continuity.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 828,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1968",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43419891595840454
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1969",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4366613030433655
  },
  {
    "content": "**Figure 189: Format NVM – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1970",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1810738742351532
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|000b|No secure erase operation requested|\n|001b|User Data Erase: All user data shall be erased, contents of the<br>user data after the erase is indeterminate (e.g., the user data<br>may be zero filled, one filled, etc.). If a User Data Erase is<br>requested and all affected user data is encrypted, then the<br>controller is allowed to use a cryptographic erase to perform the<br>requested User Data Erase.|\n|010b|Cryptographic Erase: All user data shall be erased<br>cryptographically. This is accomplished by deleting the<br>encryption key.|\n|011b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 597,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1971",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7952365279197693
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|11:09|Secure Erase Settings (SES): This field specifies whether a secure erase should be performed<br>as part of the format and the type of the secure erase operation. The erase applies to all user data,<br>regardless of location (e.g., within an exposed LBA, within a cache, within deallocated logical<br>blocks, etc.).<br>Value Definition<br>000b No secure erase operation requested<br>User Data Erase: All user data shall be erased, contents of the<br>user data after the erase is indeterminate (e.g., the user data<br>may be zero filled, one filled, etc.). If a User Data Erase is<br>001b<br>requested and all affected user data is encrypted, then the<br>controller is allowed to use a cryptographic erase to perform the<br>requested User Data Erase.<br>Cryptographic Erase: All user data shall be erased<br>010b cryptographically. This is accomplished by deleting the<br>encryption key.<br>011b to 111b Reserved|\n|08|1<br>Protection Information Location (PIL): I/O Command Set specific definition.|\n|07:05|1<br>Protection Information (PI): I/O Command Set specific definition.|\n|04|1<br>Metadata Settings (MSET): I/O Command Set specific definition.|\n|03:00|LBA Format Lower (LBAFL): This field specifies the least significant 4 bits of the Format Index<br>of the User Data Format to apply to the NVM media. This corresponds to the User Data Formats<br>indicated in the Identify Namespace data structure, refer to the Identify Namespace data structure<br>and the I/O Command Set specific Format Data Structure in the applicable I/O Command Set<br>specification. If an unsupported User Data Format is selected, the controller shall abort the<br>command with a status code of Invalid Format.<br>NOTE: This field applies to all User Data Formats. The original name has been retained for<br>historical continuity.|\n|NOTE:<br>1. I/O Command Set specific fields are described in the applicable I/O Command Set specification.|NOTE:<br>1. I/O Command Set specific fields are described in the applicable I/O Command Set specification.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2061,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1972",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11784163862466812
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1973",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3669118285179138
  },
  {
    "content": "A completion queue entry is posted to the Admin Completion Queue when the NVM media format is\ncomplete. Format NVM command specific status values (i.e., SCT field set to 1h) are shown in Figure 190.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 198,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1974",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.599574625492096
  },
  {
    "content": "**Figure 190: Format NVM – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1975",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.450850248336792
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0Ah|Invalid Format: The format specified is invalid. This may be due to various conditions, including:<br>1. specifying an invalid User Data Format number;<br>2. enabling protection information when there are not sufficient metadata resources; or<br>3. the specified format is not available in the current configuration.|\n|0Ch|Command Sequence Error: The command was aborted due to a protocol violation in a multi-<br>command sequence.|\n|15h|Operation Denied: The command was denied due to lack of access rights. Refer to the appropriate<br>security specification.|\n|20h|Namespace is Write Protected: The command is prohibited while the namespace is write<br>protected (refer to section 8.12).|\n|86h|Access Denied: Access to the namespace and/or user data is denied due to lack of access rights.<br>Refer to the appropriate security specification (e.g., TCG Storage Interface Interactions<br>specification).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 939,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1976",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29837527871131897
  },
  {
    "content": "**5.15 Get Features command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1977",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6855146884918213
  },
  {
    "content": "The Get Features command retrieves the attributes of the Feature specified.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 75,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1978",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.027564238756895065
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1979",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1641925573348999
  },
  {
    "content": "The Get Features command uses the Data Pointer, Command Dword 10 and Command Dword 14 fields.\nThe use of the Command Dword 11 field is Feature specific. If not used by a Feature, then Command\nDword 11 is reserved unless otherwise stated. All other command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 285,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1980",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.381374716758728
  },
  {
    "content": "The mandatory, optional, and prohibited Feature Identifiers for each type of controller are defined in section\n3.1.2.1.3, section 3.1.2.2.3, and section 3.1.2.3.4.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1981",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22444336116313934
  },
  {
    "content": "**Figure 191: Get Features – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1982",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3574371039867401
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the start of the data buffer. Refer to Figure 87 for the<br>definition of this field. If no data structure is used as part of this specified feature, then this field is<br>ignored.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 260,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1983",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2453492134809494
  },
  {
    "content": "**Figure 192: Get Features – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1984",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30114373564720154
  },
  {
    "content": "|Select|Description|\n|---|---|\n|000b|Current|\n|001b|Default|\n|010b|Saved|\n|011b|Supported Capabilities|\n|100b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1985",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6018342971801758
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:11|Reserved|\n|10:08|Select (SEL): This field specifies the attribute of the value requested in the returned data:<br>Select Description<br>000b Current<br>001b Default<br>010b Saved<br>011b Supported Capabilities<br>100b to 111b Reserved<br>Refer to section 5.15.1 and section 4.2 for details on the data returned in each case.<br>The controller indicates in bit 4 of the Optional NVM Command Support field of the Identify<br>Controller data structure in Figure 275 whether this field is supported.<br>If a Get Features command is received with the Select field set to 010b (i.e., saved) and the<br>controller does not support the Feature Identifier being saved or does not currently have any saved<br>values, then the controller shall operate as if the Select field is set to 001b (i.e., default).|\n|07:00|Feature Identifier (FID): This field specifies the identifier of the Feature for which to provide data.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 944,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1986",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4781327545642853
  },
  {
    "content": "If the controller supports selection of a UUID by the Get Features command (refer to Figure 316 and section\n8.25) and the controller supports selection of a UUID for the specified vendor specific Feature Identifier\n(refer to Figure 316), then Command Dword 14 is used to specify a UUID Index value (refer to Figure 193).\nIf the controller does not support selection of a UUID by the Get Features command or the controller does\nnot support selection of a UUID for the specified vendor specific Feature Identifier, then Command Dword\n14 does not specify a UUID Index value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 571,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1987",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30133917927742004
  },
  {
    "content": "**Figure 193: Get Features – Command Dword 14**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1988",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29609209299087524
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:07|Reserved|\n|06:00|UUID Index: Refer to Figure 477.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1989",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35611823201179504
  },
  {
    "content": "Figure 194 describes the Feature Identifiers whose attributes may be retrieved using the Get Features\ncommand. The definition of the attributes returned and the associated format is specified in the section\nindicated.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 217,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1990",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6622143387794495
  },
  {
    "content": "**Figure 194: Get Features – Feature Identifiers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1991",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2672916650772095
  },
  {
    "content": "|Description|Section Defining Format<br>of Attributes Returned|\n|---|---|\n|Arbitration|5.27.1.1|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1992",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2401868999004364
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1993",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08376386761665344
  },
  {
    "content": "**Figure 194: Get Features – Feature Identifiers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1994",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1351851373910904
  },
  {
    "content": "|Description|Section Defining Format<br>of Attributes Returned|\n|---|---|\n|Power Management|5.27.1.2|\n|Temperature Threshold|5.27.1.3|\n|Volatile Write Cache|5.27.1.4|\n|Number of Queues|5.27.1.5|\n|Interrupt Coalescing|5.27.1.6|\n|Interrupt Vector Configuration|5.27.1.7|\n|Asynchronous Event Configuration|5.27.1.8|\n|Autonomous Power State Transition|5.27.1.9|\n|Host Memory Buffer|5.27.1.10|\n|Timestamp|5.27.1.11|\n|Keep Alive Timer|5.27.1.12|\n|Host Controlled Thermal Management|5.27.1.13|\n|Non-Operational Power State Config|5.27.1.14|\n|Read Recovery Level Config|5.27.1.15|\n|Predictable Latency Mode Config|5.27.1.16|\n|Predictable Latency Mode Window|5.27.1.17|\n|Host Behavior Support|5.27.1.18|\n|Sanitize Config|5.27.1.19|\n|Endurance Group Event Configuration|5.27.1.20|\n|I/O Command Set Profile|5.27.1.21|\n|Software Progress Marker|5.27.1.24|\n|Host Identifier|5.27.1.25|\n|Reservation Notification Mask|5.27.1.26|\n|Reservation Persistence|5.27.1.27|\n|Namespace Write Protection Config|5.27.1.28|\n|Enhanced Controller Metadata|5.27.1.23.1|\n|Controller Metadata|5.27.1.23.2|\n|Namespace Metadata|5.27.1.23.3|\n|Spinup Control|5.27.1.22|\n|I/O Command Set specific features|I/O Command Set<br>specification|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1201,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1995",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25387054681777954
  },
  {
    "content": "A Select field cleared to 000b (i.e., current) returns the current operating attribute value for the Feature\nIdentifier specified.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 130,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1996",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6820871233940125
  },
  {
    "content": "A Select field set to 001b (i.e., default) returns the default attribute value for the Feature Identifier specified.\n\nA Select field set to 010b (i.e., saved) returns the last saved attribute value for the Feature Identifier\nspecified (i.e., the last Set Features command completed without error, with the Save bit set to ‘1’ for the\nFeature Identifier specified).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 364,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1997",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5370821952819824
  },
  {
    "content": "A Select field set to 011b (i.e., supported capabilities) returns the capabilities supported for this Feature\nIdentifier. The capabilities supported are returned in Dword 0 of the completion queue entry of the Get\nFeatures command (refer to Figure 195).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 253,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1998",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2011542171239853
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_1999",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3372746407985687
  },
  {
    "content": "Upon completion of the Get Features command, the controller posts a completion queue entry to the Admin\nCompletion Queue. If the Select field is not set to 011b, then Dword 0 of the completion queue entry may\ncontain feature-dependent information (refer to section 5.27.1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 273,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2000",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6686347126960754
  },
  {
    "content": "If the Select field is set to 011b, then Figure 195 describes the contents of Dword 0 of the completion queue\nentry.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 116,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2001",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15689541399478912
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2002",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12809911370277405
  },
  {
    "content": "**Figure 195: Completion Queue Entry Dword 0 when Select is set to 11b**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2003",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15800470113754272
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:3|Reserved|\n|2|Changeable: If set to ‘1’, then the feature values are changeable. If cleared to ‘0’, then the feature<br>values are not changeable.|\n|1|NS Specific: If set to ‘1’, then the Feature Identifier is namespace specific and settings are applied<br>to individual namespaces. If cleared to ‘0’, then the Feature Identifier is not namespace specific and<br>its settings apply to the entire controller.|\n|0|Saveable: If set to ‘1’, then the feature values are saveable. If cleared to ‘0’, then the feature values<br>are not saveable.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 573,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2004",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.00368800712749362
  },
  {
    "content": "**5.16 Get Log Page command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2005",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6307228207588196
  },
  {
    "content": "The Get Log Page command returns a data buffer containing the log page requested. The Get Log Page\ncommand may be impacted by the ANA state (refer to section 8.1.4).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2006",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6545436382293701
  },
  {
    "content": "The Get Log Page command uses the Data Pointer, Command Dword 10, Command Dword 11, Command\nDword 12, Command Dword 13, and Command Dword 14 fields. All other command specific fields are\nreserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 196,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2007",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.585051953792572
  },
  {
    "content": "There are mandatory and optional Log Identifiers defined in section 3.1.2.1.2, section 3.1.2.2.2, and section\n3.1.2.3.3. If a Get Log Page command is processed that specifies a Log Identifier that is not supported,\nthen the controller should abort the command with a status code of Invalid Log Page with the exception\ndefined in Figure 268.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 340,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2008",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48301762342453003
  },
  {
    "content": "The controller indicates support for the Log Page Offset and extended Number of Dwords (32 bits rather\nthan 12 bits) in the Log Page Attributes field of the Identify Controller data structure. If extended data is not\nsupported, then bits 27:16 of the Number of Dwords Lower field specify the Number of Dwords to transfer.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 321,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2009",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47465023398399353
  },
  {
    "content": "If the Log Page Offset is supported, then\n\n- a byte offset shall be supported (i.e., Offset Type field cleared to ‘0’) for all log pages; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2010",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6395070552825928
  },
  {
    "content": "- for each log page that has the IOS bit set to ‘1’ for the specified LID in the LID Supported and\nEffects Data Structure log page (refer to Figure 204) an index offset shall be supported (i.e., Offset\nType field set to ‘1’).\n\nIf the IOS bit is cleared to ‘0’ for the specified LID in the LID Supported and Effects Data Structure log page\nand a Get Log Page command specifies Offset Type field set to ‘1’, then that command shall be aborted\nwith a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 488,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2011",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29648107290267944
  },
  {
    "content": "**Figure 196: Get Log Page – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2012",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32673853635787964
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the start of the data buffer. Refer to Figure 87 for the<br>definition of this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2013",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21375195682048798
  },
  {
    "content": "**Figure 197: Get Log Page – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2014",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36101430654525757
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Number of Dwords Lower (NUMDL): This field specifies the least significant 16 bits of the<br>number of dwords to return unless otherwise specified. If host software specifies a size larger than<br>the log page requested, the controller returns the complete log page with undefined results for<br>dwords beyond the end of the log page. The combined NUMDL and NUMDU fields form a 0’s<br>based value.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 434,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2015",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34918105602264404
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2016",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05499091371893883
  },
  {
    "content": "**Figure 197: Get Log Page – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2017",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13383518159389496
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15|Retain Asynchronous Event (RAE): This bit specifies whether to retain or clear an<br>Asynchronous Event. If this bit is cleared to ‘0’, the corresponding Asynchronous Event is cleared<br>by the controller upon successful command completions. If this bit is set to ‘1’, the corresponding<br>Asynchronous Event is retained (i.e., not cleared) by the controller upon command completion.<br>If the command does not complete successfully, the Asynchronous Event shall be retained by the<br>controller.<br>Host software should clear this bit to ‘0’ for log pages that are not used with Asynchronous Events.<br>Refer to section 5.2.|\n|14:08|Log Specific Parameter (LSP): If not defined for the log specified by the Log Page Identifier field,<br>this field is reserved.|\n|07:00|Log Page Identifier (LID): This field specifies the identifier of the log page to retrieve.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 895,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2018",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1274331659078598
  },
  {
    "content": "**Figure 198: Get Log Page – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2019",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16842645406723022
  },
  {
    "content": "|Log Page|Identifier|\n|---|---|\n|Endurance Group Information|Endurance Group Identifier (refer to section 3.2.3)|\n|Rotational Media Information|Rotational Media Information|\n|Predictable Latency Per NVM Set|NVM Set Identifier (refer to section 3.2.2)|\n|Media Unit Status|1<br>Domain Identifier (refer to section 3.2.4)|\n|Supported Capacity Configuration List|1<br>Domain Identifier (refer to section 3.2.4)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 407,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2020",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8548901677131653
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Log Specific Identifier: This field specifies an identifier that is required for a particular log page.<br>The log pages that require a log specific identifier are indicated in the table below.<br>Log Page Identifier<br>Endurance Group Information<br>Endurance Group Identifier (refer to section 3.2.3)<br>Rotational Media Information<br>Predictable Latency Per NVM Set NVM Set Identifier (refer to section 3.2.2)<br>1<br>Media Unit Status Domain Identifier (refer to section 3.2.4)<br>1<br>Supported Capacity Configuration List Domain Identifier (refer to section 3.2.4)|\n|15:00|Number of Dwords (NUMDU): This field specifies the most significant 16 bits of the number of dwords<br>to return unless otherwise specified.|\n|Notes:<br>1. If the NVM subsystem does not support multiple domains, then this field is reserved. If this field specifies a<br>non-zero Domain Identifier that is not reported in the Domain List (refer to section 5.17.2.17), then the controller<br>shall abort the command with Invalid Field in Command.|Notes:<br>1. If the NVM subsystem does not support multiple domains, then this field is reserved. If this field specifies a<br>non-zero Domain Identifier that is not reported in the Domain List (refer to section 5.17.2.17), then the controller<br>shall abort the command with Invalid Field in Command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1363,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2021",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4274635910987854
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2022",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06557141244411469
  },
  {
    "content": "**Figure 199: Get Log Page – Command Dword 12**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2023",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34849342703819275
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Log Page Offset Lower (LPOL): The log page offset specifies the location within a log page to<br>start returning data from unless otherwise specified.<br>If the OT bit is cleared to ‘0’, then:<br>a) This field specifies the least significant 32 bits of the log page offset. The offset shall be<br>dword aligned, indicated by bits 1:0 being cleared to 00b;<br>b) The controller is not required to check that bits 1:0 are cleared to 00b. The controller may<br>report an error of Invalid Field in Command if bits 1:0 are not cleared to 00b. If the<br>controller does not report an error of Invalid Field in Command, then the controller shall<br>operate as if bits 1:0 are cleared to 00b; and<br>c) If the host specifies an offset (i.e., LPOL and LPOU) that is greater than the size of the<br>log page requested (e.g., a log page containing 100 bytes is requested starting at offset<br>200), then the controller shall abort the command with a status of Invalid Field in<br>Command.<br>If the OT bit is set to ‘1’, then:<br>a) This field specifies the least significant 32 bits of the index into the list of data structures<br>in the log page;<br>b) If the host specifies an index (i.e., LPOL and LPOU) that is greater than the number of<br>entries in the list of data structures in the log page requested (e.g., a log page containing<br>100 data structures is requested starting at index 200), then the controller shall abort the<br>command with a status code of Invalid Field in Command;<br>c) If the IOS bit for the specified LID in the LID Supported and Effects Data Structure log<br>page is cleared to ‘0’, then the controller shall abort the command with a status code of<br>Invalid Field in Command; and<br>d) Each log page that supports the use of an index offset value defines the contents of an<br>entry for the purposes of indexing into that log page.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1894,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2024",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3082921504974365
  },
  {
    "content": "**Figure 200: Get Log Page – Command Dword 13**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2025",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3574015498161316
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Log Page Offset Upper (LPOU): This field specifies the most significant 32 bits of either the log<br>page offset or the index into the list of data structures unless otherwise specified. Refer to the Log<br>Page Offset Lower definition.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 273,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2026",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33745449781417847
  },
  {
    "content": "If the controller supports selection of a UUID by the Get Log Page command (refer to Figure 202 and section\n8.25), then Command Dword 14 is used to specify a UUID Index value (refer to Figure 201).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 197,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2027",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.287852942943573
  },
  {
    "content": "**Figure 201: Get Log Page – Command Dword 14**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2028",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4922071397304535
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:24|Command Set Identifier (CSI): Refer to Figure 274.|\n|23|Offset Type (OT): If set to ‘1’ then the Log Page Offset Lower field and the Log Page Offset Upper<br>field specify the index into the list of data structures in the log page to be returned. If cleared to ‘0’,<br>then the Log Page Offset Lower field and the Log Page Offset Upper field specify the byte offset<br>into the log page to be returned.|\n|22:07|Reserved|\n|06:00|UUID Index: Refer to Figure 477.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 497,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2029",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5066509246826172
  },
  {
    "content": "**Log Specific Information**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2030",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5182235240936279
  },
  {
    "content": "Figure 202 defines the log pages that may be retrieved with the Get Log Page command and the scope of\nthe information that is returned in those log pages. Refer to section 3.1.2.1.2, section 3.1.2.2.2, and\n3.1.2.3.3 for mandatory, optional, and prohibited log pages for the various controller types.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 299,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2031",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17078010737895966
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2032",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33741581439971924
  },
  {
    "content": "Log pages that indicate a scope of NVM subsystem return information that is global to the NVM subsystem.\nLog pages that indicate a scope of Domain return information that is global to the Domain. Log pages that\nindicate a scope of controller return information that is specific to the controller that is processing the\ncommand. Log pages that indicate a scope of Namespace return information that is specific to the specified\nnamespace. For log pages that indicate multiple scopes, support for multiple domains or the namespace\nidentifier that is specified determines which information is returned. The definition of any individual field\nwithin a log page may indicate a different scope that is specific to that individual field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 729,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2033",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6459869742393494
  },
  {
    "content": "For log pages with a scope of NVM subsystem or controller (as shown in Figure 202), the controller should\nabort commands that specify namespace identifiers other than 0h or FFFFFFFFh with status code Invalid\nField in Command. Otherwise the rules for namespace identifier usage in Figure 87 apply.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 296,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2034",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4108758866786957
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2035",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08440013974905014
  },
  {
    "content": "**Figure 202: Get Log Page – Log Page Identifiers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2036",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41038820147514343
  },
  {
    "content": "|Col1|Log<br>Identifier|Scope|Log Page Name|Reference<br>Section|Col6|\n|---|---|---|---|---|---|\n||00h|Controller|Supported Log Pages|5.16.1.1|5.16.1.1|\n||01h|Controller|Error Information|5.16.1.2|5.16.1.2|\n||02h|1<br>Controller|SMART / Health Information|5.16.1.3|5.16.1.3|\n||02h|2<br>Namespace|2<br>Namespace|2<br>Namespace|2<br>Namespace|\n||03h|6<br>Domain / NVM subsystem|Firmware Slot Information|5.16.1.4|5.16.1.4|\n||04h|Controller|Changed Namespace List|5.16.1.5|5.16.1.5|\n||05h|Controller|Commands Supported and Effects|5.16.1.6|5.16.1.6|\n||06h|3<br>Controller|5<br>Device Self-test|5.16.1.7|5.16.1.7|\n||06h|4, 6<br>Domain / NVM subsystem|4, 6<br>Domain / NVM subsystem|4, 6<br>Domain / NVM subsystem|4, 6<br>Domain / NVM subsystem|\n||07h|Vendor Specific|5<br>Telemetry Host-Initiated|5.16.1.8|5.16.1.8|\n||08h|Vendor Specific|5<br>Telemetry Controller-Initiated|5.16.1.9|5.16.1.9|\n||09h|6<br>Domain / NVM subsystem|Endurance Group Information|5.16.1.10|5.16.1.10|\n||0Ah|6<br>Domain / NVM subsystem|Predictable Latency Per NVM Set|5.16.1.11|5.16.1.11|\n||0Bh|6<br>Domain / NVM subsystem|Predictable Latency Event Aggregate|5.16.1.12|5.16.1.12|\n||0Ch|Controller|Asymmetric Namespace Access|5.16.1.13|5.16.1.13|\n||0Dh|NVM subsystem|5<br>Persistent Event Log|5.16.1.14|5.16.1.14|\n||0Eh|Refer to the NVM Command Set|Refer to the NVM Command Set|Refer to the NVM Command Set|Refer to the NVM Command Set|\n||0Fh|6<br>Domain / NVM subsystem|Endurance Group Event Aggregate|5.16.1.15|5.16.1.15|\n||10h|5, 6<br>Domain / NVM subsystem|Media Unit Status|5.16.1.16|5.16.1.16|\n||11h|6<br>Domain / NVM subsystem|Supported Capacity Configuration List|5.16.1.17|5.16.1.17|\n||12h|Controller|Feature Identifiers Supported and Effects|5.16.1.18|5.16.1.18|\n||13h|Controller|NVMe-MI Commands Supported and Effects|5.16.1.19|5.16.1.19|\n||14h|NVM subsystem|5<br>Command and Feature Lockdown|5.16.1.20|5.16.1.20|\n||15h|Controller|Boot Partition|5.16.1.21|5.16.1.21|\n||16h|Endurance Group|Rotational Media Information|5.16.1.22|5.16.1.22|\n||17h to 6Fh|Reserved|Reserved|Reserved|Reserved|\n||70h||Discovery|5.16.1.23|5.16.1.23|\n||71h to 7Fh|Reserved|Reserved|Reserved|Reserved|\n||80h|Controller|Reservation Notification|5.16.1.24|5.16.1.24|\n||81h|NVM subsystem|Sanitize Status|5.16.1.25|5.16.1.25|\n||82h to BEh|I/O Command Set Specific|I/O Command Set Specific|I/O Command Set Specific|I/O Command Set Specific|\n||BFh|Refer to the Zoned Namespace Command Set|Refer to the Zoned Namespace Command Set|Refer to the Zoned Namespace Command Set|Refer to the Zoned Namespace Command Set|\n||C0h to FFh|5<br>Vendor specific|5<br>Vendor specific|5<br>Vendor specific|5<br>Vendor specific|\n||Key:<br>Namespace = The log page contains information about a specific namespace.<br>Endurance Group = The log page contains information about a specific Endurance Group.<br>Controller = The log page contains information about the controller that is processing the command.<br>Domain = The log page contains information about the Domain.<br>NVM subsystem = The log page contains information about the NVM subsystem.<br>Vendor Specific = The log page contains information that is vendor specific.|Key:<br>Namespace = The log page contains information about a specific namespace.<br>Endurance Group = The log page contains information about a specific Endurance Group.<br>Controller = The log page contains information about the controller that is processing the command.<br>Domain = The log page contains information about the Domain.<br>NVM subsystem = The log page contains information about the NVM subsystem.<br>Vendor Specific = The log page contains information that is vendor specific.|Key:<br>Namespace = The log page contains information about a specific namespace.<br>Endurance Group = The log page contains information about a specific Endurance Group.<br>Controller = The log page contains information about the controller that is processing the command.<br>Domain = The log page contains information about the Domain.<br>NVM subsystem = The log page contains information about the NVM subsystem.<br>Vendor Specific = The log page contains information that is vendor specific.|Key:<br>Namespace = The log page contains information about a specific namespace.<br>Endurance Group = The log page contains information about a specific Endurance Group.<br>Controller = The log page contains information about the controller that is processing the command.<br>Domain = The log page contains information about the Domain.<br>NVM subsystem = The log page contains information about the NVM subsystem.<br>Vendor Specific = The log page contains information that is vendor specific.|Key:<br>Namespace = The log page contains information about a specific namespace.<br>Endurance Group = The log page contains information about a specific Endurance Group.<br>Controller = The log page contains information about the controller that is processing the command.<br>Domain = The log page contains information about the Domain.<br>NVM subsystem = The log page contains information about the NVM subsystem.<br>Vendor Specific = The log page contains information that is vendor specific.|\n||Notes:<br>1. For namespace identifiers of 0h or FFFFFFFFh.<br>2. For namespace identifiers other than 0h or FFFFFFFFh.<br>3. Bit 0 is cleared to ‘0’ in the DSTO field in the Identify Controller data structure (refer to Figure 275).<br>4. Bit 0 is set to ‘1’ in the DSTO field in the Identify Controller data structure.|Notes:<br>1. For namespace identifiers of 0h or FFFFFFFFh.<br>2. For namespace identifiers other than 0h or FFFFFFFFh.<br>3. Bit 0 is cleared to ‘0’ in the DSTO field in the Identify Controller data structure (refer to Figure 275).<br>4. Bit 0 is set to ‘1’ in the DSTO field in the Identify Controller data structure.|Notes:<br>1. For namespace identifiers of 0h or FFFFFFFFh.<br>2. For namespace identifiers other than 0h or FFFFFFFFh.<br>3. Bit 0 is cleared to ‘0’ in the DSTO field in the Identify Controller data structure (refer to Figure 275).<br>4. Bit 0 is set to ‘1’ in the DSTO field in the Identify Controller data structure.|Notes:<br>1. For namespace identifiers of 0h or FFFFFFFFh.<br>2. For namespace identifiers other than 0h or FFFFFFFFh.<br>3. Bit 0 is cleared to ‘0’ in the DSTO field in the Identify Controller data structure (refer to Figure 275).<br>4. Bit 0 is set to ‘1’ in the DSTO field in the Identify Controller data structure.|Notes:<br>1. For namespace identifiers of 0h or FFFFFFFFh.<br>2. For namespace identifiers other than 0h or FFFFFFFFh.<br>3. Bit 0 is cleared to ‘0’ in the DSTO field in the Identify Controller data structure (refer to Figure 275).<br>4. Bit 0 is set to ‘1’ in the DSTO field in the Identify Controller data structure.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 6740,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2037",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27549511194229126
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2038",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4216773211956024
  },
  {
    "content": "5. Selection of a UUID may be supported. Refer to section 8.25.\n6. For NVM subsystems that support multiple domains (refer to the MDS bit in the Identify Controller data\nst r uctu r e, Fi gu r e 27 5), D o m a in scope inf o rm at i o n i s r etu rn ed .",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 254,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2039",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0784151554107666
  },
  {
    "content": "**5.16.1.1 Supported Log Pages (Log Identifier 00h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2040",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3684585392475128
  },
  {
    "content": "An NVM subsystem may support several interfaces for submitting a Get Log Page command such as an\nAdmin Submission Queue, PCIe VDM Management Endpoint, or SMBus/I2C Management Endpoint (refer\nto the NVM Express Management Interface Specification for details on Management Endpoints) and may\nhave zero or more instances of each of those interfaces. The log pages supported on each instance of each\ninterface may be different. This log page is used to describe the log pages that are supported on the\ninterface to which the Get Log Page command was submitted and attributes specific to each log page. The\nlog page is defined in Figure 203. The attributes of each log page are described in a LID Supported and\nEffects data structure defined in Figure 204.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 751,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2041",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3904351592063904
  },
  {
    "content": "If the UUID Selection Supported bit is set to ‘1’ for the Get Log Page command in the Commands Supported\nand Effects log page (refer to section 5.16.1.6), then the log page data reflects the log pages that are\nsupported based on the value of the UUID Index field (refer to section 8.25).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 287,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2042",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5323039293289185
  },
  {
    "content": "The log pages that the controller supports are dependent on the I/O Command Set that is based on:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2043",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18050014972686768
  },
  {
    "content": "- the I/O Command Set selected in CC.CSS, if CC.CSS is not set to 110b; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 75,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2044",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.683901309967041
  },
  {
    "content": "- the Command Set Identifier (CSI) field in CDW 14, if CC.CSS is set to 110b.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 77,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2045",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08015544712543488
  },
  {
    "content": "**Figure 203: Supported Log Pages Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2046",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4616382420063019
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|3:0|Log Page Identifier Supported 0: Contains the LID Supported and Effects data structure (refer<br>to Figure 204.) for the LID 0h.|\n|7:4|Log Page Identifier Supported 1: Contains the LID Supported and Effects data structure (refer<br>to Figure 204.) for the LID 1h.|\n|…|…|\n|1019:1016|Log Page Identifier Supported 254: Contains the LID Supported and Effects data structure<br>(refer to Figure 204.) for the LID FEh.|\n|1023:1020|Log Page Identifier Supported 255: Contains the LID Supported and Effects data structure<br>(refer to Figure 204.) for the LID FFh.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 593,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2047",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6888693571090698
  },
  {
    "content": "**Figure 204: LID Supported and Effects Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2048",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.433747261762619
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|LID Specific Parameter (LIDSP): This field is specific to the log page identifier as defined in<br>Figure 205.|\n|15:2|Reserved|\n|1|Index Offset Supported (IOS): If this bit is set to ‘1’, then the controller supports an index offset<br>for this LID in a Get Log Page command (i.e., the OT bit in the Get Log Page command is allowed<br>to be set to ‘1’). If this bit is cleared to ‘0’, then the controller does not support an index offset for<br>this LID in a Get Log Page command (i.e., the OT bit in the Get Log Page command is only<br>allowed to be cleared to ‘0’).|\n|0|LID Supported (LSUPP): If this bit is set to ‘1’, then the controller supports this LID for a Get Log<br>Page command. If this bit is cleared to ‘0’, then the controller does not support this LID for a Get<br>Log Page command.<br>Refer to section 3.1.2 for the LID support requirements for each controller type.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 920,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2049",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49431294202804565
  },
  {
    "content": "**Figure 205: LID Supported and Effects Data Structure – LID Specific Parameter Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2050",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5445833206176758
  },
  {
    "content": "|Log Page<br>Identifier|LID Specific Parameter Field|\n|---|---|\n|0 to Ch|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2051",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1102680042386055
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2052",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21131224930286407
  },
  {
    "content": "**Figure 205: LID Supported and Effects Data Structure – LID Specific Parameter Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2053",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48052605986595154
  },
  {
    "content": "|Log Page<br>Identifier|LID Specific Parameter Field|\n|---|---|\n|0Dh|The LID Specific Parameter field for log page identifier 0Dh (Persistent Event log page as<br>described in section 5.16.1.14) is defined as follows:<br>Bits Description<br>15:1 Reserved<br>Establish Context and Read 512 Bytes of Header Supported: If this<br>bit is cleared to ‘0’, then the controller does not support the Establish<br>Context and Read 512 Bytes of Header action (refer to Figure 223).<br>If this bit is set to ‘1’, then the controller supports:<br>0 • the Establish Context and Read 512 Bytes of Header action;<br>and<br>• the Generation Number field in the Persistent Event log page.<br>Implementations compliant with NVM Express Base Specification,<br>Revision 2.0 and later shall set this bit to ‘1’.|\n|0Eh to BFh|Reserved|\n|C0h to FFh|Vendor specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 841,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2054",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6007211804389954
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15:1|Reserved|\n|0|Establish Context and Read 512 Bytes of Header Supported: If this<br>bit is cleared to ‘0’, then the controller does not support the Establish<br>Context and Read 512 Bytes of Header action (refer to Figure 223).<br>If this bit is set to ‘1’, then the controller supports:<br>• the Establish Context and Read 512 Bytes of Header action;<br>and<br>• the Generation Number field in the Persistent Event log page.<br>Implementations compliant with NVM Express Base Specification,<br>Revision 2.0 and later shall set this bit to ‘1’.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 578,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2055",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.218237042427063
  },
  {
    "content": "**5.16.1.2 Error Information (Log Identifier 01h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2056",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4503799378871918
  },
  {
    "content": "This log page is used to describe extended error information for a command that completed with error or\nreport an error that is not specific to a particular command. Extended error information is provided when\nthe More (M) bit is set to ‘1’ in the Status field for the completion queue entry associated with the command\nthat completed with error or as part of an asynchronous event with an Error status type. This log page is\nglobal to the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 451,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2057",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5498719215393066
  },
  {
    "content": "This error log may return the last *n* errors. If host software specifies a data transfer of the size of *n* error\nlogs, then the error logs for the most recent *n* errors are returned. The ordering of the entries is based on\nthe time when the error occurred, with the most recent error being returned as the first log entry.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 325,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2058",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5109190940856934
  },
  {
    "content": "Each entry in the log page returned is defined in Figure 206. The log page is a set of 64-byte entries; the\nmaximum number of entries supported is indicated in the ELPE field in the Identify Controller data structure\n(refer to Figure 275). If the log page is full when a new entry is generated, the controller should insert the\nnew entry into the log and discard the oldest entry.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 380,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2059",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49535664916038513
  },
  {
    "content": "The controller should clear this log page by removing all entries on power cycle and Controller Level Reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 108,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2060",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22877445816993713
  },
  {
    "content": "**Figure 206: Error Information Log Entry Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2061",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47397616505622864
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Error Count: This is a 64-bit incrementing error count, indicating a unique identifier for this error.<br>The error count starts at 1h, is incremented for each unique error log entry, and is retained across<br>power off conditions. A value of 0h indicates an invalid entry; this value is used when there are<br>lost entries or when there are fewer errors than the maximum number of entries the controller<br>supports.<br>If the value of this field is FFFFFFFF_FFFFFFFFh, then the field shall be set to 1h when<br>incremented (i.e., rolls over to 1h). Prior to NVMe 1.4, processing of incrementing beyond<br>FFFFFFFFh is unspecified.|\n|09:08|Submission Queue ID: This field indicates the Submission Queue Identifier of the command that<br>the error information is associated with. If the error is not specific to a particular command, then<br>this field shall be set to FFFFh.|\n|11:10|Command ID: This field indicates the Command Identifier of the command that the error is<br>associated with. If the error is not specific to a particular command, then this field shall be set to<br>FFFFh.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1126,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2062",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19014832377433777
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2063",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21103835105895996
  },
  {
    "content": "**Figure 206: Error Information Log Entry Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2064",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3485203981399536
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15:1|Status: This field indicates the Status field for the command that<br>completed. If the error is not specific to a particular command, then this<br>field reports the most applicable status value.|\n|0|Phase Tag: This field may indicate the Phase Tag posted for the<br>command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 311,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2065",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6427368521690369
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15:11|Reserved|\n|10:08|Bit Location: The offset in the byte specified by the Byte Location field<br>to the bit in that byte that contained the error.|\n|07:00|Byte Location: The offset in the submission queue entry to the byte<br>in the command that contained the error. Valid values are based on<br>the SQES field (refer to Figure 275) (e.g., a value of 6 in SQES<br>indicates that the valid values for this field are 0 to 63).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 458,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2066",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6676178574562073
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|13:12|Bits Description<br>Status: This field indicates the Status field for the command that<br>15:1 completed. If the error is not specific to a particular command, then this<br>field reports the most applicable status value.<br>Phase Tag: This field may indicate the Phase Tag posted for the<br>0<br>command.|\n|15:14|Parameter Error Location: This field indicates the byte and bit of the command parameter that<br>the error is associated with, if applicable. If the parameter spans multiple bytes or bits, then the<br>location indicates the least-significant byte and bit of the parameter.<br>Bits Description<br>15:11 Reserved<br>Bit Location: The offset in the byte specified by the Byte Location field<br>10:08<br>to the bit in that byte that contained the error.<br>Byte Location: The offset in the submission queue entry to the byte<br>in the command that contained the error. Valid values are based on<br>07:00<br>the SQES field (refer to Figure 275) (e.g., a value of 6 in SQES<br>indicates that the valid values for this field are 0 to 63).<br>If the error is not specific to a particular command, then this field shall be set to FFFFh.|\n|23:16|LBA: This field indicates I/O Command Set specific data about the error condition, if applicable.<br>The description is described in the applicable I/O Command Set specification.<br>NOTE: The original field name has been retained for historical continuity.|\n|27:24|Namespace: This field indicates the NSID of the namespace that the error is associated with, if<br>applicable.|\n|28|Vendor Specific Information Available: If there is additional vendor specific error information<br>available, this field provides the log page identifier associated with that page. A value of 0h<br>indicates that no additional information is available. Valid values are in the range of 80h to FFh.|\n|29|Transport Type (TRTYPE): This field indicates the Transport Type of the transport associated<br>with the error. The values in this field are the same as the TRTYPE values in the Discovery Log<br>Page Entry (refer to section 5.16.1.21). If the error is not transport related, this field shall be<br>cleared to 0h. If the error is transport related, this field shall be set to the type of the transport as<br>defined in the TRTYPE field within Figure 264.|\n|31:30|Reserved|\n|39:32|Command Specific Information: This field contains command specific information. If used, the<br>command definition specifies the information returned.|\n|41:40|Transport Type Specific Information: This field indicates additional transport type specific error<br>information. If multiple errors exist, then this field indicates additional information about the first<br>error. This field is transport type dependent (refer to TRTYPE) as follows:<br>Transport<br>Description<br>Type<br>All other<br>Reserved<br>values<br>This field indicates, the offset, in bytes, from the start of the<br>3h Transport Header to the start of the field that is in error. If multiple<br>errors exist, then this field indicates the lowest offset that is in error.|\n|63:42|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3108,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2067",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6045657992362976
  },
  {
    "content": "|Transport<br>Type|Description|\n|---|---|\n|All other<br>values|Reserved|\n|3h|This field indicates, the offset, in bytes, from the start of the<br>Transport Header to the start of the field that is in error. If multiple<br>errors exist, then this field indicates the lowest offset that is in error.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 298,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2068",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.309410035610199
  },
  {
    "content": "**5.16.1.3 SMART / Health Information (Log Identifier 02h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2069",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5180582404136658
  },
  {
    "content": "This log page is used to provide SMART and general health information. The information provided is over\nthe life of the controller and is retained across power cycles unless otherwise specified. To request the\ncontroller log page, the namespace identifier specified is FFFFFFFFh or 0h. For compatibility with\nimplementations compliant with NVM Express Base Specification, Revision 1.4 and earlier, hosts should\nuse a namespace identifier of FFFFFFFFh to request the controller log page. The controller may also",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 510,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2070",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5091397166252136
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2071",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19905363023281097
  },
  {
    "content": "support requesting the log page on a per namespace basis, as indicated by bit 0 of the LPA field in the\nIdentify Controller data structure in Figure 275.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2072",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6415656805038452
  },
  {
    "content": "If the log page is not supported on a per namespace basis, specifying a namespace identifier other than 0h\nor FFFFFFFFh should abort the command with a status code of Invalid Field in Command. If the controller\ndoes not abort the command, then the controller returns the controller log page. There is no namespace\nspecific information defined in the SMART / Health Information log page in this revision of the specification,\nthus the controller log page and namespaces specific log page contain identical information.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 517,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2073",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.254008948802948
  },
  {
    "content": "Critical warnings regarding the health of the NVM subsystem may be indicated via an asynchronous event\nnotification to the host. The warnings that results in an asynchronous event notification to the host are\nconfigured using the Set Features command; refer to section 5.27.1.8.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 278,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2074",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16785795986652374
  },
  {
    "content": "Performance may be calculated using parameters returned as part of the SMART / Health Information log.\nSpecifically, the number of Read or Write commands, the amount of data read or written, and the amount\nof controller busy time enables both I/Os per second and bandwidth to be calculated.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 290,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2075",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2831403315067291
  },
  {
    "content": "The log page returned is defined in Figure 207.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2076",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5690504312515259
  },
  {
    "content": "**Figure 207: SMART / Health Information Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2077",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08777406066656113
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|7:6|Reserved|\n|5|If set to ‘1’, then the Persistent Memory Region has become read-only or unreliable<br>(refer to section 8.14).|\n|4|If set to ‘1’, then the volatile memory backup device has failed. This field is only valid<br>if the controller has a volatile memory backup solution.|\n|3|If set to ‘1’, then all of the media has been placed in read only mode. The controller<br>shall not set this bit to '1' if the read-only condition on the media is a result of a<br>change in the write protection state of a namespace (refer to section 8.12.1).|\n|2|If set to ‘1’, then the NVM subsystem reliability has been degraded due to significant<br>media related errors or any internal error that degrades NVM subsystem reliability.|\n|1|If set to ‘1’, then a temperature is:<br>a) greater than or equal to an over temperature threshold; or<br>b) less than or equal to an under temperature threshold,<br>(refer to section 5.27.1.3).|\n|0|If set to ‘1’, then the available spare capacity has fallen below the threshold.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1038,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2078",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4672207534313202
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Critical Warning: This field indicates critical warnings for the state of the controller. Each bit<br>corresponds to a critical warning type; multiple bits may be set to ‘1’. If a bit is cleared to ‘0’,<br>then that critical warning does not apply. Critical warnings may result in an asynchronous<br>event notification to the host. Bits in this field represent the state at the time the Get Log Page<br>command is processed and may not reflect the state at the time a related asynchronous event<br>notification, if any, occurs or occurred.<br>Bits Definition<br>7:6 Reserved<br>If set to ‘1’, then the Persistent Memory Region has become read-only or unreliable<br>5<br>(refer to section 8.14).<br>If set to ‘1’, then the volatile memory backup device has failed. This field is only valid<br>4<br>if the controller has a volatile memory backup solution.<br>If set to ‘1’, then all of the media has been placed in read only mode. The controller<br>3 shall not set this bit to '1' if the read-only condition on the media is a result of a<br>change in the write protection state of a namespace (refer to section 8.12.1).<br>If set to ‘1’, then the NVM subsystem reliability has been degraded due to significant<br>2<br>media related errors or any internal error that degrades NVM subsystem reliability.<br>If set to ‘1’, then a temperature is:<br>a) greater than or equal to an over temperature threshold; or<br>1<br>b) less than or equal to an under temperature threshold,<br>(refer to section 5.27.1.3).<br>0 If set to ‘1’, then the available spare capacity has fallen below the threshold.|\n|02:01|Composite Temperature: Contains a value corresponding to a temperature in Kelvins that<br>represents the current composite temperature of the controller and namespace(s) associated<br>with that controller. The manner in which this value is computed is implementation specific<br>and may not represent the actual temperature of any physical point in the NVM subsystem.<br>The value of this field may be used to trigger an asynchronous event (refer to section 5.27.1.3).<br>Warning and critical overheating composite temperature threshold values are reported by the<br>WCTEMP and CCTEMP fields in the Identify Controller data structure in Figure 275.|\n|03|Available Spare: Contains a normalized percentage (0% to 100%) of the remaining spare<br>capacity available.|\n|04|Available Spare Threshold: When the Available Spare falls below the threshold indicated in<br>this field, an asynchronous event completion may occur. The value is indicated as a<br>normalized percentage (0% to 100%). The values 101 to 255 are reserved.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2652,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2079",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18751968443393707
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2080",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1362551897764206
  },
  {
    "content": "**Figure 207: SMART / Health Information Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2081",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14392152428627014
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|7:4|Reserved|\n|3|If set to ‘1’, then the namespaces in one or more Endurance Groups have been<br>placed in read only mode not as a result of a change in the write protection state<br>of a namespace (refer to section 8.12.1).|\n|2|If set to ‘1’, then the reliability of one or more Endurance Groups has been<br>degraded due to significant media related errors or any internal error that<br>degrades NVM subsystem reliability.|\n|1|Reserved|\n|0|If set to ‘1’, then the available spare capacity of one or more Endurance Groups<br>has fallen below the threshold.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 586,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2082",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4627472460269928
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|05|Percentage Used: Contains a vendor specific estimate of the percentage of NVM subsystem<br>life used based on the actual usage and the manufacturer’s prediction of NVM life. A value of<br>100 indicates that the estimated endurance of the NVM in the NVM subsystem has been<br>consumed, but may not indicate an NVM subsystem failure. The value is allowed to exceed<br>100. Percentages greater than 254 shall be represented as 255. This value shall be updated<br>once per power-on hour (when the controller is not in a sleep state).<br>Refer to the JEDEC JESD218A standard for SSD device life and endurance measurement<br>techniques.|\n|06|Endurance Group Critical Warning Summary: This field indicates critical warnings for the<br>state of Endurance Groups. Each bit corresponds to a critical warning type, multiple bits may<br>be set to ‘1’. If a bit is cleared to ‘0’, then that critical warning does not apply to any Endurance<br>Group. Critical warnings may result in an asynchronous event notification to the host. Bits in<br>this field represent the current associated state and are not persistent.<br>If a bit is set to ‘1’ in one or more Endurance Groups, then the corresponding bit shall be set<br>to ‘1’ in this field.<br>Bits Definition<br>7:4 Reserved<br>If set to ‘1’, then the namespaces in one or more Endurance Groups have been<br>3 placed in read only mode not as a result of a change in the write protection state<br>of a namespace (refer to section 8.12.1).<br>If set to ‘1’, then the reliability of one or more Endurance Groups has been<br>2 degraded due to significant media related errors or any internal error that<br>degrades NVM subsystem reliability.<br>1 Reserved<br>If set to ‘1’, then the available spare capacity of one or more Endurance Groups<br>0<br>has fallen below the threshold.|\n|31:07|Reserved|\n|47:32|Data Units Read: Contains the number of 512 byte data units the host has read from the<br>controller as part of processing a SMART Data Units Read Command; this value does not<br>include metadata. This value is reported in thousands (i.e., a value of 1 corresponds to 1,000<br>units of 512 bytes read) and is rounded up (e.g., one indicates that the number of 512 byte<br>data units read is from 1 to 1,000, three indicates that the number of 512 byte data units read<br>is from 2,001 to 3,000).<br>Refer to the specific I/O Command Set specification for the list of SMART Data Units Read<br>Commands that affect this field.<br>A value of 0h in this field indicates that the number of SMART Data Units Read is not reported.|\n|63:48|Data Units Written: Contains the number of 512 byte data units the host has written to the<br>controller as part of processing a User Data Out Command; this value does not include<br>metadata. This value is reported in thousands (i.e., a value of 1 corresponds to 1,000 units of<br>512 bytes written) and is rounded up (e.g., one indicates that the number of 512 byte data<br>units written is from 1 to 1,000, three indicates that the number of 512 byte data units written<br>is from 2,001 to 3,000).<br>Refer to the specific I/O Command Set specification for the list of User Data Out Commands<br>that affect this field.<br>A value of 0h in this field indicates that the number of Data Units Written is not reported.|\n|79:64|Host Read Commands: Contains the number of SMART Host Read Commands completed<br>by the controller.<br>Refer to the specific I/O Command Set specification for the list of SMART Host Read<br>Commands that affect this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3552,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2083",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43364909291267395
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2084",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1362551897764206
  },
  {
    "content": "**Figure 207: SMART / Health Information Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2085",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26632535457611084
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|95:80|Host Write Commands: Contains the number of User Data Out Commands completed by<br>the controller.<br>Refer to the specific I/O Command Set specification for the list of User Data Out Commands<br>that affect this field.|\n|111:96|Controller Busy Time: Contains the amount of time the controller is busy with I/O commands.<br>The controller is busy when there is a command outstanding to an I/O Queue (specifically, a<br>command was issued via an I/O Submission Queue Tail doorbell write and the corresponding<br>completion queue entry has not been posted yet to the associated I/O Completion Queue).<br>This value is reported in minutes.|\n|127:112|Power Cycles: Contains the number of power cycles.|\n|143:128|Power On Hours: Contains the number of power-on hours. This may not include time that<br>the controller was powered and in a non-operational power state.|\n|159:144|Unsafe Shutdowns: Contains the number of unsafe shutdowns. This count is incremented<br>when the controller does not report it is safe to power down prior to loss of main power.<br>If CAP.CPS is cleared to 00b or set to 01b, it is safe to power down the controller when a<br>controller shutdown processing is complete (i.e., CSTS.ST is cleared to ‘0’ and CSTS.SHST<br>is set to 10b).<br>If CAP.CPS is set to 10b, it is safe to power down the domain when NVM Subsystem<br>Shutdown processing is complete (i.e., CSTS.ST is set to ‘1’ and CSTS.SHST is set to 10b).<br>If CAP.CPS is set to 11b, it is safe to power down the NVM subsystem when NVM Subsystem<br>Shutdown processing is complete (i.e., CSTS.ST is set to ‘1’ and CSTS.SHST is set to 10b).|\n|175:160|Media and Data Integrity Errors: Contains the number of occurrences where the controller<br>detected an unrecovered data integrity error. Errors such as uncorrectable ECC, CRC<br>checksum failure, or LBA tag mismatch are included in this field. Errors introduced as a result<br>of a Write Uncorrectable command (refer to the NVM Command Set Specification) may or<br>may not be included in this field.|\n|191:176|Number of Error Information Log Entries: Contains the number of Error Information log<br>Entries over the life of the controller.|\n|195:192|Warning Composite Temperature Time: Contains the amount of time in minutes that the<br>controller is operational and the Composite Temperature is greater than or equal to the<br>Warning Composite Temperature Threshold (WCTEMP) field and less than the Critical<br>Composite Temperature Threshold (CCTEMP) field in the Identify Controller data structure in<br>Figure 275.<br>If the value of the WCTEMP or CCTEMP field is 0h, then this field is always cleared to 0h<br>regardless of the Composite Temperature value.|\n|199:196|Critical Composite Temperature Time: Contains the amount of time in minutes that the<br>controller is operational and the Composite Temperature is greater than or equal to the Critical<br>Composite Temperature Threshold (CCTEMP) field in the Identify Controller data structure in<br>Figure 275.<br>If the value of the CCTEMP field is 0h, then this field is always cleared to 0h regardless of the<br>Composite Temperature value.|\n|201:200|Temperature Sensor 1: Contains the current temperature reported by temperature sensor 1.<br>This field is defined by Figure 208.|\n|203:202|Temperature Sensor 2: Contains the current temperature reported by temperature sensor 2.<br>This field is defined by Figure 208.|\n|205:204|Temperature Sensor 3: Contains the current temperature reported by temperature sensor 3.<br>This field is defined by Figure 208.|\n|207:206|Temperature Sensor 4: Contains the current temperature reported by temperature sensor 4.<br>This field is defined by Figure 208.|\n|209:208|Temperature Sensor 5: Contains the current temperature reported by temperature sensor 5.<br>This field is defined by Figure 208.|\n|211:210|Temperature Sensor 6: Contains the current temperature reported by temperature sensor 6.<br>This field is defined by Figure 208.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 4002,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2086",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11492221802473068
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2087",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1362551897764206
  },
  {
    "content": "**Figure 207: SMART / Health Information Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2088",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32735830545425415
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|213:212|Temperature Sensor 7: Contains the current temperature reported by temperature sensor 7.<br>This field is defined by Figure 208.|\n|215:214|Temperature Sensor 8: Contains the current temperature reported by temperature sensor 8.<br>This field is defined by Figure 208.|\n|219:216|Thermal Management Temperature 1 Transition Count: Contains the number of times the<br>controller transitioned to lower power active power states or performed vendor specific thermal<br>management actions while minimizing the impact on performance in order to attempt to<br>reduce the Composite Temperature because of the host controlled thermal management<br>feature (refer to section 8.15.5) (i.e., the Composite Temperature rose above the Thermal<br>Management Temperature 1). This counter shall not wrap once the value FFFFFFFFh is<br>reached. A value of 0h, indicates that this transition has never occurred or this field is not<br>implemented.|\n|223:220|Thermal Management Temperature 2 Transition Count: Contains the number of times the<br>controller transitioned to lower power active power states or performed vendor specific thermal<br>management actions regardless of the impact on performance (e.g., heavy throttling) in order<br>to attempt to reduce the Composite Temperature because of the host controlled thermal<br>management feature (refer to section 8.15.5) (i.e., the Composite Temperature rose above<br>the Thermal Management Temperature 2). This counter shall not wrap once the value<br>FFFFFFFFh is reached. A value of 0h, indicates that this transition has never occurred or this<br>field is not implemented.|\n|227:224|Total Time For Thermal Management Temperature 1: Contains the number of seconds that<br>the controller had transitioned to lower power active power states or performed vendor specific<br>thermal management actions while minimizing the impact on performance in order to attempt<br>to reduce the Composite Temperature because of the host controlled thermal management<br>feature (refer to section 8.15.5). This counter shall not wrap once the value FFFFFFFFh is<br>reached. A value of 0h, indicates that this transition has never occurred or this field is not<br>implemented.|\n|231:228|Total Time For Thermal Management Temperature 2: Contains the number of seconds that<br>the controller had transitioned to lower power active power states or performed vendor specific<br>thermal management actions regardless of the impact on performance (e.g., heavy throttling)<br>in order to attempt to reduce the Composite Temperature because of the host controlled<br>thermal management feature (refer to section 8.15.5). This counter shall not wrap once the<br>value FFFFFFFFh is reached. A value of 0h, indicates that this transition has never occurred<br>or this field is not implemented.|\n|511:232|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2858,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2089",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.650259792804718
  },
  {
    "content": "**Figure 208: Temperature Sensor Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2090",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5351696014404297
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15:00|Temperature Sensor Temperature (TST): Contains the current temperature in Kelvins reported<br>by the temperature sensor.<br>The physical point in the NVM subsystem whose temperature is reported by the temperature<br>sensor and the temperature accuracy is implementation specific. An implementation that does<br>not implement the temperature sensor reports a value of 0h. The temperature reported by a<br>temperature sensor may be used to trigger an asynchronous event (refer to section 5.27.1.3).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 533,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2091",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29916632175445557
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2092",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22653810679912567
  },
  {
    "content": "**5.16.1.4 Firmware Slot Information (Log Identifier 03h)**\n\nThis log page is used to describe the firmware revision stored in each firmware slot supported. The firmware\nrevision is indicated as an ASCII string. The log page also indicates the active slot number. The log page\nreturned is defined in Figure 209.\n\n**Figure 209: Firmware Slot Information Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 363,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2093",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7370072603225708
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Active Firmware Info (AFI): Specifies information about the active firmware revision.<br>Bit 7 is reserved.<br>Bits 6:4 indicates the firmware slot that is going to be activated at the next Controller Level Reset.<br>If this field is 0h, then the controller does not indicate the firmware slot that is going to be activated<br>at the next Controller Level Reset.<br>Bit 3 is reserved.<br>Bits 2:0 indicates the firmware slot from which the actively running firmware revision was loaded.|\n|07:01|Reserved|\n|15:08|Firmware Revision for Slot 1 (FRS1): Contains the revision of the firmware downloaded to<br>firmware slot 1. If no valid firmware revision is present or if this slot is unsupported, this field shall<br>be cleared to 0h.|\n|23:16|Firmware Revision for Slot 2 (FRS2): Contains the revision of the firmware downloaded to<br>firmware slot 2. If no valid firmware revision is present or if this slot is unsupported, this field shall<br>be cleared to 0h.|\n|31:24|Firmware Revision for Slot 3 (FRS3): Contains the revision of the firmware downloaded to<br>firmware slot 3. If no valid firmware revision is present or if this slot is unsupported, this field shall<br>be cleared to 0h.|\n|39:32|Firmware Revision for Slot 4 (FRS4): Contains the revision of the firmware downloaded to<br>firmware slot 4. If no valid firmware revision is present or if this slot is unsupported, this field shall<br>be cleared to 0h.|\n|47:40|Firmware Revision for Slot 5 (FRS5): Contains the revision of the firmware downloaded to<br>firmware slot 5. If no valid firmware revision is present or if this slot is unsupported, this field shall<br>be cleared to 0h.|\n|55:48|Firmware Revision for Slot 6 (FRS6): Contains the revision of the firmware downloaded to<br>firmware slot 6. If no valid firmware revision is present or if this slot is unsupported, this field shall<br>be cleared to 0h.|\n|63:56|Firmware Revision for Slot 7 (FRS7): Contains the revision of the firmware downloaded to<br>firmware slot 7. If no valid firmware revision is present or if this slot is unsupported, this field shall<br>be cleared to 0h.|\n|511:64|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2152,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2094",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16662262380123138
  },
  {
    "content": "**5.16.1.5 Changed Namespace List (Log Identifier 04h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2095",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5237776041030884
  },
  {
    "content": "This log page is used to describe namespaces attached to the controller that have:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2096",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40441828966140747
  },
  {
    "content": "a) changed information in their Identify Namespace data structures (refer to in Figure 147) since the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2097",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6391832232475281
  },
  {
    "content": "last time the log page was read;\nb) changed information in their I/O Command Set Independent Identify Namespace data structure",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 126,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2098",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5720391869544983
  },
  {
    "content": "since the last time the log page was read;\nc) been added; and\nd) been deleted.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2099",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49214768409729004
  },
  {
    "content": "The log page contains a Namespace List with up to 1,024 entries. If more than 1,024 namespaces have\nchanged attributes since the last time the log page was read, the first entry in the log page shall be set to\nFFFFFFFFh and the remainder of the list shall be zero filled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 271,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2100",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41259562969207764
  },
  {
    "content": "**5.16.1.6 Commands Supported and Effects (Log Identifier 05h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2101",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4246934652328491
  },
  {
    "content": "This log page is used to describe the commands that the controller supports and the effects of those\ncommands on the state of the NVM subsystem. The log page is 4,096 bytes in size. There is one",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 194,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2102",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46933385729789734
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2103",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13116315007209778
  },
  {
    "content": "Commands Supported and Effects data structure per Admin command and one Commands Supported and\nEffects data structure per I/O command based on:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 143,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2104",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34704455733299255
  },
  {
    "content": "a) the I/O Command Set selected in CC.CSS, if CC.CSS is not set to 110b; and\nb) the Command Set Identifier field in CDW 14, if CC.CSS is set to 110b.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 149,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2105",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25712284445762634
  },
  {
    "content": "**Figure 210: Commands Supported and Effects Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2106",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47797173261642456
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Admin Command Supported 0 (ACS0): Contains the Commands Supported and Effects data<br>structure (refer to Figure 211) for the Admin command with an opcode value of 0h.|\n|07:04|Admin Command Supported 1 (ACS1): Contains the Commands Supported and Effects data<br>structure (refer to Figure 211) for the Admin command with an opcode value of 1h.|\n|…|…|\n|1019:1016|Admin Command Supported 254 (ACS254): Contains the Commands Supported and Effects data<br>structure (refer to Figure 211) for the Admin command with an opcode value of 254.|\n|1023:1020|Admin Command Supported 255 (ACS255): Contains the Commands Supported and Effects data<br>structure (refer to Figure 211) for the Admin command with an opcode value of 255.|\n|1027:1024|I/O Command Supported 0 (IOCS0): Contains the Commands Supported and Effects data<br>structure (refer to Figure 211) for the I/O command with an opcode value of 0h.|\n|1031:1028|I/O Command Supported 1 (IOCS1): Contains the Commands Supported and Effects data<br>structure (refer to Figure 211) for the I/O command with an opcode value of 1h.|\n|…|…|\n|2043:2040|I/O Command Supported 254 (IOCS254): Contains the Commands Supported and Effects data<br>structure (refer to Figure 211) for the I/O command with an opcode value of 254.|\n|2047:2044|I/O Command Supported 255 (IOCS255): Contains the Commands Supported and Effects data<br>structure (refer to Figure 211) for the I/O command with an opcode value of 255.|\n|4095:2048|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1502,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2107",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6095344424247742
  },
  {
    "content": "The Commands Supported and Effects data structure describes the overall possible effect of a command,\nincluding any optional features of the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 149,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2108",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5010486245155334
  },
  {
    "content": "Host software may take command effects into account when determining how to submit commands and\nactions to take after the command is complete. It is recommended that if a command may change a\nparticular capability that host software re-enumerate and/or re-initialize the associated capability after the\ncommand is complete. For example, if a namespace capability change may occur, then host software is\nrecommended to pause the use of the associated namespace, submit the command that may cause a\nnamespace capability change and wait for its completion, and then re-issue the Identify command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 593,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2109",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.519771933555603
  },
  {
    "content": "If the namespace is attached to multiple controllers, the host(s) associated with those controllers should\ncoordinate their commands to meet the Command Submission and Execution requirements (refer to Figure\n211). The details of this coordination are outside the scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 291,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2110",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21687473356723785
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2111",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23317207396030426
  },
  {
    "content": "**Figure 211: Commands Supported and Effects Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2112",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3660619258880615
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|11:6|Reserved|\n|5|NVM Subsystem Scope: If set to ‘1’, then the command performs actions that may<br>impact the whole NVM subsystem. If cleared to ‘0’ and the CSP field is non-zero,<br>then the command performs actions that does not impact the whole NVM subsystem.|\n|4|Domain Scope: If set to ‘1’, then the command performs actions that may impact a<br>single Domain. If cleared to ‘0’ and the CSP field is non-zero, then the command<br>performs actions that does not impact a single Domain.|\n|3|Endurance Group Scope: If set to ‘1’, then the command performs actions that may<br>impact Endurance Groups. If cleared to ‘0’ and the CSP field is non-zero, then the<br>command performs actions that does not impact a single Endurance Group.|\n|2|NVM Set Scope: If set to ‘1’, then the command performs actions that may impact<br>NVM Sets. If cleared to ‘0’ and the CSP field is non-zero, then the command performs<br>actions that do not impact NVM Sets.|\n|1|Controller Scope: If set to ‘1’, then the command performs actions that may impact<br>controllers. If cleared to ‘0’ and the CSP field is non-zero, then the command<br>performs actions that do not impact controllers.|\n|0|Namespace Scope: If set to ‘1’, then the command performs actions that may impact<br>namespaces. If cleared to ‘0’ and the CSP field is non-zero, then the command<br>performs actions that do not impact namespaces.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1418,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2113",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6434642672538757
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|000b|No command submission or execution restriction|\n|001b|The command associated with this structure should only be<br>submitted when there is no other outstanding command affecting<br>the same namespace and another command should not be<br>submitted that affects the same namespace until this command<br>is complete.|\n|010b|The command associated with this structure should only be<br>submitted when there is no other outstanding command that<br>affects any namespace and another command should not be<br>submitted that affects any namespace until this command is<br>complete.|\n|011b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 633,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2114",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6040250658988953
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:20|Command Scope (CSP): This field defines the scope for the associated command. If the value<br>of this field is 0h then no scope is reported.<br>Bits Description<br>11:6 Reserved<br>NVM Subsystem Scope: If set to ‘1’, then the command performs actions that may<br>5 impact the whole NVM subsystem. If cleared to ‘0’ and the CSP field is non-zero,<br>then the command performs actions that does not impact the whole NVM subsystem.<br>Domain Scope: If set to ‘1’, then the command performs actions that may impact a<br>4 single Domain. If cleared to ‘0’ and the CSP field is non-zero, then the command<br>performs actions that does not impact a single Domain.<br>Endurance Group Scope: If set to ‘1’, then the command performs actions that may<br>3 impact Endurance Groups. If cleared to ‘0’ and the CSP field is non-zero, then the<br>command performs actions that does not impact a single Endurance Group.<br>NVM Set Scope: If set to ‘1’, then the command performs actions that may impact<br>2 NVM Sets. If cleared to ‘0’ and the CSP field is non-zero, then the command performs<br>actions that do not impact NVM Sets.<br>Controller Scope: If set to ‘1’, then the command performs actions that may impact<br>1 controllers. If cleared to ‘0’ and the CSP field is non-zero, then the command<br>performs actions that do not impact controllers.<br>Namespace Scope: If set to ‘1’, then the command performs actions that may impact<br>0 namespaces. If cleared to ‘0’ and the CSP field is non-zero, then the command<br>performs actions that do not impact namespaces.|\n|19|UUID Selection Supported: If set to ‘1’, then the controller supports selection of a UUID by this<br>command (refer to section 8.25). If cleared to ‘0’, then the controller does not support selection<br>of a UUID by this command.|\n|18:16|Command Submission and Execution (CSE): This field defines the command submission and<br>execution recommendations for the associated command.<br>Value Definition<br>000b No command submission or execution restriction<br>The command associated with this structure should only be<br>submitted when there is no other outstanding command affecting<br>001b the same namespace and another command should not be<br>submitted that affects the same namespace until this command<br>is complete.<br>The command associated with this structure should only be<br>submitted when there is no other outstanding command that<br>010b affects any namespace and another command should not be<br>submitted that affects any namespace until this command is<br>complete.<br>011b to 111b Reserved|\n|15:05|Reserved|\n|04|Controller Capability Change (CCC): If this bit is set to ‘1’, then this command may change<br>controller capabilities. If this bit is cleared to ‘0’, then this command does not modify controller<br>capabilities. Controller capability changes include a firmware update that changes the capabilities<br>reported in the CAP property.|\n|03|Namespace Inventory Change (NIC): If this bit is set to ‘1’, then this command may change the<br>number of namespaces or capabilities for multiple namespaces. If this bit is cleared to ‘0’, then<br>this command does not modify the number of namespaces or capabilities for multiple<br>namespaces. Namespace inventory changes include adding or removing namespaces.|\n|02|Namespace Capability Change (NCC): If this bit is set to ‘1’, then this command may change<br>the capabilities of a single namespace. If this bit is cleared to ‘0’, then this command does not<br>modify any namespace capabilities for the specified namespace. Namespace capability changes<br>include a logical format change.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3659,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2115",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3429221510887146
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2116",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23317207396030426
  },
  {
    "content": "**Figure 211: Commands Supported and Effects Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2117",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36541202664375305
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|01|Logical Block Content Change (LBCC): If this bit is set to ‘1’, then this command may modify<br>user data content in one or more namespaces. If this bit is cleared to ‘0’, then this command does<br>not modify user data content in any namespace. User data content changes include a write to<br>user data.<br>NOTE: This field applies to all user data content changes. The original name has been retained<br>for historical continuity.|\n|00|Command Supported (CSUPP): If this bit is set to ‘1’, then this command is supported by the<br>controller. If this bit is cleared to ‘0’, then this command is not supported by the controller and all<br>other fields in this structure shall be cleared to 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 727,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2118",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08606491982936859
  },
  {
    "content": "**5.16.1.7 Device Self-test (Log Identifier 06h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2119",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40668046474456787
  },
  {
    "content": "This log page is used to indicate:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2120",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.193963885307312
  },
  {
    "content": "a) the status of any device self-test operation in progress and the percentage complete of that\n\noperation; and\nb) the results of the last 20 device self-test operations.\n\nThe Self-test Result Data Structure contained in the Newest Self-test Result Data Structure field is always\nthe result of the last completed or aborted self-test operation. The next Self-test Result Data Structure field\nin the Device Self-test log page contains the results of the second newest self-test operation and so on. If\nfewer than 20 self-test operations have completed or been aborted, then the Device Self-test Status field\nshall be set to Fh in the unused Self-test Result Data Structure fields and all other fields in that Self-test\nResult Data Structure are ignored.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 752,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2121",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6368095278739929
  },
  {
    "content": "**Figure 212: Device Self-test Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2122",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48653629422187805
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|0h|No device self-test operation in progress|\n|1h|Short device self-test operation in progress|\n|2h|Extended device self-test operation in progress|\n|3h to Dh|Reserved|\n|Eh|Vendor specific|\n|Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 233,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2123",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6904540061950684
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Current Device Self-Test Operation: This field defines the current device self-test operation.<br>Bits 7:4 are reserved.<br>Bits 3:0 indicates the status of the current device self-test operation as defined in the following<br>table. If a device self-test operation is in process (i.e., this field is set to 1h or 2h), then the<br>controller shall not set this field to 0h until a new Self-test Result Data Structure is created (i.e.,<br>if a device self-test operation completes or is aborted, then the controller shall create a Self-test<br>Result Data Structure prior to setting this field to 0h).<br>Value Definition<br>0h No device self-test operation in progress<br>1h Short device self-test operation in progress<br>2h Extended device self-test operation in progress<br>3h to Dh Reserved<br>Eh Vendor specific<br>Fh Reserved|\n|01|Current Device Self-Test Completion: This field defines the completion status of the current<br>device self-test.<br>Bit 7 is reserved.<br>Bits 6:0 indicates the percentage of the device self-test operation that is complete (e.g., a value<br>of 25 indicates that 25% of the device self-test operation is complete and 75% remains to be<br>tested). If bits 3:0 in the Current Device Self-Test Operation field are cleared to 0h (indicating<br>there is no device self-test operation in progress), then this field is ignored.|\n|03:02|Reserved|\n|31:04|Newest Self-test Result Data Structure (refer to Figure 213)|\n|59:32|2nd newest Self-test Result Data Structure (refer to Figure 213)|\n|…|…|\n|535:508|19th newest Self-test Result Data Structure (refer to Figure 213)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1633,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2124",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21691274642944336
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2125",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19348686933517456
  },
  {
    "content": "**Figure 212: Device Self-test Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2126",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41935935616493225
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|563:536|20th newest Self-test Result Data Structure (refer to Figure 213)|\n\n**Figure 213: Self-test Result Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 154,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2127",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37066206336021423
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|0h|Reserved|\n|1h|Short device self-test operation|\n|2h|Extended device self-test operation|\n|3h to Dh|Reserved|\n|Eh|Vendor specific|\n|Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 176,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2128",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.596379280090332
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|0h|Operation completed without error|\n|1h|Operation was aborted by a Device Self-test command|\n|2h|Operation was aborted by a Controller Level Reset|\n|3h|Operation was aborted due to a removal of a namespace from the<br>namespace inventory|\n|4h|Operation was aborted due to the processing of a Format NVM command|\n|5h|A fatal error or unknown test error occurred while the controller was<br>executing the device self-test operation and the operation did not complete|\n|6h|Operation completed with a segment that failed and the segment that<br>failed is not known|\n|7h|Operation completed with one or more failed segments and the first<br>segment that failed is indicated in the Segment Number field|\n|8h|Operation was aborted for unknown reason|\n|9h|Operation was aborted due to a sanitize operation|\n|Ah to Eh|Reserved|\n|Fh|Entry not used (does not contain a test result)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 903,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2129",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5107449889183044
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Device Self-test Status: This field indicates the device self-test code and the status of the<br>operation.<br>Bits 7:4 indicates the Self-test Code value that was specified in the Device Self-test command<br>that started the device self-test operation that this Self-test Result Data Structure describes.<br>Value Definition<br>0h Reserved<br>1h Short device self-test operation<br>2h Extended device self-test operation<br>3h to Dh Reserved<br>Eh Vendor specific<br>Fh Reserved<br>Bits 3:0 indicates the result of the device self-test operation that this Self-test Result Data<br>Structure describes.<br>Value Definition<br>0h Operation completed without error<br>1h Operation was aborted by a Device Self-test command<br>2h Operation was aborted by a Controller Level Reset<br>Operation was aborted due to a removal of a namespace from the<br>3h<br>namespace inventory<br>4h Operation was aborted due to the processing of a Format NVM command<br>A fatal error or unknown test error occurred while the controller was<br>5h<br>executing the device self-test operation and the operation did not complete<br>Operation completed with a segment that failed and the segment that<br>6h<br>failed is not known<br>Operation completed with one or more failed segments and the first<br>7h<br>segment that failed is indicated in the Segment Number field<br>8h Operation was aborted for unknown reason<br>9h Operation was aborted due to a sanitize operation<br>Ah to Eh Reserved<br>Fh Entry not used (does not contain a test result)|\n|01|Segment Number: This field indicates the segment number (refer to section 8.6) where the first<br>self-test failure occurred. If Device Self-test Status field bits [3:0] are not set to 7h, then this field<br>should be ignored.|\n|02|Valid Diagnostic Information: This field indicates the diagnostic failure information that is<br>reported.<br>Bits 7:4 are reserved.<br>Bit 3 (SC Valid): If set to ‘1’, then the contents of Status Code field are valid. If cleared to ‘0’,<br>then the contents of the Status Code field are invalid.<br>Bit 2 (SCT Valid): If set to ‘1’, then the contents of the Status Code Type field are valid. If cleared<br>to ‘0’, then the contents of the Status Code Type field are invalid.<br>Bit 1 (FLBA Valid): If set to ‘1’, then the contents of the Failing LBA field are valid. If cleared to<br>‘0’, then the contents of the Failing LBA field are invalid.<br>Bit 0 (NSID Valid): If set to ‘1’, then the contents of the Namespace Identifier field are valid. If<br>cleared to ‘0’, then the contents of the Namespace Identifier field are invalid.|\n|03|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2641,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2130",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24730080366134644
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2131",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.224096417427063
  },
  {
    "content": "**Figure 213: Self-test Result Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2132",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3147156238555908
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|11:04|Power On Hours (POH): This field indicates the number of power-on hours at the time the<br>device self-test operation was completed or aborted. This does not include time that the controller<br>was powered and in a low power state condition.|\n|15:12|Namespace Identifier (NSID): This field indicates the namespace that the Failing LBA occurred<br>on. The contents of this field are valid only when the NSID Valid bit is set to ‘1’.|\n|23:16|Failing LBA: This field is I/O Command Set specific and is described in the applicable I/O<br>Command Set specification.<br>NOTE: The original field name has been retained for historical continuity.|\n|24|Status Code Type: This field may contain additional information related to errors or conditions.<br>Bits 7:3 are reserved.<br>Bits 2:0 may contain additional information relating to errors or conditions that occurred during<br>the device self-test operation represented in the same format used in the Status Code Type field<br>of the completion queue entry (refer to Figure 93). The contents of this field are valid only when<br>the SCT Valid bit is set to ‘1’.|\n|25|Status Code: This field may contain additional information relating to errors or conditions that<br>occurred during the device self-test operation represented in the same format used in the Status<br>Code field of the completion queue entry (refer to section 3.3.3.2.1). The contents of this field<br>are valid only when the SC Valid bit is set to ‘1’.|\n|27:26|Vendor Specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1525,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2133",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30771368741989136
  },
  {
    "content": "**5.16.1.8 Telemetry Host-Initiated (Log Identifier 07h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2134",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.628231942653656
  },
  {
    "content": "This log consists of a header describing the log and zero or more Telemetry Data Blocks (refer to section\n8.24). All Telemetry Data Blocks are 512 bytes in size. The controller shall initiate a capture of the\ncontroller’s internal controller state to this log if the controller processes a Get Log Page command for this\nlog with the Create Telemetry Host-Initiated Data bit set to ‘1’ in the Log Specific Parameter field. If the host\nspecifies a Log Page Offset Lower value that is not a multiple of 512 bytes in the Get Log Page command\nfor this log, then the controller shall abort the command with a status code of Invalid Field in Command.\nThis log page is global to the controller or global to the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 717,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2135",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5513373613357544
  },
  {
    "content": "The Log Specific Parameter field in Command Dword 10 (refer to Figure 197) for this log page is defined\nin Figure 214.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2136",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6591275930404663
  },
  {
    "content": "**Figure 214: Telemetry Host-Initiated Log Specific Parameter Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2137",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6631834506988525
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|14:09|Reserved|\n|08|Create Telemetry Host-Initiated Data: If set to ‘1’, then the controller shall capture the Telemetry<br>Host-Initiated Data representing the internal state of the controller at the time the associated Get<br>Log Page command is processed. If cleared to ‘0’, then the controller shall not update the<br>Telemetry Host-Initiated Data. The Host-Initiated Data shall not change until the controller<br>processes:<br>a) a subsequent Telemetry Host-Initiated Log with this bit set to ‘1’;<br>b) a Firmware Commit command; or<br>c) a power on reset.|\n\nThe Telemetry Host-Initiated Data consists of:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 641,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2138",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.681872546672821
  },
  {
    "content": "a) Three areas, if bit 6 of the Log Page Attributes field is cleared to ‘0’: Telemetry Host-Initiated Data\n\nArea 1, Telemetry Host-Initiated Data Area 2, and Telemetry Host-Initiated Data Area 3; or\nb) Four areas, if bit 6 of the Log Page Attributes field is set to ‘1’: Telemetry Host-Initiated Data Area",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 305,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2139",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6134060025215149
  },
  {
    "content": "1, Telemetry Host-Initiated Data Area 2, Telemetry Host-Initiated Data Area 3 and Telemetry HostInitiated Data Area 4.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2140",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0888456255197525
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2141",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10148854553699493
  },
  {
    "content": "All areas start at Telemetry Host-Initiated Data Area Block 1. The last block of each area is indicated in\nTelemetry Host-Initiated Data Area *y* Last Block, respectively. The telemetry data captured and its size is\nimplementation dependent.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 241,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2142",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27274903655052185
  },
  {
    "content": "The size of the log page is variable and:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2143",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6562623381614685
  },
  {
    "content": "- If bit 6 is cleared to ‘0’ in the Log Page Attributes field, the size may be calculated using the\nTelemetry Host-Initiated Data Area 3 Last Block field.\n\n- If bit 6 of the Log Page Attributes field is set to ‘1’ and the Extended Telemetry Data Area 4\nSupported (ETDAS) field is set to 1h in the Host Behavior Support feature (refer to section\n5.21.1.22), then the size of the log page may be calculated using the Telemetry Host-Initiated Data\nArea 4 Last Block field.\n\n- If bit 6 of the Log Page Attributes field is set to ‘1’ and the Extended Telemetry Data Area 4\nSupported (ETDAS) field is cleared to 0h in the Host Behavior Support feature (refer to section\n5.21.1.22), then the size of the log page may be calculated using the Telemetry Host-Initiated Data\nArea 3 Last Block field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 788,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2144",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1724640280008316
  },
  {
    "content": "The controller shall return data for all blocks requested:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2145",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32452327013015747
  },
  {
    "content": "- If bit 6 of the Log Page Attributes field is cleared to ‘0’, then the data beyond the last block in\nTelemetry Host-Initiated Data Area 3 Last Block is undefined.\n\n- If bit 6 of the Log Page Attributes field is set to ‘1’ and the Extended Telemetry Data Area 4\nSupported (ETDAS) field is set to 1h in the Host Behavior Support feature, then the data beyond\nthe last block in Telemetry Host-Initiated Data Area 4 Last Block is undefined.\n\n- If bit 6 of the Log Page Attributes field is set to ‘1’ and the Extended Telemetry Data Area 4\nSupported (ETDAS) field is cleared to 0h in the Host Behavior Support feature, then the data\nbeyond the last block in Telemetry Host-Initiated Data Area 3 Last Block is undefined.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 715,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2146",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2748023569583893
  },
  {
    "content": "If the host requests a data transfer that is not a multiple of 512 bytes, then the controller shall return an\nerror of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 144,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2147",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1685790717601776
  },
  {
    "content": "**Figure 215: Telemetry Host-Initiated Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2148",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6326094269752502
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Log Identifier: This field shall be set to 07h.|\n|04:01|Reserved|\n|07:05|IEEE OUI Identifier (IEEE): Contains the Organization Unique Identifier (OUI) for the<br>controller vendor that is able to interpret the data. If cleared to 0h, no IEEE OUI Identifier<br>is present. The OUI shall be a valid IEEE/RAC assigned identifier that is registered at<br>http://standards.ieee.org/develop/regauth/oui/public.html.|\n|09:08|Telemetry Host-Initiated Data Area 1 Last Block: Contains the value of the last block<br>of Telemetry Host-Initiated Data Area 1. If the Telemetry Host-Initiated Data Area 1 does<br>not contain data, then this field shall be cleared to 0h.<br>If this field is not 0h, then Telemetry Host-Initiated Data Area 1 begins at block 1h and<br>ends at the block indicated in this field.|\n|11:10|Telemetry Host-Initiated Data Area 2 Last Block: Contains the value of the last block<br>of Telemetry Host-Initiated Data Area 2. This value shall be greater than or equal to the<br>value in the Telemetry Host-Initiated Data Area 1 Last Block field.<br>If this field is not 0h, then Telemetry Host-Initiated Data Area 2 begins at block 1h and<br>ends at the block indicated in this field.|\n|13:12|Telemetry Host-Initiated Data Area 3 Last Block: Contains the value of the last block<br>of Telemetry Host-Initiated Data Area 3. This value shall be greater than or equal to the<br>value in the Telemetry Host-Initiated Data Area 2 Last Block field.<br>If this field is not 0h, then Telemetry Host-Initiated Data Area 3 begins at block 1h and<br>ends at the block contained in this field.|\n|15:14|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1642,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2149",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1450960636138916
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2150",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13522078096866608
  },
  {
    "content": "**Figure 215: Telemetry Host-Initiated Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2151",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7184140086174011
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|19:16|Telemetry Host-Initiated Data Area 4 Last Block: Contains the value of the last block<br>of Telemetry Host-Initiated Data Area 4. If bit 6 of the Log Page Attributes field is set to<br>‘1’, then this value shall be greater than or equal to the value in the Telemetry Host-<br>Initiated Data Area 3 Last Block field.<br>If this field is not 0h, then Telemetry Host-Initiated Data Area 4 begins at block 1h and<br>ends at the block contained in this field.|\n|380:20|Reserved|\n|381|Telemetry Host-Initiated Data Generation Number: Contains a value that is<br>incremented each time the controller captures its internal controller state for this log page.<br>If the value of this field is FFh, then the field shall be cleared to 0h when incremented (i.e.,<br>rolls over to 0h).|\n|382|Telemetry Controller-Initiated Data Available: Contains the value of Telemetry<br>Controller-Initiated Data Available field in the Telemetry Controller-Initiated log (refer to<br>Figure 216).|\n|383|Telemetry Controller-Initiated Data Generation Number: Contains the value of the<br>Telemetry Controller-Initiated Data Generation Number field in the Telemetry Controller-<br>Initiated log (refer to Figure 216).|\n|511:384|Reason Identifier: Contains a vendor specific identifier that describes the operating<br>conditions of the controller at the time of capture. The Reason Identifier field should<br>provide an identification of unique operating conditions of the controller.|\n|1023:512|Telemetry Host-Initiated Data Block 1: Contains Telemetry Data Block 1 for the<br>Telemetry Host-Initiated Log.|\n|1535:1024|Telemetry Host-Initiated Data Block 2: Contains Telemetry Data Block 2 for the<br>Telemetry Host-Initiated Log.|\n|…|…|\n|(n*512)+511:(n*512)|Telemetry Host-Initiated Data Block n: Contains Telemetry Data Block n for the<br>Telemetry Host-Initiated Log.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1880,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2152",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6366118788719177
  },
  {
    "content": "**5.16.1.9 Telemetry Controller-Initiated (Log Identifier 08h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2153",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.662266731262207
  },
  {
    "content": "This log consists of a header describing the log and zero or more Telemetry Data Blocks (refer to section\n8.23). All Telemetry Data Blocks are 512 bytes in size. This log is a controller initiated capture of the\ncontroller’s internal state. The Telemetry Controller-Initiated Data for Data Area 1 through Data Area 3 shall\npersist across all resets. The Telemetry Controller-Initiated Data for Data Area 4 may persist across\ncontroller resets. If the host specifies a Log Page Offset Lower value that is not a multiple of 512 bytes in\nthe Get Log Page command for this log, then the controller shall return an error of Invalid Field in Command.\nThis log page is global to the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 687,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2154",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.648106575012207
  },
  {
    "content": "The Telemetry Controller-Initiated Data consists of:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2155",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5779341459274292
  },
  {
    "content": "a) three areas, if bit 6 of the Log Page Attributes field is cleared to ‘0’: Telemetry Controller-Initiated\n\nData Area 1, Telemetry Controller-Initiated Data Area 2, and Telemetry Controller-Initiated Data\nArea 3; or\nb) four areas, if bit 6 of the Log Page Attributes field is set to ‘1’: Telemetry Controller-Initiated Data",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 324,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2156",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6171033978462219
  },
  {
    "content": "Area 1, Telemetry Controller-Initiated Data Area 2, Telemetry Controller-Initiated Data Area 3 and\nTelemetry Controller-Initiated Data Area 4.\n\nAll areas start at Telemetry Controller-Initiated Data Area Block 1. The last block of each area is indicated\nin the Telemetry Controller-Initiated Data Area y Last Block, respectively. The telemetry data captured and\nits size is implementation dependent.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 399,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2157",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1679428517818451
  },
  {
    "content": "The size of the log page is variable and:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2158",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6393334865570068
  },
  {
    "content": "- If bit 6 is cleared to ‘0’ in the Log Page Attributes field, the size may be calculated using the\nTelemetry Controller-Initiated Data Area 3 Last Block field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 160,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2159",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6591179370880127
  },
  {
    "content": "- If bit 6 of the Log Page Attributes field is set to ‘1’ and the Extended Telemetry Data Area 4\nSupported (ETDAS) field is set to 1h in the Host Behavior Support feature (refer to section",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 188,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2160",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12825271487236023
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2161",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06545837223529816
  },
  {
    "content": "5.27.1.18), then the size of the log page may be calculated using the Telemetry Controller-Initiated\nData Area 4 Last Block field.\n\n- If bit 6 of the Log Page Attributes field is set to ‘1’ and the Extended Telemetry Data Area 4\nSupported (ETDAS) field is cleared to 0h in the Host Behavior Support feature (refer to section\n5.27.1.18), then the size of the log page may be calculated using the Telemetry Controller-Initiated\nData Area 3 Last Block field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 455,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2162",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21007350087165833
  },
  {
    "content": "The controller shall return data for all blocks requested:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2163",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38098040223121643
  },
  {
    "content": "- If bit 6 of the Log Page Attributes field is cleared to ‘0’, then the data beyond the last block in\nTelemetry Controller-Initiated Data Area 3 Last Block is undefined.\n\n- If bit 6 of the Log Page Attributes field is set to ‘1’, then the data beyond the last block in Telemetry\nController-Initiated Data Area 4 Last Block is undefined.\n\n- If bit 6 of the Log Page Attributes field is set to ‘1’ and the Extended Telemetry Data Area 4\nSupported (ETDAS) field is cleared to 0h in the Host Behavior Support feature, then the data\nbeyond the last block in Telemetry Controller-Initiated Data Area 3 Last Block is undefined.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 620,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2164",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28528282046318054
  },
  {
    "content": "If the host requests a data transfer that is not a multiple of 512 bytes, then the controller shall abort the\ncommand with the status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2165",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20276810228824615
  },
  {
    "content": "**Figure 216: Telemetry Controller-Initiated Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2166",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6436197757720947
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Log Identifier: This field shall be set to 08h.|\n|04:01|Reserved|\n|07:05|IEEE OUI Identifier (IEEE): Contains the Organization Unique Identifier (OUI) for the<br>controller vendor that is able to interpret the data. If cleared to 0h, no IEEE OUI Identifier<br>is present. The OUI shall be a valid IEEE/RAC assigned identifier that is registered at<br>http://standards.ieee.org/develop/regauth/oui/public.html.|\n|09:08|Telemetry Controller-Initiated Data Area 1 Last Block: Contains the value of the last<br>block of Telemetry Controller-Initiated Data Area 1. If the Telemetry Controller-Initiated<br>Data Area 1 does not contain data, then this field shall be cleared to 0h.<br>If this field is not 0h, then Telemetry Controller-Initiated Data Area 1 begins at block 1<br>and ends at the block indicated in this field.|\n|11:10|Telemetry Controller-Initiated Data Area 2 Last Block: Contains the value of the last<br>block of Telemetry Controller-Initiated Data Area 2. This value shall be greater than or<br>equal to the value in the Telemetry Controller-Initiated Data Area 1 Last Block field.<br>If this field is not 0h, then Telemetry Controller-Initiated Data Area 2 begins at block 1h<br>and ends at the block indicated in this field.|\n|13:12|Telemetry Controller-Initiated Data Area 3 Last Block: Contains the value of the last<br>block of Telemetry Controller-Initiated Data Area 3. This value shall be greater than or<br>equal to the value in the Telemetry Controller-Initiated Data Area 2 Last Block field.<br>If this field is not 0h, then Telemetry Controller-Initiated Data Area 3 begins at block 1h<br>and ends at the block indicated in this field.|\n|15:14|Reserved|\n|19:16|Telemetry Controller-Initiated Data Area 4 Last Block: Contains the value of the last<br>block of Telemetry Controller-Initiated Data Area 4. If bit 6 of the Log Page Attributes<br>field is set to ‘1’, then this value shall be greater than or equal to the value in the<br>Telemetry Controller-Initiated Data Area 3 Last Block field.<br>If this field is not 0h, then Telemetry Controller-Initiated Data Area 4 begins at block 1h<br>and ends at the block contained in this field.|\n|381:20|Reserved|\n|382|Telemetry Controller-Initiated Data Available: If this field is cleared to 0h, the log does<br>not contain saved internal controller state. If this field is set to 1h, the log contains saved<br>internal controller state. If this field is set to 1h, it shall not be cleared to 0h until a Get<br>Log Page command with Retain Asynchronous Event bit cleared to ‘0’ for the Telemetry<br>Controller-Initiated log completes successfully. This value is persistent across power<br>states and reset.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2713,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2167",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13145241141319275
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2168",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09730314463376999
  },
  {
    "content": "**Figure 216: Telemetry Controller-Initiated Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2169",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5793602466583252
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n||Other values are reserved.|\n|383|Telemetry Controller-Initiated Data Generation Number: Contains a value that is<br>incremented each time the controller initiates a capture of its internal controller state into<br>the Telemetry Controller-Initiated Data Blocks. If the value of this field is FFh, then the<br>field shall be cleared to 0h when incremented (i.e., rolls over to 0h). This field is persistent<br>across power cycles.|\n|511:384|Reason Identifier: Contains a vendor specific identifier that describes the operating<br>conditions of the controller at the time of capture. The Controller-Initiated Reason<br>Identifier field should provide an identification of unique operating conditions of the<br>controller.|\n|1023:512|Telemetry Controller-Initiated Data Block 1: Contains Telemetry Data Block 1 for the<br>Telemetry Controller -Initiated Log captured at a vendor specific time.|\n|1535:1024|Telemetry Controller-Initiated Data Block 2: Contains Telemetry Data Block 2 for the<br>Telemetry Controller -Initiated Log captured at a vendor specific time.|\n|…|…|\n|(n*512)+511:(n*512)|Telemetry Controller-Initiated Data Block n: Contains Telemetry Data Block n for the<br>Telemetry Controller-Initiated log captured at a vendor specific time.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1282,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2170",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26941803097724915
  },
  {
    "content": "**5.16.1.10 Endurance Group Information (Log Identifier 09h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2171",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6442041993141174
  },
  {
    "content": "This log page is used to provide endurance information based on the Endurance Group (refer to section\n3.2.3). An Endurance Group contains capacity that may be allocated to zero or more NVM Sets. Capacity\nthat has not been allocated to an NVM Set is unallocated Endurance Group capacity. The information\nprovided is over the life of the Endurance Group. The Endurance Group Identifier is specified in the Log\nSpecific Identifier field in Command Dword 11 of the Get Log Page command. The log page is 512 bytes\nin size.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 517,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2172",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6587416529655457
  },
  {
    "content": "**Figure 217: Endurance Group Information Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2173",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.50742107629776
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Critical Warning: This field indicates critical warnings for the state of the Endurance Group. Each<br>bit corresponds to a critical warning type; multiple bits may be set to ‘1’. If a bit is cleared to ‘0’,<br>then that critical warning does not apply. Critical warnings may result in an asynchronous event<br>notification to the host. Bits in this field represent the state at the time the Get Log Page command<br>is processed and may not reflect the state at the time a related asynchronous event notification,<br>if any, occurs or occurred.<br>If a bit is set to ‘1’ in all Endurance Groups in the NVM subsystem, then the corresponding bit<br>shall be set to ‘1’ in the Critical Warning field of the SMART / Health Information log page (refer<br>to Figure 207).<br>Bits Definition<br>7:4 Reserved<br>If set to ‘1’, then all namespaces in the Endurance Group have been placed in<br>read only mode for reasons other than a change in the write protect state of the<br>3 namespace. The controller shall not set this bit to '1' if the read-only condition on<br>the Endurance Group is a result of a change in the write protection state of all<br>namespaces in the Endurance Group.<br>If set to ‘1’, then the Endurance Group reliability has been degraded due to<br>2 significant media related errors or any internal error that degrades NVM<br>subsystem reliability.<br>1 Reserved<br>If set to ‘1’, then the available spare capacity of the Endurance Group has fallen<br>0<br>below the threshold.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1526,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2174",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6165422797203064
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|7:4|Reserved|\n|3|If set to ‘1’, then all namespaces in the Endurance Group have been placed in<br>read only mode for reasons other than a change in the write protect state of the<br>namespace. The controller shall not set this bit to '1' if the read-only condition on<br>the Endurance Group is a result of a change in the write protection state of all<br>namespaces in the Endurance Group.|\n|2|If set to ‘1’, then the Endurance Group reliability has been degraded due to<br>significant media related errors or any internal error that degrades NVM<br>subsystem reliability.|\n|1|Reserved|\n|0|If set to ‘1’, then the available spare capacity of the Endurance Group has fallen<br>below the threshold.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 726,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2175",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3373645544052124
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2176",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23530593514442444
  },
  {
    "content": "**Figure 217: Endurance Group Information Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2177",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3299913704395294
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|7:1|Reserved|\n|0|Endurance Group Media (EGRMEDIA): If set to ‘1’ indicates that the<br>Endurance Group stores data on rotational media (refer to section 8.20). If<br>cleared to ‘0’, then the Endurance Group does not store data on rotational<br>media.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 280,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2178",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5844159722328186
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01|Endurance Group Features (EGFEAT): This field defines features of the Endurance Group.<br>Bits Definition<br>7:1 Reserved<br>Endurance Group Media (EGRMEDIA): If set to ‘1’ indicates that the<br>Endurance Group stores data on rotational media (refer to section 8.20). If<br>0<br>cleared to ‘0’, then the Endurance Group does not store data on rotational<br>media.|\n|02|Reserved|\n|03|Available Spare: Contains a normalized percentage (0% to 100%) of the remaining spare<br>capacity available for the Endurance Group.|\n|04|Available Spare Threshold: If the Available Spare falls below the threshold indicated in this field,<br>an asynchronous event completion may occur. The value is indicated as a normalized percentage<br>(0% to 100%). The values 101 to 255 are reserved.|\n|05|Percentage Used: Contains a vendor specific estimate of the percentage of life used for the<br>Endurance Group based on the actual usage and the manufacturer’s prediction of NVM life. A<br>value of 100 indicates that the estimated endurance of the NVM in the Endurance Group has<br>been consumed, but may not indicate an NVM failure. The value is allowed to exceed 100.<br>Percentages greater than 254 shall be represented as 255. This value shall be updated once per<br>power-on hour when the controller is not in a sleep state.<br>Refer to the JEDEC JESD218A standard for SSD device life and endurance measurement<br>techniques.|\n|07:06|Domain Identifier: This field indicates the identifier of the domain that contains this Endurance<br>Group. If the NVM subsystem supports multiple domains, this field shall be set to a non-zero<br>value. If cleared to 0h, the NVM subsystem does not support multiple domains.|\n|31:08|Reserved|\n|47:32|Endurance Estimate: This field is an estimate of the total number of data bytes that may be<br>written to the Endurance Group over the lifetime of the Endurance Group assuming a write<br>amplification of 1 (i.e., no increase in the number of write operations performed by the device<br>beyond the number of write operations requested by a host). This value is reported in billions (i.e.,<br>a value of 1 corresponds to 1,000,000,000 bytes written) and is rounded up (e.g., one indicates<br>the number of bytes written is from 1 to 1,000,000,000, three indicates the number of bytes written<br>is from 2,000,000,001 to 3,000,000,000).<br>A value of 0h indicates that the controller does not report an Endurance Estimate.|\n|63:48|Data Units Read: Contains the total number of data bytes that have been read from the<br>Endurance Group. This value does not include controller reads due to internal operations such<br>as garbage collection. This value is reported in billions (i.e., a value of 1 corresponds to<br>1,000,000,000 bytes read) and is rounded up (e.g., one indicates the number of bytes read is<br>from 1 to 1,000,000,000, three indicates the number of bytes read is from 2,000,000,001 to<br>3,000,000,000).<br>A value of 0h indicates that the controller does not report the number of Data Units Read.|\n|79:64|Data Units Written: Contains the total number of data bytes that have been written to the<br>Endurance Group. This value does not include controller writes due to internal operations such<br>as garbage collection. This value is reported in billions (i.e., a value of 1 corresponds to<br>1,000,000,000 bytes written) and is rounded up (e.g., one indicates the number of bytes written<br>is from 1 to 1,000,000,000, three indicates the number of bytes written is from 2,000,000,001 to<br>3,000,000,000).<br>A value of 0h indicates that the controller does not report the number of Data Units Written.|\n|95:80|Media Units Written: Contains the total number of data bytes that have been written to the<br>Endurance Group including both host and controller writes (e.g., garbage collection). This value<br>is reported in billions (i.e., a value of 1 corresponds to 1,000,000,000 bytes written) and is rounded<br>up (e.g., one indicates the number of bytes written is from 1 to 1,000,000,000, three indicates the<br>number of bytes written is from 2,000,000,001 to 3,000,000,000).<br>A value of 0h indicates that controller does not report the number of Media Units Written.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 4237,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2179",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16031746566295624
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2180",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23530593514442444
  },
  {
    "content": "**Figure 217: Endurance Group Information Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2181",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.543847382068634
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|111:96|Host Read Commands: Contains the number of Endurance Group Host Read Commands<br>completed by the controller.<br>Refer to the specific I/O Command Set specification for the list of Endurance Group Host Read<br>Commands that affect this field.|\n|127:112|Host Write Commands: Contains the number of User Data Out Commands completed by the<br>controller.<br>Refer to the specific I/O Command Set specification for the list of User Data Out Commands that<br>affect this field.|\n|143:128|Media and Data Integrity Errors: Contains the number of occurrences where the controller<br>detected an unrecovered data integrity error for the Endurance Group. Errors such as<br>uncorrectable ECC, CRC checksum failure, or LBA tag mismatch are included in this field.|\n|159:144|Number of Error Information Log Entries: Contains the number of Error Information Log<br>Entries over the life of the controller for the Endurance Group.|\n|175:160|Total Endurance Group Capacity (TEGCAP): This field indicates the total NVM capacity in this<br>Endurance Group. The value is in bytes. If this field is cleared to 0h, the NVM subsystem does<br>not report the total NVM capacity in this Endurance Group.|\n|191:176|Unallocated Endurance Group Capacity (UEGCAP): This field indicates the unallocated NVM<br>capacity in this Endurance Group. The value is in bytes. If this field is cleared to 0h, the NVM<br>subsystem does not report the unallocated NVM capacity in this Endurance Group.|\n|511:192|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1517,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2182",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2375834435224533
  },
  {
    "content": "**5.16.1.11 Predictable Latency Per NVM Set (Log Identifier 0Ah)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2183",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6191648840904236
  },
  {
    "content": "This log page may be used to determine the current window for the specified NVM Set when Predictable\nLatency Mode is enabled and any events that have occurred for the specified NVM Set. There is one log\npage for each NVM Set when Predictable Latency Mode is supported. Command Dword 11 (refer to Figure\n198) specifies the NVM Set for which the log page is to be returned. The log page is 512 bytes in size.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 406,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2184",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6856803297996521
  },
  {
    "content": "The log page indicates typical values and reliable estimates for attributes associated with the Deterministic\nWindow and the Non-Deterministic Window of the specified NVM Set. The Typical, Maximum, and Minimum\nvalues are static and worst-case values over the lifetime of the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2185",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.430924654006958
  },
  {
    "content": "After the controller successfully completes a read of this log page with Retain Asynchronous Event bit\ncleared to ‘0’, then reported events are cleared to ‘0’ for the specified NVM Set and the field corresponding\nto the specified NVM Set is cleared to ‘0’ in the Predictable Latency Event Aggregate log page. Coordination between two or more hosts is beyond the scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 390,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2186",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5913384556770325
  },
  {
    "content": "**Figure 218: Predictable Latency Per NVM Set Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2187",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6043413877487183
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Status: This field indicates the status of the specified NVM Set.<br>Bits 7:3 are reserved.<br>Bits 2:0 indicate the window for the NVM Set when Predictable Latency Mode is enabled.<br>Value Definition<br>000b Not used (Predictable Latency Mode not enabled)<br>001b Deterministic Window (DTWIN)<br>010b Non-Deterministic Window (NDWIN)<br>011b to 111b Reserved|\n|01|Reserved|\n\n|Value|Definition|\n|---|---|\n|000b|Not used (Predictable Latency Mode not enabled)|\n|001b|Deterministic Window (DTWIN)|\n|010b|Non-Deterministic Window (NDWIN)|\n|011b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 594,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2188",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3875882625579834
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2189",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3870333433151245
  },
  {
    "content": "**Figure 218: Predictable Latency Per NVM Set Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2190",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36159008741378784
  },
  {
    "content": "|Bit|Description|\n|---|---|\n|00|DTWIN Reads Warning|\n|01|DTWIN Writes Warning|\n|02|DTWIN Time Warning|\n|03 to 13|Reserved|\n|14|Autonomous transition from DTWIN to NDWIN due to typical or maximum<br>value exceeded|\n|15|Autonomous transition from DTWIN to NDWIN due to Deterministic Excursion|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 291,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2191",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6874202489852905
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:02|Event Type: This field specifies the event(s) that occurred for the NVM Set indicated. Multiple<br>bits may be set to ‘1’. All bits are cleared to ‘0’ after the log page is read with Retain Asynchronous<br>Event bit cleared to ‘0’.<br>Bit Description<br>00 DTWIN Reads Warning<br>01 DTWIN Writes Warning<br>02 DTWIN Time Warning<br>03 to 13 Reserved<br>Autonomous transition from DTWIN to NDWIN due to typical or maximum<br>14<br>value exceeded<br>15 Autonomous transition from DTWIN to NDWIN due to Deterministic Excursion|\n|31:04|Reserved|\n|Typical, Maximum, and Minimum Values|Typical, Maximum, and Minimum Values|\n|39:32|DTWIN Reads Typical: Indicates the typical number of 4 KiB random reads that may be<br>performed in the Deterministic Window. Refer to section 8.16.|\n|47:40|DTWIN Writes Typical: Indicates the typical number of writes in units of the Optimal Write Size<br>that may be performed in the Deterministic Window. Refer to section 8.16.|\n|55:48|DTWIN Time Maximum: Indicates the maximum time in milliseconds that the NVM Set is able to<br>remain in a Deterministic Window before entering a Non-Deterministic Window. Refer to section<br>8.16.|\n|63:56|NDWIN Time Minimum High: Indicates the minimum time in milliseconds that the NVM Set<br>needs to remain in the Non-Deterministic Window before entering a Deterministic Window. This<br>is the time necessary to prepare for remaining in the Deterministic Window for DTWIN Time<br>Maximum. Refer to section 8.16.|\n|71:64|NDWIN Time Minimum Low: Indicates the minimum time in milliseconds that the NVM Set needs<br>to remain in the Non-Deterministic Window before entering a Deterministic Window. This is<br>regardless of the amount of time spent in the previous Deterministic Window. Refer to section<br>8.16.|\n|127:72|Reserved|\n|Reliable Estimates|Reliable Estimates|\n|135:128|DTWIN Reads Estimate: Indicates a reliable estimate of the number of 4 KiB random reads<br>remaining in the current Deterministic Window, if applicable. This value decrements from DTWIN<br>Reads Typical to 0h based on host read activity and operating conditions. Refer to section 8.16.1.|\n|143:136|DTWIN Writes Estimate: Indicates a reliable estimate of the number of writes in units of the<br>Optimal Write Size remaining in the current Deterministic Window, if applicable. This value<br>decrements from DTWIN Writes Typical to 0h based on host write activity and operating<br>conditions. Refer to section 8.16.1.|\n|151:144|DTWIN Time Estimate: Indicates a reliable estimate of the time in milliseconds remaining in the<br>current Deterministic Window, if applicable. Refer to section 8.16.1.|\n|511:152|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2692,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2192",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4053537845611572
  },
  {
    "content": "**5.16.1.12 Predictable Latency Event Aggregate (Log Identifier 0Bh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2193",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6332204937934875
  },
  {
    "content": "This log page indicates if a Predictable Latency Event (refer to section 8.16) has occurred for a particular\nNVM Set. If a Predictable Latency Event has occurred, the details of the particular event are included in the\nPredictable Latency Per NVM Set log page for that NVM Set. An asynchronous event is generated when\nan entry for an NVM Set is newly added to this log page.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 374,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2194",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4196324944496155
  },
  {
    "content": "This log page shall not contain an entry (i.e., an NVM Set Identifier) that is cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2195",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4931164085865021
  },
  {
    "content": "If there is an enabled Predictable Latency Event pending for an NVM Set, then the Predictable Latency\nEvent Aggregate log page includes an entry for that NVM Set. The log page is an ordered list by NVM Set\nIdentifier. For example, if Predictable Latency Events are pending for NVM Set 27, 13, and 17, then the log\npage shall have entries in numerical order of 13, 17, and 27. A particular NVM Set is removed from this log\npage after the Get Log Page command is completed successfully with the Retain Asynchronous Event bit\ncleared to ‘0’ for the Predictable Latency Per NVM Set log page for that NVM Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 604,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2196",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3125975430011749
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2197",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35301628708839417
  },
  {
    "content": "The log page size is limited by the NVM Set Identifier Maximum value reported in the Identify Controller\ndata structure (refer to Figure 275). If the host reads beyond the end of the log page, zeroes are returned.\nThe log page is defined in Figure 219.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 252,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2198",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2932490408420563
  },
  {
    "content": "**Figure 219: Predictable Latency Event Aggregate Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2199",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3336937725543976
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Number of Entries: This field indicates the number of entries in the list. The maximum number<br>of entries in the list corresponds to the NVM Set Identifier Maximum field reported in the Identify<br>Controller data structure. A value of 0h indicates there are no entries in the list.|\n|09:08|Entry 1: Indicates the NVM Set that has a Predictable Latency Event pending that has the<br>numerically smallest NVM Set Identifier.|\n|11:10|Entry 2: Indicates the NVM Set that has a Predictable Latency Event pending that has the second<br>numerically smallest NVM Set Identifier, if any.|\n|13:12|Entry 3: Indicates the NVM Set that has a Predictable Latency Event pending that has the third<br>numerically smallest NVM Set Identifier, if any.|\n|15:14|Entry 4: Indicates the NVM Set that has a Predictable Latency Event pending that has the fourth<br>numerically smallest NVM Set Identifier, if any.|\n|…|…|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 936,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2200",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09624221920967102
  },
  {
    "content": "**5.16.1.13 Asymmetric Namespace Access (Log Identifier 0Ch)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2201",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5737627148628235
  },
  {
    "content": "This log consists of a header describing the log and descriptors containing the asymmetric namespace\naccess information for ANA Groups (refer to section 8.1.2) that contain namespaces that are attached to\nthe controller processing the command. If ANA Reporting (refer to section 8.1) is supported, this log page\nis supported. ANA Group Descriptors shall be returned in ascending ANA Group Identifier order.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 406,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2202",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2425987273454666
  },
  {
    "content": "If the Index Offset Supported bit is cleared to ‘0’ in the LID Support and Effects data structure for this log\npage (refer to Figure 204), then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 144,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2203",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33760955929756165
  },
  {
    "content": "- if the RGO bit is cleared to ‘0’ in Command Dword 10, then the LPOL field in Command Dword 12\nand the LPOU field in Command Dword 13 of the Get Log Page command should be cleared to\n0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 187,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2204",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3117086887359619
  },
  {
    "content": "If the Index Offset Supported bit is set to ‘1’ in the LID Supported and Effects data structure for this log page\n(refer to Figure 204), then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 142,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2205",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5016929507255554
  },
  {
    "content": "- the entry data structure that is indexed is an ANA Group Descriptor (e.g., specifying an index offset\nof 2 returns this log page starting at the offset of ANA Group Descriptor 1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 181,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2206",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3947400152683258
  },
  {
    "content": "If the host performs multiple Get Log Page commands to read the ANA log page (e.g., using the LPOL field\nor the LPOU field), the host should re-read the header of the log page and ensure that the Change Count\nfield in the Asymmetric Namespace Access log matches the original value read. If it does not match, then\nthe data captured is not consistent and the ANA log page should be re-read.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 389,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2207",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3952499330043793
  },
  {
    "content": "The Log Specific Parameter field in Command Dword 10 (refer to Figure 197) for this log page is defined\nin Figure 220.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2208",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.627639651298523
  },
  {
    "content": "**Figure 220: Asymmetric Namespace Access Log Specific Parameter Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2209",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3082325756549835
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|14:09|Reserved|\n|08|Return Groups Only (RGO): If set to ‘1’, then the controller shall return ANA Group Descriptors<br>with the Number of NSID Values field in each ANA Group Descriptor cleared to 0h (i.e., no<br>Namespace Identifiers are returned). If cleared to ‘0’, then the controller shall return ANA Group<br>Descriptors that contain the Namespace Identifiers of attached namespaces that are members of<br>the ANA Group described by that ANA Group Descriptor and the Number of NSID Values field<br>set to the number of Namespace Identifier values in that ANA Group Descriptor.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 612,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2210",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24664506316184998
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2211",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17908626794815063
  },
  {
    "content": "**Figure 221: Asymmetric Namespace Access Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2212",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5887064337730408
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Change Count: This field contains a 64-bit incrementing Asymmetric Namespace Access log<br>change count, indicating an identifier for this set of asymmetric namespace access information.<br>The count starts at 0h following a Controller Level Reset and is incremented each time the<br>contents of the log page change (e.g., not only if an Asymmetric Namespace Access Change<br>Asynchronous Event Notification is generated). If the value of this field is<br>FFFFFFFF_FFFFFFFFh, then the field shall be cleared to 0h when incremented (i.e., rolls over<br>to 0h).|\n|09:08|Number of ANA Group Descriptors: This field indicates the number of ANA Group Descriptors<br>available in the log page. The log page shall contain one ANA Group Descriptor for each ANA<br>Group that contains namespaces that are attached to the controller.<br>If, for an ANA Group, there are no namespaces attached to the controller processing the<br>command, then no ANA Group Descriptor is returned for that ANA Group (i.e., an ANA Group<br>Descriptor is returned only if that ANA Group contains namespaces that are attached to the<br>controller processing the command.<br>If no namespaces are attached to the controller, then the log page does not contain any ANA<br>Group Descriptors and this field is cleared to 0h.|\n|15:10|Reserved|\n|n:16|ANA Group Descriptor 0, if any|\n|m:n+1|ANA Group Descriptor 1, if any|\n|…|…|\n|x:y|ANA Group Descriptor n, if any|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1462,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2213",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19519542157649994
  },
  {
    "content": "The format of the ANA Group Descriptor is defined in Figure 222. Namespace Identifiers shall be listed in\nascending NSID order.\n\n**Figure 222: ANA Group Descriptor format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 172,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2214",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5746997594833374
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|ANA Group ID: The ANA Group Identifier associated with all namespaces in the ANA Group<br>(refer to section 8.1.2) described by this ANA Group Descriptor.|\n|07:04|Number of NSID Values: This field indicates the number of Namespace Identifier values in this<br>ANA Group Descriptor.<br>If the RGO bit is set to ‘1’, then this field is cleared to 0h.|\n|15:08|Change Count: This field contains a 64-bit incrementing count, indicating an identifier for the<br>information contained in this ANA Group Descriptor. A value of 0h indicates that the controller<br>does not report a Change Count for this ANA Group Descriptor. If a Change Count is reported,<br>then the count starts at 1h following a Controller Level Reset and is incremented each time the<br>data in this ANA Group Descriptor change. If the value of this field is FFFFFFFF_FFFFFFFFh,<br>then the field shall be set to 1h when incremented (i.e., rolls over to 1h).<br>If this field contains 0h, the host should examine this ANA Group Descriptor for any changes and<br>not use this field as an indicator that a change has occurred.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1125,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2215",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23746761679649353
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2216",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17312821745872498
  },
  {
    "content": "**Figure 222: ANA Group Descriptor format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2217",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2871849834918976
  },
  {
    "content": "|Value|Description|Reference|\n|---|---|---|\n|01h|ANA Optimized state|8.1.3.1|\n|02h|ANA Non-Optimized state|8.1.3.2|\n|03h|ANA Inaccessible state|8.1.3.3|\n|04h|ANA Persistent Loss state|8.1.3.4|\n|0Fh|ANA Change state|8.1.3.5|\n|All other<br>values|Reserved||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 255,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2218",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5705557465553284
  },
  {
    "content": "|Bytes|Description|Col3|Col4|Col5|\n|---|---|---|---|---|\n|16||Bits|Definition||\n|16||07:04|Reserved|Reserved|\n|16||03:00|Asymmetric Namespace Access State: This field indicates the<br>Asymmetric Namespace Access state for all namespaces in this ANA<br>Group when accessed through this controller.<br>Value Description Reference<br>01h ANA Optimized state 8.1.3.1<br>02h ANA Non-Optimized state 8.1.3.2<br>03h ANA Inaccessible state 8.1.3.3<br>04h ANA Persistent Loss state 8.1.3.4<br>0Fh ANA Change state 8.1.3.5<br>All other<br>Reserved<br>values|Asymmetric Namespace Access State: This field indicates the<br>Asymmetric Namespace Access state for all namespaces in this ANA<br>Group when accessed through this controller.<br>Value Description Reference<br>01h ANA Optimized state 8.1.3.1<br>02h ANA Non-Optimized state 8.1.3.2<br>03h ANA Inaccessible state 8.1.3.3<br>04h ANA Persistent Loss state 8.1.3.4<br>0Fh ANA Change state 8.1.3.5<br>All other<br>Reserved<br>values|\n|31:17|Reserved|Reserved|Reserved|Reserved|\n|35:32|Namespace Identifier 0: The Namespace Identifier of the first namespace that is a member of<br>this ANA Group.|Namespace Identifier 0: The Namespace Identifier of the first namespace that is a member of<br>this ANA Group.|Namespace Identifier 0: The Namespace Identifier of the first namespace that is a member of<br>this ANA Group.|Namespace Identifier 0: The Namespace Identifier of the first namespace that is a member of<br>this ANA Group.|\n|39:36|Namespace Identifier 1: The Namespace Identifier of the second namespace, if any, that is a<br>member of this ANA Group.|Namespace Identifier 1: The Namespace Identifier of the second namespace, if any, that is a<br>member of this ANA Group.|Namespace Identifier 1: The Namespace Identifier of the second namespace, if any, that is a<br>member of this ANA Group.|Namespace Identifier 1: The Namespace Identifier of the second namespace, if any, that is a<br>member of this ANA Group.|\n|…|…|…|…|…|\n|((n*4) + 35):<br>((n*4) + 32)|Namespace Identifier n: The Namespace Identifier of the n+1 namespace that is a member of<br>this ANA Group.|Namespace Identifier n: The Namespace Identifier of the n+1 namespace that is a member of<br>this ANA Group.|Namespace Identifier n: The Namespace Identifier of the n+1 namespace that is a member of<br>this ANA Group.|Namespace Identifier n: The Namespace Identifier of the n+1 namespace that is a member of<br>this ANA Group.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2443,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2219",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11715203523635864
  },
  {
    "content": "**5.16.1.14 Persistent Event (Log Identifier 0Dh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2220",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6193409562110901
  },
  {
    "content": "The Persistent Event log page contains information about significant events not specific to a particular\ncommand. The information in this log page shall be retained across power cycles and resets. NVM\nsubsystems should be designed for minimal loss of event information upon power failure. This log consists\nof a header describing the log and zero or more Persistent Events (refer to section 5.16.1.14.1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 404,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2221",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6622915863990784
  },
  {
    "content": "This log page is global to the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2222",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6091707944869995
  },
  {
    "content": "The Log Specific Parameter field in Command Dword 10 (refer to Figure 197) for this log page is defined\nin Figure 223.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2223",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42263922095298767
  },
  {
    "content": "A sanitize operation may alter this log page (e.g., remove or modify events to prevent derivation of user\ndata from log page information, refer to section 8.21). The events removed from this log page by a sanitize\noperation are unspecified.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 240,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2224",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30394861102104187
  },
  {
    "content": "Persistent Event Log events specified in this section should be reported in an order such that more recent\nevents are generally reported earlier in the log data than older events. The method by which the NVM\nsubsystem determines the order in which events occurred is vendor specific.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 283,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2225",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6580030918121338
  },
  {
    "content": "The number of events supported is vendor specific. The supported maximum size for the Persistent Event\nLog is indicated in the PELS field of the Identify Controller data structure (refer to Figure 275). The number\nof events supported and the supported maximum size should be large enough that the number of events\nor the size of the Persistent Event Log data does not reach the maximum supported size over the usable\nlife of the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 443,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2226",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6106516718864441
  },
  {
    "content": "The controller shall log all supported events at each event occurrence unless the controller determines that\nthe same event is occurring at a frequency that exceeds a vendor specific threshold for the frequency of\nevent creation. If the same event is occurring at a frequency that exceeds a vendor specific threshold then\nthe vendor may suppress further entries for the same event. A controller may indicate if events have been\nsuppressed in vendor specific event data.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 469,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2227",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49651193618774414
  },
  {
    "content": "It is vendor specific which events are deleted (e.g., important events may be retained and events that are\nnewer than an important event that was retained may be deleted) to make room for future events if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2228",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20521396398544312
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2229",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08806777000427246
  },
  {
    "content": "a) the size of the Persistent Event Log data reaches the maximum supported size;\nb) the number of events reaches the largest reportable number of events; or\nc) an event category reaches the largest reportable number of events for that category (e.g.,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 250,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2230",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.460488498210907
  },
  {
    "content": "information regarding 1,000 occurrences of changes to the timestamp is stored in internal data\nstructures and extracted for reporting as Timestamp Change events in the Persistent Event Log\nand more than 1,000 Timestamp Change events have occurred).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 248,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2231",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24154126644134521
  },
  {
    "content": "Events that affect multiple controllers (e.g., an NVM Subsystem Reset) should be logged once by a\ncontroller selected by the vendor and not logged by any other controllers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 172,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2232",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.341907799243927
  },
  {
    "content": "The Action field in the Log Specific Parameter field (refer to Figure 223) specifies whether:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2233",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43241629004478455
  },
  {
    "content": "a) A persistent event log reporting context is created at the start of processing this Get Log Page",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2234",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6146564483642578
  },
  {
    "content": "command and log page data, if any, is read from the log page data associated with that log reporting\ncontext;\nb) Log page data is read from the log page data associated with a preexisting log reporting context;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2235",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6078436970710754
  },
  {
    "content": "or\nc) The persistent event log reporting context, if any, is released.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2236",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6695848107337952
  },
  {
    "content": "The persistent event log reporting context is vendor specific information that the controller creates for\ndetermining what information is included in the persistent event log page data (e.g., the persistent event\nlog reporting context may be the persistent event log page data or may contain a set of pointers to the\nevents to report).\n\nThe controller should retain the persistent event log reporting context:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 409,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2237",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22052593529224396
  },
  {
    "content": "a) Until the controller processes:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2238",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2947784662246704
  },
  {
    "content": "a) a Get Log Page command requesting the Persistent Event log page with the Action field set to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2239",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18739768862724304
  },
  {
    "content": "02h (i.e., Release Context);\nb) an NVM Subsystem Reset; or\nc) a Controller Level Reset;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2240",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28218138217926025
  },
  {
    "content": "b) For a vendor specific time long enough to allow retrieval of the Persistent Event log page data.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2241",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5304951071739197
  },
  {
    "content": "Persistent Event Log events that occur while a persistent event log reporting context exists shall not be\nreported in the existing reporting context but shall be logged.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2242",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6041374206542969
  },
  {
    "content": "The host is expected to issue a Get Log Page command with the Action field set to 02h to release the\npersistent event log reporting context after reading the persistent event log page data.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 189,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2243",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6727736592292786
  },
  {
    "content": "If the Persistent Event Log is not read with a single Get Log Page command, then host software should\nread the Generation Number field in the Persistent Event Log header after establishing a reporting context\nbut before reading the remainder of the log and then re-read the Generation Number field after it has read\nthe entire log. If the generation numbers do not match, then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 377,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2244",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42692917585372925
  },
  {
    "content": "- the reporting context may have been lost while reading the log;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2245",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4939116835594177
  },
  {
    "content": "- the Persistent Event Log contents read may be invalid; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2246",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3999326527118683
  },
  {
    "content": "- host software should re-read the log.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2247",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.026226334273815155
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2248",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06896277517080307
  },
  {
    "content": "**Figure 223: Persistent Event Log Specific Parameter Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2249",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5624544024467468
  },
  {
    "content": "|Col1|Bits|Description|Col4|\n|---|---|---|---|\n||14:10|Reserved|Reserved|\n||09:08|Action: This field specifies the action the controller shall take during processing this Get Log<br>Page command.<br>Value Definition<br>Read Log Data: Return Persistent Event log page data starting at the address<br>indicated by the LPOU field and the LPOL field in the Get Log Page command. If<br>00b<br>the controller does not have a persistent event log reporting context, then the<br>controller shall abort the command with a status code of Command Sequence Error.<br>Establish Context and Read Log Data: The controller shall:<br>a) determine the length of the Persistent Event log page data;<br>b) determine the set of events to report in the Persistent Event log page data;<br>and<br>c) establish a persistent event log reporting context to store information<br>describing the Persistent Event log page data to be reported and track<br>01b Persistent Event log page data accesses.<br>After establishing a persistent event log reporting context, the controller shall return<br>Persistent Event log page data starting at the address indicated by the LPOU field<br>and the LPOL field in the Get Log Page command.<br>If a persistent event log reporting context already exists, then the controller shall<br>abort the command with a status code of Command Sequence Error.<br>Release Context: The controller shall:<br>• release the persistent event log reporting context, if any. It is not an error<br>10b if the controller does not have a persistent event log reporting context; and<br>• not return any Persistent Event log page data (i.e., the controller ignores<br>the NUMDU field, NUMDL field, LPOL field, and the LPOU field).<br>Establish Context and Read 512 Bytes of Header: The controller shall:<br>a) determine the length of the Persistent Event log page data;<br>b) determine the set of events to report in the Persistent Event log page data;<br>and<br>c) if a reporting context does not already exist, then establish a persistent<br>event log reporting context to store information describing the Persistent<br>Event log page data to be reported and track Persistent Event log page<br>data accesses.<br>If a persistent event log reporting context did not already exist when the Get Log<br>Page command was processed, then the controller shall:<br>11b a) establish a persistent event log reporting context; and<br>b) after establishing the context, return 512 bytes of the Persistent Event Log<br>Header starting at offset 0h with the Reporting Context Exists bit cleared<br>to ‘0’ with a status code of Successful Completion.<br>If a persistent event log reporting context already existed when the Get Log Page<br>command was processed, then the controller shall return 512 bytes of the<br>Persistent Event Log Header starting at offset 0h with the Reporting Context Exists<br>bit set to ‘1’ with a status code of Successful Completion.<br>The 512 bytes of the Persistent Event Log Header shall be returned regardless of<br>the values in the LPOL, LPOU, NUMDL, and NUMDU fields (i.e., the controller shall<br>ignore the LPOL, LPOU, NUMDL, and NUMDU fields).|Action: This field specifies the action the controller shall take during processing this Get Log<br>Page command.<br>Value Definition<br>Read Log Data: Return Persistent Event log page data starting at the address<br>indicated by the LPOU field and the LPOL field in the Get Log Page command. If<br>00b<br>the controller does not have a persistent event log reporting context, then the<br>controller shall abort the command with a status code of Command Sequence Error.<br>Establish Context and Read Log Data: The controller shall:<br>a) determine the length of the Persistent Event log page data;<br>b) determine the set of events to report in the Persistent Event log page data;<br>and<br>c) establish a persistent event log reporting context to store information<br>describing the Persistent Event log page data to be reported and track<br>01b Persistent Event log page data accesses.<br>After establishing a persistent event log reporting context, the controller shall return<br>Persistent Event log page data starting at the address indicated by the LPOU field<br>and the LPOL field in the Get Log Page command.<br>If a persistent event log reporting context already exists, then the controller shall<br>abort the command with a status code of Command Sequence Error.<br>Release Context: The controller shall:<br>• release the persistent event log reporting context, if any. It is not an error<br>10b if the controller does not have a persistent event log reporting context; and<br>• not return any Persistent Event log page data (i.e., the controller ignores<br>the NUMDU field, NUMDL field, LPOL field, and the LPOU field).<br>Establish Context and Read 512 Bytes of Header: The controller shall:<br>a) determine the length of the Persistent Event log page data;<br>b) determine the set of events to report in the Persistent Event log page data;<br>and<br>c) if a reporting context does not already exist, then establish a persistent<br>event log reporting context to store information describing the Persistent<br>Event log page data to be reported and track Persistent Event log page<br>data accesses.<br>If a persistent event log reporting context did not already exist when the Get Log<br>Page command was processed, then the controller shall:<br>11b a) establish a persistent event log reporting context; and<br>b) after establishing the context, return 512 bytes of the Persistent Event Log<br>Header starting at offset 0h with the Reporting Context Exists bit cleared<br>to ‘0’ with a status code of Successful Completion.<br>If a persistent event log reporting context already existed when the Get Log Page<br>command was processed, then the controller shall return 512 bytes of the<br>Persistent Event Log Header starting at offset 0h with the Reporting Context Exists<br>bit set to ‘1’ with a status code of Successful Completion.<br>The 512 bytes of the Persistent Event Log Header shall be returned regardless of<br>the values in the LPOL, LPOU, NUMDL, and NUMDU fields (i.e., the controller shall<br>ignore the LPOL, LPOU, NUMDL, and NUMDU fields).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 6220,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2250",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8869171738624573
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Read Log Data: Return Persistent Event log page data starting at the address<br>indicated by the LPOU field and the LPOL field in the Get Log Page command. If<br>the controller does not have a persistent event log reporting context, then the<br>controller shall abort the command with a status code of Command Sequence Error.|\n|01b|Establish Context and Read Log Data: The controller shall:<br>a) determine the length of the Persistent Event log page data;<br>b) determine the set of events to report in the Persistent Event log page data;<br>and<br>c) establish a persistent event log reporting context to store information<br>describing the Persistent Event log page data to be reported and track<br>Persistent Event log page data accesses.<br>After establishing a persistent event log reporting context, the controller shall return<br>Persistent Event log page data starting at the address indicated by the LPOU field<br>and the LPOL field in the Get Log Page command.<br>If a persistent event log reporting context already exists, then the controller shall<br>abort the command with a status code of Command Sequence Error.|\n|10b|Release Context: The controller shall:<br>• release the persistent event log reporting context, if any. It is not an error<br>if the controller does not have a persistent event log reporting context; and<br>• not return any Persistent Event log page data (i.e., the controller ignores<br>the NUMDU field, NUMDL field, LPOL field, and the LPOU field).|\n|11b|Establish Context and Read 512 Bytes of Header: The controller shall:<br>a) determine the length of the Persistent Event log page data;<br>b) determine the set of events to report in the Persistent Event log page data;<br>and<br>c) if a reporting context does not already exist, then establish a persistent<br>event log reporting context to store information describing the Persistent<br>Event log page data to be reported and track Persistent Event log page<br>data accesses.<br>If a persistent event log reporting context did not already exist when the Get Log<br>Page command was processed, then the controller shall:<br>a) establish a persistent event log reporting context; and<br>b) after establishing the context, return 512 bytes of the Persistent Event Log<br>Header starting at offset 0h with the Reporting Context Exists bit cleared<br>to ‘0’ with a status code of Successful Completion.<br>If a persistent event log reporting context already existed when the Get Log Page<br>command was processed, then the controller shall return 512 bytes of the<br>Persistent Event Log Header starting at offset 0h with the Reporting Context Exists<br>bit set to ‘1’ with a status code of Successful Completion.<br>The 512 bytes of the Persistent Event Log Header shall be returned regardless of<br>the values in the LPOL, LPOU, NUMDL, and NUMDU fields (i.e., the controller shall<br>ignore the LPOL, LPOU, NUMDL, and NUMDU fields).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2956,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2251",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4598807692527771
  },
  {
    "content": "The log page returned is defined in Figure 224.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2252",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17673783004283905
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2253",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07288433611392975
  },
  {
    "content": "**Figure 224: Persistent Event Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2254",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.570046067237854
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|Persistent Event Log Header|Persistent Event Log Header|\n|00|Log Identifier: This field shall be set to 0Dh.|\n|03:01|Reserved|\n|07:04|Total Number of Events (TNEV): Contains the number of event entries in the log.|\n|15:08|Total Log Length (TLL): Contains the total number of bytes of persistent event log page<br>data available, including the header.|\n|16|Log Revision: Contains a number indicating the revision of the Get Log Page data structure<br>that this log page data complies with. Shall be set to 03h. This revision applies to the<br>Persistent Event Log and the Persistent Event Format (refer to Figure 225). This revision<br>does not apply to the contents of the Event Data field in the Persistent Event Format as that<br>field is covered by the Event Type Revision (refer to Figure 225).|\n|17|Reserved|\n|19:18|Log Header Length: This field contains the length in bytes of the log header information<br>that follows. The total length of the log header in bytes is the value in this field plus 20.|\n|27:20|Timestamp: Shall contain a timestamp of the time at which the persistent event log reporting<br>context was established. The value returned shall use the Timestamp data structure defined<br>in Figure 340.|\n|43:28|Power on Hours (POH): This field indicates the number of power-on hours at the time the<br>Persistent Event log was retrieved. This may not include time that the controller was powered<br>and in a non-operational state.|\n|51:44|Power Cycle Count: Contains the number of power cycles for this controller.|\n|53:52|PCI Vendor ID (VID): This is the same value as reported in the Identify Controller data<br>structure PCI Vendor ID field (i.e., bytes 01:00).|\n|55:54|PCI Subsystem Vendor ID (SSVID): This is the same value as reported in the Identify<br>Controller data structure PCI Subsystem Vendor ID field (i.e., bytes 03:02).|\n|75:56|Serial Number (SN): This field contains the same value as reported in the Serial Number<br>field of the Identify Controller data structure, bytes 23:04.|\n|115:76|Model Number (MN): This field contains the same value as reported in the Model Number<br>field of the Identify Controller data structure, bytes 63:24.|\n|371:116|NVM Subsystem NVMe Qualified Name (SUBNQN): This field contains the same value<br>as reported in the NVM Subsystem NVMe Qualified Name field of the Identify Controller data<br>structure, bytes 1023:768. If the NVM Subsystem NVMe Qualified Name field of the Identify<br>Controller data structure is not supported, then all bytes of this field shall be cleared to 0h.|\n|373:372|Generation Number: Contains a value that is incremented each time a persistent event log<br>reporting context is established and the log page returns different data than when this log<br>page last established a reporting context. If the value of this field is FFFFh, then the field<br>shall be cleared to 0h when incremented (i.e., rolls over to 0h).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2943,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2255",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21979545056819916
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2256",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07288433611392975
  },
  {
    "content": "**Figure 224: Persistent Event Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2257",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5000905394554138
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|A persistent event log reporting context does not already exist.|\n|01b|The reporting context was established by an NVM subsystem port.|\n|10b|The reporting context was established by a Management Endpoint<br>(refer to the NVM Express Management Interface Specification).|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 319,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2258",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6914033889770508
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|377:374|Reporting Context Information (RCI): This field contains information about the persistent<br>event log reporting context.<br>Bits Definition<br>31:19 Reserved<br>Reporting Context Exists (RCE): This bit indicates the persistent event log<br>reporting context. If this bit is set to ‘1’, then a persistent event log reporting<br>context already existed when the Get Log Page command that requested this log<br>18<br>page was processed. If this bit is cleared to ‘0’, then a persistent event log<br>reporting context did not already exist when the Get Log Page command that<br>requested this log page was processed.<br>Reporting Context Port Identifier Type (RCPIT): If the RCE bit is set to ‘1’,<br>then this field indicates the type of port identifier reported in the Reporting Context<br>Port Identifier (RCPID) field. If the RCE bit is cleared to ‘0’, then this field shall be<br>cleared to 00b.<br>Value Definition<br>17:16<br>00b A persistent event log reporting context does not already exist.<br>01b The reporting context was established by an NVM subsystem port.<br>The reporting context was established by a Management Endpoint<br>10b<br>(refer to the NVM Express Management Interface Specification).<br>11b Reserved<br>Reporting Context Port Identifier (RCPID): If the RCE bit is cleared to ‘0’, then<br>this field shall be cleared to 0h.<br>If the RCE bit is set to ‘1’, then this field contains a Port Identifier of the type<br>indicated in the RCPIT field.<br>If the RCPIT field is set to 01b, then this field shall contain the Port Identifier of<br>the NVM subsystem port that established the reporting context as defined in the<br>15:00<br>Primary Controller Capabilities data structure (refer to section 5.17.2.13).<br>If the RCPIT field is set to 10b, then:<br>• the least-significant byte of this field shall contain the Port Identifier of<br>the Management Endpoint (refer to the NVM Express Management<br>Interface Specification); and<br>• the most-significant byte of this field shall be cleared to 0h.|\n|479:378|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2081,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2259",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8877443075180054
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|31:19|Reserved|\n|18|Reporting Context Exists (RCE): This bit indicates the persistent event log<br>reporting context. If this bit is set to ‘1’, then a persistent event log reporting<br>context already existed when the Get Log Page command that requested this log<br>page was processed. If this bit is cleared to ‘0’, then a persistent event log<br>reporting context did not already exist when the Get Log Page command that<br>requested this log page was processed.|\n|17:16|Reporting Context Port Identifier Type (RCPIT): If the RCE bit is set to ‘1’,<br>then this field indicates the type of port identifier reported in the Reporting Context<br>Port Identifier (RCPID) field. If the RCE bit is cleared to ‘0’, then this field shall be<br>cleared to 00b.<br>Value Definition<br>00b A persistent event log reporting context does not already exist.<br>01b The reporting context was established by an NVM subsystem port.<br>The reporting context was established by a Management Endpoint<br>10b<br>(refer to the NVM Express Management Interface Specification).<br>11b Reserved|\n|15:00|Reporting Context Port Identifier (RCPID): If the RCE bit is cleared to ‘0’, then<br>this field shall be cleared to 0h.<br>If the RCE bit is set to ‘1’, then this field contains a Port Identifier of the type<br>indicated in the RCPIT field.<br>If the RCPIT field is set to 01b, then this field shall contain the Port Identifier of<br>the NVM subsystem port that established the reporting context as defined in the<br>Primary Controller Capabilities data structure (refer to section 5.17.2.13).<br>If the RCPIT field is set to 10b, then:<br>• the least-significant byte of this field shall contain the Port Identifier of<br>the Management Endpoint (refer to the NVM Express Management<br>Interface Specification); and<br>• the most-significant byte of this field shall be cleared to 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1896,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2260",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2112484723329544
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2261",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07288433611392975
  },
  {
    "content": "**Figure 224: Persistent Event Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2262",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.249315083026886
  },
  {
    "content": "|Bits|Definition|Reference|\n|---|---|---|\n|255:224|Reserved||\n|223|TCG Defined|TCG Storage<br>Interface<br>Interactions<br>Specification|\n|222|Vendor Specific Event Supported|5.16.1.14.1.14|\n|221:14|Reserved||\n|13|Thermal Excursion Event Support|5.16.1.14.1.13|\n|12|Telemetry Log Create Event Support|5.16.1.14.1.12|\n|11|Set Feature Event Support|5.16.1.14.1.11|\n|10|Sanitize Completion Event Support|5.16.1.14.1.10|\n|09|Sanitize Start Event Support|5.16.1.14.1.9|\n|08|Format NVM Completion Event Support|5.16.1.14.1.8|\n|07|Format NVM Start Event Support|5.16.1.14.1.7|\n|06|Change Namespace Event Support|5.16.1.14.1.6|\n|05|NVM Subsystem Hardware Error Event Support|5.16.1.14.1.5|\n|04|Power-on or Reset Event Supported|5.16.1.14.1.4|\n|03|Timestamp Change Event Supported|5.16.1.14.1.3|\n|02|Firmware Commit Event Supported|5.16.1.14.1.2|\n|01|SMART / Health Log Snapshot Event Supported|5.16.1.14.1.1|\n|00|Reserved||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 915,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2263",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.52933269739151
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|511:480|Supported Events Bitmap: This field contains a bitmap indicating support for the persistent<br>event log events. Each bit in the bitmap corresponds to the value for the event type (refer to<br>Figure 226) (e.g., bit 222 decimal, DEh, corresponds to event type value DEh, Vendor<br>Specific Event). A bit set to ‘1’ indicates that the corresponding event is supported. A bit<br>cleared to ‘0’ indicates that the corresponding event is not supported.<br>Bits Definition Reference<br>255:224 Reserved<br>TCG Storage<br>Interface<br>223 TCG Defined<br>Interactions<br>Specification<br>222 Vendor Specific Event Supported 5.16.1.14.1.14<br>221:14 Reserved<br>13 Thermal Excursion Event Support 5.16.1.14.1.13<br>12 Telemetry Log Create Event Support 5.16.1.14.1.12<br>11 Set Feature Event Support 5.16.1.14.1.11<br>10 Sanitize Completion Event Support 5.16.1.14.1.10<br>09 Sanitize Start Event Support 5.16.1.14.1.9<br>08 Format NVM Completion Event Support 5.16.1.14.1.8<br>07 Format NVM Start Event Support 5.16.1.14.1.7<br>06 Change Namespace Event Support 5.16.1.14.1.6<br>05 NVM Subsystem Hardware Error Event Support 5.16.1.14.1.5<br>04 Power-on or Reset Event Supported 5.16.1.14.1.4<br>03 Timestamp Change Event Supported 5.16.1.14.1.3<br>02 Firmware Commit Event Supported 5.16.1.14.1.2<br>01 SMART / Health Log Snapshot Event Supported 5.16.1.14.1.1<br>00 Reserved|\n|Persistent Event Log Events|Persistent Event Log Events|\n|(M-1)+512:512|Persistent Event 0: This field contains the first persistent event log entry (refer to Figure<br>225) where M is the length of this persistent event.|\n|…|…|\n|(TLL-1):(TLL-K)|Persistent Event N: This field contains the last persistent event log entry (refer to Figure<br>225) where K is the length of this persistent event and TLL is the size specified in the Total<br>Log Length field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1869,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2264",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5633594989776611
  },
  {
    "content": "The format of the Persistent Events in the Persistent Event log is shown in Figure 225.\n\n**Figure 225: Persistent Event Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2265",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5801684260368347
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|Persistent Event Log Event Header|Persistent Event Log Event Header|\n|00|Event Type: This field indicates the event type for this entry. Refer to section 5.16.1.14.1 for<br>the definition of the event types.|\n|01|Event Type Revision: This field contains a number indicating the revision of the event data<br>structure for the event indicated by the Event Type field that this event data complies with.|\n|02|Event Header Length (EHL): This field contains the length in bytes of the event header<br>information that follows. The total length of the event header in bytes is the value in this field<br>plus 3. The host should use the value in this field to calculate the offset to the start of the<br>Vendor Specific Information field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 764,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2266",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21581053733825684
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2267",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11789222061634064
  },
  {
    "content": "**Figure 225: Persistent Event Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2268",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2030598372220993
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|7:2|Reserved|\n|1:0|Port Identifier Type (PIT): This field indicates the type of port identifier<br>reported in the Port Identifier (PELPID) field. Implementations that are<br>compliant with NVM Express Base Specification revision 1.4 and later shall<br>not clear this field to 0h.<br>Value Definition<br>The Port Identifier Type is not reported and the Port<br>00b<br>Identifier (PELPID) field does not apply.<br>01b This event is associated with an NVM subsystem port.<br>This event is associated with a Management Endpoint<br>10b (refer to the NVM Express Management Interface<br>Specification).<br>11b This event is not associated with any port.|\n\n|Value|Definition|\n|---|---|\n|00b|The Port Identifier Type is not reported and the Port<br>Identifier (PELPID) field does not apply.|\n|01b|This event is associated with an NVM subsystem port.|\n|10b|This event is associated with a Management Endpoint<br>(refer to the NVM Express Management Interface<br>Specification).|\n|11b|This event is not associated with any port.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1049,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2269",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8740370869636536
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03|Event Header Additional Information (EHAI): This field indicates if additional<br>information is present in this event header.<br>Bits Definition<br>7:2 Reserved<br>Port Identifier Type (PIT): This field indicates the type of port identifier<br>reported in the Port Identifier (PELPID) field. Implementations that are<br>compliant with NVM Express Base Specification revision 1.4 and later shall<br>not clear this field to 0h.<br>Value Definition<br>1:0 00b The Port Identifier Type is not reported and the Port<br>Identifier (PELPID) field does not apply.<br>01b This event is associated with an NVM subsystem port.<br>This event is associated with a Management Endpoint<br>10b (refer to the NVM Express Management Interface<br>Specification).<br>11b This event is not associated with any port.|\n|05:04|Controller Identifier: This field contains the NVM subsystem unique controller identifier for<br>the controller that created this event. If the event is controller specific, then the event data is<br>associated with that controller. If the event is not controller specific, then this is the controller<br>that the NVM subsystem selected for creating the event.|\n|13:06|Event Timestamp: This field contains a timestamp of the time when this event occurred<br>using the Timestamp data structure defined in Figure 339.|\n|15:14|Port Identifier (PELPID): If the PIT field in the EHAI field is cleared to 00b or set to 11b,<br>then this field shall be cleared to 0h.<br>If the PIT field in the EHAI field is not cleared to 00b or set to 11b, then this field contains a<br>Port Identifier of the type indicated in the PIT field.<br>If the PIT field in the EHAI field is set to 01b, then this field shall contain the Port Identifier of<br>the NVM subsystem port associated with this event as defined in the Primary Controller<br>Capabilities data structure (refer to section 5.17.2.13).<br>If the PIT field in the EHAI field is set to 10b, then:<br>• the least-significant byte of this field shall contain the Port Identifier of the<br>Management Endpoint associated with this event (refer to the NVM Express<br>Management Interface Specification); and<br>• the most-significant byte of this field shall be cleared to 0h.|\n|19:16|Reserved|\n|21:20|Vendor Specific Information Length (VSIL): This field indicates the length in bytes of the<br>Vendor Specific Information. If no Vendor Specific Information is present, then this field shall<br>be cleared to 0h. The length of the Vendor Specific Information is included in the Event<br>Length field (bytes 23:22). Information associated with this event that is not able to be<br>described in the event data structure fields may be reported in Vendor Specific Information<br>fields in this event.|\n|23:22|Event Length (EL): This field indicates the length in bytes of the vendor specific information,<br>if any, and the persistent event log event data that follows. The total length of the event in<br>bytes is the value in this field plus the value in the Event Header Length field plus 3.|\n|Vendor Specific Information, if any|Vendor Specific Information, if any|\n|EHL+2+VSIL:EHL+3|Vendor Specific Information: This field contains the vendor specific information, if any.<br>This field is omitted if there is no vendor specific information (i.e., if VSIL is cleared to 0h).|\n|Persistent Event Log Event Data|Persistent Event Log Event Data|\n|EHL+EL+2:<br>EHL+3+VSIL|Event Data: This field contains persistent event log events (refer to section 5.16.1.14.1).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3536,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2270",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5109986662864685
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2271",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05404223874211311
  },
  {
    "content": "**5.16.1.14.1 Persistent Event Log Events**\n\nThe values that may be reported in the Event Type field (refer to section 5.16.1.14) of the event header for\nevents in the Persistent Event log are defined in Figure 226.\n\n**Figure 226: Persistent Event Log Event Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2272",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32156938314437866
  },
  {
    "content": "|Type|1<br>O/M|Event|Reference Section|\n|---|---|---|---|\n|00h||Reserved||\n|01h|NOTE 2|SMART / Health Log Snapshot|5.16.1.14.1.1|\n|02h|M|Firmware Commit|5.16.1.14.1.2|\n|03h|M|Timestamp Change|5.16.1.14.1.3|\n|04h|M|Power-on or Reset|5.16.1.14.1.4|\n|05h|M|NVM Subsystem Hardware Error|5.16.1.14.1.5|\n|06h|NOTE 3|Change Namespace|5.16.1.14.1.6|\n|07h|NOTE 3|Format NVM Start|5.16.1.14.1.7|\n|08h|NOTE 3|Format NVM Completion|5.16.1.14.1.8|\n|09h|NOTE 3|Sanitize Start|5.16.1.14.1.9|\n|0Ah|NOTE 3|Sanitize Completion|5.16.1.14.1.10|\n|0Bh|O|Set Feature|5.16.1.14.1.11|\n|0Ch|O|Telemetry Log Created|5.16.1.14.1.12|\n|0Dh|O|Thermal Excursion|5.16.1.14.1.13|\n|0Eh to DDh||Reserved||\n|DEh|O|Vendor Specific Event|5.16.1.14.1.14|\n|DFh|O|TCG Defined|5.16.1.14.1.15|\n|E0h to FFh||Reserved||\n|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Mandatory for NVMe over PCIe implementations, Optional for NVMe over Fabrics implementations.<br>3. Mandatory if the command used to initiate the activity reported by the event is supported.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Mandatory for NVMe over PCIe implementations, Optional for NVMe over Fabrics implementations.<br>3. Mandatory if the command used to initiate the activity reported by the event is supported.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Mandatory for NVMe over PCIe implementations, Optional for NVMe over Fabrics implementations.<br>3. Mandatory if the command used to initiate the activity reported by the event is supported.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Mandatory for NVMe over PCIe implementations, Optional for NVMe over Fabrics implementations.<br>3. Mandatory if the command used to initiate the activity reported by the event is supported.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1795,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2273",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4418832063674927
  },
  {
    "content": "**5.16.1.14.1.1** **SMART / Health Log Snapshot Event (Event Type 01h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2274",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6816744804382324
  },
  {
    "content": "NVM subsystems that support the Persistent Event Log shall create a SMART / Health Log Snapshot Event:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2275",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28787344694137573
  },
  {
    "content": "a) If virtualization management is not implemented, then for every controller in the NVM subsystem;\n\nor\nb) If virtualization management is implemented, then for every primary controller,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 186,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2276",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28642624616622925
  },
  {
    "content": "at least once every 24 power on hours at a time determined by the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 77,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2277",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16526412963867188
  },
  {
    "content": "The SMART / Health Log Snapshot Event shall set the Persistent Event Log Event Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2278",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22823931276798248
  },
  {
    "content": "a) Event Type field to 01h; and\nb) Event Type Revision field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2279",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3174264430999756
  },
  {
    "content": "The SMART / Health Log Snapshot Event data is specified in Figure 227.\n\n**Figure 227: SMART / Health Log Snapshot Event Data Format (Event Type 01h)**\n\n|Bytes|Description|\n|---|---|\n|511:00|Event Data: Contains a snapshot of the SMART/Health Information Log data specified in Figure<br>207.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 291,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2280",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3743479549884796
  },
  {
    "content": "**5.16.1.14.1.2** **Firmware Commit Event (Event Type 02h)**\n\nA firmware commit event shall be recorded in the Persistent Event Log when a Firmware Commit command\nis completed. The Firmware Commit Event shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 258,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2281",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3682127296924591
  },
  {
    "content": "a) Event Type field to 02h; and\nb) Event Type Revision field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2282",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18776725232601166
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2283",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27178099751472473
  },
  {
    "content": "The Firmware Commit Event data is specified in Figure 228.\n\n**Figure 228: Firmware Commit Event Data Format (Event Type 02h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 126,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2284",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.637696385383606
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Old Firmware Revision: Contains the firmware revision of the active firmware before this<br>firmware commit event.|\n|15:08|New Firmware Revision: Contains the firmware revision for the firmware that was requested to<br>become active.|\n|16|Firmware Commit Action: Contains the value from the Commit Action field in the Firmware<br>Commit command.|\n|17|Firmware Slot: Contains the value from the Firmware Slot field in the Firmware Commit<br>command.|\n|18|Status Code Type for Firmware Commit Command: Contains the status code type from the<br>completion queue entry for the Firmware Commit command.|\n|19|Status Returned for Firmware Commit Command: Contains the status code from the<br>completion queue entry for the Firmware Commit command.|\n|21:20|Vendor Assigned Firmware Commit Result Code: Contains a vendor specific value that<br>provides more information about the result of the firmware commit. A value of 0h indicates that no<br>vendor assigned firmware commit result code is provided.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1031,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2285",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19633923470973969
  },
  {
    "content": "**5.16.1.14.1.3** **Timestamp Change Event (Event Type 03h)**\n\nThe Timestamp Change Event (refer to Figure 229) contains the current timestamp, reported in the event\nheader, and the timestamp from the time at which the timestamp was changed (i.e., the old timestamp).\n\nThe Timestamp Change Event shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 351,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2286",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4881877899169922
  },
  {
    "content": "a) Event Type field to 03h; and\nb) Event Type Revision field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2287",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46391794085502625
  },
  {
    "content": "The Timestamp Change Event data is specified in Figure 229.\n\n**Figure 229: Timestamp Change Event Format (Event Type 03h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 123,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2288",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6014643311500549
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Previous Timestamp: Contains a timestamp of the time immediately before the timestamp was<br>changed (i.e, the old timestamp) using the Timestamp data structure as defined in Figure 339.|\n|15:08|Milliseconds Since Reset: Contains the time since the last Controller Level Reset reported in<br>milliseconds.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 343,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2289",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31984925270080566
  },
  {
    "content": "**5.16.1.14.1.4** **Power-on or Reset Event (Event Type 04h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2290",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5711022019386292
  },
  {
    "content": "A Power-on or Reset event shall be recorded in the Persistent Event Log when an NVM Subsystem Reset\n(e.g., due to a power-on) or a Controller Level Reset is completed. The Power-on or Reset Event reports\ninformation about resets due to power-on or other events that cause resets (refer to section 3.6) followed\nby descriptors reporting information about the controller at the time the reset occurred, including timestamp\nvalues for all controllers for use in synchronization of timestamp values across controllers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 514,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2291",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5472402572631836
  },
  {
    "content": "The controller shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2292",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24321720004081726
  },
  {
    "content": "a) Event Type field to 04h; and\nb) Event Type Revision field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2293",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33915144205093384
  },
  {
    "content": "The Power-on or Reset Event data is specified in Figure 230.\n\n**Figure 230: Power-on or Reset Event (Event Type 04h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2294",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2775628864765167
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Firmware Revision: Contains the firmware revision that becomes effective when CC.EN<br>transitions from ‘0’ to ‘1’.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2295",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2595427334308624
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2296",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07651612162590027
  },
  {
    "content": "**Figure 230: Power-on or Reset Event (Event Type 04h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2297",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38342562317848206
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|1<br>EL-VSIL-1:08|Reset Information List: Contains a list of one or more Controller Reset Information<br>descriptors (refer to Figure 231). If virtualization management is not implemented, then the<br>list shall contain a Controller Reset Information descriptor for every controller in the NVM<br>subsystem. If virtualization management is implemented, then the list shall contain a<br>Controller Reset Information descriptor for every primary controller.<br>The Controller Reset Information descriptor is shown in Figure 231.|\n|Notes:<br>1. Refer to Figure 225 for the definitions of EL and VSIL.|Notes:<br>1. Refer to Figure 225 for the definitions of EL and VSIL.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 698,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2298",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6428548693656921
  },
  {
    "content": "**Figure 231: Controller Reset Information descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2299",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40781569480895996
  },
  {
    "content": "|Code|Definition|\n|---|---|\n|00h|Indicates that this event did not trigger a firmware<br>activation on the controller.|\n|01h|Indicates that new firmware was activated on the<br>controller due to this power on or reset.|\n|02h|Indicates that an attempt to activate new firmware on<br>the controller due to this power-on or reset failed.|\n|03h to FFh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 357,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2300",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7435033321380615
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Controller ID: Contains the Controller ID for the controller with the timestamp in the<br>Controller Timestamp field.|\n|02|Firmware Activation: Contains a code indicating if this event triggered a firmware activation.<br>Code Definition<br>Indicates that this event did not trigger a firmware<br>00h<br>activation on the controller.<br>Indicates that new firmware was activated on the<br>01h<br>controller due to this power on or reset.<br>Indicates that an attempt to activate new firmware on<br>02h<br>the controller due to this power-on or reset failed.<br>03h to FFh Reserved|\n|03|Operation in Progress:<br>Bits 7:1 are reserved.<br>Bit 0: A value of ‘1’ indicates that a Format NVM command was in progress for a namespace<br>attached to the controller when this reset event occurred. A value of ‘0’ indicates that no<br>Format NVM commands were in progress for any namespace attached to the controller when<br>this reset event occurred.|\n|15:04|Reserved|\n|19:16|Controller Power Cycle: Contains the power cycle count for the controller indicated in the<br>Controller ID field.|\n|27:20|Power on milliseconds: Contains the power on hours in milliseconds since being<br>manufactured. This may not include time that the controller was powered and in a non-<br>operational power state.<br>The resolution of this field is vendor specific (e.g., an NVM subsystem that only counts power<br>on time in hours only reports values corresponding to whole hours).|\n|35:28|Controller Timestamp: Contains a timestamp for the controller specified in the Controller<br>ID field at the time when this event occurred using the Timestamp data structure defined in<br>Figure 339.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1700,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2301",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2204255908727646
  },
  {
    "content": "**5.16.1.14.1.5** **NVM Subsystem Hardware Error Event (Event Type 05h)**\n\nAn NVM Subsystem Hardware Error event shall be recorded in the Persistent Event Log when a supported\nNVM subsystem hardware error event is detected. Which of the NVM subsystem hardware error events\nare supported is vendor specific. The NVM subsystem hardware error event shall set the Persistent Event\nLog Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 401,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2302",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2274792343378067
  },
  {
    "content": "- Event Type field to 05h; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2303",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6916070580482483
  },
  {
    "content": "- Event Type Revision Field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2304",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20246857404708862
  },
  {
    "content": "All detected NVM Subsystem Hardware Error events supported by the NVM subsystem shall be logged\nunless otherwise specified (e.g., suppressed due to reoccurrence frequency (refer to section 5.16.1.14)).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 201,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2305",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4777786135673523
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2306",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46004995703697205
  },
  {
    "content": "NVM Subsystem Hardware Error event fields reporting information that is not available (e.g., due to a PCIe\noptional feature that is not implemented) shall be cleared to 0h unless otherwise specified in the NVM\nSubsystem Hardware Error Event code description.\n\nThe NVM Subsystem Hardware Error Event data is specified in Figure 232.\n\n**Figure 232: NVM Subsystem Hardware Error Event Format (Event Type 05h)**\n\n|Bytes|Description|\n|---|---|\n|01:00|NVM Subsystem Hardware Error Event Code: This field contains a code (refer to Figure<br>233) indicating the type of NVM subsystem hardware error that is being reported.|\n|03: 02|Reserved|\n|M+3:04|Additional Hardware Error Information: This field contains additional information about<br>the hardware error event indicated in the NVM Subsystem Hardware Error Event Code field<br>(refer to Figure 233). Where M is the number of bytes of additional hardware error<br>information.<br>This field is omitted if the subsystem hardware error being reported does not contain<br>additional hardware error information (i.e., if the number of bytes of additional hardware error<br>information, M, is 0h).|\n\n**Figure 233: NVM Subsystem Hardware Error Event Codes**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 1197,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2307",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6979107856750488
  },
  {
    "content": "|Code|Description|\n|---|---|\n|00h|Reserved|\n|01h|PCIe Correctable Error: Indicates that the NVM subsystem has detected that a PCIe<br>correctable error occurred.<br>Refer to Figure 234 for the format of the Additional Hardware Error Information field.|\n|02h|PCIe Uncorrectable Non fatal Error: Indicates that the NVM subsystem has detected that a<br>PCIe uncorrectable non-fatal error occurred.<br>Refer to Figure 234 for the format of the Additional Hardware Error Information field.|\n|03h|PCIe Uncorrectable Fatal Error: Indicates that the NVM subsystem has detected that a PCIe<br>uncorrectable fatal error occurred.<br>Refer to Figure 234 for the format of the Additional Hardware Error Information field.|\n|04h|PCIe Link Status Change: Indicates that a change in the values reported in the PCI Express<br>Link Status register (refer to the PCI Express Link Status section in the NVMe over PCIe<br>Transport Specification) have changed due to an attempt to correct unreliable link operation.<br>The Additional Hardware Error Information field shall be set to the contents of the PCI Express<br>Link Status register at the time of the event.|\n|05h|PCIe Link Not Active: Indicates that the Data Link Control and Management State Machine<br>(refer to PCI Express Base specification) has transitioned out of the DL_Active state without a<br>corresponding event (e.g., without an indication from the host that the link is to be disabled).<br>This NVM subsystem hardware error event does not contain additional hardware error<br>information.|\n|06h|Critical Warning Condition: Indicates the NVM subsystem has detected a condition that<br>causes a bit in the Critical Warning field of the SMART / Health Information log (refer to section<br>5.16.1.3) to be set to ‘1’.<br>Bits in this field represent the associated state at the time of this event.<br>The Additional Hardware Error Information field shall be set at the time of the event using the<br>same format as is specified for the Critical Warning field of the SMART / Health Information<br>log.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2048,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2308",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45924410223960876
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2309",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.502826988697052
  },
  {
    "content": "**Figure 233: NVM Subsystem Hardware Error Event Codes**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2310",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3084949254989624
  },
  {
    "content": "|Bytes|Definition|\n|---|---|\n|0|Shall be set at the time this event is added to the Persistent Event log<br>page using the same format as is specified for the Critical Warning field of<br>the Endurance Group Information log page.|\n|1|Reserved|\n|3:2|Shall be set to the Endurance Group Identifier for the associated<br>Endurance Group.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 335,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2311",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7317796349525452
  },
  {
    "content": "|Code|Description|\n|---|---|\n|07h|Endurance Group Critical Warning Condition: Indicates that the NVM subsystem has<br>detected a condition that causes a bit in the Critical Warning field of an Endurance Group<br>Information log page (refer to section 5.16.1.10) to be set to ‘1’.<br>Bits in this field represent the state at the time this event is added to the Persistent Event log<br>page.<br>The Additional Hardware Error Information field shall be four bytes long and contain the<br>following information:<br>Bytes Definition<br>Shall be set at the time this event is added to the Persistent Event log<br>0 page using the same format as is specified for the Critical Warning field of<br>the Endurance Group Information log page.<br>1 Reserved<br>Shall be set to the Endurance Group Identifier for the associated<br>3:2<br>Endurance Group.|\n|08h|Unsafe Shutdown: Indicates that the controller incremented the Unsafe Shutdowns field<br>value in the SMART / Health Information Log.<br>The Additional Hardware Error Information field shall be set to the value from the Unsafe<br>Shutdowns field in the SMART / Health Information log at the time of the event.|\n|09h|Controller Fatal Status: Indicates that the Controller Fatal Status (CSTS.CFS) bit has been<br>set to ‘1’.<br>This NVM subsystem hardware error event does not contain additional hardware error<br>information.|\n|0Ah|Media and Data Integrity Status: Indicates that a completion queue entry contained a Media<br>and Data Integrity status code (refer to Figure 98) other than 86h (i.e., Access Denied) or 87h<br>(i.e., Deallocated or Unwritten logical Block).<br>The Additional Hardware Error Information field shall be set to the contents of the completion<br>queue entry.|\n|0Bh|Controller Ready Timeout Exceeded: Indicates that:<br>a) the controller was not ready to process at least one command without error as<br>described in section 3.5.4.1 within the amount of time indicated by:<br>• the Controller Ready With Media Timeout (CRTO.CRWMT) field in<br>Controller Ready With Media mode (CC.CRIME is cleared to ‘0’); or<br>• the Controller Ready Independent of Media Timeout (CRTO.CRIMT) field<br>in Controller Ready Independent of Media mode (CC.CRIME is set to ‘1’),<br>since the controller was enabled; or<br>b) at least one namespace attached to the controller or media required to process at<br>least one Admin command was not ready within the amount of time indicated by the<br>Controller Ready With Media Timeout (CRTO.CRWMT) field since the controller was<br>enabled by transitioning CC.EN from ‘0’ to ‘1’.<br>Refer to Figure 235 for the format of the Additional Hardware Error Information field.|\n|0Ch to FFh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2690,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2312",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46626046299934387
  },
  {
    "content": "**Figure 234: Additional Hardware Error Information for correctable and uncorrectable PCIe**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2313",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6430384516716003
  },
  {
    "content": "|Bytes|Value|\n|---|---|\n|01:00|PCIe Device Status Register: Contains the contents of the PCI Device Status Register<br>(refer to the PCI Express specification) at the time of the event.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 186,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2314",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27197974920272827
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2315",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25265002250671387
  },
  {
    "content": "**Figure 234: Additional Hardware Error Information for correctable and uncorrectable PCIe**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2316",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6159731149673462
  },
  {
    "content": "|Bytes|Value|\n|---|---|\n|02|Bits 7:1 Reserved<br>Bit 0 PCIe AER Supported: set to ‘1’ indicates that PCIe AER (refer to the PCI Express<br>specification) is supported and that the PCIe AER Error Status field, PCIe AER Error Mask<br>field, PCIe AER Header Log Register field, and the PCIe AER TLP Prefix Log Register field<br>are reported. Bit 0 cleared to ‘0’ indicates that PCIe AER is not supported and that the PCIe<br>AER Error Status field, PCIe AER Error Mask field, PCIe AER Header Log Register field,<br>and PCIe AER TLP Prefix Log Register field are not reported (i.e., bytes 79:16 are not<br>reported).|\n|15:03|Reserved|\n|31:16|PCIe AER Error Status: Contains the contents of:<br>a) the PCIe AER Correctable Error Status Register (refer to the Advanced Error<br>Reporting Capability section in the NVMe over PCIe Transport Specification) at the<br>time of the event if the error is a correctable error; or<br>b) The PCIe AER Uncorrectable Error Status Register (refer to the Advanced Error<br>Reporting Capability section in the NVMe over PCIe Transport Specification), at the<br>time of the event if the error is an uncorrectable error.|\n|47:32|PCIe AER Error Mask: Contains the contents of<br>a) the PCIe AER Correctable Error Mask Register (refer to the Advanced Error<br>Reporting Capability section in the NVMe over PCIe Transport Specification) at the<br>time of the event if the error is a correctable error; or<br>b) the PCIe AER Uncorrectable Error Mask Register (refer to the Advanced Error<br>Reporting Capability section in the NVMe over PCIe Transport Specification) at the<br>time of the event if the error is an uncorrectable error.|\n|63:48|PCIe AER Header Log Register: Contains the contents of the PCIe AER Header Log<br>Register (refer to the Advanced Error Reporting Capability section in the NVMe over PCIe<br>Transport Specification), if supported, at the time of the event.|\n|79:64|PCIe AER TLP Prefix Log Register: Contains the contents of the PCIe AER TLP Prefix Log<br>Register (refer to the Advanced Error Reporting Capability section in the NVMe over PCIe<br>Transport Specification), if supported, at the time of the event.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2317",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26583221554756165
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2318",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2468573898077011
  },
  {
    "content": "**Figure 235: Additional Hardware Error Information for Controller Ready Timeout**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2319",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6362178921699524
  },
  {
    "content": "|Bytes|Value|\n|---|---|\n|0|Controller State: Indicates the state of the controller at the time the Controller Ready<br>Timeout Exceeded error occurred.<br>Bits Description<br>7:4 Reserved<br>Controller Not Ready: Indicates the controller was not ready to process<br>at least one command without error as described in section 3.5.4.1 within<br>the amount of time indicated by:<br>a) the Controller Ready With Media Timeout (CRTO.CRWMT)<br>field in Controller Ready With Media mode (CC.CRIME is<br>3<br>cleared to ‘0’); or<br>b) the Controller Ready Independent of Media Timeout<br>(CRTO.CRIMT) fied in Controller Ready Independent of Media<br>mode (CC.CRIME is set to ‘1’),<br>since the controller was enabled.<br>Admin Command Media Not Ready: Indicates media required to<br>process at least one Admin command was not ready within the amount<br>2 of time indicated by the Controller Ready With Media Timeout<br>(CRTO.CRWMT) field since the controller was enabled by transitioning<br>CC.EN from ‘0’ to ‘1’.<br>Namespace Not Ready: Indicates at least one namespace attached to<br>the controller was not ready within the amount of time indicated by the<br>1<br>Controller Ready With Media Timeout (CRTO.CRWMT) field since the<br>controller was enabled by transitioning CC.EN from ‘0’ to ‘1’.<br>Controller Ready Independent of Media Enable: Indicates the value<br>0 of the CC.CRIME bit when the Controller Ready Timeout Exceeded error<br>occurred.|\n|3:1|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1460,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2320",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8427421450614929
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|7:4|Reserved|\n|3|Controller Not Ready: Indicates the controller was not ready to process<br>at least one command without error as described in section 3.5.4.1 within<br>the amount of time indicated by:<br>a) the Controller Ready With Media Timeout (CRTO.CRWMT)<br>field in Controller Ready With Media mode (CC.CRIME is<br>cleared to ‘0’); or<br>b) the Controller Ready Independent of Media Timeout<br>(CRTO.CRIMT) fied in Controller Ready Independent of Media<br>mode (CC.CRIME is set to ‘1’),<br>since the controller was enabled.|\n|2|Admin Command Media Not Ready: Indicates media required to<br>process at least one Admin command was not ready within the amount<br>of time indicated by the Controller Ready With Media Timeout<br>(CRTO.CRWMT) field since the controller was enabled by transitioning<br>CC.EN from ‘0’ to ‘1’.|\n|1|Namespace Not Ready: Indicates at least one namespace attached to<br>the controller was not ready within the amount of time indicated by the<br>Controller Ready With Media Timeout (CRTO.CRWMT) field since the<br>controller was enabled by transitioning CC.EN from ‘0’ to ‘1’.|\n|0|Controller Ready Independent of Media Enable: Indicates the value<br>of the CC.CRIME bit when the Controller Ready Timeout Exceeded error<br>occurred.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1290,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2321",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2087467908859253
  },
  {
    "content": "**5.16.1.14.1.6** **Change Namespace Event (Event Type 06h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2322",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6007137894630432
  },
  {
    "content": "The Changed Namespace Event (refer to Figure 236) persists the host parameters used for successful\nNamespace Management commands. The event contains a Persistent Event Log Event header and the\nChange Namespace Event data.\n\nThe Changed Namespace Event shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 306,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2323",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25009846687316895
  },
  {
    "content": "- Event Type field to 06h; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2324",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6665312647819519
  },
  {
    "content": "- Event Type Revision Field to 02h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2325",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4379566013813019
  },
  {
    "content": "**Figure 236: Change Namespace Event Data Format (Event Type 06h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2326",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4590908885002136
  },
  {
    "content": "|Bytes|Value|\n|---|---|\n|03:00|Namespace Management CDW10: Contains the value from command Dword 10 of the<br>Namespace Management command that initiated the namespace change event (refer to Figure<br>298).|\n|07:04|Reserved|\n|15:08|Namespace Size (NSZE): For a create operation, contains the NSZE value from the Identify<br>Namespace data structure in the Namespace Management command (refer to Figure 300). For<br>a delete operation that specifies a single namespace this field contains the value from the NSZE<br>field of the Identify Namespace data structure (refer to the I/O Command Set specific Identify<br>Namespace data structure in the applicable I/O Command Set specification) for the namespace<br>being deleted. For a delete operation that specifies all namespaces this field is reserved.|\n|23:16|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 817,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2327",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20805972814559937
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2328",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15611791610717773
  },
  {
    "content": "**Figure 236: Change Namespace Event Data Format (Event Type 06h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2329",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23894667625427246
  },
  {
    "content": "|Bytes|Value|\n|---|---|\n|31:24|Namespace Capacity (NCAP): For a creation operation, contains the NCAP value from the<br>Identify Namespace data structure in the Namespace Management command (refer to Figure<br>300). For a delete operation that specifies a single namespace this field contains the value from<br>the NCAP field of the Identify Namespace data structure (refer to the I/O Command Set specific<br>Identify Namespace data structure in the applicable I/O Command Set specification) for the<br>namespace being deleted. For a delete operation that specifies all namespaces this field is<br>reserved. For I/O Command Sets that don’t define this field, it is considered reserved.|\n|32|Formatted LBA Size (FLBAS): Refer to the applicable I/O Command Set specification for details.<br>For I/O Command Sets that don’t define this field, it is considered reserved.<br>NOTE: This field applies to all User Data Formats. The original name has been retained for<br>historical continuity.|\n|33|End-to-end Data Protection Type Settings (DPS): Refer to the applicable I/O Command Set<br>specification for details. For I/O Command Sets that don’t define this field, it is considered<br>reserved.|\n|34|Namespace Multi-path I/O and Namespace Sharing Capabilities (NMIC): For a create<br>operation, contains the NMIC value from the Namespace Management – Host Software Specified<br>Fields data structure defined in the applicable I/O Command Set specification. For a delete<br>operation that specifies a single namespace this field contains the value from the NMIC field of<br>1<br>the I/O Command Set Independent Identify Namespace data (refer to Figure 280 ) for the<br>namespace being deleted. For a delete operation that specifies all namespaces this field is<br>reserved.|\n|35|Reserved|\n|39:36|ANA Group Identifier (ANAGRPID): For a create operation, contains the ANAGRPID value from<br>the Namespace Management – Host Software Specified Fields data structure defined in the<br>applicable I/O Command Set specification, if specified, or contains the ANAGRPID value from the<br>1<br>I/O Command Set Independent Identify Namespace data (refer to Figure 280 ) after the<br>namespace was created if an ANA Group Identifier was not specified in the command. For a<br>delete operation that specifies a single namespace this field contains the value from the<br>ANAGRPID field of the I/O Command Set Independent Identify Namespace data (refer to Figure<br>2801) for the namespace being deleted. For a delete operation that specifies all namespaces this<br>field is reserved.<br>If ANA Groups are not supported, then the ANAGRPID field shall be cleared to 0h.|\n|41:40|NVM Set Identifier (NVMSETID): For a create operation, contains the NVMSETID value from the<br>Namespace Management – Host Software Specified Fields data structure defined in the<br>applicable I/O Command Set specification. For a delete operation that specifies a single<br>namespace this field contains the value from the NVMSETID field of the Identify Namespace data<br>1<br>(refer to Figure 280 ) for the namespace being deleted. For a delete operation that specifies all<br>namespaces this field is reserved.|\n|43:42|Endurance Group Identifier (ENDGID): For a create operation, contains the ENDGID value from<br>the Namespace Management – Host Software Specified Fields data structure defined in the<br>applicable I/O Command Set specification. For a delete operation that specifies a single<br>namespace, this field contains the value from the ENDGID field of the Identify Namespace data<br>1<br>structure (refer to Figure 280 ) for the namespace being deleted. For a delete operation that<br>specifies all namespaces this field is reserved.|\n|47:44|Namespace ID (NSID): For a create operation, contains the NSID for the namespace that was<br>created. For a delete operation, contains the NSID for the namespace being deleted or<br>FFFFFFFFh for a delete operation specifying all namespaces.|\n|Notes:<br>1. For controllers that implement the NVM Command Set, this field contains the value of the associated<br>field from the Identify Namespace data structure (refer to the NVM Command Set Identify Namespace<br>data structure in the NVM Command Set Specification).|Notes:<br>1. For controllers that implement the NVM Command Set, this field contains the value of the associated<br>field from the Identify Namespace data structure (refer to the NVM Command Set Identify Namespace<br>data structure in the NVM Command Set Specification).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 4498,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2330",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2096351981163025
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2331",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4537661373615265
  },
  {
    "content": "**5.16.1.14.1.7** **Format NVM Start Event (Event Type 07h)**\n\nA Format NVM Start event shall be recorded in the Persistent Event Log after successfully validating the\ncommand parameters of a Format NVM Command (refer to section 5.14) and before modifying any of the\ncontents of the NVM.\n\nThe Format NVM Start event shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 371,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2332",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3441735506057739
  },
  {
    "content": "- Event Type field to 07h; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2333",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6999978423118591
  },
  {
    "content": "- Event Type Revision field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2334",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46995338797569275
  },
  {
    "content": "**Figure 237: Format NVM Start Event Data Format (Event Type 07h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2335",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4726918339729309
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Namespace Identifier: Contains the namespace identifier specified in the Format NVM<br>command.|\n|04|Format NVM Attributes (FNA): Contains the value from the identify controller FNA field.|\n|07:05|Reserved|\n|11:08|Format NVM CDW10: Contains the value from command Dword 10 of the Format NVM<br>command (refer to Figure 189).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 362,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2336",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3684484660625458
  },
  {
    "content": "**5.16.1.14.1.8** **Format NVM Completion Event (Event Type 08h)**\n\nA Format NVM Completion event shall be recorded in the Persistent Event Log at the completion of a\nFormat NVM command that resulted in modification of the contents of the NVM.\n\nThe Format NVM Completion event shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 332,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2337",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3132709860801697
  },
  {
    "content": "- Event Type field to 08h; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2338",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6826687455177307
  },
  {
    "content": "- Event Type Revision field to 02h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2339",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45824331045150757
  },
  {
    "content": "**Figure 238: Format NVM Completion Event Data Format (Event Type 08h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2340",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49747800827026367
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Namespace Identifier: Contains the namespace identifier specified in the Format NVM command.|\n|04|Smallest Format Progress Indicator: For a Format NVM command that formats a single<br>namespace, this field contains the lowest numerical value that was available for reporting in the<br>FPI field of the Identify Namespace data structure (i.e., if the format did not complete successfully<br>and the FPI field is supported, then this field contains the percentage of the namespace that<br>remained to be formatted at the time the Format NVM command completed, refer to Figure 280)<br>during the format operation. For a Format NVM command that formats all namespaces this field<br>shall be cleared to 0h.|\n|05|Format NVM Status: Contains the status of the format operation.<br>Bits Definition<br>7:2 Reserved<br>Incomplete Format: If set to ‘1’, then the format operation modified some or all<br>of the user data but did not complete successfully. If set to ‘1’, then the Format<br>1<br>NVM Error bit shall be set to ‘1’. If cleared to ‘0’, then the format operation either<br>did not modify any user data or the format operation completed successfully.<br>Format NVM Error: If set to ‘1’, then the format operation did not complete<br>0<br>successfully. If cleared to ‘0’, then the format operation completed successfully.|\n|07:06|Completion Information: Contains a vendor specific value that may provide more information<br>about the completion of the format operation (e.g., if the format operation did not complete<br>successfully, then this field may contain a vendor specific code that indicates a vendor specific<br>reason).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1666,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2341",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5346053838729858
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|7:2|Reserved|\n|1|Incomplete Format: If set to ‘1’, then the format operation modified some or all<br>of the user data but did not complete successfully. If set to ‘1’, then the Format<br>NVM Error bit shall be set to ‘1’. If cleared to ‘0’, then the format operation either<br>did not modify any user data or the format operation completed successfully.|\n|0|Format NVM Error: If set to ‘1’, then the format operation did not complete<br>successfully. If cleared to ‘0’, then the format operation completed successfully.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 549,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2342",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4695657789707184
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2343",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41185125708580017
  },
  {
    "content": "**Figure 238: Format NVM Completion Event Data Format (Event Type 08h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2344",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5439548492431641
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15:1|Status: This field indicates the value that was reported in the Status field for the<br>completion queue entry, if any, for the Format NVM command associated with<br>this event. If no completion queue entry was reported, then this field shall be<br>cleared to 0h.|\n|0|Phase Tag: This field may indicate the Phase Tag posted for the command.|\n\n|Bytes|Description|\n|---|---|\n|09:08|Bits Description<br>Status: This field indicates the value that was reported in the Status field for the<br>completion queue entry, if any, for the Format NVM command associated with<br>15:1<br>this event. If no completion queue entry was reported, then this field shall be<br>cleared to 0h.<br>0 Phase Tag: This field may indicate the Phase Tag posted for the command.|\n|11:10|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 802,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2345",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26732975244522095
  },
  {
    "content": "**5.16.1.14.1.9** **Sanitize Start Event (Event Type 09h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2346",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6777555346488953
  },
  {
    "content": "A Sanitize Start event shall be recorded in the Persistent Event Log at the start of a sanitize operation.\n\nThe Sanitize Start event shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 188,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2347",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26456722617149353
  },
  {
    "content": "- Event Type field to 09h; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2348",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6978695392608643
  },
  {
    "content": "- Event Type Revision field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2349",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4612109065055847
  },
  {
    "content": "**Figure 239: Sanitize Start Event Data Format (Event Type 09h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2350",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5178951025009155
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|SANICAP: Contains the contents of the SANICAP field from the Identify Controller data structure.|\n|07:04|Sanitize CDW10: Contains the value from command Dword 10 of the Sanitize command (refer<br>to Figure 303).|\n|11:08|Sanitize CDW11: Contains the value from command Dword 11 of the Sanitize command (refer<br>to Figure 304).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 364,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2351",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3487139940261841
  },
  {
    "content": "**5.16.1.14.1.10 Sanitize Completion Event (Event Type 0Ah)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2352",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6793519258499146
  },
  {
    "content": "A Sanitize Completion event shall be recorded in the Persistent Event Log at the completion of a sanitize\noperation.\n\nThe Sanitize Completion event shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 203,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2353",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2722712457180023
  },
  {
    "content": "- Event Type field to 0Ah; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2354",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5881619453430176
  },
  {
    "content": "- Event Type Revision field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2355",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42089465260505676
  },
  {
    "content": "**Figure 240: Sanitize Completion Event Data Format (Event Type 0Ah)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2356",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5006111264228821
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|1:0|Sanitize Progress: Contains the sanitize progress at the time of this event using the format<br>specified for the SPROG field in the Sanitize Status log page (refer to section 5.16.1.25).|\n|3:2|Sanitize Status: Contains the sanitize status for the time of this event using the format specified<br>for the SSTAT field in the Sanitize Status log page. (e.g., the Global Data Erase bit indicates the<br>status at the time of this event).|\n|5:4|Completion Information: Contains a vendor specific value that may provide more information<br>about the completion of the sanitize operation (e.g., if the sanitize operation did not complete<br>successfully, then this field may contain a vendor specific code that indicates a vendor specific<br>reason).|\n|7:6|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 795,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2357",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1840183287858963
  },
  {
    "content": "**5.16.1.14.1.11 Set Feature Event (Event Type 0Bh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2358",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5675374269485474
  },
  {
    "content": "The Set Feature Event persists the data of a successful Set Features command. The event contains a\nPersistent Event Log Event header and the Set Feature Event data (refer to Figure 241).\n\nThe Set Feature Event shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2359",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3046458661556244
  },
  {
    "content": "- Event Type field to 0Bh; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2360",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06512892246246338
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2361",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.127809077501297
  },
  {
    "content": "- Event Type Revision Field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2362",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.348490834236145
  },
  {
    "content": "A Set Feature Event shall be recorded in the Persistent Event Log when the following criteria are met:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2363",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6690254807472229
  },
  {
    "content": "a) A Set Features command completes successfully;\nb) The Feature Identifier in that Set Features command is supported to be logged in the Persistent",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2364",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.59687739610672
  },
  {
    "content": "Event Log; and\nc) There is a change to the controller settings for the Feature Identifier in that Set Features command",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2365",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38844189047813416
  },
  {
    "content": "(i.e., the same setting is not set again).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2366",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33775484561920166
  },
  {
    "content": "A Set Feature Event may be recorded in the Persistent Event Log when there is no change to the controller\nsettings for the Feature Identifier in that Set Features command if the following criteria are met:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2367",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.696783185005188
  },
  {
    "content": "a) A Set Features command completes successfully; and\nb) The Feature Identifier in that Set Features command is supported to be logged in the Persistent",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 152,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2368",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6633022427558899
  },
  {
    "content": "The Feature Identifiers that may be supported to be logged in the Persistent Event Log are shown in Figure\n25, Figure 30, and Figure 34.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2369",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5211406946182251
  },
  {
    "content": "The Command Dwords and Memory Buffer logged in the Set Feature Event data use the same formats as\nthe formats defined by the Set Features and Get Features commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2370",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5455268025398254
  },
  {
    "content": "**Figure 241: Set Feature Event Data Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2371",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23141171038150787
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|31:16|Memory Buffer Count: Defines the number of bytes from the<br>memory buffer that are logged in the Memory Buffer field. A value<br>of 0h indicates that the Memory Buffer field does not exist.|\n|15:04|Reserved|\n|03|Logged Command Completion Dword 0: If set to ‘1’, then<br>Dword 0 of the command completion for the Set Features<br>command is included in the log. If cleared to ‘0’, then Dword 0 of<br>the command completion command for the Set Features<br>command is not included in the log.|\n|02:00|Dword Count: contains the number of consecutive Dwords<br>starting with Dword 10 from the Set Features command that are<br>reported in the Command Dwords field. The values 0h and 7h are<br>reserved.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 732,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2372",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8508357405662537
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Set Feature Event Layout: Defines the number of Command Dwords and the<br>amount of data in the Memory Buffer from the Set Features command associated<br>with this event.<br>Bits Definition<br>Memory Buffer Count: Defines the number of bytes from the<br>31:16 memory buffer that are logged in the Memory Buffer field. A value<br>of 0h indicates that the Memory Buffer field does not exist.<br>15:04 Reserved<br>Logged Command Completion Dword 0: If set to ‘1’, then<br>Dword 0 of the command completion for the Set Features<br>03 command is included in the log. If cleared to ‘0’, then Dword 0 of<br>the command completion command for the Set Features<br>command is not included in the log.<br>Dword Count: contains the number of consecutive Dwords<br>starting with Dword 10 from the Set Features command that are<br>02:00<br>reported in the Command Dwords field. The values 0h and 7h are<br>reserved.|\n|(Dword Count * 4)+3: 4|Command Dwords: Contains a sequential list of Command Dwords from the Set<br>Features command starting with Command Dword 10. The number of entries in<br>the list is specified by the Command Dword Count field. All non-reserved<br>Command Dwords specified by the Set Features command for the Feature<br>Identifier shall be logged. The Command Dwords are ordered as defined by the<br>Common Command Format in Figure 87.|\n|(Memory Buffer Count) +<br>(Dword Count * 4) + 3:<br>(Dword Count * 4) + 4|Memory Buffer: Contains the data in the memory buffer for the Set Features<br>command.<br>If the Memory Buffer Count field is cleared to 0h, then this field does not exist in<br>the logged event.|\n|Memory Buffer Count +<br>(Dword Count * 4)+7:<br>Memory Buffer Count +<br>(Dword Count * 4)+4|Command Completion Dword 0: If the Logged Command Completion Dword 0<br>bit is set to ‘1’, then this field contains the Dword 0 value from the Set Features<br>command completion. If the Logged Command Completion Dword 0 bit is cleared<br>to ‘0’, then this field is not logged.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2028,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2373",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15980371832847595
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2374",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.049038324505090714
  },
  {
    "content": "**5.16.1.14.1.12 Telemetry Log Create Event (Event Type 0Ch)**\n\nA Telemetry Log Create event may be created if the controller determines that a Telemetry Host-Initiated\nlog page (refer to section 5.16.1.8) or that a Telemetry Controller-Initiated log page (refer to section\n5.16.1.9) has been generated.\n\nThe Telemetry Log Create Event shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 391,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2375",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3160015642642975
  },
  {
    "content": "- Event Type field to 0Ch; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2376",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5925946831703186
  },
  {
    "content": "- Event Type Revision Field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2377",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4503646194934845
  },
  {
    "content": "**Figure 242: Telemetry Log Create Event Data Format (Event Type 0Ch)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 71,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2378",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6222130060195923
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|511:00|Telemetry Initiated Log: Contains a copy of the values from the first 512 bytes of the<br>Telemetry Host-Initiated log page (refer to Figure 215) or the first 512 bytes of the Telemetry<br>Controller-Initiated log page (refer to Figure 216).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 280,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2379",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17616255581378937
  },
  {
    "content": "**5.16.1.14.1.13 Thermal Excursion Event (Event Type 0Dh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2380",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.632081925868988
  },
  {
    "content": "A Thermal Excursion event shall be recorded in the Persistent Event Log if the Composite Temperature\nhas transitioned from a temperature that is less than:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2381",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46706441044807434
  },
  {
    "content": "a) the WCTEMP, if any, (refer to Figure 275) to a temperature that is greater than or equal to the\n\nWCTEMP, if any; or\nb) the CCTEMP, if any, (refer to Figure 275), to a temperature that is greater than or equal to the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 218,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2382",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1722153127193451
  },
  {
    "content": "unless recording of the event causes a vendor specific frequency of threshold reports for this threshold to\nbe exceeded.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 120,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2383",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38644012808799744
  },
  {
    "content": "A Thermal Excursion event may be recorded in the Persistent Event Log if the Composite Temperature has\ntransitioned from a temperature:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 135,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2384",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33631065487861633
  },
  {
    "content": "a) that is less than TMT1 (refer to section 5.27.1.13), if any, to a temperature that is greater than or\n\nequal to TMT1, if any (i.e., light throttling has started);\nb) that is less than TMT2 (refer to section 5.27.1.13), if any, to a temperature that is greater than or\n\nequal to TMT2, if any (i.e., heavy throttling has started);\nc) that is less than a vendor specific temperature where thermal throttling occurs due to self-throttling\n\nto a temperature that is greater than that vendor specific temperature (i.e., self-throttling has\nstarted);\nd) outside of a temperature threshold to a value that is within all temperature thresholds (i.e., the\n\ntemperature returns to normal);\ne) at which thermal throttling is occurring to a temperature at which thermal throttling is stopped; or\nf) that is greater than an under temperature threshold (refer to section 5.27.1.3) to a temperature that\nis less than or equal to an under temperature threshold,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 947,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2385",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32868775725364685
  },
  {
    "content": "unless recording of the event causes a vendor specific frequency of threshold reports for this threshold to\nbe exceeded.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 120,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2386",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4052944481372833
  },
  {
    "content": "The Thermal Excursion event shall set the Persistent Event Log Event Format Header;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2387",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3259328305721283
  },
  {
    "content": "- Event Type field to 0Dh; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2388",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6181694865226746
  },
  {
    "content": "- Event Type Revision field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2389",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3707643151283264
  },
  {
    "content": "**Figure 243: Thermal Excursion Event Data Format (Event Type 0Dh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2390",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46867093443870544
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|0|Over Temperature: Contains the absolute value of the difference (i.e., delta) in Kelvins between<br>the temperature indicated in the threshold field and temperature measured at the time of the event.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 233,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2391",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04649510234594345
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2392",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28471702337265015
  },
  {
    "content": "**Figure 243: Thermal Excursion Event Data Format (Event Type 0Dh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2393",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4112982451915741
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|1|Threshold: Contains an indicator for the temperature threshold crossing that is being reported.<br>Value Definition<br>High Temperature Transitions<br>The Composite Temperature has transitioned from a temperature that is less<br>1h<br>than WCTEMP to a temperature that is greater than or equal to WCTEMP.<br>The Composite Temperature has transitioned from a temperature that is less<br>2h<br>than CCTEMP to a temperature that is greater than or equal to CCTEMP.<br>The Composite Temperature has transitioned from a temperature that is less<br>than TMT1 to a temperature is greater than or equal to TMT1 (i.e., vendor<br>3h<br>specific thermal management actions that minimize the impact on<br>performance, such as light throttling, have started).<br>The Composite Temperature has transitioned from a temperature that is less<br>than TMT2 to a temperature that is greater than or equal to TMT2 (i.e.,<br>4h<br>vendor specific thermal management actions that may impact performance,<br>such as heavy throttling, have started).<br>The Composite Temperature has transitioned from a temperature where no<br>vendor specific thermal management actions are taken to a temperature that<br>5h<br>is greater than or equal to a vendor specific temperature at which vendor<br>specific thermal management actions have started (e.g., self-throttling).<br>Normal Temperature Transitions<br>The Composite Temperature has transitioned from a temperature that is<br>greater than or equal to WCTEMP or is less than or equal to an under<br>88h temperature threshold to a temperature that is between WCTEMP and that<br>under temperature threshold (i.e., the temperature has transitioned to a<br>normal temperature).<br>The Composite Temperature has transitioned from a temperature that is<br>greater than a temperature where thermal management actions are being<br>89h<br>performed and that is not greater than or equal to WCTEMP to a temperature<br>where thermal management actions are stopped.<br>Low Temperature Transitions<br>The Composite Temperature has transition from a temperature that is<br>B0h greater than an under temperature threshold to a temperature that is less<br>than or equal to an under temperature threshold.<br>F0h to FFh Vendor specific<br>All other<br>Reserved<br>values|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2307,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2394",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7466769814491272
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|High Temperature Transitions|High Temperature Transitions|\n|1h|The Composite Temperature has transitioned from a temperature that is less<br>than WCTEMP to a temperature that is greater than or equal to WCTEMP.|\n|2h|The Composite Temperature has transitioned from a temperature that is less<br>than CCTEMP to a temperature that is greater than or equal to CCTEMP.|\n|3h|The Composite Temperature has transitioned from a temperature that is less<br>than TMT1 to a temperature is greater than or equal to TMT1 (i.e., vendor<br>specific thermal management actions that minimize the impact on<br>performance, such as light throttling, have started).|\n|4h|The Composite Temperature has transitioned from a temperature that is less<br>than TMT2 to a temperature that is greater than or equal to TMT2 (i.e.,<br>vendor specific thermal management actions that may impact performance,<br>such as heavy throttling, have started).|\n|5h|The Composite Temperature has transitioned from a temperature where no<br>vendor specific thermal management actions are taken to a temperature that<br>is greater than or equal to a vendor specific temperature at which vendor<br>specific thermal management actions have started (e.g., self-throttling).|\n|Normal Temperature Transitions|Normal Temperature Transitions|\n|88h|The Composite Temperature has transitioned from a temperature that is<br>greater than or equal to WCTEMP or is less than or equal to an under<br>temperature threshold to a temperature that is between WCTEMP and that<br>under temperature threshold (i.e., the temperature has transitioned to a<br>normal temperature).|\n|89h|The Composite Temperature has transitioned from a temperature that is<br>greater than a temperature where thermal management actions are being<br>performed and that is not greater than or equal to WCTEMP to a temperature<br>where thermal management actions are stopped.|\n|Low Temperature Transitions|Low Temperature Transitions|\n|B0h|The Composite Temperature has transition from a temperature that is<br>greater than an under temperature threshold to a temperature that is less<br>than or equal to an under temperature threshold.|\n|F0h to FFh|Vendor specific|\n|All other<br>values|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2240,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2395",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08733244985342026
  },
  {
    "content": "**5.16.1.14.1.14 Vendor Specific Event (Event Type DEh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2396",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5544805526733398
  },
  {
    "content": "The Vendor Specific Event (refer to Figure 244) contains a set of Vendor Specific Event Descriptors that\ndescribe an event that the vendor has determined is a significant event which should be reported to a host\nin the persistent event log and that is not described by any of the other persistent event log events.\n\nThe Vendor Specific Event Descriptors follow the format shown in Figure 245 and contain vendor specific\ndata of the type indicated in the Vendor Specific Event Data Type field of the Vendor Specific Event\nDescriptor.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 532,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2397",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13813182711601257
  },
  {
    "content": "If a UUID Index is specified in the Get Log Page command (refer to section 5.16), then the controller shall\nreturn:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 115,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2398",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3176724314689636
  },
  {
    "content": "a) Vendor specific events defined by the vendor identified by the specified UUID index; and\nb) Vendor specific events defined by the NVM subsystem manufacturer.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 160,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2399",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4505872130393982
  },
  {
    "content": "The controller shall set the Vendor Specific Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2400",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2823568880558014
  },
  {
    "content": "a) Event Type field to DEh; and\nb) Event Type Revision field to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2401",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1931714415550232
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2402",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2694040834903717
  },
  {
    "content": "The Vendor Specific Event data is specified in Figure 244.\n\n**Figure 244: Vendor Specific Event Format (Event Type DEh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 121,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2403",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6533578038215637
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|M-1:0|Vendor Specific Event Descriptor 0: Contains the first vendor specific event descriptor<br>(refer to Figure 245). Where M is the length of this vendor specific event descriptor.|\n|…||\n|EL-VSIL-1:<br>1<br>EL-VSIL-K|Vendor Specific Event Descriptor N: Contains the last vendor specific event descriptor<br>(refer to Figure 245). Where K is the length of this vendor specific event descriptor (refer to<br>Figure 245).|\n|Notes:<br>1. Refer to Figure 225 for the definitions of EL and VSIL.|Notes:<br>1. Refer to Figure 225 for the definitions of EL and VSIL.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 593,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2404",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6110801100730896
  },
  {
    "content": "The format of the Vendor Specific Event Descriptor is shown in Figure 245.\n\n**Figure 245: Vendor Specific Event Descriptor Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 131,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2405",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6064487099647522
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Vendor Specific Event Code: Contains a vendor specific code that uniquely identifies the<br>type of event that is described in the data that follows. All vendor specific events of the same<br>type should report the same Vendor Specific Event Code field value.|\n|02|Vendor Specific Event Data Type: Contains a code indicating the type of data reported in<br>the Vendor Specific Event Data field (refer to Figure 246).|\n|03|UUID Index: UUID Index (refer to Figure 477) at the time of this event for the vendor that<br>defined this event.|\n|05:04|Vendor Specific Event Data Length (VSEDL): Contains the length in bytes of the Vendor<br>Specific Event Data field.|\n|Vendor Specific Event Data, if any (i.e., VSEDL > 0)|Vendor Specific Event Data, if any (i.e., VSEDL > 0)|\n|VSEDL+5:06|Vendor Specific Event Data: Contains vendor specific data that is associated with this<br>event and is of the type specified in the Vendor Specific Event Data Type field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 989,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2406",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6698045134544373
  },
  {
    "content": "The Vendor Specific Event Data Types that are able to be reported in a Vendor Specific Event Descriptor\nare shown in Figure 246.\n\n**Figure 246: Vendor Specific Event Data Type Codes**\n\n|Code|Description|\n|---|---|\n|00h|Reserved|\n|01h|Event Name: The Vendor Specific Event Data field contains a null terminated ASCII string<br>with a vendor specific name for the value in the Vendor Specific Event Code field.<br>The value reported in this field shall be the same for every vendor specific event containing<br>a vendor specific event code that is the same as the value in the Vendor Specific Event Code<br>field in this event.<br>If a Vendor Specific Event Descriptor specifying this data type is reported, then that<br>descriptor shall be the first Vendor Specific Event Descriptor in that event.|\n|02h|ASCII String: The Vendor Specific Event Data field contains a null terminated ASCII string.|\n|03h|Binary: The Vendor Specific Event Data field contains binary data. The byte ordering in the<br>binary data is determined by the NVM subsystem vendor.|\n|04h|Signed Integer: The Vendor Specific Event Data field contains a 64-bit signed integer in<br>two’s complement form.|\n|05h to FFh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1194,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2407",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42598506808280945
  },
  {
    "content": "**5.16.1.14.1.15 TCG Defined Event (Event Type DFh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2408",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5568720698356628
  },
  {
    "content": "The TCG Defined Event shall set the Persistent Event Log Event Format Header:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 77,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2409",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32857513427734375
  },
  {
    "content": "- Event Type field to DFh.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2410",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.004405826795846224
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2411",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19505338370800018
  },
  {
    "content": "The Event Type Revision Field and the TCG Defined Event data are reserved for TCG.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2412",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.374103844165802
  },
  {
    "content": "**5.16.1.15 Endurance Group Event Aggregate (Log Identifier 0Fh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2413",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.55689936876297
  },
  {
    "content": "This log page indicates if an Endurance Group Event (refer to section 3.2.3) has occurred for a particular\nEndurance Group. If an Endurance Group Event has occurred, the details of the particular event are\nincluded in the Endurance Group Information log page for that Endurance Group. An asynchronous event\nis generated when an entry for an Endurance Group is newly added to this log page.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 389,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2414",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6772371530532837
  },
  {
    "content": "If there is an enabled Endurance Group Event pending for an Endurance Group, then the Endurance Group\nEvent Aggregate log page includes an entry for that Endurance Group. The log page is an ordered list by\nEndurance Group Identifier. For example, if Endurance Group Events are pending for Endurance Group 2,\n1, and 7, then the log page shall have entries in numerical order of 1, 2, and 7. A particular Endurance\nGroup entry is removed from this log page after the Get Log Page command is completed successfully with\nthe Retain Asynchronous Event bit cleared to ‘0’ for the Endurance Group Information log page for that\nEndurance Group.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 636,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2415",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4472797214984894
  },
  {
    "content": "The log page size is limited by the Endurance Group Identifier Maximum value reported in the Identify\nController data structure (refer to Figure 275). If the host reads beyond the end of the log page, zeroes are\nreturned. The log page is defined in Figure 247.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 260,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2416",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43625032901763916
  },
  {
    "content": "**Figure 247: Endurance Group Event Aggregate Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2417",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5521174669265747
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Number of Entries: This field indicates the number of entries in the list. The maximum number<br>of entries in the list corresponds to the Endurance Group Identifier Maximum field reported in<br>the Identify Controller data structure. A value of 0h indicates there are no entries in the list.|\n|09:08|Entry 1: Indicates the Endurance Group that has an Endurance Group Event pending that has<br>the numerically smallest Endurance Group Identifier, if any.|\n|11:10|Entry 2: Indicates the Endurance Group that has an Endurance Group Event pending that has<br>the second numerically smallest Endurance Group Identifier, if any.|\n|13:12|Entry 3: Indicates the Endurance Group that has an Endurance Group Event pending that has<br>the third numerically smallest Endurance Group Identifier, if any.|\n|15:14|Entry 4: Indicates the Endurance Group that has an Endurance Group Event pending that has<br>the fourth numerically smallest Endurance Group Identifier, if any.|\n|…|…|\n|2*n+7:2*n+6|Entry n: Indicates the Endurance Group that has an Endurance Group Event pending that has<br>the numerically largest Endurance Group Identifier, if any.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1171,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2418",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21321415901184082
  },
  {
    "content": "**5.16.1.16 Media Unit Status (Log Identifier 10h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2419",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.595382809638977
  },
  {
    "content": "This log page is used to describe the configuration and wear of Media Units (refer to section 8.3). The log\npage contains one Media Unit Status Descriptor for each Media Unit accessible by the specified domain.\nEach Media Unit Status Descriptor (refer to Figure 249) indicates the configuration of the Media Unit (e.g.,\nto which Endurance Group the Media Unit is assigned, to which NVM Set the Media Unit is assigned, to\nwhich Channels the Media Unit is attached) and indications of wear (e.g., the Available Spare field and the\nPercentage Used field). The indications of wear change as the Media Unit is written and read.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 622,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2420",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6340190172195435
  },
  {
    "content": "If the NVM subsystem supports multiple domains, then the controller reports the Media Unit Status log page\nfor the domain specified in the Log Specific Identifier field (refer to Figure 198), if accessible. If the\ninformation is not accessible, then the log page is not available (refer to section 8.1.4). If the Log Specific\nIdentifier field is cleared to 0h, then the specified domain is the domain containing the controller that is\nprocessing the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 458,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2421",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6437723636627197
  },
  {
    "content": "Media Unit Identifier values (refer to Figure 249) begin with 0h and increase sequentially. If the NVM\nsubsystem supports multiple domains, then the Media Unit Identifier values are unique within the specified\ndomain. If the NVM subsystem does not support multiple domains, then the Media Unit Identifier values are\nunique within the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 348,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2422",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5978067517280579
  },
  {
    "content": "Media Unit Status Descriptors are listed in ascending order by Media Unit Identifier.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2423",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19151033461093903
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2424",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26825690269470215
  },
  {
    "content": "Requirements for supporting the Media Unit Status log page are defined in section 8.3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2425",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.695127546787262
  },
  {
    "content": "**Figure 248: Media Unit Status Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2426",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6060822606086731
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Number of Media Unit Status Descriptors (NMU): This field indicates the number of<br>Media Unit Status Descriptors in the log page. If this field is cleared to 0h, then no<br>Media Unit Status Descriptors are reported.|\n|03:02|Number of Channels (CCHANS): This field indicates the number of Channels<br>accessible by the controller. A value of 0h indicates that the number of Channels<br>accessible by the controller is not reported.|\n|05:04|Selected Configuration: This field indicates the Configuration Identifier selected by<br>the most recent successful completion of the Capacity Management command Select<br>Capacity Configuration operation. If a Select Capacity Configuration operation has not<br>been completed, this field may indicate a non-zero value (i.e., a configuration was<br>selected by default). If a Configuration Identifier is not selected, then this field shall be<br>cleared to 0h.|\n|15:6|Reserved|\n|NOTE 1|Media Unit Status Descriptor 0: This field contains the first Media Unit Status<br>Descriptor (refer to Figure 249), if any.|\n|NOTE 1|Media Unit Status Descriptor 1: This field contains the second Media Unit Status<br>Descriptor, if any.|\n|…|…|\n|NOTE 1|Media Unit Status Descriptor NMU-1: This field contains the last Media Unit Status<br>Descriptor, if any.|\n|Notes:<br>1. Media Unit Status Descriptors may be different lengths.|Notes:<br>1. Media Unit Status Descriptors may be different lengths.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1464,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2427",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6939004063606262
  },
  {
    "content": "The Media Unit Status Descriptor is defined in Figure 249 .",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2428",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6129646897315979
  },
  {
    "content": "If the Selected Configuration field is cleared to 0h, then the following fields in each Media Unit Status\nDescriptor shall be cleared to 0h:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2429",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2361510545015335
  },
  {
    "content": "a) Endurance Group Identifier (ENDGID);\nb) NVM Set Identifier (NVMSETID);\nc) Capacity Adjustment Factor; and\nd) Number of Channels (MUCS).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 138,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2430",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5863282084465027
  },
  {
    "content": "Channel Identifier values begin with 0h and increase sequentially. If the NVM subsystem supports multiple\ndomains, then Channel Identifier values are unique within the specified domain. If the NVM subsystem does\nnot support multiple domains, then Channel Identifier values are unique within the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 309,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2431",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5920213460922241
  },
  {
    "content": "In the Media Unit Status Descriptor, Channel Identifiers are listed in ascending order by value, and each\nChannel Identifier shall appear only once.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2432",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6035056710243225
  },
  {
    "content": "**Figure 249: Media Unit Status Descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2433",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5254824161529541
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Media Unit Identifier: This field indicates the identifier of the Media Unit.|\n|03:02|Domain Identifier: This field indicates the identifier of the domain that contains this Media Unit.<br>Refer to section 3.2.4.3. A value of 0h indicates that a Domain Identifier is not reported. If<br>multiple domains are not supported, then this field shall be cleared to 0h.|\n|05:04|Endurance Group Identifier (ENDGID): This field indicates the identifier of the Endurance<br>Group that contains this Media Unit. Refer to section 3.2.3. The value shall be less than or equal<br>to the value of the Endurance Group Identifier Maximum field (refer to Figure 275). A value of<br>0h indicates that this Media Unit is not part of an Endurance Group.|\n|07:06|NVM Set Identifier (NVMSETID): This field indicates the identifier of the NVM Set that contains<br>this Media Unit. Refer to section 3.2.2. This field shall indicate a value less than or equal to the<br>value of the NVM Set Identifier Maximum field (refer to Figure 275).<br>If the controller does not support NVM Sets, then this field shall be cleared to 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1138,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2434",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2156810313463211
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2435",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18924365937709808
  },
  {
    "content": "**Figure 249: Media Unit Status Descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2436",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4241746664047241
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|09:08|Capacity Adjustment Factor: This field indicates the capacity adjustment factor (refer to<br>section 8.3.1) for this Endurance Group.<br>A value of FFFFh indicates that value and all higher values.<br>A value of 0h indicates that the Capacity Adjustment Factor is not reported.<br>All Media Unit Status Descriptors which indicate the same Endurance Group Identifier shall<br>indicate the same value in their Capacity Adjustment Factor fields.|\n|10|Available Spare: Contains a normalized percentage (0 to 100%) of the remaining spare<br>capacity available for the Media Unit. The relationship between this value and the value in the<br>Available Spare field in the Endurance Group Information log page (refer to section 5.14.1.9) is<br>outside the scope of this specification.|\n|11|Percentage Used: Contains a vendor specific estimate of the percentage of life used for the<br>Media Unit based on the actual usage and the manufacturer’s prediction of NVM life. A value<br>of 100 indicates that the estimated endurance of the NVM in the Media Unit has been<br>consumed, but may not indicate an NVM failure. The value is allowed to exceed 100.<br>Percentages greater than 254 shall be represented as 255. This value shall be updated once<br>per power-on hour when the controller is not in a sleep state.<br>Refer to the JEDEC JESD218A standard for SSD device life and endurance measurement<br>techniques.<br>The relationship between this value and the value in the Percentage Used field in the Endurance<br>Group Information log page is outside the scope of this specification.|\n|12|Number of Channels (MUCS): This field indicates the number of Channels attached to this<br>Media Unit. If this field is cleared to 0h, then no Channel Identifiers are reported for this Media<br>Unit.|\n|13|Channel Identifiers Offset (CIO): This field indicates the offset of the Channel 0 Identifier field<br>from the beginning of the Media Unit Status Descriptor. This field shall be a non-zero value and<br>a multiple of 16.|\n|CIO-1:14|Reserved|\n|Channel Identifiers|Channel Identifiers|\n|CIO+1 : CIO|Channel 0 Identifier: This field contains the identifier for the first Channel attached to this Media<br>Unit, if any.|\n|CIO+3 : CIO+2|Channel 1 Identifier: This field contains the identifier for the second Channel attached to this<br>Media Unit, if reported, if any.|\n||…|\n|(MUCS*2)+CIO-1 :<br>(MUCS*2)+CIO-2|Channel MUCS-1 Identifier: This field contains the identifier for the last Channel attached to<br>this Media Unit, if any.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2552,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2437",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4638388752937317
  },
  {
    "content": "**5.16.1.17 Supported Capacity Configuration List (Log Identifier 11h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2438",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6791694760322571
  },
  {
    "content": "This log page is used to provide a list of Supported Capacity Configuration Descriptors (refer to Figure 250).\nEach entry in the list defines a different configuration of Endurance Groups supported by the specified\ndomain.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 222,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2439",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5685423612594604
  },
  {
    "content": "If the NVM subsystem supports multiple domains, then the controller reports the Supported Capacity\nConfiguration List log page for the domain specified in the Log Specific Identifier field (refer to Figure 198),\nif accessible. If the information is not accessible, then the log page is not available (refer to section 8.1.3).\nIf the Log Specific Identifier field is cleared to 0h, then the specified domain is the domain containing the\ncontroller that is processing the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 478,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2440",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6943780779838562
  },
  {
    "content": "If the NVM subsystem supports multiple domains, then Capacity Configuration Identifier values are unique\nwithin the specified domain. If the NVM subsystem does not support multiple domains, then Capacity\nConfiguration Identifier values are unique within the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 272,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2441",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6061245203018188
  },
  {
    "content": "In the Supported Capacity Configuration List (refer to Figure 250), Capacity Configuration Descriptors shall\nbe listed in ascending order by Capacity Configuration Identifier, and each Capacity Configuration Identifier\nshall appear only once.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 242,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2442",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31028369069099426
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2443",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24750174582004547
  },
  {
    "content": "**Figure 250: Supported Capacity Configuration List Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2444",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6428358554840088
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|0|Number of Supported Capacity Configurations (SCCN): This field indicates the number of<br>Capacity Configuration Descriptors in the list. If this field is cleared to 0h, then no Capacity<br>Configuration Descriptors are reported.|\n|15:1|Reserved|\n|NOTE 1|Capacity Configuration 0 Descriptor: This field indicates the first Capacity Configuration<br>Descriptor (refer to Figure 251) in the list, if any.|\n|NOTE 1|Capacity Configuration 1 Descriptor: This field indicates the second Capacity Configuration<br>Descriptor in the list, if any.|\n|…|…|\n|NOTE 1|Capacity Configuration SCCN-1 Descriptor: This field indicates the last Capacity<br>Configuration Descriptor in the list, if any.|\n|Notes:<br>1. Capacity Configuration Descriptors may be different lengths.|Notes:<br>1. Capacity Configuration Descriptors may be different lengths.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 867,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2445",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6775586009025574
  },
  {
    "content": "The Capacity Configuration Descriptor (refer to Figure 251) indicates the details of a particular configuration\nof Endurance Groups and contains one Endurance Group Configuration Descriptor for each Endurance\nGroup accessible by the controller processing the command.\n\nIn the Capacity Configuration Descriptor (refer to Figure 251), Endurance Group Configuration Descriptors\nshall be listed in ascending order by Endurance Group Identifier, and each Endurance Group Identifier shall\nappear only once.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 500,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2446",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.679498553276062
  },
  {
    "content": "**Figure 251: Capacity Configuration Descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2447",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6378961205482483
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|1:0|Capacity Configuration Identifier: This field indicates the identifier for this Capacity<br>Configuration.|\n|3:2|Domain Identifier: This field indicates the identifier of the domain (refer to section 3.2.4.3)<br>containing the Endurance Group configurations described by this Capacity Configuration<br>Descriptor. A value of 0h indicates that a Domain Identifier is not reported. If multiple domains<br>are not supported, then this field shall be cleared to 0h.|\n|5:4|Number of Endurance Group Configuration Descriptors (EGCN): This field indicates the<br>number of Endurance Group Configuration Descriptors in the list. If this field is cleared to 0h,<br>then no Endurance Group Configuration Descriptors are reported.|\n|31:6|Reserved|\n|NOTE 1|Endurance Group Configuration 0 Descriptor: This field indicates the first Endurance Group<br>Configuration Descriptor (refer to Figure 252) in the list, if any.|\n|NOTE 1|Endurance Group Configuration 1 Descriptor: This field indicates the second Endurance<br>Group Configuration Descriptor in the list, if any.|\n|…|…|\n|NOTE 1|Endurance Group Configuration EGCN-1 Descriptor: This field indicates the last<br>Endurance Group Configuration Descriptor in the list, if any.|\n|Notes:<br>1. Endurance Group Configuration Descriptors may be different lengths.|Notes:<br>1. Endurance Group Configuration Descriptors may be different lengths.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1415,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2448",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6394171714782715
  },
  {
    "content": "The Endurance Group Configuration Descriptor is defined in Figure 252.\n\nIn the Endurance Group Configuration Descriptor (refer to Figure 252), NVM Set Identifiers shall be listed\nin ascending order by value, and each NVM Set Identifier shall appear only once.\n\nIn the Endurance Group Configuration Descriptor, Channel Configuration Descriptors shall be listed in\nascending order by Channel Identifier value, and each Channel Identifier shall appear only once.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 459,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2449",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3054125905036926
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2450",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27537795901298523
  },
  {
    "content": "**Figure 252: Endurance Group Configuration Descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2451",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.63148033618927
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|1:0|Endurance Group Identifier (ENDGID): This field indicates the identifier of the<br>Endurance Group (refer to section 3.2.3) described by this Endurance Group<br>Configuration Descriptor. This field shall indicate a value greater than or equal to 1h and<br>less than or equal to the value of the Endurance Group Identifier Maximum field (refer to<br>Figure 275).|\n|3:2|Capacity Adjustment Factor: This field indicates the capacity adjustment factor (refer to<br>section 8.3.1) for this Endurance Group.<br>A value of FFFFh indicates that value and all higher values.<br>A value of 0h indicates that the Capacity Adjustment Factor is not reported.|\n|15:4|Reserved|\n|31:16|Total Endurance Group Capacity (TEGCAP): This field indicates the total NVM capacity<br>in this Endurance Group. The value is in bytes. If this field is cleared to 0h, the NVM<br>subsystem does not report the total NVM capacity in this Endurance Group.|\n|47:32|Spare Endurance Group Capacity (SEGCAP): This field indicates the spare NVM<br>capacity in this Endurance Group. The value is in bytes. If this field is cleared to 0h, the<br>NVM subsystem does not report the unallocated NVM capacity in this Endurance Group.|\n|63:48|Endurance Estimate: This field is an estimate of the total number of data bytes that may<br>be written to the Endurance Group over the lifetime of the Endurance Group assuming a<br>write amplification of 1 (i.e., no increase in the number of write operations performed by<br>the device beyond the number of write operations requested by a host). This value is<br>reported in billions (i.e., a value of 1h corresponds to 1,000,000,000 bytes written) and is<br>rounded up (e.g., a value of 1h indicates the number of bytes written is from 1 to<br>1,000,000,000, 2h indicates the number of bytes written is from 1,000,000,001 to<br>2,000,000,000).<br>A value of FFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFFh means that value and all<br>higher values.<br>A value of 0h indicates that the Endurance Estimate is not reported.<br>The relationship between this value and the value in the Endurance Estimate field in the<br>Endurance Group Information log page (refer to section 5.14.1.9) is outside the scope of<br>this specification.|\n|79:64|Reserved|\n|NVM Set Identifiers|NVM Set Identifiers|\n|81:80|Number of NVM Sets (EGSETS): This field indicates the number of NVM Set Identifiers<br>in this Endurance Group Configuration Descriptor. A value of 0h indicates that no NVM<br>Set Identifiers are reported for this Endurance Group.|\n|83:82|NVM Set 0 Identifier: This field indicates the identifier of the first NVM Set assigned to<br>this Endurance Group, if reported. Refer to section 3.2.2.|\n|85:84|NVM Set 1 Identifier: This field indicates the identifier of the second NVM Set assigned<br>to this Endurance Group, if reported.|\n||…|\n|(EGSETS*2)+81 :<br>(EGSETS*2)+80|NVM Set EGSETS-1 Identifier: This field indicates the identifier of the last NVM Set<br>assigned to this Endurance Group, if reported.|\n|Channel Configuration Descriptors|Channel Configuration Descriptors|\n|(EGSETS*2)+83 :<br>(EGSETS*2)+82|Number of Channels (EGCHANS): This field indicates the number of Channel<br>Configuration Descriptors in this Endurance Group Configuration Descriptor. If this field is<br>cleared to 0h, then no Channel Configuration Descriptors are reported for this Endurance<br>Group.|\n|NOTE 1|Channel 0 Configuration Descriptor: This field contains the Channel Configuration<br>Descriptor (refer to Figure 253) for the first Channel in this Endurance Group, if any.|\n|NOTE 1|Channel 1 Configuration Descriptor: This field contains the Channel Configuration<br>Descriptor for the second Channel in this Endurance Group, if any.|\n||…|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3747,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2452",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23952074348926544
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2453",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27537795901298523
  },
  {
    "content": "**Figure 252: Endurance Group Configuration Descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2454",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5472712516784668
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|NOTE 1|Channel EGCHANS-1 Configuration Descriptor: This field contains the Channel<br>Configuration Descriptor for the last Channel in this Endurance Group, if any.|\n|Notes:<br>1. Channel Configuration Descriptors may be different lengths.|Notes:<br>1. Channel Configuration Descriptors may be different lengths.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 344,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2455",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5563711524009705
  },
  {
    "content": "The Channel Configuration Descriptor (refer to Figure 253) lists the Media Units attached to a Channel.\nMedia Unit Configuration Descriptors (refer to Figure 254) shall be listed in ascending order by Media Unit\nIdentifier, and each Media Unit Identifier shall appear only once.\n\n**Figure 253: Channel Configuration Descriptor**\n\n|Byte|Description|\n|---|---|\n|1:0|Channel Identifier: This field indicates the identifier of this Channel. A value of FFFFh<br>indicates that the Channel Identifier is not specified.|\n|3:2|Number of Channel Media Units (CHMUS): This field indicates the number of Media<br>Units that are attached to this Channel. If this field is cleared to 0h, then no Media Unit<br>Configuration Descriptors are reported for this Channel.|\n|NOTE 1|Media Unit 0 Configuration Descriptor: This field contains the Media Unit Configuration<br>Descriptor (refer to Figure 254) for the first Media Unit attached to this Channel, if any.|\n|NOTE 1|Media Unit 1 Configuration Descriptor: This field contains the Media Unit Configuration<br>Descriptor for the second Media Unit attached to this Channel, if reported.|\n||…|\n|NOTE 1|Media Unit CHMUS-1 Configuration Descriptor: This field contains the Media Unit<br>Configuration Descriptor for the last Media Unit attached to this Channel, if any.|\n|Notes:<br>1. Media Unit Configuration Descriptors may be different lengths.|Notes:<br>1. Media Unit Configuration Descriptors may be different lengths.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1456,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2456",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7538966536521912
  },
  {
    "content": "The Media Unit Configuration Descriptor is defined in Figure 254.\n\n**Figure 254: Media Unit Configuration Descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2457",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6027159094810486
  },
  {
    "content": "|Byte|Description|\n|---|---|\n|1:0|Media Unit Identifier: This field indicates the identifier of this Media Unit.|\n|5:2|Reserved|\n|7:6|Media Unit Descriptor Length (MUDL): This field contains the length in bytes of the<br>descriptor information that follows. The total length of the Media Unit Configuration<br>Descriptor in bytes is the value in this field plus 8.<br>This field shall be cleared to 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 403,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2458",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2820952832698822
  },
  {
    "content": "**5.16.1.18 Feature Identifiers Supported and Effects (Log Identifier 12h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2459",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3526563048362732
  },
  {
    "content": "An NVM subsystem may support several interfaces for submitting a Get Log Page command such as an\nAdmin Submission Queue, PCIe VDM Management Endpoint, or SMBus/I2C Management Endpoint (refer\nthe NVM Express Management Interface Specification for details on Management Endpoints) and may\nhave zero or more instances of each of those interfaces. The feature identifiers (FIDs) supported on each\ninstance of each interface may be different. This log page describes the FIDs that are supported on the\ninterface to which the Get Log Page command was submitted and the effects of those features on the state\nof the NVM subsystem. The log page is defined in Figure 255. Each Feature Identifier’s effects are\ndescribed in a FID Supported and Effects data structure defined in Figure 256.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 779,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2460",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43436676263809204
  },
  {
    "content": "If the UUID Selection Supported bit is set to ‘1’ for the Get Log Page command in the Commands Supported\nand Effects log page (refer to section 5.16.1.6), then the log page data reflects the FIDs that are supported\nbased on the value of the UUID Index field (refer to section 8.25).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 282,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2461",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29736071825027466
  },
  {
    "content": "The features that the controller supports are dependent on the I/O Command Set that is based on:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2462",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17272908985614777
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2463",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18240998685359955
  },
  {
    "content": "- the I/O Command Set selected in CC.CSS, if CC.CSS is not set to 110b; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 75,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2464",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.683901309967041
  },
  {
    "content": "- the Command Set Identifier (CSI) field in CDW 14, if CC.CSS is set to 110b.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 77,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2465",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6516501903533936
  },
  {
    "content": "If CC.CSS is set to 110b, I/O Command Sets that have not been enabled by the I/O Command Set Profile\n(FID 19h) (refer to section 5.27.1.21) are treated as unsupported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2466",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19775070250034332
  },
  {
    "content": "**Figure 255: Feature Identifiers Effects Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2467",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4852306544780731
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Feature Identifier Supported 0: Contains the FID Supported and Effects data structure (refer to<br>Figure 256) for FID 0h.|\n|07:04|Feature Identifier Supported 1: Contains the FID Supported and Effects data structure (refer to<br>Figure 256) for FID 1h.|\n|…|…|\n|1019:1016|Feature Identifier Supported 254: Contains the FID Supported and Effects data structure (refer to<br>Figure 256) for FID FEh.|\n|1023:1020|Feature Identifier Supported 255: Contains the FID Supported and Effects data structure (refer to<br>Figure 256) for FID FFh.|\n\nThe FID Supported and Effects data structure describes the effect of a Set Features command for the FID,\nincluding any optional features of the FID.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 723,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2468",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6562442183494568
  },
  {
    "content": "**Figure 256: FID Supported and Effects Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2469",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4174468219280243
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|11:6|Reserved|\n|5|NVM Subsystem Scope: If set to ‘1’, then modifying the value of the FID may impact<br>the whole NVM subsystem. If cleared to ‘0’ and the FSP field is non-zero, then<br>modifying the value of the FID does not impact the whole NVM subsystem.|\n|4|Domain Scope: If set to ‘1’, then modifying the value of the FID may impact a single<br>Domain. If cleared to ‘0’ and the FSP field is non-zero, then modifying the value of<br>the FID does not impact a single Domain.|\n|3|Endurance Group Scope: If set to ‘1’, then modifying the value of the FID may<br>impact Endurance Groups. If cleared to ‘0’ and the FSP field is non-zero, then<br>modifying the value of the FID does not impact Endurance Groups.|\n|2|NVM Set Scope: If set to ‘1’, then modifying the value of the FID may impact NVM<br>Sets. If cleared to ‘0’ and the FSP field is non-zero, then modifying the value of the<br>FID does not impact NVM Sets.|\n|1|Controller Scope: If set to ‘1’, then modifying the value of the FID may impact the<br>controller. If cleared to ‘0’ and the FSP field is non-zero, then the FID does not have<br>controller scope.|\n|0|Namespace Scope: If set to ‘1’, then modifying the value of the FID may impact<br>namespaces. If cleared to ‘0’ and the FSP field is non-zero, then modifying the value<br>of the FID does not impact namespaces.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1363,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2470",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8987718820571899
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:20|FID Scope (FSP): This field defines the scope for the associated feature identifier. If the value of<br>this field is 0h, then no scope is reported. If this field is non-zero, then only one bit shall be set to<br>‘1’.<br>Bits Description<br>11:6 Reserved<br>NVM Subsystem Scope: If set to ‘1’, then modifying the value of the FID may impact<br>5 the whole NVM subsystem. If cleared to ‘0’ and the FSP field is non-zero, then<br>modifying the value of the FID does not impact the whole NVM subsystem.<br>Domain Scope: If set to ‘1’, then modifying the value of the FID may impact a single<br>4 Domain. If cleared to ‘0’ and the FSP field is non-zero, then modifying the value of<br>the FID does not impact a single Domain.<br>Endurance Group Scope: If set to ‘1’, then modifying the value of the FID may<br>3 impact Endurance Groups. If cleared to ‘0’ and the FSP field is non-zero, then<br>modifying the value of the FID does not impact Endurance Groups.<br>NVM Set Scope: If set to ‘1’, then modifying the value of the FID may impact NVM<br>2 Sets. If cleared to ‘0’ and the FSP field is non-zero, then modifying the value of the<br>FID does not impact NVM Sets.<br>Controller Scope: If set to ‘1’, then modifying the value of the FID may impact the<br>1 controller. If cleared to ‘0’ and the FSP field is non-zero, then the FID does not have<br>controller scope.<br>Namespace Scope: If set to ‘1’, then modifying the value of the FID may impact<br>0 namespaces. If cleared to ‘0’ and the FSP field is non-zero, then modifying the value<br>of the FID does not impact namespaces.|\n|19|UUID Selection Supported: If set to ‘1’, then the controller supports the selection of a UUID<br>(refer to section 8.25) by a Get Features command or a Set Features command using this FID. If<br>cleared to ‘0’, then the controller does not support the selection of a UUID by a Get Features<br>command or a Set Features command using this FID.|\n|18:05|Reserved|\n|04|Controller Capability Change (CCC): If this bit is set to ‘1’, then changing the value of this FID<br>may change controller capabilities. If this bit is cleared to ‘0’, then changing the value of this FID<br>does not modify controller capabilities. Controller capability changes include a firmware update<br>that changes the capabilities reported in the CAP property.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2354,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2471",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32815560698509216
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2472",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2185458093881607
  },
  {
    "content": "**Figure 256: FID Supported and Effects Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2473",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2625766396522522
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|03|Namespace Inventory Change (NIC): If this bit is set to ‘1’, then changing the value of this FID<br>may change the number of namespaces or capabilities for multiple namespaces. If this bit is<br>cleared to ‘0’, then changing the value of this FID does not modify the number of namespaces or<br>capabilities for multiple namespaces. Namespace inventory changes include adding or removing<br>namespaces.|\n|02|Namespace Capability Change (NCC): If this bit is set to ‘1’, then changing the value of this FID<br>may change the capabilities of a single namespace. If this bit is cleared to ‘0’, then changing the<br>value of this FID does not modify any namespace capabilities for the specified namespace.<br>Namespace capability changes include a logical format change.|\n|01|User Data Content Change (UDCC): If this bit is set to ‘1’, then changing the value of this FID<br>may modify user data content in one or more namespaces. If this bit is cleared to ‘0’, then<br>changing the value of this FID does not modify user data content in any namespace.|\n|00|FID Supported (FSUPP): If this bit is set to ‘1’, then this FID is supported by the controller. If this<br>bit is cleared to ‘0’, then this FID is not supported by the controller and all other fields in this<br>structure shall be cleared to 0h.<br>Refer to section 3.1.2 for the FID support requirements for each controller type.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1416,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2474",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2511849105358124
  },
  {
    "content": "**5.16.1.19 NVMe-MI Commands Supported and Effects (Log Identifier 13h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 73,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2475",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6256968975067139
  },
  {
    "content": "This log page describes the Management Interface Command Set commands (refer to the NVM Express\nManagement Interface Specification) that the controller supports using the NVMe-MI Send and NVMe-MI\nReceive commands and the effects of those Management Interface Command Set commands on the state\nof the NVM subsystem. The log page is defined in Figure 257.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 353,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2476",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.635072648525238
  },
  {
    "content": "**Figure 257: NVMe-MI Commands Supported and Effects Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2477",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6501646637916565
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Management Interface Command Supported 0: Contains the NVMe-MI Commands Supported<br>and Effects data structure (refer to Figure 258) for the Management Interface command with an<br>opcode value of 0h.|\n|07:04|Management Interface Command Supported 1: Contains the NVMe-MI Commands Supported<br>and Effects data structure (refer to Figure 258) for the Management Interface command with an<br>opcode value of 1h.|\n|…|…|\n|1019:1016|Management Interface Command Supported 254: Contains the NVMe-MI Commands<br>Supported and Effects data structure (refer to Figure 258) for the Management Interface command<br>with an opcode value of 254.|\n|1023:1020|Management Interface Command Supported 255: Contains the NVMe-MI Commands<br>Supported and Effects data structure (refer to Figure 258) for the Management Interface command<br>with an opcode value of 255.|\n|4095:1024|Reserved|\n\nThe NMVe-MI Commands Supported and Effects data structure describes the overall possible effect of a\nManagement Interface command using the using the NVMe-MI Send command, including any optional\nfeatures of the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1131,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2478",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4128629267215729
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2479",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43774592876434326
  },
  {
    "content": "**Figure 258: NVMe-MI Commands Supported and Effects Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2480",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3771074712276459
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|11:6|Reserved|\n|5|NVM Subsystem Scope: If set to ‘1’, then the command performs actions that<br>may impact the whole NVM subsystem. If cleared to ‘0’ and the CSP field is<br>non-zero, then the command performs actions that do not impact the whole<br>NVM subsystem.|\n|4|Domain Scope: If set to ‘1’, then the command has Domain scope. If cleared<br>to ‘0’ and the CSP field is non-zero, then the command does not have Domain<br>scope.|\n|3|Endurance Group Scope: If set to ‘1’, then the command has Endurance<br>Group scope. If cleared to ‘0’ and the CSP field is non-zero, then the command<br>does not have Endurance Group scope.|\n|2|NVM Set Scope: If set to ‘1’, then the command has NVM Set scope. If cleared<br>to ‘0’ and the CSP field is non-zero, then the command does not have NVM<br>Set scope.|\n|1|Controller Scope: If set to ‘1’, then the command has controller scope. If<br>cleared to ‘0’ and the CSP field is non-zero, then the command does not have<br>controller scope.|\n|0|Namespace Scope: If set to ‘1’, then the command has namespace scope. If<br>cleared to ‘0’ and the CSP field is non-zero, then the command does not have<br>namespace scope.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1186,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2481",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8074343204498291
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:20|Command Scope (CSP): This field defines the scope for the associated NVMe-MI Send<br>command that specifies the Management Interface command opcode for this data structure. If<br>the value of this field is 0h, then no scope is reported. If this field is non-zero, then only one bit<br>shall be set to ‘1’.<br>Bits Description<br>11:6 Reserved<br>NVM Subsystem Scope: If set to ‘1’, then the command performs actions that<br>may impact the whole NVM subsystem. If cleared to ‘0’ and the CSP field is<br>5<br>non-zero, then the command performs actions that do not impact the whole<br>NVM subsystem.<br>Domain Scope: If set to ‘1’, then the command has Domain scope. If cleared<br>4 to ‘0’ and the CSP field is non-zero, then the command does not have Domain<br>scope.<br>Endurance Group Scope: If set to ‘1’, then the command has Endurance<br>3 Group scope. If cleared to ‘0’ and the CSP field is non-zero, then the command<br>does not have Endurance Group scope.<br>NVM Set Scope: If set to ‘1’, then the command has NVM Set scope. If cleared<br>2 to ‘0’ and the CSP field is non-zero, then the command does not have NVM<br>Set scope.<br>Controller Scope: If set to ‘1’, then the command has controller scope. If<br>1 cleared to ‘0’ and the CSP field is non-zero, then the command does not have<br>controller scope.<br>Namespace Scope: If set to ‘1’, then the command has namespace scope. If<br>0 cleared to ‘0’ and the CSP field is non-zero, then the command does not have<br>namespace scope.|\n|19:05|Reserved|\n|04|Controller Capability Change (CCC): If this bit is set to ‘1’, then this command may change<br>controller capabilities. If this bit is cleared to ‘0’, then this command does not modify controller<br>capabilities. Controller capability changes include a firmware update that changes the capabilities<br>reported in the CAP property.|\n|03|Namespace Inventory Change (NIC): If this bit is set to ‘1’, then this command may change the<br>number of namespaces or capabilities for multiple namespaces. If this bit is cleared to ‘0’, then<br>this command does not modify the number of namespaces or capabilities for multiple<br>namespaces. Namespace inventory changes include adding or removing namespaces.|\n|02|Namespace Capability Change (NCC): If this bit is set to ‘1’, then this command may change<br>the capabilities of a single namespace. If this bit is cleared to ‘0’, then this command does not<br>modify any namespace capabilities for the specified namespace. Namespace capability changes<br>include a logical format change.|\n|01|User Data Content Change (UDCC): If this bit is set to ‘1’, then this command may modify user<br>data content in one or more namespaces. If this bit is cleared to ‘0’, then this command does not<br>modify user data content in any namespace. User data content changes include a write operation.|\n|00|Command Supported (CSUPP): If this bit is set to ‘1’, then this command is supported by the<br>controller. If this bit is cleared to ‘0’, then this command is not supported by the controller and all<br>other fields in this structure shall be cleared to 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2482",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17639830708503723
  },
  {
    "content": "**5.16.1.20 Command and Feature Lockdown (Log Identifier 14h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2483",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5987823605537415
  },
  {
    "content": "This log page is used to indicate which commands and Set Features Feature Identifiers are supported to\nbe prohibited from execution using the Command and Feature Lockdown capability (refer to section 8.4)\nand which commands are currently prohibited if received on an NVM Express controller Admin\nSubmission Queue or received out-of-band on a Management Endpoint (refer to the NVM Express\nManagement Interface Specification). This log page uses the Log Specific Parameter field in Command\nDword 10 (refer to Figure 197) as defined in Figure 259. This log page may use the UUID Index field in\nthe Get Log Page command to specify the scope and content of the list returned in the Command and\nFeature Identifier List field of this log page. The UUID Index field may be used if the Scope field is set to\n2h, allowing returning of vendor specific Set Features Feature Identifier lockdown information.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 894,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2484",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44239524006843567
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2485",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07352913916110992
  },
  {
    "content": "**Figure 259: Command and Feature Lockdown Log Specific Parameter Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 73,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2486",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48074573278427124
  },
  {
    "content": "|Value|Command and Feature Identifier List Definition|\n|---|---|\n|00b|List of command opcodes or Feature Identifiers based on<br>the Scope field that are supported to be prohibited.|\n|01b|List of command opcodes or Feature Identifiers based on<br>the Scope field that are currently prohibited if received on<br>an NVM Express controller Admin submission queue.|\n|10b|List of command opcodes or Feature Identifiers based on<br>the Scope field that are currently prohibited if received out-<br>of-band on a Management Endpoint.|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 541,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2487",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7508653998374939
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|14|Reserved|\n|13:12|Contents (CNTTS): This field in combination with the Scope field specifies the contents of the<br>Command and Feature Identifier List field in the log page.<br>Value Command and Feature Identifier List Definition<br>List of command opcodes or Feature Identifiers based on<br>00b<br>the Scope field that are supported to be prohibited.<br>List of command opcodes or Feature Identifiers based on<br>01b the Scope field that are currently prohibited if received on<br>an NVM Express controller Admin submission queue.<br>List of command opcodes or Feature Identifiers based on<br>10b the Scope field that are currently prohibited if received out-<br>of-band on a Management Endpoint.<br>11b Reserved|\n|11:08|Scope (SCP): This field in combination with the Contents field specifies the contents of the<br>Command and Feature Identifier List field in the log page.<br>Value Command and Feature Identifier List Contents<br>0h List of Admin Command Set opcodes<br>1h Reserved<br>2h List of Feature Identifiers<br>List of a Management Interface Command Set opcodes (refer to the NVM<br>3h<br>Express Management Interface Specification)<br>List of a PCIe Command Set opcodes (refer to the NVM Express<br>4h<br>Management Interface Specification)<br>5h to Fh Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1308,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2488",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6112909317016602
  },
  {
    "content": "|Value|Command and Feature Identifier List Contents|\n|---|---|\n|0h|List of Admin Command Set opcodes|\n|1h|Reserved|\n|2h|List of Feature Identifiers|\n|3h|List of a Management Interface Command Set opcodes (refer to the NVM<br>Express Management Interface Specification)|\n|4h|List of a PCIe Command Set opcodes (refer to the NVM Express<br>Management Interface Specification)|\n|5h to Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 394,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2489",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2934248447418213
  },
  {
    "content": "If a UUID Index is specified in the Get Log Page command (refer to section 5.16) with the Scope field is set\nto 2h, then the controller should return vendor specific Set Features lockdown information defined by the\nvendor identified by the specified UUID index field. If the Scope field is not set to 2h, then the UUID index\nfield is ignored.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 342,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2490",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20492753386497498
  },
  {
    "content": "If a controller processes this command with the Contents field set to 10b and the NVM subsystem does not\ncontain a Management Endpoint, then the command shall be aborted with a status code of Invalid Field in\nCommand.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 217,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2491",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05739578977227211
  },
  {
    "content": "The log page returned is defined in Figure 260.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2492",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17853224277496338
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2493",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09490828216075897
  },
  {
    "content": "**Figure 260: Command and Feature Lockdown Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2494",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30960798263549805
  },
  {
    "content": "|Value|Description|\n|---|---|\n|00b|List contains command opcodes or Set Features Feature Identifiers<br>based on the Scope Selected field that are supported to be prohibited|\n|01b|List contains command opcodes or Set Features Feature Identifiers<br>based on the Scope Selected field that are currently prohibited if received<br>on an NVM Express controller submission queue|\n|10b|List contains command opcodes or Set Features Feature Identifiers<br>based on the Scope field that are currently prohibited if received out-of-<br>band on a Management Endpoint|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 572,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2495",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6791407465934753
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|7:6|Reserved|\n|5:4|Contents Selected (CS): This field in combination with the Scope Selected field indicates<br>the contents of the Command and Feature Identifier List field in the log page. The Content<br>Selected field is specified by the contents of the Contents field in the Log Specific<br>Parameter field of the Get Log Page command.<br>Value Description<br>List contains command opcodes or Set Features Feature Identifiers<br>00b<br>based on the Scope Selected field that are supported to be prohibited<br>List contains command opcodes or Set Features Feature Identifiers<br>01b based on the Scope Selected field that are currently prohibited if received<br>on an NVM Express controller submission queue<br>List contains command opcodes or Set Features Feature Identifiers<br>10b based on the Scope field that are currently prohibited if received out-of-<br>band on a Management Endpoint<br>11b Reserved|\n|3:0|Scope Selected (SS): This field in combination with the Contents Selected field indicates<br>what the Command and Feature Identifier List field contains in the log page. The Scope<br>Selected field is specified by the contents of the Scope field in the Log Specific Parameter<br>field of the Get Log Page command.<br>Value Description<br>0h List contains Admin Command Set opcodes<br>1h Reserved<br>2h List contains Set Features Feature Identifiers<br>3h List contains Management Interface Command Set opcodes<br>4h List contains PCIe Command Set opcodes<br>5h to Fh Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1523,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2496",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6374525427818298
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0h|List contains Admin Command Set opcodes|\n|1h|Reserved|\n|2h|List contains Set Features Feature Identifiers|\n|3h|List contains Management Interface Command Set opcodes|\n|4h|List contains PCIe Command Set opcodes|\n|5h to Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 264,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2497",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6246151924133301
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n||Bits Description<br>7:6 Reserved<br>Contents Selected (CS): This field in combination with the Scope Selected field indicates<br>the contents of the Command and Feature Identifier List field in the log page. The Content<br>Selected field is specified by the contents of the Contents field in the Log Specific<br>Parameter field of the Get Log Page command.<br>Value Description<br>List contains command opcodes or Set Features Feature Identifiers<br>00b<br>5:4 based on the Scope Selected field that are supported to be prohibited<br>List contains command opcodes or Set Features Feature Identifiers<br>01b based on the Scope Selected field that are currently prohibited if received<br>on an NVM Express controller submission queue<br>List contains command opcodes or Set Features Feature Identifiers<br>10b based on the Scope field that are currently prohibited if received out-of-<br>band on a Management Endpoint<br>11b Reserved<br>Scope Selected (SS): This field in combination with the Contents Selected field indicates<br>what the Command and Feature Identifier List field contains in the log page. The Scope<br>Selected field is specified by the contents of the Scope field in the Log Specific Parameter<br>field of the Get Log Page command.<br>Value Description<br>3:0 0h List contains Admin Command Set opcodes<br>1h Reserved<br>2h List contains Set Features Feature Identifiers<br>3h List contains Management Interface Command Set opcodes<br>4h List contains PCIe Command Set opcodes<br>5h to Fh Reserved|\n|2:1|Reserved|\n|3|Length (LNGTH): This field indicates the length in bytes (n) of the Command and Feature Identifier<br>List field that follow in the log page. If the Command and Feature Identifier List field contains no<br>coded values, then this field shall be cleared to 0h.|\n|n+3:4|Command and Feature Identifier List (CFIL): The contents of this field are dependent on the<br>setting of the Contents Selected field and Scope Selected field. This field contains a list of coded<br>values identified by the Scope Selected field and the Content Selected field. The list shall be in<br>order from lowest numerical value to highest numerical value.|\n|511:n+4|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2216,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2498",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23184917867183685
  },
  {
    "content": "**5.16.1.21 Boot Partition (Log Identifier 15h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2499",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5121746063232422
  },
  {
    "content": "The Boot Partition log page provides read only access to the Boot Partition (refer to section 8.2) accessible\nby this controller through the BPRSEL register (refer to section 3.1.3.14).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 185,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2500",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5956099033355713
  },
  {
    "content": "This log consists of a header describing the Boot Partition and Boot Partition data as defined by Figure 262.\nThe Boot Partition Identifier bit in the Log Specific Parameter field determines the Boot Partition.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2501",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12894919514656067
  },
  {
    "content": "A host reading this log page has no effects on the BPINFO (refer to section 3.1.3.13), BPRSEL, and BPMBL\n(refer to section 3.1.3.15) registers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 143,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2502",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3103855848312378
  },
  {
    "content": "The Log Specific Parameter field in Command Dword 10 (refer to Figure 197) for this log page is defined\nin Figure 261.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2503",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5206591486930847
  },
  {
    "content": "**Figure 261: Boot Partition Log Specific Parameter Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2504",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2760341465473175
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|14:09|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2505",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21955721080303192
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2506",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12136435508728027
  },
  {
    "content": "**Figure 261: Boot Partition Log Specific Parameter Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2507",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5451157093048096
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|08|Boot Partition Identifier: This bit specifies the Boot Partition identifier for the Boot<br>Partition to return.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 146,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2508",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5037844777107239
  },
  {
    "content": "**Figure 262: Boot Partition Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2509",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5677970051765442
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|Boot Partition Header|Boot Partition Header|\n|00|Log Identifier: This field shall be set to 15h.|\n|03:01|Reserved|\n|07:04|Boot Partition Information: Contains defines the characteristics of Boot Partitions.<br>Bits Description<br>Active Boot Partition ID (ABPID): This bit indicates the identifier of the<br>31<br>active Boot Partition.<br>30:15 Reserved<br>Boot Partition Size (BPSZ): This field defines the size of the Boot<br>14:00<br>Partition Data field in multiples of 128 KiB.|\n|15:08|Reserved|\n|Boot Partition Data|Boot Partition Data|\n|BPSZ*128 KiB + 15:16|Boot Partition Data: Contains the contents of the specified Boot Partition.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 673,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2510",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2716194987297058
  },
  {
    "content": "**5.16.1.22 Rotational Media Information Log (Log Identifier 16h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2511",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6669706702232361
  },
  {
    "content": "This log page provides rotational media information (refer to section 8.20) for Endurance Groups that store\ndata on rotational media. The information provided is retained across power cycles and resets.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 202,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2512",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4919307231903076
  },
  {
    "content": "The Endurance Group Identifier is specified in the Log Specific Identifier field in Command Dword 11 of the\nGet Log Page command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 129,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2513",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37306350469589233
  },
  {
    "content": "If the NVM subsystem does not contain any Endurance Groups that store data on rotational media, then\nthe Rotational Media Information Log should not be supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2514",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49062883853912354
  },
  {
    "content": "**Figure 263: Rotational Media Information Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2515",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3598041534423828
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0000h|Not reported|\n|0001h|This value is prohibited to maintain backward compatibility with other<br>standards. This value shall not be used.|\n|FFFFh|Reserved|\n|All other values|Nominal rotational speed in revolutions per minute while the current<br>Power State is 0 (refer to section 5.27.1.2).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 327,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2516",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5101361870765686
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|1:0|Endurance Group Identifier: The Endurance Group Identifier specified by the Get Log Page<br>command.|\n|3:2|Number of Actuators: Contains the number of actuators in this Endurance Group.|\n|5:4|Nominal Rotational Speed (NRS):<br>Value Description<br>0000h Not reported<br>This value is prohibited to maintain backward compatibility with other<br>0001h<br>standards. This value shall not be used.<br>FFFFh Reserved<br>Nominal rotational speed in revolutions per minute while the current<br>All other values<br>Power State is 0 (refer to section 5.27.1.2).|\n|7:6|Reserved|\n|11:8|Spinup Count: Contains the total number of successful spinup events for this Endurance<br>Group over the lifetime of the Endurance Group. If the Spinup Count is less than FFFFFFFFh,<br>then the controller shall increment this count by one for each successful spinup event.<br>A successful spinup event occurs when the controller power state transitions from a non-<br>operational power state to an operational power state.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1033,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2517",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1646733283996582
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2518",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13110750913619995
  },
  {
    "content": "**Figure 263: Rotational Media Information Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2519",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2475958615541458
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|15:12|Failed Spinup Count: Contains the total number of failed spinup events for this Endurance<br>Group over the lifetime of the Endurance Group. If the Failed Spinup Count is less than<br>FFFFFFFFh, then the controller shall increment this count by one for each failed spinup event.<br>A failed spinup event occurs when the controller fails an attempt to transition from a non-<br>operational power state to an operational power state.|\n|19:16|Load Count: Contains the total number successful actuator load events for this Endurance<br>Group over the lifetime of the Endurance Group. If the Load Count is less than FFFFFFFFh,<br>then the controller shall increment this count by one for each successful actuator load event.<br>A successful actuator load event occurs if an actuator transitions from a non-operational state<br>to an operational state.|\n|23:20|Failed Load Count: Contains the number of failed actuator load events for this Endurance<br>Group over the lifetime of the Endurance Group. If the Failed Load Count is less than<br>FFFFFFFFh, then the controller shall increment this count by one for each failed actuator<br>load event.<br>A failed actuator load event occurs if an actuator fails an attempt to transition from a non-<br>operational state to an operational state.|\n|511:24|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1339,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2520",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1309872418642044
  },
  {
    "content": "**5.16.1.23 Discovery Log Page (Log Identifier 70h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2521",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5472979545593262
  },
  {
    "content": "The Discovery Log Page shall only be supported by Discovery controllers. The Discovery Log Page shall\nnot be supported by controllers that expose namespaces for NVMe over PCIe or NVMe over Fabrics. The\nDiscovery Log Page provides an inventory of NVM subsystems with which a host may attempt to form an\nassociation. The Discovery Log Page may be specific to the host requesting the log. The Discovery Log\nPage is persistent across power cycles.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 443,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2522",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5323982834815979
  },
  {
    "content": "The Log Page Offset may be used to retrieve specific records. The number of records is returned in the\nheader of the log page. The format for a Discovery Log Page Entry is defined in Figure 264. The format for\nthe Discovery Log Page is defined in Figure 265.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 258,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2523",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.632015585899353
  },
  {
    "content": "A single Get Log Page command used to read the Discovery Log Page shall be atomic. If the host reads\nthe Discovery Log Page using multiple Get Log Page commands the host should ensure that there has not\nbeen a change in the contents of the data. The host should read the Discovery Log Page contents in order\n(i.e., with increasing Log Page Offset values) and then re-read the Generation Counter after the entire log\npage is transferred. If the Generation Counter does not match the original value read, the host should\ndiscard the log page read as the entries may be inconsistent. If the log page contents change during this\ncommand sequence, the controller may return a status code of Discover Restart.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 703,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2524",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24321772158145905
  },
  {
    "content": "Every record indicates via the SUBTYPE field if that record is referring to another Discovery Service or if\nthe record indicates an NVM subsystem composed of controllers that may expose namespaces. A referral\nto another Discovery Service (i.e., SUBTYPE 01h) is a mechanism to find additional Discovery subsystems.\nAn NVM subsystem entry (i.e., SUBTYPE 02h) is a mechanism to find NVM subsystems that contain\ncontrollers that may expose namespaces. Referrals shall not be deeper than eight levels.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 496,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2525",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42309150099754333
  },
  {
    "content": "If an NVM subsystem supports the dynamic controller model, then all entries for that NVM subsystem shall\nhave the Controller ID field set to FFFFh. For a particular NVM subsystem port and NVMe Transport\naddress in an NVM subsystem, there shall be no more than one entry with the Controller ID field set to:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 306,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2526",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6859418153762817
  },
  {
    "content": "- FFFFh if that NVM subsystem supports the dynamic controller model; or\n\n- FFFEh if that NVM subsystem supports the static controller model.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2527",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40859881043434143
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2528",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12215353548526764
  },
  {
    "content": "**Figure 264: Discovery Log Page Entry Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2529",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1367005854845047
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Transport Type (TRTYPE): Specifies the NVMe Transport type.<br>Value Definition<br>00 Reserved<br>01 RDMA Transport (refer to the NVMe RDMA Transport specification)<br>02 Fibre Channel Transport (refer to INCITS 556)<br>03 TCP Transport (refer to the NVMe TCP Transport specification)<br>04 to 253 Reserved<br>Intra-host Transport (i.e., loopback) (NOTE: This is a reserved value for use<br>254<br>by host software.)<br>255 Reserved|\n|01|Address Family (ADRFAM): Specifies the address family.<br>Value Definition<br>00 Reserved<br>AF_INET: IPv4 address family. IPv4address format syntax specified in<br>01<br>section 3.2.2 of IETF RFC 3986.<br>AF_INET6: IPv6 address family. IPv6address format syntax specified in<br>02<br>section 3.2.2 of IETF RFC 3986.<br>03 AF_IB: InfiniBand address family.<br>04 Fibre Channel address family.<br>05 to 253 Reserved<br>Intra-host Transport (i.e., loopback) (NOTE: This is a reserved value for use<br>254<br>by host software.)<br>255 Reserved|\n|02|Subsystem Type (SUBTYPE): Specifies the type of the NVM subsystem that is indicated in this<br>entry.<br>Value Definition<br>00 Reserved.<br>The entry describes a referral to another Discovery Service composed of<br>01<br>Discovery controllers for additional records.<br>The entry describes an NVM subsystem that is not associated with<br>02 Discovery controllers and whose controllers may have attached<br>namespaces.<br>03 to 255 Reserved|\n|03|Transport Requirements (TREQ): Indicates requirements for the NVMe Transport.<br>Bits 7:3 are reserved.<br>Bit 2 if set to ‘1’ indicates that the controller is capable of disabling SQ flow control. A controller<br>that is capable of disabling SQ flow control may accept or reject a host request to disable SQ<br>flow control. If cleared to ‘0’, then the controller requires use of SQ flow control.<br>Bits 1:0 indicate whether connections shall be made over a fabric secure channel (which includes<br>authentication) (refer to section 8.13).<br>Value Definition<br>00b Not specified<br>01b Required<br>10b Not required<br>11b Reserved|\n|05:04|Port ID (PORTID): Specifies a particular NVM subsystem port. Different NVMe Transports or<br>address families may utilize the same Port ID value (e.g., a Port ID may support both iWARP and<br>RoCE).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2306,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2530",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7110860347747803
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00|Reserved|\n|01|RDMA Transport (refer to the NVMe RDMA Transport specification)|\n|02|Fibre Channel Transport (refer to INCITS 556)|\n|03|TCP Transport (refer to the NVMe TCP Transport specification)|\n|04 to 253|Reserved|\n|254|Intra-host Transport (i.e., loopback) (NOTE: This is a reserved value for use<br>by host software.)|\n|255|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 371,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2531",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6114745140075684
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00|Reserved|\n|01|AF_INET: IPv4 address family. IPv4address format syntax specified in<br>section 3.2.2 of IETF RFC 3986.|\n|02|AF_INET6: IPv6 address family. IPv6address format syntax specified in<br>section 3.2.2 of IETF RFC 3986.|\n|03|AF_IB: InfiniBand address family.|\n|04|Fibre Channel address family.|\n|05 to 253|Reserved|\n|254|Intra-host Transport (i.e., loopback) (NOTE: This is a reserved value for use<br>by host software.)|\n|255|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 477,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2532",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35880520939826965
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00|Reserved.|\n|01|The entry describes a referral to another Discovery Service composed of<br>Discovery controllers for additional records.|\n|02|The entry describes an NVM subsystem that is not associated with<br>Discovery controllers and whose controllers may have attached<br>namespaces.|\n|03 to 255|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 340,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2533",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48223453760147095
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Not specified|\n|01b|Required|\n|10b|Not required|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2534",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26946893334388733
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2535",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12215353548526764
  },
  {
    "content": "**Figure 264: Discovery Log Page Entry Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2536",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08503217250108719
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:06|Controller ID (CNTLID): Specifies the controller ID. If the NVM subsystem uses a dynamic<br>controller model, then this field shall be set to FFFFh. If the NVM subsystem uses a static<br>controller model, then this field may be set to a specific controller ID (values 0h to FFEFh are<br>valid). If the NVM subsystem uses a static controller model and the value indicated is FFFEh,<br>then the host should remember the Controller ID returned as part of the Fabrics Connect<br>command in order to re-establish an association in the future with the same controller.|\n|09:08|Admin Max SQ Size (ASQSZ): Specifies the maximum size of an Admin Submission Queue.<br>This applies to all controllers in the NVM subsystem. The value shall be a minimum of 32 entries.|\n|31:10|Reserved|\n|63:32|Transport Service Identifier (TRSVCID): Specifies the NVMe Transport service identifier as an<br>ASCII string. The NVMe Transport service identifier is specified by the associated NVMe<br>Transport binding specification.|\n|255:64|Reserved|\n|511:256|NVM Subsystem Qualified Name (SUBNQN): NVMe Qualified Name (NQN) that uniquely<br>identifies the NVM subsystem. Refer to section 4.4. For a Discovery Service, the value returned<br>shall be the well-known Discovery Service NQN (nqn.2014-08.org.nvmexpress.discovery).|\n|767:512|Transport Address (TRADDR): Specifies the address of the NVM subsystem that may be used<br>for a Connect command as an ASCII string. The Address Family field describes the reference for<br>parsing this field. Refer to section 1.4.2 for ASCII string requirements. For the definition of this<br>field, refer to the appropriate NVMe Transport binding specification.|\n|1023:768|Transport Specific Address Subtype (TSAS): Specifies NVMe Transport specific information<br>about the address. For the definition of this field, refer to the appropriate NVMe Transport binding<br>specification.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1929,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2537",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07091525197029114
  },
  {
    "content": "**Figure 265: Discovery Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2538",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5910778045654297
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Generation Counter (GENCTR): Indicates the version of the discovery information,<br>starting at a value of 0h. For each change in the Discovery Log Page, this counter is<br>incremented by one. If the value of this field is FFFFFFFF_FFFFFFFFh, then the field shall<br>be cleared to 0h when incremented (i.e., rolls over to 0h).|\n|15:08|Number of Records (NUMREC): Indicates the number of records contained in the log.|\n|17:16|Record Format (RECFMT): Specifies the format of the Discovery Log Page. If a new<br>format is defined, this value is incremented by one. The format of the record specified in<br>this definition shall be 0h.|\n|1023:18|Reserved|\n|2047:1024|Discovery Log Page Entry 0 (DLE0): Contains the first Discovery Log Page Entry as<br>defined in Figure 264.|\n|3071:2048|Discovery Log Page Entry 1 (DLE1): Contains the second Discovery Log Page Entry as<br>defined in Figure 264 (if present).|\n|…|…|\n|(((N + 2) × 1024) - 1):<br>((N + 1) × 1024)|Discovery Log Page Entry N (DLEN): Contains the Nth Discovery Log Page Entry as<br>defined in Figure 264 (if present).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1113,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2539",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25850439071655273
  },
  {
    "content": "**5.16.1.24 Reservation Notification (Log Identifier 80h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2540",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6437468528747559
  },
  {
    "content": "The Reservation Notification log page reports one log page from a time ordered queue of Reservation\nNotification log pages, if available. A new Reservation Notification log page is created and added to the end\nof the queue of reservation notifications whenever an unmasked reservation notification occurs on any\nnamespace that is attached to the controller. The Get Log Page command:\n\n- returns a data buffer containing a log page corresponding to the oldest log page in the reservation\nnotification queue (i.e., the log page containing the lowest Log Page Count field; accounting for\nwrapping); and\n\n- removes that Reservation Notification log page from the queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 665,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2541",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1523105353116989
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2542",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1194383054971695
  },
  {
    "content": "If there are no available Reservation Notification log page entries when a Get Log Page command is issued,\nthen an empty log page (i.e., all fields in the log page cleared to 0h) shall be returned.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 197,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2543",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6796766519546509
  },
  {
    "content": "If the controller is unable to store a reservation notification in the Reservation Notification log page due to\nthe size of the queue, that reservation notification is lost. If a reservation notification is lost, then the\ncontroller shall increment the Log Page Count field of the last reservation notification in the queue (i.e., the\nLog Page Count field in the last reservation notification in the queue shall contain the value associated with\nthe most recent reservation notification that has been lost).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 507,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2544",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2035606950521469
  },
  {
    "content": "The format of the log page is defined in Figure 266.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2545",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4770970642566681
  },
  {
    "content": "**Figure 266: Reservation Notification Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2546",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5945672392845154
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|0h|Empty Log Page: Get Log Page command was processed when no unread<br>Reservation Notification log pages were available. All the fields of an empty log<br>page shall have a value of 0h.|\n|1h|Registration Preempted|\n|2h|Reservation Released|\n|3h|Reservation Preempted|\n|4h to FFh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 320,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2547",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.592225968837738
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Log Page Count: This is a 64-bit incrementing Reservation Notification log page count, indicating<br>a unique identifier (modulo 64 bit) for this notification. The count starts at 0h following a Controller<br>Level Reset and is incremented for every event that causes a reservation notification regardless of<br>whether that notification is added to the queue. If the value of this field is FFFFFFFF_FFFFFFFFh,<br>then the field is set to 1h when incremented (i.e., rolls over to 1h) and a new log page is created.<br>If there are no Reservation Notification log pages to return (i.e., the queue of Reservation<br>Notification log pages is empty), then this field shall return the value 0h. Subsequent reservation<br>notifications continue incrementing this unique identifier from the last non-zero value (i.e., the value<br>that identified the previous Reservation Notification log page). A value of 0h indicates the log page<br>is empty.|\n|08|Reservation Notification Log Page Type: This field indicates the Reservation Notification type<br>described by this log page.<br>Value Definition<br>Empty Log Page: Get Log Page command was processed when no unread<br>0h Reservation Notification log pages were available. All the fields of an empty log<br>page shall have a value of 0h.<br>1h Registration Preempted<br>2h Reservation Released<br>3h Reservation Preempted<br>4h to FFh Reserved|\n|09|Number of Available Log Pages: This field indicates the number of additional available<br>Reservation Notification log pages (i.e., the number of unread log pages not counting this one). If<br>there are more than 255 additional available log pages, then a value of 255 is returned. A value of<br>0h indicates that there are no additional available log pages.|\n|11:10|Reserved|\n|15:12|Namespace ID: This field indicates the namespace ID of the namespace associated with the<br>Reservation Notification described by this log page.|\n|63:16|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1976,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2548",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2756372392177582
  },
  {
    "content": "**5.16.1.25 Sanitize Status (Log Identifier 81h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2549",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6449750065803528
  },
  {
    "content": "The Sanitize Status log page is used to report sanitize operation time estimates and information about the\nmost recent sanitize operation (refer to section 8.20). The Get Log Page command returns a data buffer\ncontaining a log page formatted as defined in Figure 267. This log page shall be retained across power\ncycles and resets. This log page shall contain valid data whenever CSTS.RDY is set to ‘1’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 403,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2550",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5831864476203918
  },
  {
    "content": "If the Sanitize Capabilities (SANICAP) field in the Identify Controller data structure is not cleared to 0h (i.e.,\nthe Sanitize command is supported), then this log page shall be supported. If the Sanitize Capabilities field\nin the Identify Controller data structure is cleared to 0h, then this log page is reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 316,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2551",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21187028288841248
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2552",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11397069692611694
  },
  {
    "content": "**Figure 267: Sanitize Status Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2553",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5748097896575928
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Sanitize Progress (SPROG): This field indicates the fraction complete of the sanitize<br>operation. The value is a numerator of the fraction complete that has 65,536 (10000h) as its<br>denominator. This value shall be set to FFFFh if bits 2:0 of the SSTAT field are not set to<br>010b.<br>If a sanitize operation has been started by a Sanitize command with the No-Deallocate After<br>Sanitize bit set to ‘1’ (refer to section 5.24) and if NODMMAS field in the Identify Controller<br>data structure is set to 10b (refer to Figure 275), then the fraction reported shall include the<br>time related to the additional media modification.|\n|03:02|Sanitize Status (SSTAT): This field indicates the status associated with the most recent<br>sanitize operation.<br>Bits 15:9 are reserved.<br>Bit 8 (Global Data Erased): If set to ‘1’, then no namespace user data in the NVM subsystem<br>has been written to and no Persistent Memory Region in the NVM subsystem has been<br>enabled:<br>a) since being manufactured and the NVM subsystem has never been sanitized; or<br>b) since the most recent successful sanitize operation.<br>If cleared to ‘0’, then a namespace user data in the NVM subsystem has been written to or a<br>Persistent Memory Region in the NVM subsystem has been enabled:<br>a) since being manufactured and the NVM subsystem has never been sanitized; or<br>b) since the most recent successful sanitize operation of the NVM subsystem.<br>Bits 7:3 contains the number of completed passes if the most recent sanitize operation was<br>an Overwrite. This field shall be cleared to 0h if the most recent sanitize operation was not<br>an Overwrite.<br>Bits 2:0 contains the status of the most recent sanitize operation as shown below.<br>Value Definition<br>000b The NVM subsystem has never been sanitized.<br>The most recent sanitize operation completed successfully including any<br>001b additional media modification (refer to the No-Deallocate Modifies Media<br>After Sanitize field in Figure 275).<br>010b A sanitize operation is currently in progress.<br>011b The most recent sanitize operation failed.<br>The most recent sanitize operation for which No-Deallocate After<br>100b Sanitize (refer to section 5.24) was requested has completed<br>successfully with deallocation of all user data (refer to section 5.27.1.19).<br>101b to 111b Reserved|\n|07:04|Sanitize Command Dword 10 Information (SCDW10): This field contains the value of the<br>Command Dword 10 field of the Sanitize command that started the sanitize operation whose<br>status is reported in the SSTAT field. Refer to Figure 303.|\n|11:08|Estimated Time For Overwrite: This field indicates the number of seconds required to<br>complete an Overwrite sanitize operation with 16 passes in the background (refer to section<br>5.24) when the No-Deallocate Modifies Media After Sanitize field (refer to Figure 275) is not<br>set to 10b. A value of 0h indicates that the sanitize operation is expected to be completed in<br>the background when the Sanitize command that started that operation is completed. A value<br>of FFFFFFFFh indicates that no time period is reported.|\n|15:12|Estimated Time For Block Erase: This field indicates the number of seconds required to<br>complete a Block Erase sanitize operation in the background (refer to section 5.24) when the<br>No-Deallocate Modifies Media After Sanitize field (refer to Figure 275) is not set to 10b. A<br>value of 0h indicates that the sanitize operation is expected to be completed in the<br>background when the Sanitize command that started that operation is completed. A value of<br>FFFFFFFFh indicates that no time period is reported.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3694,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2554",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5545139908790588
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|000b|The NVM subsystem has never been sanitized.|\n|001b|The most recent sanitize operation completed successfully including any<br>additional media modification (refer to the No-Deallocate Modifies Media<br>After Sanitize field in Figure 275).|\n|010b|A sanitize operation is currently in progress.|\n|011b|The most recent sanitize operation failed.|\n|100b|The most recent sanitize operation for which No-Deallocate After<br>Sanitize (refer to section 5.24) was requested has completed<br>successfully with deallocation of all user data (refer to section 5.27.1.19).|\n|101b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 619,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2555",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5086709856987
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2556",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11397069692611694
  },
  {
    "content": "**Figure 267: Sanitize Status Log Page**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2557",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34162676334381104
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|19:16|Estimated Time For Crypto Erase: This field indicates the number of seconds required to<br>complete a Crypto Erase sanitize operation in the background (refer to section 5.24) when<br>the No-Deallocate Modifies Media After Sanitize field (refer to Figure 275) is not set to 10b.<br>A value of 0h indicates that the sanitize operation is expected to be completed in the<br>background when the Sanitize command that started that operation is completed. A value of<br>FFFFFFFFh indicates that no time period is reported.|\n|23:20|Estimated Time For Overwrite With No-Deallocate Media Modification: This field<br>indicates the number of seconds required to complete an Overwrite sanitize operation and<br>the associated additional media modification after the Overwrite sanitize operation in the<br>background (refer to section 5.24) when:<br>a) the No-Deallocate After Sanitize bit was set to ‘1’ in the Sanitize command that<br>requested the Overwrite sanitize operation; and<br>b) the No-Deallocate Modifies Media After Sanitize field (refer to Figure 275) is set to<br>10b.<br>A value of 0h indicates that the sanitize operation is expected to be completed in the<br>background when the Sanitize command that started that operation is completed. A value of<br>FFFFFFFFh indicates that no time period is reported.|\n|27:24|Estimated Time For Block Erase With No-Deallocate Media Modification: This field<br>indicates the number of seconds required to complete a Block Erase sanitize operation and<br>the associated additional media modification after the Block Erase sanitize operation in the<br>background (refer to section 5.24) when:<br>a) the No-Deallocate After Sanitize bit was set to ‘1’ in the Sanitize command that<br>requested the Block Erase sanitize operation; and<br>b) the No-Deallocate Modifies Media After Sanitize field (refer to Figure 275) is set to<br>10b.<br>A value of 0h indicates that the sanitize operation is expected to be completed in the<br>background when the Sanitize command that started that operation is completed. A value of<br>FFFFFFFFh indicates that no time period is reported.|\n|31:28|Estimated Time For Crypto Erase With No-Deallocate Media Modification: This field<br>indicates the number of seconds required to complete a Crypto Erase sanitize operation and<br>the associated additional media modification after the Crypto Erase sanitize operation in the<br>background (refer to section 5.24) when:<br>a) the No-Deallocate After Sanitize bit was set to ‘1’ in the Sanitize command that<br>requested the Crypto Erase sanitize operation; and<br>b) the No-Deallocate Modifies Media After Sanitize field (refer to Figure 275) is set to<br>10b.<br>A value of 0h indicates that the sanitize operation is expected to be completed in the<br>background when the Sanitize command that started that operation is completed. A value of<br>FFFFFFFFh indicates that no time period is reported.|\n|511:32|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2973,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2558",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21205608546733856
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2559",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3318808078765869
  },
  {
    "content": "Upon completion of the Get Log Page command, the controller posts a completion queue entry to the Admin\nCompletion Queue. Get Log Page command specific status values are defined in Figure 268.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 192,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2560",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6418341398239136
  },
  {
    "content": "**Figure 268: Get Log Page – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2561",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5789825916290283
  },
  {
    "content": "|Value|Description|\n|---|---|\n|9h|Invalid Log Page: The log page indicated is invalid or not supported. This error condition is also<br>returned if a reserved log page is requested. Controllers compliant with NVM Express Base<br>Specification revision 2.0 and earlier may return Invalid Field in Command for this condition.|\n|29h|I/O Command Set Not Supported: The specified I/O Command Set is not supported by the<br>controller.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 430,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2562",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5014603734016418
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2563",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20905210077762604
  },
  {
    "content": "**5.17 Identify command**\n\n**Identify command overview**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2564",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5950232744216919
  },
  {
    "content": "The Identify command returns a data buffer that describes information about the NVM subsystem, the\ndomain, the controller or the namespace(s). The data structure is 4,096 bytes in size.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 185,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2565",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.643023669719696
  },
  {
    "content": "The Identify command uses the Data Pointer, Command Dword 10, Command Dword 11, and Command\nDword 14 fields. All other command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 156,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2566",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4651371240615845
  },
  {
    "content": "**Figure 269: Identify – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2567",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42450180649757385
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the start of the data buffer. Refer to Figure 87 for the<br>definition of this field. If using PRPs, this field shall not be a pointer to a PRP List as the data buffer<br>may not cross more than one page boundary.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 293,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2568",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2403607964515686
  },
  {
    "content": "**Figure 270: Identify – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2569",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3484092354774475
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Controller Identifier (CNTID): This field specifies the controller identifier used as part of some<br>Identify operations. Whether the CNTID field is used for a particular Identify operation is indicated<br>in Figure 273. If this field is not used as part of the Identify operation, then:<br>• host software shall clear this field to 0h for backwards compatibility (0h is a valid controller<br>identifier); and<br>• the controller shall ignore this field.<br>Controllers that support the Namespace Management capability (refer to section 8.11) shall<br>support this field.|\n|15:08|Reserved|\n|07:00|Controller or Namespace Structure (CNS): This field specifies the information to be returned to<br>the host. Refer to Figure 273.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 764,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2570",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38835257291793823
  },
  {
    "content": "**Figure 271: Identify – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2571",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5051172971725464
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:24|Command Set Identifier (CSI): This field is CNS value specific. This field specifies the I/O Command<br>Set to be used by the command for CNS values that require a Command Set Identifier. Refer to Figure<br>273 for Identify command CNS values that use this field. This field shall be cleared to 0h for Identify<br>operations with CNS values that do not use this field.<br>Values for this field are defined by Figure 274.|\n|23:16|Reserved|\n|15:00|CNS Specific Identifier: This field specifies an identifier that is required for a particular CNS value. The<br>CNS values that require a CNS specific identifier are indicated in the table below.<br>CNS Value Definition<br>NVM Set List (04h) NVM Set Identifier (NVMSETID) (refer to section 3.2.2)<br>Domain List (18h) Domain Identifier (DOMID) (refer to section 3.2.4.3)<br>Endurance Group List (19h) Endurance Group Identifier (ENDGID) (refer to section 3.2.3)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 944,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2572",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.59273761510849
  },
  {
    "content": "|CNS Value|Definition|\n|---|---|\n|NVM Set List (04h)|NVM Set Identifier (NVMSETID) (refer to section 3.2.2)|\n|Domain List (18h)|Domain Identifier (DOMID) (refer to section 3.2.4.3)|\n|Endurance Group List (19h)|Endurance Group Identifier (ENDGID) (refer to section 3.2.3)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 271,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2573",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4477602243423462
  },
  {
    "content": "If the controller supports selection of a UUID by the Identify command (refer to section 8.25), then Command\nDword 14 is used to specify a UUID Index value (refer to Figure 272).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 178,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2574",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3378100097179413
  },
  {
    "content": "**Figure 272: Identify – Command Dword 14**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2575",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38768163323402405
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:07|Reserved|\n|06:00|UUID Index: Refer to Figure 477.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2576",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27981725335121155
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2577",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16766072809696198
  },
  {
    "content": "The data structure returned is based on the Controller or Namespace Structure (CNS) field as shown in\nFigure 273. If there are fewer entries to return for the data structure indicated based on CNS value, then\nthe unused portion of the returned data is zero filled. If a controller does not support the specified CNS\nvalue, then the controller shall abort the command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 414,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2578",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5331977009773254
  },
  {
    "content": "When issuing the Identify command, if the specified namespace is not associated with an I/O Command\nSet that supports the specified Identify CNS value (refer to Figure 273), then the controller shall abort the\ncommand with a status code of Invalid I/O Command Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 264,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2579",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4344269037246704
  },
  {
    "content": "Note: The CNS field was specified as a one bit field in revision 1.0 and is a two bit field in revision 1.1. Host\nsoftware should only issue CNS values defined in revision 1.0 to controllers compliant with revision 1.0.\nHost software should only issue CNS values defined in revision 1.1 to controllers compliant with revision\n1.1. The results of issuing other CNS values to controllers compliant with revision 1.0 or revision 1.1,\nrespectively, are indeterminate.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 463,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2580",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32024651765823364
  },
  {
    "content": "The Identify Controller data structure, Identify Namespace data structure, and the I/O Command Set\nspecific Identify Namespace data structure include several unique identifiers. The format and layout of these\nunique identifiers is described in section 4.5.1.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 258,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2581",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26842716336250305
  },
  {
    "content": "**Figure 273: Identify – CNS Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2582",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25995612144470215
  },
  {
    "content": "|CNS Value|1<br>O/M|Definition|2<br>NSID|3<br>CNTID|4<br>CSI|Reference<br>Section|\n|---|---|---|---|---|---|---|\n|Active Namespace Management|Active Namespace Management|Active Namespace Management|Active Namespace Management|Active Namespace Management|Active Namespace Management|Active Namespace Management|\n|00h|11<br>M|Identify Namespace data structure for the specified<br>NSID or the common namespace capabilities for the<br>7<br>NVM Command Set.|Y|N|8<br>N|NVM Command<br>Set Specification|\n|01h|M|Identify Controller data structure for the controller<br>7<br>processing the command.|N|N|N|5.17.2.1|\n|02h|M|Active Namespace ID list.|Y|N|N|5.17.2.2|\n|03h|M|Namespace Identification Descriptor list for the<br>specified NSID.|Y|N|N|5.17.2.3|\n|04h|O|An NVM Set List (refer to Figure 278) is returned to<br>the host for up to 31 NVM Sets. The list contains<br>entries for NVM Set identifiers greater than or equal<br>to the value specified in the NVM Set Identifier<br>(CDW11.NVMSETID) field.|N|N|N|5.17.2.4|\n|05h|M|I/O Command Set specific Identify Namespace data<br>structure for the specified NSID for the I/O Command<br>7<br>Set specified in the CSI field.|Y|N|Y|5.17.2.5|\n|06h|M|I/O Command Set specific Identify Controller data<br>7<br>structure for the controller processing the command.|N|N|Y|5.17.2.6|\n|07h|M|Active Namespace ID list associated with the<br>specified I/O Command Set.|Y|N|Y|5.17.2.7|\n|08h|M|I/O Command Set Independent Identify Namespace<br>data structure.|Y|N|N|5.17.2.8|\n|09h to 0Fh||Reserved|Reserved|Reserved|Reserved|Reserved|\n|Controller and Namespace Management|Controller and Namespace Management|Controller and Namespace Management|Controller and Namespace Management|Controller and Namespace Management|Controller and Namespace Management|Controller and Namespace Management|\n|10h|5<br>O|Allocated Namespace ID list.|Y|N|N|5.17.2.9|\n|11h|5, 11<br>O|Identify Namespace data structure for the specified<br>allocated NSID.|Y|N|8<br>N|5.17.2.10|\n|12h|5<br>O|Controller List of controllers attached to the specified<br>NSID.|Y|Y|N|5.17.2.11|\n|13h|5<br>O|Controller List of controllers that exist in the NVM<br>subsystem.|N|Y|N|5.17.2.12|\n|14h|6<br>O|Primary Controller Capabilities data structure for the<br>specified primary controller.|N|Y|N|5.17.2.13|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2288,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2583",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44846823811531067
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2584",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23855678737163544
  },
  {
    "content": "**Figure 273: Identify – CNS Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2585",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.328151673078537
  },
  {
    "content": "|CNS Value|1<br>O/M|Definition|2<br>NSID|3<br>CNTID|4<br>CSI|Reference<br>Section|\n|---|---|---|---|---|---|---|\n|15h|6<br>O|Secondary Controller list of controllers associated<br>with the primary controller processing the command.|N|Y|N|5.17.2.14|\n|16h|11<br>O|A Namespace Granularity List (refer to the NVM<br>Command Set Specification) is returned to the host<br>for up to sixteen Namespace Granularity Entries.|N|N|8<br>N|5.17.2.15|\n|17h|O|A UUID List (refer to Figure 284) is returned to the<br>host.|N|N|N|5.17.2.16|\n|18h|10<br>O|Domain List|N|N|N|5.17.2.17|\n|19h|9<br>O|Endurance Group List|N|N|N|5.17.2.18|\n|1Ah|5<br>O|I/O Command Set specific Allocated Namespace ID<br>list|Y|N|Y|5.17.2.19|\n|1Bh|5<br>O|I/O Command Set specific Identify Namespace data<br>structure.|Y|N|Y|5.17.2.20|\n|1Ch|O|I/O Command Set data structure|N|Y|N|5.17.2.21|\n|18h to 1Fh||Reserved|Reserved|Reserved|Reserved|Reserved|\n|Future Definition|Future Definition|Future Definition|Future Definition|Future Definition|Future Definition|Future Definition|\n|20h to FFh||Reserved|Reserved|Reserved|Reserved|Reserved|\n|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. The NSID field is used: Y = Yes, N = No.<br>3. The CDW10.CNTID field is used: Y = Yes, N = No.<br>4. The CDW11.CSI field is used: Y = Yes, N = No.<br>5. Mandatory for controllers that support the Namespace Management capability (refer to section 8.11).<br>6. Mandatory for controllers that support Virtualization Enhancements (refer to section 8.26).<br>7. Selection of a UUID may be supported (refer to section 8.25).<br>8. This Identify data structure applies to namespaces that are associated with command sets that specify logical blocks (e.g.,<br>Command Set Identifier 0h or Command Set Identifier 2h).<br>9. Mandatory for controllers that support Variable Capacity Management (refer to section 8.3.3).<br>10. Mandatory for controllers that support Capacity Management (refer to section 8.3) in an NVM subsystem that supports multiple<br>domains (refer to section 3.2.4).<br>11. Only applicable for the NVM Command Set and I/O Command Sets based on the NVM Command Set. Prohibited for all other<br>I/O Command Sets.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. The NSID field is used: Y = Yes, N = No.<br>3. The CDW10.CNTID field is used: Y = Yes, N = No.<br>4. The CDW11.CSI field is used: Y = Yes, N = No.<br>5. Mandatory for controllers that support the Namespace Management capability (refer to section 8.11).<br>6. Mandatory for controllers that support Virtualization Enhancements (refer to section 8.26).<br>7. Selection of a UUID may be supported (refer to section 8.25).<br>8. This Identify data structure applies to namespaces that are associated with command sets that specify logical blocks (e.g.,<br>Command Set Identifier 0h or Command Set Identifier 2h).<br>9. Mandatory for controllers that support Variable Capacity Management (refer to section 8.3.3).<br>10. Mandatory for controllers that support Capacity Management (refer to section 8.3) in an NVM subsystem that supports multiple<br>domains (refer to section 3.2.4).<br>11. Only applicable for the NVM Command Set and I/O Command Sets based on the NVM Command Set. Prohibited for all other<br>I/O Command Sets.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. The NSID field is used: Y = Yes, N = No.<br>3. The CDW10.CNTID field is used: Y = Yes, N = No.<br>4. The CDW11.CSI field is used: Y = Yes, N = No.<br>5. Mandatory for controllers that support the Namespace Management capability (refer to section 8.11).<br>6. Mandatory for controllers that support Virtualization Enhancements (refer to section 8.26).<br>7. Selection of a UUID may be supported (refer to section 8.25).<br>8. This Identify data structure applies to namespaces that are associated with command sets that specify logical blocks (e.g.,<br>Command Set Identifier 0h or Command Set Identifier 2h).<br>9. Mandatory for controllers that support Variable Capacity Management (refer to section 8.3.3).<br>10. Mandatory for controllers that support Capacity Management (refer to section 8.3) in an NVM subsystem that supports multiple<br>domains (refer to section 3.2.4).<br>11. Only applicable for the NVM Command Set and I/O Command Sets based on the NVM Command Set. Prohibited for all other<br>I/O Command Sets.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. The NSID field is used: Y = Yes, N = No.<br>3. The CDW10.CNTID field is used: Y = Yes, N = No.<br>4. The CDW11.CSI field is used: Y = Yes, N = No.<br>5. Mandatory for controllers that support the Namespace Management capability (refer to section 8.11).<br>6. Mandatory for controllers that support Virtualization Enhancements (refer to section 8.26).<br>7. Selection of a UUID may be supported (refer to section 8.25).<br>8. This Identify data structure applies to namespaces that are associated with command sets that specify logical blocks (e.g.,<br>Command Set Identifier 0h or Command Set Identifier 2h).<br>9. Mandatory for controllers that support Variable Capacity Management (refer to section 8.3.3).<br>10. Mandatory for controllers that support Capacity Management (refer to section 8.3) in an NVM subsystem that supports multiple<br>domains (refer to section 3.2.4).<br>11. Only applicable for the NVM Command Set and I/O Command Sets based on the NVM Command Set. Prohibited for all other<br>I/O Command Sets.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. The NSID field is used: Y = Yes, N = No.<br>3. The CDW10.CNTID field is used: Y = Yes, N = No.<br>4. The CDW11.CSI field is used: Y = Yes, N = No.<br>5. Mandatory for controllers that support the Namespace Management capability (refer to section 8.11).<br>6. Mandatory for controllers that support Virtualization Enhancements (refer to section 8.26).<br>7. Selection of a UUID may be supported (refer to section 8.25).<br>8. This Identify data structure applies to namespaces that are associated with command sets that specify logical blocks (e.g.,<br>Command Set Identifier 0h or Command Set Identifier 2h).<br>9. Mandatory for controllers that support Variable Capacity Management (refer to section 8.3.3).<br>10. Mandatory for controllers that support Capacity Management (refer to section 8.3) in an NVM subsystem that supports multiple<br>domains (refer to section 3.2.4).<br>11. Only applicable for the NVM Command Set and I/O Command Sets based on the NVM Command Set. Prohibited for all other<br>I/O Command Sets.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. The NSID field is used: Y = Yes, N = No.<br>3. The CDW10.CNTID field is used: Y = Yes, N = No.<br>4. The CDW11.CSI field is used: Y = Yes, N = No.<br>5. Mandatory for controllers that support the Namespace Management capability (refer to section 8.11).<br>6. Mandatory for controllers that support Virtualization Enhancements (refer to section 8.26).<br>7. Selection of a UUID may be supported (refer to section 8.25).<br>8. This Identify data structure applies to namespaces that are associated with command sets that specify logical blocks (e.g.,<br>Command Set Identifier 0h or Command Set Identifier 2h).<br>9. Mandatory for controllers that support Variable Capacity Management (refer to section 8.3.3).<br>10. Mandatory for controllers that support Capacity Management (refer to section 8.3) in an NVM subsystem that supports multiple<br>domains (refer to section 3.2.4).<br>11. Only applicable for the NVM Command Set and I/O Command Sets based on the NVM Command Set. Prohibited for all other<br>I/O Command Sets.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. The NSID field is used: Y = Yes, N = No.<br>3. The CDW10.CNTID field is used: Y = Yes, N = No.<br>4. The CDW11.CSI field is used: Y = Yes, N = No.<br>5. Mandatory for controllers that support the Namespace Management capability (refer to section 8.11).<br>6. Mandatory for controllers that support Virtualization Enhancements (refer to section 8.26).<br>7. Selection of a UUID may be supported (refer to section 8.25).<br>8. This Identify data structure applies to namespaces that are associated with command sets that specify logical blocks (e.g.,<br>Command Set Identifier 0h or Command Set Identifier 2h).<br>9. Mandatory for controllers that support Variable Capacity Management (refer to section 8.3.3).<br>10. Mandatory for controllers that support Capacity Management (refer to section 8.3) in an NVM subsystem that supports multiple<br>domains (refer to section 3.2.4).<br>11. Only applicable for the NVM Command Set and I/O Command Sets based on the NVM Command Set. Prohibited for all other<br>I/O Command Sets.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 8696,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2586",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4086464047431946
  },
  {
    "content": "The Command Set Identifier values are defined in Figure 274.\n\n**Figure 274: Command Set Identifiers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2587",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5158686637878418
  },
  {
    "content": "|Command Set<br>Identifier Value|Description|Reference Section|\n|---|---|---|\n|00h|NVM Command Set|Refer to the NVM Command Set Specification|\n|01h|Key Value Command Set|Refer to the Key Value Command Set Specification|\n|02h|Zoned Namespace Command Set|Refer to the Zoned Namespace Command Set Specification|\n|03h to 2Fh|Reserved||\n|30h to 3Fh|Vendor specific||\n|40h to FFh|Reserved||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 384,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2588",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19726897776126862
  },
  {
    "content": "**Identify Data Structures**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2589",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39173197746276855
  },
  {
    "content": "**5.17.2.1 Identify Controller Data Structure (CNS 01h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2590",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6697806119918823
  },
  {
    "content": "The Identify Controller data structure (refer to Figure 275) is returned to the host for the controller processing\nthe command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2591",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23871135711669922
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2592",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2593",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40030768513679504
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|Controller Capabilities and Features|Controller Capabilities and Features|Controller Capabilities and Features|Controller Capabilities and Features|Controller Capabilities and Features|\n|01:00|M|M|R|PCI Vendor ID (VID): Contains the company vendor identifier that is assigned by the<br>PCI SIG. This is the same value as reported in the ID register in the PCI Header section<br>of the NVMe over PCIe Transport Specification.|\n|03:02|M|M|R|PCI Subsystem Vendor ID (SSVID): Contains the company vendor identifier that is<br>assigned by the PCI SIG for the subsystem. This is the same value as reported in the<br>SS register in the PCI Header section of the NVMe over PCIe Transport Specification.|\n|23:04|M|M|R|Serial Number (SN): Contains the serial number for the NVM subsystem that is<br>assigned by the vendor as an ASCII string. Refer to section 4.5.1 for unique identifier<br>requirements. Refer to section 1.4.2 for ASCII string requirements.|\n|63:24|M|M|R|Model Number (MN): Contains the model number for the NVM subsystem that is<br>assigned by the vendor as an ASCII string. Refer to section 4.5.1 for unique identifier<br>requirements. Refer to section 1.4.2 for ASCII string requirements.|\n|71:64|M|M|M|Firmware Revision (FR): Contains the currently active firmware revision, as an ASCII<br>string, for the domain of which this controller is a part. This is the same revision<br>information that may be retrieved with the Get Log Page command, refer to section<br>5.16.1.4.|\n|72|M|M|R|Recommended Arbitration Burst (RAB): This is the recommended Arbitration Burst<br>size. The value is in commands and is reported as a power of two (2^n). This is the<br>same units as the Arbitration Burst size. Refer to section 3.4.4.|\n|75:73|M|M|R|IEEE OUI Identifier (IEEE): Contains the Organization Unique Identifier (OUI) for the<br>controller vendor. The OUI shall be a valid IEEE/RAC assigned identifier that may be<br>registered at http://standards.ieee.org/develop/regauth/oui/public.html.|\n|76|O|O|R|Controller Multi-Path I/O and Namespace Sharing Capabilities (CMIC): This field<br>specifies multi-path I/O and namespace sharing capabilities of the controller and NVM<br>subsystem.<br>Bits 7:4 are reserved.<br>Bit 3 if set to ‘1’, then the NVM subsystem supports Asymmetric Namespace Access<br>Reporting (refer to section 8.1). If cleared to ‘0’, then the NVM subsystem does not<br>support Asymmetric Namespace Access Reporting.<br>Bit 2 if set to ‘1’, then the controller is associated with an SR-IOV Virtual Function. If<br>cleared to ‘0’, then the controller is associated with a PCI Function or a Fabrics<br>connection.<br>Bit 1 if set to ‘1’, then the NVM subsystem may contain two or more controllers. If cleared<br>to ‘0’, then the NVM subsystem contains only a single controller. As described in section<br>2.4.1, an NVM subsystem that contains multiple controllers may be used by multiple<br>hosts, or may provide multiple paths for a single host.<br>Bit 0 if set to ‘1’, then the NVM subsystem may contain more than one NVM subsystem<br>port. If cleared to ‘0’, then the NVM subsystem contains only a single NVM subsystem<br>port.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3221,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2594",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4277053475379944
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2595",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2596",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3642086684703827
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|77|M|M|M|Maximum Data Transfer Size (MDTS): This field indicates the maximum data transfer<br>size for a command that transfers data between host-accessible memory (refer to<br>section 1.5.26) and the controller. The host should not submit a command that exceeds<br>this maximum data transfer size. If a command is submitted that exceeds this transfer<br>size, then the command is aborted with a status code of Invalid Field in Command. The<br>value is in units of the minimum memory page size (CAP.MPSMIN) and is reported as<br>a power of two (2^n). A value of 0h indicates that there is no maximum data transfer<br>size. This field includes the length of metadata, if metadata is interleaved with the user<br>data. This field does not apply to commands that do not transfer data between host-<br>accessible memory and the controller (e.g., the Verify command, the Write<br>Uncorrectable command, and the Write Zeroes command); refer to the ONCS field for<br>restrictions on these commands and other commands that transfer data.<br>If SGL Bit Bucket descriptors are supported, their lengths shall be included in<br>determining if a command exceeds the Maximum Data Transfer Size for destination<br>data buffers. Their length in a source data buffer is not included for a Maximum Data<br>Transfer Size calculation.|\n|79:78|M|M|M|Controller ID (CNTLID): Contains the NVM subsystem unique controller identifier<br>associated with the controller.|\n|83:80|M|M|M|Version (VER): This field contains the value reported in the Version property (i.e., VS<br>property) defined in section 3.1.3.2. Implementations compliant with NVM Express Base<br>Specification, Revision 1.2 or later shall report a non-zero value in this field.|\n|87:84|M|M|R|RTD3 Resume Latency (RTD3R): This field indicates the expected latency in<br>microseconds to resume from Runtime D3 (RTD3). Refer to section 8.15.4. A value of<br>0h indicates RTD3 Resume Latency is not reported.|\n|91:88|M|M|R|RTD3 Entry Latency (RTD3E): This field indicates the typical latency in microseconds<br>to enter Runtime D3 (RTD3). Refer to section 8.15.4. A value of 0h indicates RTD3<br>Entry Latency is not reported.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2238,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2597",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18016737699508667
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2598",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2599",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39973509311676025
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|95:92|M|M|M|Optional Asynchronous Events Supported (OAES): This field indicates the optional<br>asynchronous events supported by the controller. A controller shall not send optional<br>asynchronous events before they are enabled by host software.<br>Bit 31 is set to ‘1’ if the controller supports sending Discovery Log Page Change<br>Notifications. If cleared to ‘0’, then the controller does not support the Discovery Log<br>Page Change Notification events.<br>Bits 30:28 are reserved.<br>Bit 27 is set to ‘1’ if the controller supports the Zone Descriptor Changed Notices event<br>and the associated Changed Zone List log page (refer to the Zoned Namespace<br>Command Set Specification). If cleared to ‘0’, then the controller does not support the<br>Zone Descriptor Changed Notices event nor the associated Changed Zone List log<br>page.<br>Bits 26:16 are reserved.<br>Bit 15 is set to ‘1’ if the controller supports the Normal NVM Subsystem Shutdown event.<br>If cleared to ‘0’, then the controller does not support the Normal NVM Subsystem<br>Shutdown event.<br>Bit 14 is set to ‘1’ if the controller supports the Endurance Group Event Aggregate Log<br>Page Change Notices event. If cleared to ‘0’, then the controller does not support the<br>Endurance Group Event Aggregate Log Page Change Notices event.<br>Bit 13 is set to ‘1’ if the controller supports the LBA Status Information Alert Notices<br>event (refer to the NVM Command Set Specification). If cleared to ‘0’, then the controller<br>does not support the LBA Status Information Alert Notices event.<br>Bit 12 is set to ‘1’ if the controller supports the Predictable Latency Event Aggregate Log<br>Change Notices event. If cleared to ‘0’, then the controller does not support the<br>Predictable Latency Event Aggregate Log Change Notices event.<br>Bit 11 is set to ‘1’ if the controller supports sending Asymmetric Namespace Access<br>Change Notices. If cleared to ‘0’, then the controller does not support the Asymmetric<br>Namespace Access Change Notices event.<br>Bit 10 is reserved.<br>Bit 9 is set to ‘1’ if the controller supports the Firmware Activation Notices event. If<br>cleared to ‘0’, then the controller does not support the Firmware Activation Notices<br>event.<br>Bit 8 is set to ‘1’ if the controller supports the Namespace Attribute Notices event and<br>the associated Changed Namespace List log page. If cleared to ‘0’, then the controller<br>does not support the Namespace Attribute Notices event nor the associated Changed<br>Namespace List log page.<br>Bits 7:0 are reserved.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2637,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2600",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.052032485604286194
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2601",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19154344499111176
  },
  {
    "content": "**Controller Attributes (CTRATT):** This field indicates attributes of the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2602",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3163319528102875
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15|Extended LBA Formats Supported (ELBAS): If set to ‘1’ indicates that<br>the controller supports the I/O command set specific extended protection<br>information formats (refer to the Protection Information Formats section of<br>the applicable I/O command set specification).<br>If cleared to ‘0’ indicates that the controller does not support the I/O<br>command set specific extended protection information formats (refer to the<br>Protection Information Formats section of the NVM Command Set<br>Specification).<br>Refer to the LBA Format Extension Enable (LBAFEE) field in the Host<br>Behavior Support feature (refer to section 5.27.1.18) for details for host<br>software to enable the controller to operate on namespaces using the<br>protection information formats.<br>NOTE: This bit field applies to all I/O Command Sets. The original name<br>has been retained for historical continuity.|\n|14|Delete NVM Set: If set to ‘1’, then the controller supports the Delete NVM<br>Set operation (refer to section 8.3.3). If cleared to ‘0’, then the controller<br>does not support the Delete NVM Set operation.|\n|13|Delete Endurance Group: If set to ‘1’, then the controller supports the<br>Delete Endurance Group operation (refer to section 8.3.3). If cleared to ‘0’,<br>then the controller does not support the Delete Endurance Group<br>operation.|\n|12|Variable Capacity Management: If set to ‘1’, then the controller supports<br>Variable Capacity Management (refer to section 8.3.3). If cleared to ‘0’,<br>then the controller does not support Variable Capacity Management.|\n|11|Fixed Capacity Management: If set to ‘1’, then the controller supports<br>Fixed Capacity Management (refer to section 8.3.2). If cleared to ‘0’, then<br>the controller does not support Fixed Capacity Management.|\n|10|Multi-Domain Subsystem (MDS): If set to ‘1’, then the NVM subsystem<br>supports the multiple domains (refer to section 3.2.4). If cleared to ‘0’, then<br>the NVM subsystem does not support the reporting of multiple domains<br>and the NVM subsystem consists of a single domain.|\n|9|UUID List: If set to ‘1’, then the controller supports reporting of a UUID List<br>(refer to Figure 284). If cleared to ‘0’, then the controller does not support<br>reporting of a UUID List (refer to section 8.25).|\n|8|SQ Associations: If set to ‘1’, then the controller supports SQ Associations<br>(refer to section 8.22). If cleared to ‘0’, then the controller does not support<br>SQ Associations.|\n|7|Namespace Granularity: If set to ‘1’, then the controller supports reporting<br>of Namespace Granularity (refer to section 5.17.2.15). If cleared to ‘0’, the<br>controller does not support reporting of Namespace Granularity. If the<br>Namespace Management capability (refer to section 8.11) is not<br>supported, then this bit shall be cleared to ‘0’.|\n|6|Traffic Based Keep Alive Support (TBKAS): If set to '1‘, then the<br>controller supports restarting the Keep Alive Timer if an Admin command<br>or an I/O command is processed during the Keep Alive Timeout Interval<br>(refer to section 3.9.2). If cleared to '0‘, then the controller supports<br>restarting the Keep Alive Timer only if a Keep Alive command is processed<br>during the Keep Alive Timeout Interval (refer to section 3.9.1).|\n|5|Predictable Latency Mode: If set to ‘1’, then the controller supports<br>Predictable Latency Mode (refer to section 8.16). If cleared to ‘0’, then the<br>controller does not support Predictable Latency Mode.|\n|4|Endurance Groups: If set to ‘1’, then the controller supports Endurance<br>Groups (refer to section 3.2.3). If cleared to ‘0’, then the controller does not<br>support Endurance Groups.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3717,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2603",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29229745268821716
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2604",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2605",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45179063081741333
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|Col6|Col7|Col8|\n|---|---|---|---|---|---|---|---|\n||||||3|Read Recovery Levels: If set to ‘1’, then the controller supports Read<br>Recovery Levels (refer to section 8.17). If cleared to ‘0’, then the controller<br>does not support Read Recovery Levels.||\n||||||2|NVM Sets: If set to ‘1’, then the controller supports NVM Sets (refer to<br>section 3.2.2). If cleared to ‘0’, then the controller does not support NVM<br>Sets.|NVM Sets: If set to ‘1’, then the controller supports NVM Sets (refer to<br>section 3.2.2). If cleared to ‘0’, then the controller does not support NVM<br>Sets.|\n||||||1|Non-Operational Power State Permissive Mode: If set to ‘1’, then the<br>controller supports host control of whether the controller may temporarily<br>exceed the power of a non-operational power state for the purpose of<br>executing controller initiated background operations in a non-operational<br>power state (i.e., Non-Operational Power State Permissive Mode<br>supported). If cleared to ‘0’, then the controller does not support host<br>control of whether the controller may exceed the power of a non-<br>operational state for the purpose of executing controller initiated<br>background operations in a non-operational state (i.e., Non-Operational<br>Power State Permissive Mode not supported). Refer to section 5.27.1.14.|Non-Operational Power State Permissive Mode: If set to ‘1’, then the<br>controller supports host control of whether the controller may temporarily<br>exceed the power of a non-operational power state for the purpose of<br>executing controller initiated background operations in a non-operational<br>power state (i.e., Non-Operational Power State Permissive Mode<br>supported). If cleared to ‘0’, then the controller does not support host<br>control of whether the controller may exceed the power of a non-<br>operational state for the purpose of executing controller initiated<br>background operations in a non-operational state (i.e., Non-Operational<br>Power State Permissive Mode not supported). Refer to section 5.27.1.14.|\n||||||0|Host Identifier Support: If set to ‘1’, then the controller supports a 128-bit<br>Host Identifier. Bit 0 if cleared to ‘0’, then the controller does not support a<br>128-bit Host Identifier.|Host Identifier Support: If set to ‘1’, then the controller supports a 128-bit<br>Host Identifier. Bit 0 if cleared to ‘0’, then the controller does not support a<br>128-bit Host Identifier.|\n|101:100|O|O|R|Read Recovery Levels Supported (RRLS): If Read Recovery Levels (RRL) are<br>supported, then this field shall be supported. If a bit is set to ‘1’, then the corresponding<br>Read Recovery Level is supported. If a bit is cleared to ‘0’, then the corresponding Read<br>Recovery Level is not supported.<br>Bit Definition<br>0 Read Recovery Level 0<br>1 Read Recovery Level 1<br>2 Read Recovery Level 2<br>3 Read Recovery Level 3<br>1<br>4 Read Recovery Level 4 – Default<br>5 Read Recovery Level 5<br>6 Read Recovery Level 6<br>7 Read Recovery Level 7<br>8 Read Recovery Level 8<br>9 Read Recovery Level 9<br>10 Read Recovery Level 10<br>11 Read Recovery Level 11<br>12 Read Recovery Level 12<br>13 Read Recovery Level 13<br>14 Read Recovery Level 14<br>1<br>15 Read Recovery Level 15 – Fast Fail<br>NOTE:<br>1. If Read Recovery Levels are supported, then this bit shall be set to ‘1’.|Read Recovery Levels Supported (RRLS): If Read Recovery Levels (RRL) are<br>supported, then this field shall be supported. If a bit is set to ‘1’, then the corresponding<br>Read Recovery Level is supported. If a bit is cleared to ‘0’, then the corresponding Read<br>Recovery Level is not supported.<br>Bit Definition<br>0 Read Recovery Level 0<br>1 Read Recovery Level 1<br>2 Read Recovery Level 2<br>3 Read Recovery Level 3<br>1<br>4 Read Recovery Level 4 – Default<br>5 Read Recovery Level 5<br>6 Read Recovery Level 6<br>7 Read Recovery Level 7<br>8 Read Recovery Level 8<br>9 Read Recovery Level 9<br>10 Read Recovery Level 10<br>11 Read Recovery Level 11<br>12 Read Recovery Level 12<br>13 Read Recovery Level 13<br>14 Read Recovery Level 14<br>1<br>15 Read Recovery Level 15 – Fast Fail<br>NOTE:<br>1. If Read Recovery Levels are supported, then this bit shall be set to ‘1’.|Read Recovery Levels Supported (RRLS): If Read Recovery Levels (RRL) are<br>supported, then this field shall be supported. If a bit is set to ‘1’, then the corresponding<br>Read Recovery Level is supported. If a bit is cleared to ‘0’, then the corresponding Read<br>Recovery Level is not supported.<br>Bit Definition<br>0 Read Recovery Level 0<br>1 Read Recovery Level 1<br>2 Read Recovery Level 2<br>3 Read Recovery Level 3<br>1<br>4 Read Recovery Level 4 – Default<br>5 Read Recovery Level 5<br>6 Read Recovery Level 6<br>7 Read Recovery Level 7<br>8 Read Recovery Level 8<br>9 Read Recovery Level 9<br>10 Read Recovery Level 10<br>11 Read Recovery Level 11<br>12 Read Recovery Level 12<br>13 Read Recovery Level 13<br>14 Read Recovery Level 14<br>1<br>15 Read Recovery Level 15 – Fast Fail<br>NOTE:<br>1. If Read Recovery Levels are supported, then this bit shall be set to ‘1’.|Read Recovery Levels Supported (RRLS): If Read Recovery Levels (RRL) are<br>supported, then this field shall be supported. If a bit is set to ‘1’, then the corresponding<br>Read Recovery Level is supported. If a bit is cleared to ‘0’, then the corresponding Read<br>Recovery Level is not supported.<br>Bit Definition<br>0 Read Recovery Level 0<br>1 Read Recovery Level 1<br>2 Read Recovery Level 2<br>3 Read Recovery Level 3<br>1<br>4 Read Recovery Level 4 – Default<br>5 Read Recovery Level 5<br>6 Read Recovery Level 6<br>7 Read Recovery Level 7<br>8 Read Recovery Level 8<br>9 Read Recovery Level 9<br>10 Read Recovery Level 10<br>11 Read Recovery Level 11<br>12 Read Recovery Level 12<br>13 Read Recovery Level 13<br>14 Read Recovery Level 14<br>1<br>15 Read Recovery Level 15 – Fast Fail<br>NOTE:<br>1. If Read Recovery Levels are supported, then this bit shall be set to ‘1’.|\n|110:102||||Reserved|Reserved|Reserved|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 6082,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2606",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5894802212715149
  },
  {
    "content": "|Bit|Definition|\n|---|---|\n|0|Read Recovery Level 0|\n|1|Read Recovery Level 1|\n|2|Read Recovery Level 2|\n|3|Read Recovery Level 3|\n|4|1<br>Read Recovery Level 4 – Default|\n|5|Read Recovery Level 5|\n|6|Read Recovery Level 6|\n|7|Read Recovery Level 7|\n|8|Read Recovery Level 8|\n|9|Read Recovery Level 9|\n|10|Read Recovery Level 10|\n|11|Read Recovery Level 11|\n|12|Read Recovery Level 12|\n|13|Read Recovery Level 13|\n|14|Read Recovery Level 14|\n|15|1<br>Read Recovery Level 15 – Fast Fail|\n|NOTE:<br>1. If Read Recovery Levels are supported, then this bit shall be set to ‘1’.|NOTE:<br>1. If Read Recovery Levels are supported, then this bit shall be set to ‘1’.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 660,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2607",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21944159269332886
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2608",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2609",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49473804235458374
  },
  {
    "content": "|Value|Controller Type|\n|---|---|\n|0h|Reserved (controller type not reported)|\n|1h|I/O controller|\n|2h|Discovery controller|\n|3h|Administrative controller|\n|4h to FFh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 176,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2610",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5603723526000977
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|111|M|M|M|Controller Type (CNTRLTYPE): This field specifies the controller type. A value of 0h<br>indicates that the controller type is not reported.<br>Implementations compliant with NVM Express Base Specification, Revision 1.4 or later<br>shall report a controller type (i.e., the value 0h is reserved and shall not be used).<br>Implementations compliant with an earlier specification version may report a value of 0h<br>to indicate that a controller type is not reported.<br>Value Controller Type<br>0h Reserved (controller type not reported)<br>1h I/O controller<br>2h Discovery controller<br>3h Administrative controller<br>4h to FFh Reserved|\n|127:112|O|O|R|FRU Globally Unique Identifier (FGUID): This field contains a 128-bit value that is<br>globally unique for a given Field Replaceable Unit (FRU). Refer to the NVM Express®<br>Management Interface Specification for the definition of a FRU. This field remains fixed<br>throughout the life of the FRU. This field shall contain the same value for each controller<br>associated with a given FRU.<br>This field uses the EUI-64 based 16-byte designator format. Bytes 122:120 contain the<br>24-bit Organizationally Unique Identifier (OUI) value assigned by the IEEE Registration<br>Authority. Bytes 127:123 contain an extension identifier assigned by the corresponding<br>organization. Bytes 119:112 contain the vendor specific extension identifier assigned<br>by the corresponding organization. Refer to the IEEE EUI-64 guidelines for more<br>information. This field is big endian (refer to section 4.3.4).<br>When not implemented, this field contains a value of 0h.|\n|129:128|O|O|R|Command Retry Delay Time 1 (CRDT1): If the Do Not Retry (DNR) bit is cleared to ‘0’<br>in the CQE and the Command Retry Delay (CRD) field is set to 01b in the CQE, then<br>this value indicates the command retry delay time in units of 100 milliseconds.|\n|131:130|O|O|R|Command Retry Delay Time 2 (CRDT2): If the DNR bit is cleared to ‘0’ in the CQE<br>and the CRD field is set to 10b in the CQE, then this value indicates the command retry<br>delay time in units of 100 milliseconds.|\n|133:132|O|O|R|Command Retry Delay Time 3 (CRDT3): If the DNR bit is cleared to ‘0’ in the CQE<br>and CRD field is set to 11b in the CQE, then this value indicates the command retry<br>delay time in units of 100 milliseconds.|\n|239:134||||Reserved|\n|252:240||||Reserved for the NVMe Management Interface.|\n|253|M|M|M|NVM Subsystem Report (NVMSR): This field reports information associated with the<br>NVM subsystem. If the controller is compliant with the NVM Express Management<br>Interface Specification, then at least one bit in this field is set to ‘1’. If the NVM<br>subsystem does not support the NVM Express Management Interface Specification,<br>then this field shall be cleared to 0h. Refer to the NVM Express Management Interface<br>Specification.<br>Bits Description<br>7:2 Reserved<br>NVMe Enclosure (NVMEE): If set to ‘1’, then the NVM subsystem is part of<br>1 an NVMe Enclosure. If cleared to ‘0’, then the NVM subsystem is not part of<br>an NVMe Enclosure.<br>NVMe Storage Device (NVMESD): If set to ‘1’, then the NVM subsystem is<br>0 part of an NVMe Storage Device. If cleared to ‘0’, then the NVM subsystem<br>is not part of an NVMe Storage Device.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3364,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2611",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4886835813522339
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|7:2|Reserved|\n|1|NVMe Enclosure (NVMEE): If set to ‘1’, then the NVM subsystem is part of<br>an NVMe Enclosure. If cleared to ‘0’, then the NVM subsystem is not part of<br>an NVMe Enclosure.|\n|0|NVMe Storage Device (NVMESD): If set to ‘1’, then the NVM subsystem is<br>part of an NVMe Storage Device. If cleared to ‘0’, then the NVM subsystem<br>is not part of an NVMe Storage Device.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 415,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2612",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4881710410118103
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2613",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2614",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2386290580034256
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|7|VPD Write Cycles Remaining Valid (VWCRV): If this bit is set to ‘1’, then<br>the VPD Write Cycles Remaining field is valid. If this bit is cleared to ‘0’, then<br>the VPD Write Cycles Remaining field is invalid and cleared to ‘0’.|\n|6:0|VPD Write Cycles Remaining (VWCR): If the VPD Write Cycle Remaining<br>Valid bit is set to ‘1’, then this field contains a value indicating the remaining<br>number of times that VPD contents are able to be updated in units of 256<br>bytes using the VPD Write command. For example, a 1 KiB FRU Information<br>Device that can be updated 8 times would indicate a value of 32 in this field.<br>If this field is set to 7Fh, then the remaining number of times that VPD<br>contents are able to be updated using the VPD Write command is greater<br>than or equal to 7Fh.<br>If the VPD Write Cycle Remaining Valid bit is cleared to ‘0’, then this field is<br>not valid and shall be cleared to a value of 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 967,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2615",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8069981932640076
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|254|M|M|M|VPD Write Cycle Information (VWCI): This field indicates information about the<br>remaining number of times that VPD contents are able to be updated using the VPD<br>Write command. Refer to the NVM Express Management Interface Specification for<br>details on VPD contents and the VPD Write command.<br>Bits Description<br>VPD Write Cycles Remaining Valid (VWCRV): If this bit is set to ‘1’, then<br>7 the VPD Write Cycles Remaining field is valid. If this bit is cleared to ‘0’, then<br>the VPD Write Cycles Remaining field is invalid and cleared to ‘0’.<br>VPD Write Cycles Remaining (VWCR): If the VPD Write Cycle Remaining<br>Valid bit is set to ‘1’, then this field contains a value indicating the remaining<br>number of times that VPD contents are able to be updated in units of 256<br>bytes using the VPD Write command. For example, a 1 KiB FRU Information<br>Device that can be updated 8 times would indicate a value of 32 in this field.<br>6:0<br>If this field is set to 7Fh, then the remaining number of times that VPD<br>contents are able to be updated using the VPD Write command is greater<br>than or equal to 7Fh.<br>If the VPD Write Cycle Remaining Valid bit is cleared to ‘0’, then this field is<br>not valid and shall be cleared to a value of 0h.|\n|255|M|M|M|Management Endpoint Capabilities (MEC): This field indicates the capabilities of the<br>Management Endpoint in the NVM subsystem. Refer to the NVM Express Management<br>Interface Specification for details.<br>Bits Description<br>7:2 Reserved<br>PCIe Port Management Endpoint (PCIEME): If set to ‘1’, then the NVM<br>1<br>subsystem contains a Management Endpoint on a PCIe port.<br>SMBus/I2C Port Management Endpoint (SMBUSME): If set to ‘1’, then the<br>0<br>NVM subsystem contains a Management Endpoint on an SMBus/I2C port.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1884,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2616",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3738314211368561
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|7:2|Reserved|\n|1|PCIe Port Management Endpoint (PCIEME): If set to ‘1’, then the NVM<br>subsystem contains a Management Endpoint on a PCIe port.|\n|0|SMBus/I2C Port Management Endpoint (SMBUSME): If set to ‘1’, then the<br>NVM subsystem contains a Management Endpoint on an SMBus/I2C port.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 319,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2617",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4701550006866455
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2618",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2619",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5226005911827087
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|Admin Command Set Attributes & Optional Controller Capabilities|Admin Command Set Attributes & Optional Controller Capabilities|Admin Command Set Attributes & Optional Controller Capabilities|Admin Command Set Attributes & Optional Controller Capabilities|Admin Command Set Attributes & Optional Controller Capabilities|\n|257:256|M|M|R|Optional Admin Command Support (OACS): This field indicates the optional Admin<br>commands and features supported by the controller. Refer to section 3.1.2.<br>Bits 15:11 are reserved.<br>Bit 10 if set to ‘1’, then the controller supports the Command and Feature Lockdown<br>capability (refer to section 8.4). If cleared to ‘0’, then the controller does not support the<br>Command and Feature Lockdown capability. This value shall be the same for all<br>controllers in the NVM subsystem.<br>Bit 9 if set to ‘1’, then the controller supports the Get LBA Status capability (refer to the<br>NVM Command Set Specification). If cleared to ‘0’, then the controller does not support<br>the Get LBA Status capability.<br>Bit 8 if set to '1', then the controller supports the Doorbell Buffer Config command. If<br>cleared to '0', then the controller does not support the Doorbell Buffer Config command.<br>Bit 7 if set to ‘1’, then the controller supports the Virtualization Management command.<br>If cleared to ‘0’, then the controller does not support the Virtualization Management<br>command.<br>Bit 6 if set to ‘1’, then the controller supports the NVMe-MI Send and NVMe-MI Receive<br>commands. If cleared to ‘0’, then the controller does not support the NVMe-MI Send<br>and NVMe-MI Receive commands.<br>Bit 5 if set to ‘1’, then the controller supports Directives. If cleared to ‘0’, then the<br>controller does not support Directives. A controller that supports Directives shall support<br>the Directive Send and Directive Receive commands. Refer to section 8.7.<br>Bit 4 if set to ‘1’, then the controller supports the Device Self-test command. If cleared<br>to ‘0’, then the controller does not support the Device Self-test command.<br>Bit 3 if set to ‘1’, then the controller supports the Namespace Management capability<br>(refer to section 8.11). If cleared to ‘0’, then the controller does not support the<br>Namespace Management capability.<br>Bit 2 if set to ‘1’, then the controller supports the Firmware Commit and Firmware Image<br>Download commands. If cleared to ‘0’, then the controller does not support the Firmware<br>Commit and Firmware Image Download commands.<br>Bit 1 if set to ‘1’, then the controller supports the Format NVM command. If cleared to<br>‘0’, then the controller does not support the Format NVM command.<br>Bit 0 if set to ‘1’, then the controller supports the Security Send and Security Receive<br>commands. If cleared to ‘0’, then the controller does not support the Security Send and<br>Security Receive commands.|\n|258|M|M|R|Abort Command Limit (ACL): This field is used to convey the maximum number of<br>concurrently executing Abort commands supported by the controller (refer to section<br>5.1). This is a 0’s based value. It is recommended that implementations support<br>concurrent execution of a minimum of four Abort commands.|\n|259|M|M|R|Asynchronous Event Request Limit (AERL): This field is used to convey the<br>maximum number of concurrently outstanding Asynchronous Event Request<br>commands supported by the controller (refer to section 5.2). This is a 0’s based value.<br>It is recommended that implementations support a minimum of four Asynchronous<br>Event Request Limit commands outstanding simultaneously.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3670,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2620",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13087613880634308
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2621",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2622",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42745786905288696
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|Col6|Col7|\n|---|---|---|---|---|---|---|\n|260|M|M|R|Firmware Updates (FRMW): This field indicates capabilities regarding firmware<br>updates. Refer to section 3.11 for more information on the firmware update process.<br>Bits Description<br>7:6 Reserved<br>Support Multiple Update Detection (SMUD): If set to ‘1’ indicates that the<br>controller is able to detect overlapping firmware/boot partition image update<br>5 command sequences (refer to section 3.11 and section 8.2.2). If cleared to ‘0’,<br>then the controller is not able to detect overlapping firmware/boot partition<br>image update command sequences.<br>Firmware Activation Without Reset (FAWR): If set to ‘1’ indicates that the<br>4 controller supports firmware activation without a reset. If cleared to ‘0’, then the<br>controller requires a reset for firmware to be activated.<br>Number Of Firmware Slots (NOFS): This field indicates the number of<br>firmware slots supported by the domain that contains this controller. This field<br>3:1 shall specify a value from one to seven, indicating that at least one firmware<br>slot is supported and up to seven maximum. This corresponds to firmware slots<br>1 through 7<br>First Firmware Slot Read Only (FFSRO): If set to ‘1’ indicates that the first<br>firmware slot (i.e., slot 1) is read only. If cleared to ‘0’, then the first firmware<br>0<br>slot (i.e., slot 1) is read/write. Implementations may choose to have a baseline<br>read only firmware image.|Firmware Updates (FRMW): This field indicates capabilities regarding firmware<br>updates. Refer to section 3.11 for more information on the firmware update process.<br>Bits Description<br>7:6 Reserved<br>Support Multiple Update Detection (SMUD): If set to ‘1’ indicates that the<br>controller is able to detect overlapping firmware/boot partition image update<br>5 command sequences (refer to section 3.11 and section 8.2.2). If cleared to ‘0’,<br>then the controller is not able to detect overlapping firmware/boot partition<br>image update command sequences.<br>Firmware Activation Without Reset (FAWR): If set to ‘1’ indicates that the<br>4 controller supports firmware activation without a reset. If cleared to ‘0’, then the<br>controller requires a reset for firmware to be activated.<br>Number Of Firmware Slots (NOFS): This field indicates the number of<br>firmware slots supported by the domain that contains this controller. This field<br>3:1 shall specify a value from one to seven, indicating that at least one firmware<br>slot is supported and up to seven maximum. This corresponds to firmware slots<br>1 through 7<br>First Firmware Slot Read Only (FFSRO): If set to ‘1’ indicates that the first<br>firmware slot (i.e., slot 1) is read only. If cleared to ‘0’, then the first firmware<br>0<br>slot (i.e., slot 1) is read/write. Implementations may choose to have a baseline<br>read only firmware image.|Firmware Updates (FRMW): This field indicates capabilities regarding firmware<br>updates. Refer to section 3.11 for more information on the firmware update process.<br>Bits Description<br>7:6 Reserved<br>Support Multiple Update Detection (SMUD): If set to ‘1’ indicates that the<br>controller is able to detect overlapping firmware/boot partition image update<br>5 command sequences (refer to section 3.11 and section 8.2.2). If cleared to ‘0’,<br>then the controller is not able to detect overlapping firmware/boot partition<br>image update command sequences.<br>Firmware Activation Without Reset (FAWR): If set to ‘1’ indicates that the<br>4 controller supports firmware activation without a reset. If cleared to ‘0’, then the<br>controller requires a reset for firmware to be activated.<br>Number Of Firmware Slots (NOFS): This field indicates the number of<br>firmware slots supported by the domain that contains this controller. This field<br>3:1 shall specify a value from one to seven, indicating that at least one firmware<br>slot is supported and up to seven maximum. This corresponds to firmware slots<br>1 through 7<br>First Firmware Slot Read Only (FFSRO): If set to ‘1’ indicates that the first<br>firmware slot (i.e., slot 1) is read only. If cleared to ‘0’, then the first firmware<br>0<br>slot (i.e., slot 1) is read/write. Implementations may choose to have a baseline<br>read only firmware image.|\n|260|M|M|R|Firmware Updates (FRMW): This field indicates capabilities regarding firmware<br>updates. Refer to section 3.11 for more information on the firmware update process.<br>Bits Description<br>7:6 Reserved<br>Support Multiple Update Detection (SMUD): If set to ‘1’ indicates that the<br>controller is able to detect overlapping firmware/boot partition image update<br>5 command sequences (refer to section 3.11 and section 8.2.2). If cleared to ‘0’,<br>then the controller is not able to detect overlapping firmware/boot partition<br>image update command sequences.<br>Firmware Activation Without Reset (FAWR): If set to ‘1’ indicates that the<br>4 controller supports firmware activation without a reset. If cleared to ‘0’, then the<br>controller requires a reset for firmware to be activated.<br>Number Of Firmware Slots (NOFS): This field indicates the number of<br>firmware slots supported by the domain that contains this controller. This field<br>3:1 shall specify a value from one to seven, indicating that at least one firmware<br>slot is supported and up to seven maximum. This corresponds to firmware slots<br>1 through 7<br>First Firmware Slot Read Only (FFSRO): If set to ‘1’ indicates that the first<br>firmware slot (i.e., slot 1) is read only. If cleared to ‘0’, then the first firmware<br>0<br>slot (i.e., slot 1) is read/write. Implementations may choose to have a baseline<br>read only firmware image.|Bits|Description|\n|260|M|M|R|Firmware Updates (FRMW): This field indicates capabilities regarding firmware<br>updates. Refer to section 3.11 for more information on the firmware update process.<br>Bits Description<br>7:6 Reserved<br>Support Multiple Update Detection (SMUD): If set to ‘1’ indicates that the<br>controller is able to detect overlapping firmware/boot partition image update<br>5 command sequences (refer to section 3.11 and section 8.2.2). If cleared to ‘0’,<br>then the controller is not able to detect overlapping firmware/boot partition<br>image update command sequences.<br>Firmware Activation Without Reset (FAWR): If set to ‘1’ indicates that the<br>4 controller supports firmware activation without a reset. If cleared to ‘0’, then the<br>controller requires a reset for firmware to be activated.<br>Number Of Firmware Slots (NOFS): This field indicates the number of<br>firmware slots supported by the domain that contains this controller. This field<br>3:1 shall specify a value from one to seven, indicating that at least one firmware<br>slot is supported and up to seven maximum. This corresponds to firmware slots<br>1 through 7<br>First Firmware Slot Read Only (FFSRO): If set to ‘1’ indicates that the first<br>firmware slot (i.e., slot 1) is read only. If cleared to ‘0’, then the first firmware<br>0<br>slot (i.e., slot 1) is read/write. Implementations may choose to have a baseline<br>read only firmware image.|7:6|Reserved|\n|260|M|M|R|Firmware Updates (FRMW): This field indicates capabilities regarding firmware<br>updates. Refer to section 3.11 for more information on the firmware update process.<br>Bits Description<br>7:6 Reserved<br>Support Multiple Update Detection (SMUD): If set to ‘1’ indicates that the<br>controller is able to detect overlapping firmware/boot partition image update<br>5 command sequences (refer to section 3.11 and section 8.2.2). If cleared to ‘0’,<br>then the controller is not able to detect overlapping firmware/boot partition<br>image update command sequences.<br>Firmware Activation Without Reset (FAWR): If set to ‘1’ indicates that the<br>4 controller supports firmware activation without a reset. If cleared to ‘0’, then the<br>controller requires a reset for firmware to be activated.<br>Number Of Firmware Slots (NOFS): This field indicates the number of<br>firmware slots supported by the domain that contains this controller. This field<br>3:1 shall specify a value from one to seven, indicating that at least one firmware<br>slot is supported and up to seven maximum. This corresponds to firmware slots<br>1 through 7<br>First Firmware Slot Read Only (FFSRO): If set to ‘1’ indicates that the first<br>firmware slot (i.e., slot 1) is read only. If cleared to ‘0’, then the first firmware<br>0<br>slot (i.e., slot 1) is read/write. Implementations may choose to have a baseline<br>read only firmware image.|5|Support Multiple Update Detection (SMUD): If set to ‘1’ indicates that the<br>controller is able to detect overlapping firmware/boot partition image update<br>command sequences (refer to section 3.11 and section 8.2.2). If cleared to ‘0’,<br>then the controller is not able to detect overlapping firmware/boot partition<br>image update command sequences.|\n|260|M|M|R|Firmware Updates (FRMW): This field indicates capabilities regarding firmware<br>updates. Refer to section 3.11 for more information on the firmware update process.<br>Bits Description<br>7:6 Reserved<br>Support Multiple Update Detection (SMUD): If set to ‘1’ indicates that the<br>controller is able to detect overlapping firmware/boot partition image update<br>5 command sequences (refer to section 3.11 and section 8.2.2). If cleared to ‘0’,<br>then the controller is not able to detect overlapping firmware/boot partition<br>image update command sequences.<br>Firmware Activation Without Reset (FAWR): If set to ‘1’ indicates that the<br>4 controller supports firmware activation without a reset. If cleared to ‘0’, then the<br>controller requires a reset for firmware to be activated.<br>Number Of Firmware Slots (NOFS): This field indicates the number of<br>firmware slots supported by the domain that contains this controller. This field<br>3:1 shall specify a value from one to seven, indicating that at least one firmware<br>slot is supported and up to seven maximum. This corresponds to firmware slots<br>1 through 7<br>First Firmware Slot Read Only (FFSRO): If set to ‘1’ indicates that the first<br>firmware slot (i.e., slot 1) is read only. If cleared to ‘0’, then the first firmware<br>0<br>slot (i.e., slot 1) is read/write. Implementations may choose to have a baseline<br>read only firmware image.|4|Firmware Activation Without Reset (FAWR): If set to ‘1’ indicates that the<br>controller supports firmware activation without a reset. If cleared to ‘0’, then the<br>controller requires a reset for firmware to be activated.|\n|260|M|M|R|Firmware Updates (FRMW): This field indicates capabilities regarding firmware<br>updates. Refer to section 3.11 for more information on the firmware update process.<br>Bits Description<br>7:6 Reserved<br>Support Multiple Update Detection (SMUD): If set to ‘1’ indicates that the<br>controller is able to detect overlapping firmware/boot partition image update<br>5 command sequences (refer to section 3.11 and section 8.2.2). If cleared to ‘0’,<br>then the controller is not able to detect overlapping firmware/boot partition<br>image update command sequences.<br>Firmware Activation Without Reset (FAWR): If set to ‘1’ indicates that the<br>4 controller supports firmware activation without a reset. If cleared to ‘0’, then the<br>controller requires a reset for firmware to be activated.<br>Number Of Firmware Slots (NOFS): This field indicates the number of<br>firmware slots supported by the domain that contains this controller. This field<br>3:1 shall specify a value from one to seven, indicating that at least one firmware<br>slot is supported and up to seven maximum. This corresponds to firmware slots<br>1 through 7<br>First Firmware Slot Read Only (FFSRO): If set to ‘1’ indicates that the first<br>firmware slot (i.e., slot 1) is read only. If cleared to ‘0’, then the first firmware<br>0<br>slot (i.e., slot 1) is read/write. Implementations may choose to have a baseline<br>read only firmware image.|3:1|Number Of Firmware Slots (NOFS): This field indicates the number of<br>firmware slots supported by the domain that contains this controller. This field<br>shall specify a value from one to seven, indicating that at least one firmware<br>slot is supported and up to seven maximum. This corresponds to firmware slots<br>1 through 7|\n|260|M|M|R|Firmware Updates (FRMW): This field indicates capabilities regarding firmware<br>updates. Refer to section 3.11 for more information on the firmware update process.<br>Bits Description<br>7:6 Reserved<br>Support Multiple Update Detection (SMUD): If set to ‘1’ indicates that the<br>controller is able to detect overlapping firmware/boot partition image update<br>5 command sequences (refer to section 3.11 and section 8.2.2). If cleared to ‘0’,<br>then the controller is not able to detect overlapping firmware/boot partition<br>image update command sequences.<br>Firmware Activation Without Reset (FAWR): If set to ‘1’ indicates that the<br>4 controller supports firmware activation without a reset. If cleared to ‘0’, then the<br>controller requires a reset for firmware to be activated.<br>Number Of Firmware Slots (NOFS): This field indicates the number of<br>firmware slots supported by the domain that contains this controller. This field<br>3:1 shall specify a value from one to seven, indicating that at least one firmware<br>slot is supported and up to seven maximum. This corresponds to firmware slots<br>1 through 7<br>First Firmware Slot Read Only (FFSRO): If set to ‘1’ indicates that the first<br>firmware slot (i.e., slot 1) is read only. If cleared to ‘0’, then the first firmware<br>0<br>slot (i.e., slot 1) is read/write. Implementations may choose to have a baseline<br>read only firmware image.|0|First Firmware Slot Read Only (FFSRO): If set to ‘1’ indicates that the first<br>firmware slot (i.e., slot 1) is read only. If cleared to ‘0’, then the first firmware<br>slot (i.e., slot 1) is read/write. Implementations may choose to have a baseline<br>read only firmware image.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 14137,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2623",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16175447404384613
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2624",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2625",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35146042704582214
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|7|Reserved|\n|6|If set to ‘1’, then the controller supports Data Area 4 for the Telemetry Host-<br>Initiated and Telemetry Controller-Initiated log. If cleared to ’0’, then the<br>controller does not support Data Area 4 for the Telemetry Host-Initiated and<br>Telemetry Controller-Initiated log pages.|\n|5|If set to ‘1’, then the controller supports:<br>• the Supported Log Pages log page (Log Identifier 0h);<br>• returning the scope of each command in the Commands Supported<br>and Effects log page (Log Identifier 05h);<br>• the Feature Identifiers Supported and Effects log page (Log<br>Identifier 12h); and<br>• the NVMe-MI Commands Supported and Effects log page (Log<br>Identifier 13h).<br>If cleared to ‘0’, then the controller:<br>• does not support returning the scope of each command in the<br>Commands Supported and Effects log page;<br>• may support the Supported Log Pages log page;<br>• may support the Feature Identifiers Supported and Effects log<br>page; and<br>• may support the NVMe-MI Commands Supported and Effects log<br>page.|\n|4|If set to ‘1’, then the controller supports the Persistent Event log. If cleared<br>to ‘0’, then the controller does not support the Persistent Event log.|\n|3|If set to ‘1’, then the controller supports the Telemetry Host-Initiated and<br>Telemetry Controller-Initiated log pages and sending Telemetry Log Notices.<br>If cleared to ’0’, then the controller does not support the Telemetry Host-<br>Initiated and Telemetry Controller-Initiated log pages and Telemetry Log<br>Notice events.|\n|2|If set to ‘1’, then the controller supports extended data for the Get Log Page<br>command (including extended Number of Dwords and Log Page Offset<br>fields). If cleared to ‘0’, then the controller does not support extended data<br>for the Get Log Page command.|\n|1|If set to ‘1’, then the controller supports the Commands Supported and<br>Effects log page. Bit 1 if cleared to ‘0’, then the controller does not support<br>the Commands Supported and Effects log page.|\n|0|If set to ‘1’, then the controller supports the SMART / Health Information log<br>page on a per namespace basis. If cleared to ‘0’, then the controller does not<br>support the SMART / Health Information log page on a per namespace basis.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2285,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2626",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8180335164070129
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|261|M|M|M|Log Page Attributes (LPA): This field indicates optional attributes for log pages that<br>are accessed via the Get Log Page command.<br>Bits Description<br>7 Reserved<br>If set to ‘1’, then the controller supports Data Area 4 for the Telemetry Host-<br>Initiated and Telemetry Controller-Initiated log. If cleared to ’0’, then the<br>6<br>controller does not support Data Area 4 for the Telemetry Host-Initiated and<br>Telemetry Controller-Initiated log pages.<br>If set to ‘1’, then the controller supports:<br>• the Supported Log Pages log page (Log Identifier 0h);<br>• returning the scope of each command in the Commands Supported<br>and Effects log page (Log Identifier 05h);<br>• the Feature Identifiers Supported and Effects log page (Log<br>Identifier 12h); and<br>• the NVMe-MI Commands Supported and Effects log page (Log<br>Identifier 13h).<br>5<br>If cleared to ‘0’, then the controller:<br>• does not support returning the scope of each command in the<br>Commands Supported and Effects log page;<br>• may support the Supported Log Pages log page;<br>• may support the Feature Identifiers Supported and Effects log<br>page; and<br>• may support the NVMe-MI Commands Supported and Effects log<br>page.<br>If set to ‘1’, then the controller supports the Persistent Event log. If cleared<br>4<br>to ‘0’, then the controller does not support the Persistent Event log.<br>If set to ‘1’, then the controller supports the Telemetry Host-Initiated and<br>Telemetry Controller-Initiated log pages and sending Telemetry Log Notices.<br>3 If cleared to ’0’, then the controller does not support the Telemetry Host-<br>Initiated and Telemetry Controller-Initiated log pages and Telemetry Log<br>Notice events.<br>If set to ‘1’, then the controller supports extended data for the Get Log Page<br>command (including extended Number of Dwords and Log Page Offset<br>2<br>fields). If cleared to ‘0’, then the controller does not support extended data<br>for the Get Log Page command.<br>If set to ‘1’, then the controller supports the Commands Supported and<br>1 Effects log page. Bit 1 if cleared to ‘0’, then the controller does not support<br>the Commands Supported and Effects log page.<br>If set to ‘1’, then the controller supports the SMART / Health Information log<br>0 page on a per namespace basis. If cleared to ‘0’, then the controller does not<br>support the SMART / Health Information log page on a per namespace basis.|\n|262|M|M|M|Error Log Page Entries (ELPE): This field indicates the maximum number of Error<br>Information Log Entries that are stored by the controller. This field is a 0’s based value.|\n|263|M|M|R|Number of Power States Support (NPSS): This field indicates the number of NVM<br>Express power states supported by the controller. This is a 0’s based value. Refer to<br>section 8.15.<br>Power states are numbered sequentially starting at power state 0. A controller shall<br>support at least one power state (i.e., power state 0) and may support up to 31 additional<br>power states (i.e., up to 32 total).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2627",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06967045366764069
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2628",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2629",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4405149519443512
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|264|M|M|R|Admin Vendor Specific Command Configuration (AVSCC): This field indicates the<br>configuration settings for Admin Vendor Specific command handling. Refer to section<br>8.23.<br>Bits 7:1 are reserved.<br>Bit 0 if set to ‘1’ indicates that all Admin Vendor Specific Commands use the format<br>defined in Figure 88. If cleared to ‘0’ indicates that the format of all Admin Vendor<br>Specific Commands are vendor specific.|\n|265|O|O|R|Autonomous Power State Transition Attributes (APSTA): This field indicates the<br>attributes of the autonomous power state transition feature. Refer to section 8.15.2.<br>Bits 7:1 are reserved.<br>Bit 0 if set to ‘1’, then the controller supports autonomous power state transitions. If<br>cleared to ‘0’, then the controller does not support autonomous power state transitions.|\n|267:266|M|M|R|Warning Composite Temperature Threshold (WCTEMP): This field indicates the<br>minimum Composite Temperature field value (reported in the SMART / Health<br>Information log in Figure 207) that indicates an overheating condition during which<br>controller operation continues. Immediate remediation is recommended (e.g., additional<br>cooling or workload reduction). The platform should strive to maintain a composite<br>temperature less than this value.<br>A value of 0h in this field indicates that no warning temperature threshold value is<br>reported by the controller. Implementations compliant with NVM Express Base<br>Specification, Revision 1.2 or later shall report a non-zero value in this field.<br>It is recommended that implementations report a value of 0157h in this field.|\n|269:268|M|M|R|Critical Composite Temperature Threshold (CCTEMP): This field indicates the<br>minimum Composite Temperature field value (reported in the SMART / Health<br>Information log in Figure 207) that indicates a critical overheating condition (e.g., may<br>prevent continued normal operation, possibility of data loss, automatic device shutdown,<br>extreme performance throttling, or permanent damage).<br>A value of 0h in this field indicates that no critical temperature threshold value is reported<br>by the controller. Implementations compliant with NVM Express Base Specification,<br>Revision 1.2 or later shall report a non-zero value in this field.|\n|271:270|O|O|R|Maximum Time for Firmware Activation (MTFA): Indicates the maximum time the<br>controller temporarily stops processing commands to activate the firmware image. This<br>field shall be valid if the controller supports firmware activation without a reset. This field<br>is specified in 100 millisecond units. A value of 0h indicates that the maximum time is<br>undefined.|\n|275:272|O|O|R|Host Memory Buffer Preferred Size (HMPRE): This field indicates the preferred size<br>that the host is requested to allocate for the Host Memory Buffer feature in 4 KiB units.<br>This value shall be greater than or equal to the Host Memory Buffer Minimum Size. If<br>this field is non-zero, then the Host Memory Buffer feature is supported. If this field is<br>cleared to 0h, then the Host Memory Buffer feature is not supported.|\n|279:276|O|O|R|Host Memory Buffer Minimum Size (HMMIN): This field indicates the minimum size<br>that the host is requested to allocate for the Host Memory Buffer feature in 4 KiB units.<br>If this field is cleared to 0h, then the host is requested to allocate any amount of host<br>memory possible up to the HMPRE value.|\n|295:280|O|O|R|Total NVM Capacity (TNVMCAP): This field indicates the total NVM capacity that is<br>accessible by the controller. The value is in bytes. This field shall be supported if the<br>Namespace Management capability (refer to section 8.11) is supported or if the<br>Capacity Management capability (refer to section 8.3) is supported.<br>Refer to section 3.8.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3880,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2630",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20593500137329102
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2631",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2632",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19490480422973633
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|000b|HMAC SHA-256 (refer to RFC 6234)|\n|001b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2633",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4257901906967163
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:24|Access Size: If the Number of RPMB Units field is non-zero, then this field<br>indicates the maximum number of 512B units of data that may be read or<br>written per RPMB access by Security Send or Security Receive commands<br>for the controller. This is a 0’s based value. A value of 0h indicates support<br>for one unit of 512B of data.<br>If the Number of RPMB Units field is 0h, then this field shall be ignored.|\n|23:16|Total Size: If the Number of RPMB Units field is non-zero, then this field<br>indicates the number of 128 KiB units of data in each RPMB supported in<br>the controller. This is a 0’s based value. A value of 0h indicates support for<br>one unit of 128 KiB of data.<br>If the Number of RPMB Units field is 0h, this field shall be ignored.|\n|15:06|Reserved|\n|05:03|Authentication Method: This field indicates the authentication method<br>used to access all RPMBs in the controller. The values for this field are:<br>Value Definition<br>000b HMAC SHA-256 (refer to RFC 6234)<br>001b to 111b Reserved|\n|02:00|Number of RPMB Units: This field indicates the number of RPMB targets<br>the controller supports. All RPMB targets supported shall have the same<br>capabilities as defined in the RPMBS field. A value of 0h indicates the<br>controller does not support Replay Protected Memory Blocks. If this value<br>is non-zero, then the controller shall support the Security Send and Security<br>Receive commands.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1463,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2634",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49792563915252686
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|311:296|O|O|R|Unallocated NVM Capacity (UNVMCAP): This field indicates the unallocated NVM<br>capacity that is accessible by the controller. The value is in bytes. This field shall be<br>supported if the Namespace Management capability (refer to section 8.11) is supported<br>or if the Capacity Management capability (refer to section 8.3) is supported.<br>Refer to section 3.8.|\n|315:312|O|O|R|Replay Protected Memory Block Support (RPMBS): This field indicates if the<br>controller supports one or more Replay Protected Memory Blocks (RPMBs) and the<br>capabilities. Refer to section 8.18.<br>Bits Description<br>Access Size: If the Number of RPMB Units field is non-zero, then this field<br>indicates the maximum number of 512B units of data that may be read or<br>written per RPMB access by Security Send or Security Receive commands<br>31:24 for the controller. This is a 0’s based value. A value of 0h indicates support<br>for one unit of 512B of data.<br>If the Number of RPMB Units field is 0h, then this field shall be ignored.<br>Total Size: If the Number of RPMB Units field is non-zero, then this field<br>indicates the number of 128 KiB units of data in each RPMB supported in<br>23:16 the controller. This is a 0’s based value. A value of 0h indicates support for<br>one unit of 128 KiB of data.<br>If the Number of RPMB Units field is 0h, this field shall be ignored.<br>15:06 Reserved<br>Authentication Method: This field indicates the authentication method<br>used to access all RPMBs in the controller. The values for this field are:<br>05:03 Value Definition<br>000b HMAC SHA-256 (refer to RFC 6234)<br>001b to 111b Reserved<br>Number of RPMB Units: This field indicates the number of RPMB targets<br>the controller supports. All RPMB targets supported shall have the same<br>capabilities as defined in the RPMBS field. A value of 0h indicates the<br>02:00<br>controller does not support Replay Protected Memory Blocks. If this value<br>is non-zero, then the controller shall support the Security Send and Security<br>Receive commands.|\n|317:316|O|O|R|Extended Device Self-test Time (EDSTT): If the Device Self-test command is<br>supported, then this field indicates the nominal amount of time in one minute units that<br>the controller takes to complete an extended device self-test operation when in power<br>state 0. If the Device Self-test command is not supported, then this field is reserved.|\n|318|O|O|R|Device Self-test Options (DSTO): This field indicates the optional Device Self-test<br>command or operation behaviors supported by the controller or NVM subsystem.<br>Bits 7:1 are reserved.<br>Bit 0 if set to ‘1’, then the NVM subsystem supports only one device self-test operation<br>in progress at a time. If cleared to ‘0’, then the NVM subsystem supports one device<br>self-test operation per controller at a time.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2922,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2635",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4211336672306061
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2636",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2637",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3128514587879181
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|319|M|M|R|Firmware Update Granularity (FWUG): This field indicates the granularity and<br>alignment requirement of the firmware image being updated by the Firmware Image<br>Download command (refer to section 5.13). If the values specified in the NUMD field or<br>the OFST field in the Firmware Image Download command do not conform to this<br>granularity and alignment requirement, then the firmware update may abort with a status<br>code of Invalid Field in Command. For the broadest interoperability with host software,<br>it is recommended that the controller set this value to the lowest value possible.<br>The value is reported in 4 KiB units (e.g., 1h corresponds to 4 KiB, 2h corresponds to<br>8 KiB). A value of 0h indicates that no information on granularity is provided. A value of<br>FFh indicates there is no restriction (i.e., any granularity and alignment in dwords is<br>allowed).|\n|321:320|M|M|R|Keep Alive Support (KAS): This field indicates the granularity of the Keep Alive Timer<br>in 100 millisecond units (refer to section 3.9). If this field is cleared to 0h, then the Keep<br>Alive feature is not supported. The Keep Alive feature shall be supported for NVMe over<br>Fabrics implementations as described in section 3.9.|\n|323:322|O|O|R|Host Controlled Thermal Management Attributes (HCTMA): This field indicates the<br>attributes of the host controlled thermal management feature. Refer to section 8.15.5.<br>Bits 15:1 are reserved.<br>Bit 0 if set to ‘1’, then the controller supports host controlled thermal management. If<br>cleared to ‘0’, then the controller does not support host controlled thermal management.<br>If this bit is set to ‘1’, then the controller shall support the Set Features command and<br>Get Features command with the Feature Identifier field set to 10h.|\n|325:324|O|O|R|Minimum Thermal Management Temperature (MNTMT): This field indicates the<br>minimum temperature, in Kelvins, that the host may request in the Thermal<br>Management Temperature 1 field and Thermal Management Temperature 2 field of a<br>Set Features command with the Feature Identifier field set to 10h. A value of 0h<br>indicates that the controller does not report this field or the host controlled thermal<br>management feature (refer to section 8.15.5) is not supported.|\n|327:326|O|O|R|Maximum Thermal Management Temperature (MXTMT): This field indicates the<br>maximum temperature, in Kelvins, that the host may request in the Thermal<br>Management Temperature 1 field and Thermal Management Temperature 2 field of the<br>Set Features command with the Feature Identifier set to 10h. A value of 0h indicates<br>that the controller does not report this field or the host controlled thermal management<br>feature is not supported.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2825,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2638",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21207286417484283
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2639",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2510080337524414
  },
  {
    "content": "**Sanitize Capabilities (SANICAP):** This field indicates attributes for sanitize operations.\nIf the Sanitize command is supported, then this field shall be non-zero. If the Sanitize\ncommand is not supported, then this field shall be cleared to 0h. Refer to section 8.21.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 271,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2640",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6293525695800781
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Additional media modification after sanitize<br>operation completes successfully is not<br>defined. Only controllers compliant with NVM<br>Express Base Specification, Revision 1.3 and<br>earlier or that have bits 2:0 of the SANICAP<br>field cleared to 000b are allowed to return this<br>value.|\n|01b|Media is not additionally modified by the<br>controller after sanitize operation completes<br>successfully.|\n|10b|Media is additionally modified by the<br>controller after sanitize operation completes<br>successfully. The Sanitize Operation<br>Completed event does not occur until the<br>additional media modification associated with<br>this field has completed.|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 712,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2641",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7745984792709351
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:30|No-Deallocate Modifies Media After Sanitize (NODMMAS):<br>This field indicates if media is additionally modified by the<br>controller after a sanitize operation successfully completes that<br>had been started by a Sanitize command with the No-Deallocate<br>After Sanitize bit set to ‘1’.<br>The work required for the associated additional media modification<br>is included both in the estimated time for each sanitize operation<br>and in the Sanitize Progress field (refer to Figure 267).<br>Value Definition<br>Additional media modification after sanitize<br>operation completes successfully is not<br>defined. Only controllers compliant with NVM<br>00b Express Base Specification, Revision 1.3 and<br>earlier or that have bits 2:0 of the SANICAP<br>field cleared to 000b are allowed to return this<br>value.<br>Media is not additionally modified by the<br>01b controller after sanitize operation completes<br>successfully.<br>Media is additionally modified by the<br>controller after sanitize operation completes<br>successfully. The Sanitize Operation<br>10b<br>Completed event does not occur until the<br>additional media modification associated with<br>this field has completed.<br>11b Reserved<br>If bits 2:0 of the SANICAP field are cleared to 000b, then the<br>controller shall clear this field to 00b.|\n|29|No-Deallocate Inhibited (NDI): If set to ‘1’ and the No-Deallocate<br>Response Mode bit is set to ‘1’, then the controller deallocates<br>after the sanitize operation even if the No-Deallocate After Sanitize<br>bit is set to ‘1’ in a Sanitize command.<br>If:<br>a) this bit is set to ‘1’;<br>b) the No-Deallocate After Sanitize bit is set to ‘1’ in a<br>Sanitize command, and:<br>1) the No-Deallocate Response Mode bit (refer to<br>Figure 352) is cleared to ‘0’; or<br>2) the Sanitize Config Feature (refer to section<br>5.27.1.19) is not supported,<br>then the controller aborts the Sanitize command with a status code<br>of Invalid Field in Command.<br>If the No-Deallocate After Sanitize bit is cleared to ‘0’ in a Sanitize<br>command, then the value of this bit has no effect on the processing<br>that Sanitize command.<br>If this bit is cleared to ‘0’, then the controller supports the No-<br>Deallocate After Sanitize bit in a Sanitize command.<br>If bits 2:0 of the SANICAP field are cleared to 0h, then the<br>controller shall clear this bit to ‘0’.|\n|28:03|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2427,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2642",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23673519492149353
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2643",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2644",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3317190706729889
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|Col6|Col7|Col8|\n|---|---|---|---|---|---|---|---|\n||||||02|Overwrite Support (OWS): If set to ‘1’, then the controller<br>supports the Overwrite sanitize operation. If cleared to ‘0’, then the<br>controller does not support the Overwrite sanitize operation.||\n||||||01|Block Erase Support (BES): If set to ‘1’, then the controller<br>supports the Block Erase sanitize operation. If cleared to ‘0’, then<br>the controller does not support the Block Erase sanitize operation.|Block Erase Support (BES): If set to ‘1’, then the controller<br>supports the Block Erase sanitize operation. If cleared to ‘0’, then<br>the controller does not support the Block Erase sanitize operation.|\n||||||00|Crypto Erase Support (CES): If set to ‘1’, then the controller<br>supports the Crypto Erase sanitize operation. If cleared to ‘0’, then<br>the controller does not support the Crypto Erase sanitize<br>operation.|Crypto Erase Support (CES): If set to ‘1’, then the controller<br>supports the Crypto Erase sanitize operation. If cleared to ‘0’, then<br>the controller does not support the Crypto Erase sanitize<br>operation.|\n|335:332|O|O|R|Host Memory Buffer Minimum Descriptor Entry Size (HMMINDS): This field<br>indicates the minimum usable size of a Host Memory Buffer Descriptor Entry in 4 KiB<br>units. If this field is cleared to 0h, then the controller does not indicate any limitations on<br>the Host Memory Buffer Descriptor Entry size.|Host Memory Buffer Minimum Descriptor Entry Size (HMMINDS): This field<br>indicates the minimum usable size of a Host Memory Buffer Descriptor Entry in 4 KiB<br>units. If this field is cleared to 0h, then the controller does not indicate any limitations on<br>the Host Memory Buffer Descriptor Entry size.|Host Memory Buffer Minimum Descriptor Entry Size (HMMINDS): This field<br>indicates the minimum usable size of a Host Memory Buffer Descriptor Entry in 4 KiB<br>units. If this field is cleared to 0h, then the controller does not indicate any limitations on<br>the Host Memory Buffer Descriptor Entry size.|Host Memory Buffer Minimum Descriptor Entry Size (HMMINDS): This field<br>indicates the minimum usable size of a Host Memory Buffer Descriptor Entry in 4 KiB<br>units. If this field is cleared to 0h, then the controller does not indicate any limitations on<br>the Host Memory Buffer Descriptor Entry size.|\n|337:336|O|O|R|Host Memory Maximum Descriptors Entries (HMMAXD): This field indicates the<br>number of usable Host Memory Buffer Descriptor Entries. If this field is cleared to 0h,<br>then the controller does not indicate a maximum number of Host Memory Buffer<br>Descriptor Entries.|Host Memory Maximum Descriptors Entries (HMMAXD): This field indicates the<br>number of usable Host Memory Buffer Descriptor Entries. If this field is cleared to 0h,<br>then the controller does not indicate a maximum number of Host Memory Buffer<br>Descriptor Entries.|Host Memory Maximum Descriptors Entries (HMMAXD): This field indicates the<br>number of usable Host Memory Buffer Descriptor Entries. If this field is cleared to 0h,<br>then the controller does not indicate a maximum number of Host Memory Buffer<br>Descriptor Entries.|Host Memory Maximum Descriptors Entries (HMMAXD): This field indicates the<br>number of usable Host Memory Buffer Descriptor Entries. If this field is cleared to 0h,<br>then the controller does not indicate a maximum number of Host Memory Buffer<br>Descriptor Entries.|\n|339:338|O|O|R|NVM Set Identifier Maximum (NSETIDMAX): This field defines the maximum value of<br>a valid NVM Set Identifier for any controller in the NVM subsystem. The number of NVM<br>Sets supported by the NVM subsystem is less than or equal to NSETIDMAX.|NVM Set Identifier Maximum (NSETIDMAX): This field defines the maximum value of<br>a valid NVM Set Identifier for any controller in the NVM subsystem. The number of NVM<br>Sets supported by the NVM subsystem is less than or equal to NSETIDMAX.|NVM Set Identifier Maximum (NSETIDMAX): This field defines the maximum value of<br>a valid NVM Set Identifier for any controller in the NVM subsystem. The number of NVM<br>Sets supported by the NVM subsystem is less than or equal to NSETIDMAX.|NVM Set Identifier Maximum (NSETIDMAX): This field defines the maximum value of<br>a valid NVM Set Identifier for any controller in the NVM subsystem. The number of NVM<br>Sets supported by the NVM subsystem is less than or equal to NSETIDMAX.|\n|341:340|O|O|R|Endurance Group Identifier Maximum (ENDGIDMAX): This field defines the<br>maximum value of a valid Endurance Group Identifier for any controller in the NVM<br>subsystem. The number of Endurance Groups supported by the NVM subsystem is less<br>than or equal to ENDGIDMAX.|Endurance Group Identifier Maximum (ENDGIDMAX): This field defines the<br>maximum value of a valid Endurance Group Identifier for any controller in the NVM<br>subsystem. The number of Endurance Groups supported by the NVM subsystem is less<br>than or equal to ENDGIDMAX.|Endurance Group Identifier Maximum (ENDGIDMAX): This field defines the<br>maximum value of a valid Endurance Group Identifier for any controller in the NVM<br>subsystem. The number of Endurance Groups supported by the NVM subsystem is less<br>than or equal to ENDGIDMAX.|Endurance Group Identifier Maximum (ENDGIDMAX): This field defines the<br>maximum value of a valid Endurance Group Identifier for any controller in the NVM<br>subsystem. The number of Endurance Groups supported by the NVM subsystem is less<br>than or equal to ENDGIDMAX.|\n|342|O|O|R|ANA Transition Time (ANATT): This field indicates the maximum amount of time, in<br>seconds, for a transition between ANA states or the maximum amount of time, in<br>seconds, that the controller reports the ANA change state. If the controller supports<br>Asymmetric Namespace Access Reporting (refer to the CMIC field in Figure 275), then<br>this field shall be set to a non-zero value. If the controller does not support Asymmetric<br>Namespace Access Reporting, then this field shall be cleared to 0h. Refer to section<br>8.10.4.|ANA Transition Time (ANATT): This field indicates the maximum amount of time, in<br>seconds, for a transition between ANA states or the maximum amount of time, in<br>seconds, that the controller reports the ANA change state. If the controller supports<br>Asymmetric Namespace Access Reporting (refer to the CMIC field in Figure 275), then<br>this field shall be set to a non-zero value. If the controller does not support Asymmetric<br>Namespace Access Reporting, then this field shall be cleared to 0h. Refer to section<br>8.10.4.|ANA Transition Time (ANATT): This field indicates the maximum amount of time, in<br>seconds, for a transition between ANA states or the maximum amount of time, in<br>seconds, that the controller reports the ANA change state. If the controller supports<br>Asymmetric Namespace Access Reporting (refer to the CMIC field in Figure 275), then<br>this field shall be set to a non-zero value. If the controller does not support Asymmetric<br>Namespace Access Reporting, then this field shall be cleared to 0h. Refer to section<br>8.10.4.|ANA Transition Time (ANATT): This field indicates the maximum amount of time, in<br>seconds, for a transition between ANA states or the maximum amount of time, in<br>seconds, that the controller reports the ANA change state. If the controller supports<br>Asymmetric Namespace Access Reporting (refer to the CMIC field in Figure 275), then<br>this field shall be set to a non-zero value. If the controller does not support Asymmetric<br>Namespace Access Reporting, then this field shall be cleared to 0h. Refer to section<br>8.10.4.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 7724,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2645",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.052568621933460236
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2646",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2647",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4126102328300476
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|343|O|O|R|Asymmetric Namespace Access Capabilities (ANACAP): This field indicates the<br>capabilities associated with Asymmetric Namespace Access Reporting (refer to section<br>8.1).<br>Bit 7 if set to ‘1’, then the controller supports a non-zero value in the ANAGRPID field of<br>the Namespace Management command. If cleared to ‘0’, then the controller does not<br>support a non-zero value in the ANAGRPID field of the Namespace Management<br>command. If the Namespace Management command is not supported, then this bit shall<br>be cleared to ‘0’.<br>Bit 6 if set to ‘1’, then the ANAGRPID field in the Identify Namespace data structure<br>(refer to the NVM Command Set Specification) does not change while the namespace<br>is attached to any controller. If cleared to ‘0’, then the ANAGRPID field may change<br>while the namespace is attached to any controller. Refer to section 8.1.2.<br>Bit 5 is reserved.<br>Bit 4 if set to ‘1’, then the controller is able to report ANA Change state (refer to section<br>8.1.3.5). If cleared to ‘0’, then the controller does not report ANA Change state.<br>Bit 3 if set to ‘1’, then the controller is able to report ANA Persistent Loss state (refer to<br>section 8.1.3.4). If cleared to ‘0’, then the controller does not report ANA Persistent Loss<br>state.<br>Bit 2 if set to ‘1’, then the controller is able to report ANA Inaccessible state (refer to<br>section 8.1.3.3). If cleared to ‘0’, then the controller does not report ANA Inaccessible<br>state.<br>Bit 1 if set to ‘1’, then the controller is able to report ANA Non-Optimized state (refer to<br>section 8.1.3.2). If cleared to ‘0’, then the controller does not report ANA Non-Optimized<br>state.<br>Bit 0 if set to ‘1’, then the controller is able to report ANA Optimized state (refer to section<br>8.1.3.1). If the controller supports Asymmetric Namespace Access Reporting, then this<br>bit is set to ‘1’.|\n|347:344|O|O|R|ANA Group Identifier Maximum (ANAGRPMAX): This field indicates the maximum<br>value of a valid ANA Group Identifier for any controller in the NVM subsystem. If the<br>controller supports Asymmetric Namespace Access Reporting (refer to the CMIC field<br>in Figure 275), then this field shall be set to a non-zero value. If the controller does not<br>support Asymmetric Namespace Access Reporting, then this field shall be cleared to<br>0h.|\n|351:348|O|O|R|Number of ANA Group Identifiers (NANAGRPID): This field indicates the number of<br>ANA groups supported by the controller. If the controller supports Asymmetric<br>Namespace Access Reporting (refer to the CMIC field in Figure 275), then this field shall<br>be set to a non-zero value that is less than or equal to the ANAGRPMAX value. If the<br>controller does not support Asymmetric Namespace Access Reporting, then this field<br>shall be cleared to 0h.|\n|355:352|O|O|R|Persistent Event Log Size (PELS): This field indicates the maximum reportable size<br>for the Persistent Event Log (Refer to section 5.16.1.14) in 64 KiB units. If the Persistent<br>Event Log is not supported, then this field is reserved.|\n|357:356|O|O|O|Domain Identifier: This field indicates the identifier of the domain (refer to section 3.2.4)<br>that contains this controller. If the MDS bit is set to ‘1’, then this field shall be set to a<br>non-zero value. If the NVM subsystem does not support multiple domains (i.e., the NVM<br>subsystem consists of a single domain), then this field shall be cleared to 0h.|\n|367:358||||Reserved|\n|383:368|O|R|R|Max Endurance Group Capacity (MEGCAP): This field indicates the maximum<br>capacity of a single Endurance Group. If this field is cleared to 0h, the NVM subsystem<br>does not report a maximum Endurance Group Capacity value.|\n|511:384||||Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3824,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2648",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20105743408203125
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2649",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2650",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.356129914522171
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|NVM Command Set Attributes|NVM Command Set Attributes|NVM Command Set Attributes|NVM Command Set Attributes|NVM Command Set Attributes|\n|512|M|M|R|Submission Queue Entry Size (SQES): This field defines the required and maximum<br>I/O Submission Queue entry size.<br>Bits 7:4 define the maximum I/O Submission Queue entry size when using the NVM<br>Command Set. This value is greater than or equal to the required SQ entry size (i.e.,<br>bits 3:0 in this field). The value is in bytes and is reported as a power of two (2^n). The<br>recommended value is 6, corresponding to a standard SQ entry size of 64 bytes.<br>Controllers that implement proprietary extensions may support a larger value.<br>Bits 3:0 define the required (i.e., minimum) I/O Submission Queue entry size. This is the<br>minimum entry size that may be used. The value is in bytes and is reported as a power<br>of two (2^n). The required value shall be 6, corresponding to 64.|\n|513|M|M|R|Completion Queue Entry Size (CQES): This field defines the required and maximum<br>I/O Completion Queue entry size.<br>Bits 7:4 define the maximum I/O Completion Queue entry size. This value is greater<br>than or equal to the required CQ entry size (i.e., bits 3:0 in this field). The value is in<br>bytes and is reported as a power of two (2^n). The recommended value is 4,<br>corresponding to a standard CQ entry size of 16 bytes. Controllers that implement<br>proprietary extensions may support a larger value.<br>Bits 3:0 define the required (i.e., minimum) I/O Completion Queue entry size. This is the<br>minimum entry size that may be used. The value is in bytes and is reported as a power<br>of two (2^n). The required value shall be 4, corresponding to 16.|\n|515:514|M|M|M|Maximum Outstanding Commands (MAXCMD): Indicates the maximum number of<br>commands that the controller processes at one time for a particular queue (which may<br>be larger than the size of the corresponding Submission Queue). The host may use this<br>value to size Completion Queues and optimize the number of commands submitted at<br>one time to a particular I/O Queue. This field is mandatory for NVMe over Fabrics<br>implementations and optional for NVMe over PCIe implementations. If the field is not<br>used, it shall be cleared to 0h.|\n|519:516|M|M|R|Number of Namespaces (NN): This field indicates the maximum value of a valid NSID<br>for the NVM subsystem. Refer to the MNAN field for the number of supported<br>namespaces in the NVM subsystem.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2562,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2651",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28999119997024536
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2652",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2653",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42680707573890686
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|521:520|M|M|R|Optional NVM Command Support (ONCS): This field indicates the optional I/O<br>commands and features supported by the controller. Refer to section 3.1.2.<br>Bits 15:9 are reserved.<br>Bit 8 if set to ‘1’, then the controller supports the NVM Command Set Copy command.<br>If cleared to ‘0’, then the controller does not support the NVM Command Set Copy<br>command.<br>Bit 7 if set to ‘1’, then the controller supports the NVM Command Set Verify command<br>and the Verify Size Limit (VSL) field indicates the recommended maximum data size for<br>Verify commands. If cleared to ‘0’, then controller support of the NVM Command Set<br>Verify command is indicated by a non-zero data size limit in the VSL field.<br>Bit 6 if set to ‘1’, then the controller supports the Timestamp feature. If cleared to ‘0’,<br>then the controller does not support the Timestamp feature. Refer to section 5.27.1.11.<br>Bit 5 if set to ‘1’, then the controller supports reservations. If cleared to ‘0’, then the<br>controller does not support reservations. If the controller supports reservations, then the<br>following commands associated with reservations shall be supported: Reservation<br>Report, Reservation Register, Reservation Acquire, and Reservation Release. Refer to<br>section 8.19 for additional requirements.<br>Bit 4 if set to ‘1’, then the controller supports the Save field set to a non-zero value in<br>the Set Features command and the Select field set to a non-zero value in the Get<br>Features command. If cleared to ‘0’, then the controller does not support the Save field<br>set to a non-zero value in the Set Features command and the Select field set to a non-<br>zero value in the Get Features command.<br>Bit 3 if set to ‘1’, then the controller supports the NVM Command Set Write Zeroes<br>command and the Write Zeroes Size Limit (WZSL) field indicates the recommended<br>maximum data size for Write Zeroes commands. If cleared to ‘0’, then controller support<br>of the NVM Command Set Write Zeroes command is indicated by a non-zero data size<br>limit in the WZSL field.<br>Bit 2 if set to ‘1’, then the controller supports the NVM Command Set Dataset<br>Management command and limits, if any, on controller support of the Dataset<br>Management command are indicated by non-zero values in the Dataset Management<br>Ranges Limit (DMRL) field, the Dataset Management Size Limit (DMSL) field and the<br>Dataset Management Range Size Limit (DMRSL) field. If cleared to ‘0’, then controller<br>support of the NVM Command Set Dataset Management command is indicated by a<br>non-zero data size limit in the DMRL, DMSL, and DMRSL fields.<br>Bit 1 if set to ‘1’, then the controller supports the NVM Command Set Write<br>Uncorrectable command and the Write Uncorrectable Size Limit (WUSL) field indicates<br>the recommended maximum data size for Write Uncorrectable commands. If cleared to<br>‘0’, then controller support of the NVM Command Set Write Uncorrectable command is<br>indicated by a non-zero data size limit in the WUSL field.<br>Bit 0 if set to ‘1’, then the controller supports the NVM Command Set Compare<br>command. If cleared to ‘0’, then the controller does not support the NVM Command Set<br>Compare command.<br>NOTE: This field applies to all I/O Command Sets. The original name has been retained<br>for historical continuity.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3425,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2654",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2512228488922119
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2655",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2656",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3805252015590668
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|523:522|M|M|R|Fused Operation Support (FUSES): This field indicates the fused operations that the<br>controller supports. Refer to section 3.4.2.<br>Bits 15:1 are reserved.<br>Bit 0 if set to ‘1’, then the controller supports the NVM Command Set Compare and<br>Write fused operation. If cleared to ‘0’, then the controller does not support the NVM<br>Command Set Compare and Write fused operation. Compare shall be the first<br>command in the sequence.|\n|524|M|M|R|Format NVM Attributes (FNA): This field indicates attributes for the Format NVM<br>command.<br>Bits 7:4 are reserved.<br>Bit 3 indicates whether the Format NVM command supports an NSID value set to<br>FFFFFFFFh. If set to ‘1’, then the Format NVM command does not support an NSID<br>value set to FFFFFFFFh. If cleared to ‘0’, then the Format NVM command supports an<br>NSID value set to FFFFFFFFh.<br>Bit 2 indicates whether cryptographic erase is supported as part of the secure erase<br>functionality. If set to ‘1’, then cryptographic erase is supported. If cleared to ‘0’, then<br>cryptographic erase is not supported.<br>Bit 1 indicates whether secure erase functionality applies to all namespaces in the NVM<br>subsystem or is specific to a particular namespace. If set to ’1’, then any secure erase<br>performed as part of a format operation results in a secure erase of all namespaces in<br>the NVM subsystem. If cleared to ‘0’, then any secure erase performed as part of a<br>format results in a secure erase of the particular namespace specified. If bit 3 is set to<br>‘1’, then this bit shall be cleared to ‘0’.<br>Bit 0 indicates whether the format operation (excluding secure erase) applies to all<br>namespaces in the NVM subsystem or is specific to a particular namespace. If set to<br>‘1’, then all namespaces in the NVM subsystem shall be configured with the same<br>attributes and a format (excluding secure erase) of any namespace results in a format<br>of all namespaces in the NVM subsystem. If cleared to ‘0’, then the controller supports<br>format on a per namespace basis. If bit 3 is set to ‘1’, then this bit shall be cleared to ‘0’.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2198,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2657",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2420283406972885
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2658",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2659",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4028902053833008
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|525|M|M|R|Volatile Write Cache (VWC): This field indicates attributes related to the presence of<br>a volatile write cache in the controller.<br>Bits 7:3 are reserved.<br>Bits 2:1 indicate Flush command behavior (refer to the Flush Command section of the<br>NVM Command Set Specification7.1) if the NSID value is set to FFFFFFFFh as follows:<br>Value Definition<br>Support for the NSID field set to FFFFFFFFh is not<br>indicated. Only controllers compliant with NVM Express<br>00b<br>Base Specification revision 1.3 and earlier shall be<br>allowed to return this value.<br>01b Reserved.<br>The Flush command does not support the NSID field set<br>to FFFFFFFFh. The controller shall fail a Flush command<br>10b<br>with the NSID set to FFFFFFFFh with a status code of<br>Invalid Namespace or Format.<br>The Flush command supports the NSID field set to<br>11b<br>FFFFFFFFh.<br>Bit 0 if set to ‘1’ indicates that a volatile write cache is present. If cleared to ‘0’, a volatile<br>write cache is not present.<br>If a volatile write cache is present, then the host controls whether the volatile write cache<br>is enabled with a Set Features command specifying the Volatile Write Cache feature<br>identifier (refer to section 5.27.1.4). The Flush command (refer to the Flush Command<br>section of the NVM Command Set Specification7.1) is used to request that the contents<br>of a volatile write cache be made non-volatile.|\n|527:526|M|R|R|Atomic Write Unit Normal (AWUN): This field is specific to namespaces that are<br>associated with command sets that specify logical blocks (i.e., Command Set Identifier<br>0h or 2h), and shall be cleared to 0h for namespaces that are not associated with<br>command sets that specify logical blocks.|\n|529:528|M|M|R|Atomic Write Unit Power Fail (AWUPF): This field is specific to namespaces that are<br>associated with command sets that specify logical blocks (i.e., Command Set Identifier<br>0h or 2h), and shall be cleared to 0h for namespaces that are not associated with<br>command sets that specify logical blocks.|\n|530|M|M|R|I/O Command Set Vendor Specific Command Configuration (ICSVSCC): This field<br>indicates the configuration settings for I/O Command Set Vendor Specific command<br>handling. Refer to section 8.23.<br>Bits 7:1 are reserved.<br>Bit 0 if set to ‘1’ indicates that all NVM Vendor Specific Commands use the format<br>defined in Figure 88. If cleared to ‘0’ indicates that the format of all NVM Vendor Specific<br>Commands are vendor specific.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2574,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2660",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5957282185554504
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Support for the NSID field set to FFFFFFFFh is not<br>indicated. Only controllers compliant with NVM Express<br>Base Specification revision 1.3 and earlier shall be<br>allowed to return this value.|\n|01b|Reserved.|\n|10b|The Flush command does not support the NSID field set<br>to FFFFFFFFh. The controller shall fail a Flush command<br>with the NSID set to FFFFFFFFh with a status code of<br>Invalid Namespace or Format.|\n|11b|The Flush command supports the NSID field set to<br>FFFFFFFFh.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 524,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2661",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43248090147972107
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2662",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2663",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3489028811454773
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|531|M|M|R|Namespace Write Protection Capabilities (NWPC): This field indicates the optional<br>namespace write protection capabilities supported by the controller. Refer to section<br>8.12.<br>Bits 7:3 are reserved.<br>Bit 2 if set to ‘1’, then the controller supports the Permanent Write Protect state. If<br>cleared to ‘0’, then the controller does not support the Permanent Write Protect state. If<br>this bit is set to ‘1’, then the controller shall support the Namespace Write Protection<br>Authentication field (refer to section 8.18).<br>Bit 1 if set to ‘1’, then the controller supports the Write Protect Until Power Cycle state.<br>If cleared to ‘0’, then the controller does not support Write Protect Until Power Cycle<br>state. If this bit is set to ‘1’, then the controller shall support the Namespace Write<br>Protection Authentication field (refer to section 8.18).<br>Bit 0 if set to ‘1’, then the controller shall support the No Write Protect and Write Protect<br>namespace write protection states and may support the Write Protect Until Power Cycle<br>state and Permanent Write Protect namespace write protection states (refer to section<br>8.12). If cleared to ‘0’, then the controller does not support Namespace Write Protection<br>and bits 2:1 shall be cleared to 00b.|\n|533:532|O|R|R|Atomic Compare & Write Unit (ACWU): This field is specific to namespaces that are<br>associated with command sets that specify logical blocks (i.e., Command Set Identifier<br>0h or 2h), and shall be cleared to 0h for namespaces that are not associated with<br>command sets that specify logical blocks.|\n|535:534|M|R|R|Copy Descriptor Formats Supported:<br>Bits Description<br>15:2 Reserved<br>1 If set to ‘1’, then the controller supports Copy Descriptor Format<br>1h. If cleared to ‘0’, then the controller does not support Copy<br>Descriptor Format 1h.<br>0 If set to ‘1’, then the controller supports Copy Descriptor Format<br>0h. If cleared to ‘0’, then the controller does not support Copy<br>Descriptor Format 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2098,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2664",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5550159215927124
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15:2|Reserved|\n|1|If set to ‘1’, then the controller supports Copy Descriptor Format<br>1h. If cleared to ‘0’, then the controller does not support Copy<br>Descriptor Format 1h.|\n|0|If set to ‘1’, then the controller supports Copy Descriptor Format<br>0h. If cleared to ‘0’, then the controller does not support Copy<br>Descriptor Format 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 372,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2665",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23544664680957794
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2666",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2667",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4623802900314331
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|539:536|O|O|M|SGL Support (SGLS): This field indicates if SGLs are supported and the particular SGL<br>types supported. Refer to section 4.1.2.<br>Bits Description<br>31:22 Reserved<br>If set to ‘1’, then the controller supports the Transport SGL Data Block<br>21 descriptor. If cleared to ‘0’, then the controller does not support the<br>Transport SGL Data Block descriptor.<br>If set to ‘1’, then the controller supports the Address field in SGL Data<br>Block, SGL Segment, and SGL Last Segment descriptor types<br>20<br>specifying an offset. If cleared to ‘0’, then the Address field specifying<br>an offset is not supported.<br>If set to ‘1’, then use of a Metadata Pointer (MPTR) that contains an<br>address of an SGL segment containing exactly one SGL Descriptor that<br>19<br>is qword aligned is supported. If cleared to ‘0’, then use of a MPTR<br>containing an SGL Descriptor is not supported.<br>If set to ‘1’, then the controller supports commands that contain a data<br>or metadata SGL of a length larger than the amount of data to be<br>18<br>transferred. If cleared to ‘0’, then the SGL length shall be equal to the<br>amount of data to be transferred.<br>This field specifies metadata buffer alignment requirements when<br>CDW0.PSDT is set to 01b (refer to Figure 86). If set to ‘1’, then use of<br>17 a byte aligned contiguous physical buffer of metadata (the Metadata<br>Pointer field in Figure 87) is supported. If cleared to ‘0’, then use of a<br>byte aligned contiguous physical buffer of metadata is not supported.<br>If set to ‘1’, then the SGL Bit Bucket descriptor is supported. If cleared<br>16<br>to ‘0’, then the SGL Bit Bucket descriptor is not supported.<br>SGL Descriptor Threshold (SDT): This field indicates the<br>recommended maximum number of SGL descriptors in a command<br>15:08<br>(refer to section 4.1.2). If this field is cleared to 0h, then no<br>recommended maximum number of SGL descriptors is reported.<br>07:03 Reserved<br>If set to ‘1’, then the controller supports the Keyed SGL Data Block<br>02 descriptor. If cleared to ‘0’, then the controller does not support the<br>Keyed SGL Data Block descriptor.<br>This field is used to determine the SGL support. Valid values are shown<br>in the table below.<br>Value Definition<br>00b SGLs are not supported.<br>SGLs are supported. There is no alignment nor<br>01:00 01b<br>granularity requirement for Data Blocks.<br>SGLs are supported. There is a dword alignment and<br>10b granularity requirement for Data Blocks (refer to section<br>4.1.2).<br>11b Reserved|\n|543:540|O|O|R|Maximum Number of Allowed Namespaces (MNAN): This field indicates the<br>maximum number of namespaces supported by the NVM subsystem. If this field is<br>cleared to 0h, then the maximum number of namespaces supported by the NVM<br>subsystem is less than or equal to the value in the NN field. If the controller supports<br>Asymmetric Namespace Access Reporting, then this field shall be set to a non-zero<br>value that is less than or equal to the NN value.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3097,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2668",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7393243312835693
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:22|Reserved|\n|21|If set to ‘1’, then the controller supports the Transport SGL Data Block<br>descriptor. If cleared to ‘0’, then the controller does not support the<br>Transport SGL Data Block descriptor.|\n|20|If set to ‘1’, then the controller supports the Address field in SGL Data<br>Block, SGL Segment, and SGL Last Segment descriptor types<br>specifying an offset. If cleared to ‘0’, then the Address field specifying<br>an offset is not supported.|\n|19|If set to ‘1’, then use of a Metadata Pointer (MPTR) that contains an<br>address of an SGL segment containing exactly one SGL Descriptor that<br>is qword aligned is supported. If cleared to ‘0’, then use of a MPTR<br>containing an SGL Descriptor is not supported.|\n|18|If set to ‘1’, then the controller supports commands that contain a data<br>or metadata SGL of a length larger than the amount of data to be<br>transferred. If cleared to ‘0’, then the SGL length shall be equal to the<br>amount of data to be transferred.|\n|17|This field specifies metadata buffer alignment requirements when<br>CDW0.PSDT is set to 01b (refer to Figure 86). If set to ‘1’, then use of<br>a byte aligned contiguous physical buffer of metadata (the Metadata<br>Pointer field in Figure 87) is supported. If cleared to ‘0’, then use of a<br>byte aligned contiguous physical buffer of metadata is not supported.|\n|16|If set to ‘1’, then the SGL Bit Bucket descriptor is supported. If cleared<br>to ‘0’, then the SGL Bit Bucket descriptor is not supported.|\n|15:08|SGL Descriptor Threshold (SDT): This field indicates the<br>recommended maximum number of SGL descriptors in a command<br>(refer to section 4.1.2). If this field is cleared to 0h, then no<br>recommended maximum number of SGL descriptors is reported.|\n|07:03|Reserved|\n|02|If set to ‘1’, then the controller supports the Keyed SGL Data Block<br>descriptor. If cleared to ‘0’, then the controller does not support the<br>Keyed SGL Data Block descriptor.|\n|01:00|This field is used to determine the SGL support. Valid values are shown<br>in the table below.<br>Value Definition<br>00b SGLs are not supported.<br>SGLs are supported. There is no alignment nor<br>01b<br>granularity requirement for Data Blocks.<br>SGLs are supported. There is a dword alignment and<br>10b granularity requirement for Data Blocks (refer to section<br>4.1.2).<br>11b Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2388,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2669",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6277917623519897
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|SGLs are not supported.|\n|01b|SGLs are supported. There is no alignment nor<br>granularity requirement for Data Blocks.|\n|10b|SGLs are supported. There is a dword alignment and<br>granularity requirement for Data Blocks (refer to section<br>4.1.2).|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 298,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2670",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2471207082271576
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2671",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2672",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4624021649360657
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|559:544|O|R|R|Maximum Domain Namespace Attachments (MAXDNA): Indicates the maximum of<br>the sum of the number of namespaces attached to each I/O controller in the Domain. If<br>this field is cleared to 0h, then no maximum is specified.<br>The value of this field shall be the same value for all I/O controllers in the Domain.|\n|563:560|O|R|R|Maximum I/O Controller Namespace Attachments (MAXCNA): Indicates the<br>maximum number of namespaces that are allowed to be attached to this I/O controller.<br>If this field is cleared to 0h, then no maximum is specified.<br>The value of this field shall be less than or equal to the number of namespaces<br>supported by the NVM subsystem (refer to the MNAN field).|\n|767:564||||Reserved|\n|1023:768|M|M|R|NVM Subsystem NVMe Qualified Name (SUBNQN): This field specifies the NVM<br>Subsystem NVMe Qualified Name as a UTF-8 null-terminated string. Refer to section<br>4.5 for the definition of NVMe Qualified Name.<br>Support for this field is mandatory if the controller supports revision 1.2.1 or later as<br>indicated in the Version property (refer to section 3.1.3.2).|\n|1791:1024||||Reserved|\n|Fabric Specific|Fabric Specific|Fabric Specific|Fabric Specific|Fabric Specific|\n|1795:1792|2<br>M|2<br>M|R|I/O Queue Command Capsule Supported Size (IOCCSZ): This field defines the<br>maximum I/O command capsule size in 16 byte units. The minimum value that shall be<br>indicated is 4 corresponding to 64 bytes.|\n|1799:1796|2<br>M|2<br>M|R|I/O Queue Response Capsule Supported Size (IORCSZ): This field defines the<br>maximum I/O response capsule size in 16 byte units. The minimum value that shall be<br>indicated is 1 corresponding to 16 bytes.|\n|1801:1800|2<br>M|2<br>M|R|In Capsule Data Offset (ICDOFF): This field defines the offset where data starts within<br>a capsule. This value is applicable to I/O Queues only (the Admin Queue shall use a<br>value of 0h).<br>The value is specified in 16 byte units. The offset is from the end of the submission<br>queue entry within the command capsule (starting at 64 bytes in the command capsule).<br>The minimum value is 0 and the maximum value is FFFFh.|\n|1802|2<br>M|2<br>M|R|Fabrics Controller Attributes (FCATT): This field indicates attributes of the controller<br>that are specific to NVMe over Fabrics.<br>Bits 7:1 are reserved.<br>Bit 0 if cleared to ‘0’, then the NVM subsystem uses a dynamic controller model. Bit 0 if<br>set to ‘1’, then the NVM subsystem uses a static controller model.|\n|1803|2<br>M|2<br>M|R|Maximum SGL Data Block Descriptors (MSDBD): This field indicates the maximum<br>number of SGL Data Block or Keyed SGL Data Block descriptors that a host is allowed<br>to place in a capsule. A value of 0h indicates no limit.|\n|1805:1804|2<br>M|2<br>M|R|Optional Fabric Commands Support (OFCS): Indicate whether the controller<br>supports optional fabric commands.<br>Bits 15:1 are reserved.<br>Bit 0 if cleared to ‘0’ then the controller does not support the Disconnect command. Bit<br>0 if set to ‘1’ then the controller supports the Disconnect command and deletion of<br>individual I/O Queues.|\n|2047:1806||||Reserved|\n|Power State Descriptors|Power State Descriptors|Power State Descriptors|Power State Descriptors|Power State Descriptors|\n|2079:2048|M|M|R|Power State 0 Descriptor (PSD0): This field indicates the characteristics of power<br>state 0. The format of this field is defined in Figure 276.|\n|2111:2080|O|O|R|Power State 1 Descriptor (PSD1): This field indicates the characteristics of power<br>state 1. The format of this field is defined in Figure 276.|\n|2143:2112|O|O|R|Power State 2 Descriptor (PSD2): This field indicates the characteristics of power<br>state 2. The format of this field is defined in Figure 276.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3817,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2673",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19724366068840027
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2674",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1886211782693863
  },
  {
    "content": "**Figure 275: Identify – Identify Controller Data Structure, I/O Command Set Independent**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2675",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5303654074668884
  },
  {
    "content": "|Bytes|1<br>I/O|1<br>Admin|1<br>Disc|Description|\n|---|---|---|---|---|\n|…|…|…|…|…|\n|3071:3040|O|O|R|Power State 31 Descriptor (PSD31): This field indicates the characteristics of power<br>state 31. The format of this field is defined in Figure 276.|\n|Vendor Specific|Vendor Specific|Vendor Specific|Vendor Specific|Vendor Specific|\n|4095:3072|O|O|O|Vendor Specific.|\n|Notes:<br>1. O/M/R definition: O = Optional, M = Mandatory, R = Reserved.<br>2. Mandatory for I/O controllers using a message-based transport. Reserved for controllers using a memory-based transport.|Notes:<br>1. O/M/R definition: O = Optional, M = Mandatory, R = Reserved.<br>2. Mandatory for I/O controllers using a message-based transport. Reserved for controllers using a memory-based transport.|Notes:<br>1. O/M/R definition: O = Optional, M = Mandatory, R = Reserved.<br>2. Mandatory for I/O controllers using a message-based transport. Reserved for controllers using a memory-based transport.|Notes:<br>1. O/M/R definition: O = Optional, M = Mandatory, R = Reserved.<br>2. Mandatory for I/O controllers using a message-based transport. Reserved for controllers using a memory-based transport.|Notes:<br>1. O/M/R definition: O = Optional, M = Mandatory, R = Reserved.<br>2. Mandatory for I/O controllers using a message-based transport. Reserved for controllers using a memory-based transport.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1369,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2676",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4379756450653076
  },
  {
    "content": "Figure 276 defines the power state descriptor that describes the attributes of each power state. For more\ninformation on how the power state descriptor fields are used, refer to section 8.15 on power management.\n\n**Figure 276: Identify – Power State Descriptor Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 277,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2677",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5108453035354614
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Not reported for this power state|\n|01b|0.0001 W|\n|10b|0.01 W|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2678",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5814682245254517
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|255:184|Reserved|\n|183:182|Active Power Scale (APS): This field indicates the scale for the Active Power field. If an Active<br>Power Workload is reported for a power state, then the Active Power Scale shall also be reported<br>for that power state.<br>Value Definition<br>00b Not reported for this power state<br>01b 0.0001 W<br>10b 0.01 W<br>11b Reserved|\n|181:179|Reserved|\n|178:176|Active Power Workload (APW): This field indicates the workload used to calculate maximum<br>power for this power state. Refer to section 8.15.3 for more details on each of the defined<br>workloads. This field shall not be “No Workload” unless ACTP is 0h.|\n|175:160|Active Power (ACTP): This field indicates the largest average power consumed by the NVM<br>subsystem over a 10 second period in this power state with the workload indicated in the Active<br>Power Workload field. The power in Watts is equal to the value in this field multiplied by the scale<br>indicated in the Active Power Scale field. A value of 0h indicates Active Power is not reported.|\n|159:152|Reserved|\n|151:150|Idle Power Scale (IPS): This field indicates the scale for the Idle Power field.<br>Value Definition<br>00b Not reported for this power state<br>01b 0.0001 W<br>10b 0.01 W<br>11b Reserved|\n|149:144|Reserved|\n|143:128|Idle Power (IDLP): This field indicates the typical power consumed by the NVM subsystem over<br>30 seconds in this power state when idle (e.g., there are no pending commands, property<br>accesses, background processes, sanitize operation, nor device self-test operations). The<br>measurement starts after the NVM subsystem has been idle for 10 seconds. The power in Watts<br>is equal to the value in this field multiplied by the scale indicated in the Idle Power Scale field. A<br>value of 0h indicates Idle Power is not reported. Refer to section 8.15.<br>Note: This value may be used by hosts to manage power versus resume latency. Platform and<br>form factor specifications may have additional power measurement and reporting requirements<br>that are outside the scope of this specification.|\n|127:125|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2132,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2679",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5814682245254517
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Not reported for this power state|\n|01b|0.0001 W|\n|10b|0.01 W|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2680",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3142434060573578
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2681",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2630581855773926
  },
  {
    "content": "**Figure 276: Identify – Power State Descriptor Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2682",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2711012363433838
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|124:120|Relative Write Latency (RWL): This field indicates the relative write latency associated with this<br>power state. The value in this field shall be less than the number of supported power states (e.g.,<br>if the controller supports 16 power states, then valid values are 0 through 15). A lower value<br>means lower write latency.|\n|119:117|Reserved|\n|116:112|Relative Write Throughput (RWT): This field indicates the relative write throughput associated<br>with this power state. The value in this field shall be less than the number of supported power<br>states (e.g., if the controller supports 16 power states, then valid values are 0 through 15). A<br>lower value means higher write throughput.|\n|111:109|Reserved|\n|108:104|Relative Read Latency (RRL): This field indicates the relative read latency associated with this<br>power state. The value in this field shall be less than the number of supported power states (e.g.,<br>if the controller supports 16 power states, then valid values are 0 through 15). A lower value<br>means lower read latency.|\n|103:101|Reserved|\n|100:96|Relative Read Throughput (RRT): This field indicates the relative read throughput associated<br>with this power state. The value in this field shall be less than the number of supported power<br>states (e.g., if the controller supports 16 power states, then valid values are 0 through 15). A<br>lower value means higher read throughput.|\n|95:64|Exit Latency (EXLAT): This field indicates the maximum exit latency in microseconds associated<br>with exiting this power state. A value of 0h indicates Exit Latency is not reported.|\n|63:32|Entry Latency (ENLAT): This field indicates the maximum entry latency in microseconds<br>associated with entering this power state. A value of 0h indicates Entry Latency is not reported.|\n|31:26|Reserved|\n|25|Non-Operational State (NOPS): This bit indicates whether the controller processes I/O<br>commands in this power state. If this bit is cleared to ‘0’, then the controller processes I/O<br>commands in this power state. If this bit is set to ‘1’, then the controller does not process I/O<br>commands in this power state. Refer to section 8.15.1.|\n|24|Max Power Scale (MXPS): This bit indicates the scale for the Maximum Power field. If this bit is<br>cleared to ‘0’, then the scale of the Maximum Power field is in 0.01 Watts. If this bit is set to ‘1’,<br>then the scale of the Maximum Power field is in 0.0001 Watts.|\n|23:16|Reserved|\n|15:00|Maximum Power (MP): This field indicates the sustained maximum power consumed by the<br>NVM subsystem in this power state. The power in Watts is equal to the value in this field multiplied<br>by the scale specified in the Max Power Scale bit. A value of 0h indicates Maximum Power is not<br>reported. Refer to section 8.15.<br>Note: This value is intended to provide an approximate guideline for hosts to manage power<br>versus performance. Platform and form factor specifications may have additional power<br>measurement and reporting requirements that are outside the scope of this specification.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2683",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0642789676785469
  },
  {
    "content": "**5.17.2.2 Active Namespace ID list (CNS 02h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2684",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6304787993431091
  },
  {
    "content": "A list of 1,024 namespace IDs is returned to the host containing active NSIDs in increasing order that are\ngreater than the value specified in the Namespace Identifier (NSID) field of the command. The controller\nshould abort the command with a status code of Invalid Namespace or Format if the NSID field is set to\nFFFFFFFEh or FFFFFFFFh. The NSID field may be cleared to 0h to retrieve a Namespace List including\nthe namespace starting with NSID of 1h. The data structure returned is a Namespace List (refer to section\n4.4.2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 527,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2685",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5482956767082214
  },
  {
    "content": "**5.17.2.3 Namespace Identification Descriptor list (CNS 03h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2686",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6944224238395691
  },
  {
    "content": "A list of Namespace Identification Descriptor structures (refer to Figure 277) is returned to the host for the\nnamespace specified in the Namespace Identifier (NSID) field if it is an active NSID. Namespace\nIdentification Descriptor structures consist of one or more Namespace Identifiers (NID) of various types as\nindicated by the Namespace Identifier Type (NIDT) field in each descriptor. Each NID is assigned to a",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 416,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2687",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3247489035129547
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2688",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.225972518324852
  },
  {
    "content": "namespace at namespace creation and remains fixed throughout the life of that namespace. If the NSID\nfield does not specify an active NSID, then refer to section 3.2.1.5 for the status code to return.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 200,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2689",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4942976236343384
  },
  {
    "content": "The contents of the Namespace Identification Descriptor list is preserved across namespace and controller\noperations (e.g., Controller Level Reset, namespace format, etc.).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 172,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2690",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6591249704360962
  },
  {
    "content": "The controller may return any number of variable length Namespace Identification Descriptor structures\nthat fit into the 4,096 byte Identify payload. All remaining bytes after the Namespace Identification Descriptor\nstructures should be cleared to 0h, and the host shall interpret a Namespace Identifier Descriptor Length\n(NIDL) value of 0h as the end of the list. The host should ignore any Namespace Identification Descriptor\nwith a Namespace Identifier Type not supported by the host.\n\nA controller shall not return multiple Namespace Identification Descriptors with the same Namespace\nIdentifier Type (NIDT). A controller shall return:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 639,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2691",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6312509179115295
  },
  {
    "content": "- at least one Namespace Identification Descriptor identifying the namespace (i.e., NIDT field set to\n1h, 2h, or 3h); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 121,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2692",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6648876070976257
  },
  {
    "content": "- a Namespace Identifcation Descriptor identifying the I/O Command Set (i.e., NIDT field set to 4h)\nif CAP.CSS bit 6 is set to ‘1’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 131,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2693",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3885694444179535
  },
  {
    "content": "**Figure 277: Identify – Namespace Identification Descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2694",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37057366967201233
  },
  {
    "content": "|Bytes|Description|Col3|Col4|\n|---|---|---|---|\n|00|Namespace Identifier Type (NIDT): This field indicates the data type contained in the Namespace<br>Identifier field and the length of that type as defined in the following table.|Namespace Identifier Type (NIDT): This field indicates the data type contained in the Namespace<br>Identifier field and the length of that type as defined in the following table.|Namespace Identifier Type (NIDT): This field indicates the data type contained in the Namespace<br>Identifier field and the length of that type as defined in the following table.|\n|00|Value|Length<br>(NIDL)|Definition|\n|00|0h||Reserved|\n|00|1h|8h|IEEE Extended Unique Identifier: The NID field contains a copy of<br>the EUI64 field in the Identify Namespace data structure (refer to the<br>applicable I/O Command Set specification). If the EUI64 field of the<br>Identify Namespace data structure is not supported, (i.e., EUI64 field is<br>cleared to 0h), the controller shall not report a Namespace Identification<br>Descriptor with a value of type 1h.|\n|00|2h|10h|Namespace Globally Unique Identifier: The NID field contains a copy<br>of the NGUID field in the Identify Namespace data structure (refer to<br>the applicable I/O Command Set specification). If the NGUID field of<br>the Identify Namespace data structure is not supported (i.e., the NGUID<br>field is cleared to 0h), the controller shall not report a Namespace<br>Identification Descriptor with a value of type 2h.|\n|00|3h|10h|Namespace UUID: The NID field contains a 128-bit Universally Unique<br>Identifier (UUID) as specified in RFC 4122. Refer to section 4.3.6.<br>If the namespace does not support an IEEE Extended Unique Identifier<br>(i.e., EUI64 field is cleared to 0h) and does not support a Namespace<br>Globally Unique Identifier (i.e., the NGUID field is cleared to 0h), then<br>the namespace shall report a Namespace Identification Descriptor with<br>a value of type 3h.|\n|00|4h|1h|Command Set Identifier (CSI): The NID field contains the I/O<br>Command Set that operates on this namespace. Refer to Figure 274.|\n|00|5h to FFh||Reserved|\n|01|Namespace Identifier Length (NIDL): This field contains the length in bytes of the Namespace<br>Identifier (NID) field. The total length of the Namespace Identification Descriptor in bytes is the<br>value in this field plus four. If this field is cleared to 0h it indicates the end of the Namespace<br>Identifier Descriptor list.|Namespace Identifier Length (NIDL): This field contains the length in bytes of the Namespace<br>Identifier (NID) field. The total length of the Namespace Identification Descriptor in bytes is the<br>value in this field plus four. If this field is cleared to 0h it indicates the end of the Namespace<br>Identifier Descriptor list.|Namespace Identifier Length (NIDL): This field contains the length in bytes of the Namespace<br>Identifier (NID) field. The total length of the Namespace Identification Descriptor in bytes is the<br>value in this field plus four. If this field is cleared to 0h it indicates the end of the Namespace<br>Identifier Descriptor list.|\n|02:03|Reserved|Reserved|Reserved|\n|(NIDL + 3):04|Namespace Identifier (NID): For an NIDT field value of 1h, 2h, and 3h, this field contains a value<br>that is globally unique. The type of the value is specified by the Namespace Identifier Type (NIDT)<br>field, and the size is specified by the Namespace Identifier Length (NIDL) field.|Namespace Identifier (NID): For an NIDT field value of 1h, 2h, and 3h, this field contains a value<br>that is globally unique. The type of the value is specified by the Namespace Identifier Type (NIDT)<br>field, and the size is specified by the Namespace Identifier Length (NIDL) field.|Namespace Identifier (NID): For an NIDT field value of 1h, 2h, and 3h, this field contains a value<br>that is globally unique. The type of the value is specified by the Namespace Identifier Type (NIDT)<br>field, and the size is specified by the Namespace Identifier Length (NIDL) field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 4031,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2695",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19455334544181824
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2696",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5225934386253357
  },
  {
    "content": "**5.17.2.4 NVM Set List (CNS 04h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2697",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5880728363990784
  },
  {
    "content": "Figure 278 defines an NVM Set List. The data structure is an ordered list of NVM Set Attribute Entry data\nstructures, sorted by NVM Set Identifier, starting with the first NVM Set Identifier supported by the NVM\nsubsystem that is equal to or greater than the NVM Set Identifier indicated in CDW11.NVMSETID and are\naccessible by the controller processing the command. The NVM Set List describes the attributes for each\nNVM Set in the list based on the NVM Set Attributes Entry in Figure 278.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 490,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2698",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6097851991653442
  },
  {
    "content": "The NVM Set List shall not contain an entry cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2699",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5293419361114502
  },
  {
    "content": "**Figure 278: NVM Set List**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2700",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5356372594833374
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Number of Identifiers: This field indicates the number of NVM Set Attributes Entries in<br>the list. There are up to 31 entries in the list. A value of 0h indicates that there are no entries<br>in the list.|\n|127:01|Reserved|\n|255:128|Entry 0: This field contains the first NVM Set Attributes Entry in the list, if present.|\n|383:256|Entry 1: This field contains the second NVM Set Attributes Entry in the list, if present.|\n|…|…|\n|(N*128+255):<br>(N*128+128)|Entry N: This field contains the N+1 NVM Set Attributes Entry in the list, if present.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 581,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2701",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5876668691635132
  },
  {
    "content": "**Figure 279: NVM Set Attributes Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2702",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33363500237464905
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|NVM Set Identifier: This field indicates the identifier of the NVM Set in the NVM subsystem<br>that is described by this entry.|\n|03:02|Endurance Group Identifier: This field indicates the Endurance Group for this NVM Set.<br>Refer to section 3.2.3.|\n|07:04|Reserved|\n|11:08|Random 4 KiB Read Typical: This field indicates the typical time to complete a 4 KiB<br>random read in 100 nanosecond units when the NVM Set is in a Predictable Latency Mode<br>Deterministic Window and there is 1 outstanding command per NVM Set.|\n|15:12|Optimal Write Size: This field indicates the size in bytes for optimal write performance. A<br>value of 0h indicates that no Optimal Write Size is specified. This field should be cleared<br>to 0h when namespaces within an NVM Set have different User Data Formats that do not<br>allow an Optimal Write Size to be specified.|\n|31:16|Total NVM Set Capacity: This field indicates the total NVM capacity in this NVM Set. The<br>value is in bytes.|\n|47:32|Unallocated NVM Set Capacity: This field indicates the unallocated NVM capacity in this<br>NVM Set. The value is in bytes.|\n|127:48|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1157,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2703",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18399132788181305
  },
  {
    "content": "**5.17.2.5 I/O Command Set specific Identify Namespace data structure (CNS 05h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 81,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2704",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6153990626335144
  },
  {
    "content": "An I/O Command Set specific Identify Namespace data structure (refer to the applicable I/O Command Set\nspecification) is returned to the host for the namespace specified in the Namespace Identifier (NSID) field\nif the NSID is active. If the specified namespace is an inactive NSID, then the controller returns a zero filled\ndata structure.\n\nThe specific Identify Namespace data structure that is returned by this command is specified by the\nCommand Set Identifier (CSI) field (refer to Figure 274). If the I/O Command Set associated with the\nnamespace identified by the NSID field does not support the Identify Namespace data structure specified\nby the CSI field, the controller shall abort the command with a status code of Invalid Field in Command.\n\nIf the controller supports the Namespace Management capability (refer to section 8.11), the I/O Command\nSet requested in the CSI field is enabled (refer to CC.CSS in Figure 46), and the NSID field is set to\nFFFFFFFFh, then the controller returns an I/O Command Set specific Identify Namespaces data structure",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1060,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2705",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22334438562393188
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2706",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2969552278518677
  },
  {
    "content": "that specifies capabilities that are common across namespaces for the I/O Command Set specified in the\nCSI field (refer to Figure 274).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 135,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2707",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2559618055820465
  },
  {
    "content": "If the controller does not support the Namespace Management capability and the NSID field is set to\nFFFFFFFFh, then the controller shall abort the command with a status code of Invalid Namespace or\nFormat.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2708",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4111661911010742
  },
  {
    "content": "**5.17.2.6 I/O Command Set specific Identify Controller data structure (CNS 06h)**\n\nAn I/O Command Set specific Identify Controller data structure is returned to the host for the controller\nprocessing the command. The specific Identify Controller data structure that is returned by this command\nis specified by the Command Set Identifier (CSI) field (refer to Figure 274). Data structures for specific I/O\nCommand Sets are optionally defined by the I/O Command Set specifications. If the I/O Command Set\nspecified by the CSI field does not have an Identify Controller data structure, then the controller shall return\na zero filled data structure. If the host requests a data structure for an I/O Command Set that the controller\ndoes not support, the controller shall abort the command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 832,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2709",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.580573320388794
  },
  {
    "content": "**5.17.2.7 I/O Command Set specific Active Namespace ID list (CNS 07h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2710",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6673381924629211
  },
  {
    "content": "A list of 1,024 namespace IDs is returned to the host containing active NSIDs in increasing order that are\ngreater than the value specified in the Namespace Identifier (NSID) field of the command as specified by\nthe Command Set Identifier (CSI) field of the command. Only namespaces associated with the I/O\nCommand Set specified by the CSI value are returned. For CSI values that are not supported or not enabled\nthe command is aborted with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 483,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2711",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6934155821800232
  },
  {
    "content": "The controller should abort the command with a status code of Invalid Namespace or Format if the NSID\nfield is set to FFFFFFFEh or FFFFFFFFh. The NSID field may be cleared to 0h to retrieve a Namespace\nList including the namespace starting with NSID of 1h. The data structure returned is a Namespace List\n(refer to section 4.4.2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 330,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2712",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5018917918205261
  },
  {
    "content": "**5.17.2.8 I/O Command Set Independent Identify Namespace data structure (CNS 08h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2713",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6181029081344604
  },
  {
    "content": "If the Namespace Identifier (NSID) field specifies an active NSID, then the I/O Command Set Independent\nIdentify Namespace data structure (refer to Figure 280) is returned to the host for that specified namespace.\nIf that specified namespace is an inactive NSID, then the controller returns a zero filled data structure.\n\nIf the controller supports the Namespace Management capability (refer to section 8.11) and the NSID field\nis set to FFFFFFFFh, then the controller returns an I/O Command Set Independent Identify Namespace\ndata structure that specifies capabilities that are common for the controller. If the controller does not support\nthe Namespace Management capability and the NSID field is set to FFFFFFFFh, then the controller shall\nabort the command with a status code of Invalid Namespace or Format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 811,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2714",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20930175483226776
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2715",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20702877640724182
  },
  {
    "content": "**Figure 280: Identify – I/O Command Set Independent Identify Namespace Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2716",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43554291129112244
  },
  {
    "content": "|Bytes|1<br>O/M|Description|\n|---|---|---|\n|00|M|Common Namespace Features (NSFEAT): This field defines features of the<br>namespace.<br>Bits 7:5 are reserved.<br>Bit 4 Rotational Media (RMEDIA) if set to ‘1’ indicates that the namespace stores<br>data on rotational media (refer to section 8.20). If cleared to ‘0’, indicates that the<br>namespace does not store data on rotational media.<br>Bit 3 (UIDREUSE) if set to ‘1’ indicates that the value in the NGUID field for this<br>namespace, if non-zero, is never reused by the controller and that the value in the<br>EUI64 field for this namespace, if non-zero, is never reused by the controller. If<br>cleared to ‘0’, then the NGUID value may be reused and the EUI64 value may be<br>reused by the controller for a new namespace created after this namespace is<br>deleted. This bit shall be cleared to ‘0’ if both NGUID and EUI64 fields are cleared<br>to 0h. Refer to section 4.5.1.<br>Bit 2:0 are reserved.|\n|01|O|Namespace Multi-path I/O and Namespace Sharing Capabilities (NMIC): This<br>field specifies multi-path I/O and namespace sharing capabilities of the<br>namespace.<br>Bits 7:1 are reserved.<br>Bit 0: If set to ‘1’, then the namespace may be attached to two or more controllers<br>in the NVM subsystem concurrently (i.e., may be a shared namespace). If cleared<br>to ‘0’, then the namespace is a private namespace and is able to be attached to<br>only one controller at a time.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1441,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2717",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22851642966270447
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2718",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20702877640724182
  },
  {
    "content": "**Figure 280: Identify – I/O Command Set Independent Identify Namespace Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2719",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36884912848472595
  },
  {
    "content": "|Bytes|1<br>O/M|Description|\n|---|---|---|\n|02|O|Reservation Capabilities (RESCAP): This field indicates the reservation<br>capabilities of the namespace. A value of 0h in this field indicates that reservations<br>are not supported by this namespace. Refer to section 8.19 for more details.<br>Bit 7 if set to ‘1’ indicates that Ignore Existing Key is used as defined in NVM<br>Express Base Specification revision 1.3 or later. Bit 7 if cleared to ‘0’ indicates that<br>Ignore Existing Key is used as defined in NVM Express Base Specification revision<br>1.2.1 or earlier. This bit shall be set to ‘1’ if the controller supports revision 1.3 or<br>later as indicated in the Version register.<br>Bit 6 if set to ‘1’ indicates that the namespace supports the Exclusive Access – All<br>Registrants reservation type. If this bit is cleared to ‘0’, then the namespace does<br>not support the Exclusive Access – All Registrants reservation type.<br>Bit 5 if set to ‘1’ indicates that the namespace supports the Write Exclusive – All<br>Registrants reservation type. If this bit is cleared to ‘0’, then the namespace does<br>not support the Write Exclusive – All Registrants reservation type.<br>Bit 4 if set to ‘1’ indicates that the namespace supports the Exclusive Access –<br>Registrants Only reservation type. If this bit is cleared to ‘0’, then the namespace<br>does not support the Exclusive Access – Registrants Only reservation type.<br>Bit 3 if set to ‘1’ indicates that the namespace supports the Write Exclusive –<br>Registrants Only reservation type. If this bit is cleared to ‘0’, then the namespace<br>does not support the Write Exclusive – Registrants Only reservation type.<br>Bit 2 if set to ‘1’ indicates that the namespace supports the Exclusive Access<br>reservation type. If this bit is cleared to ‘0’, then the namespace does not support<br>the Exclusive Access reservation type.<br>Bit 1 if set to ‘1’ indicates that the namespace supports the Write Exclusive<br>reservation type. If this bit is cleared to ‘0’, then the namespace does not support<br>the Write Exclusive reservation type.<br>Bit 0 if set to ‘1’ indicates that the namespace supports the Persist Through Power<br>Loss capability. If this bit is cleared to ‘0’, then the namespace does not support<br>the Persist Through Power Loss Capability.|\n|03|O|Format Progress Indicator (FPI): If a format operation is in progress, this field<br>indicates the percentage of the namespace that remains to be formatted.<br>Bit 7 if set to ‘1’ indicates that the namespace supports the Format Progress<br>Indicator defined by bits 6:0 in this field. If this bit is cleared to ‘0’, then the<br>namespace does not support the Format Progress Indicator and bits 6:0 in this field<br>shall be cleared to 0h.<br>Bits 6:0 indicate the percentage of the Format NVM command that remains to be<br>completed (e.g., a value of 25 indicates that 75% of the Format NVM command<br>has been completed and 25% remains to be completed). If bit 7 is set to ‘1’, then a<br>value of 0h indicates that the namespace is formatted with the format specified by<br>Identify Namespace data structures (refer to section 1.5.29) and there is no Format<br>NVM command in progress.|\n|07:04|O|ANA Group Identifier (ANAGRPID): For NSID other than FFFFFFFFh, this field<br>indicates the ANA Group Identifier of the ANA group (refer to section 8.1.2) of which<br>the namespace is a member. Each namespace that is attached to a controller that<br>supports Asymmetric Namespace Access Reporting (refer to the CMIC field) shall<br>report a valid ANAGRPID. If the controller does not support Asymmetric<br>Namespace Access Reporting, then this field shall be cleared to 0h.<br>If the value in this field changes and Asymmetric Namespace Access Change<br>Notices are supported and enabled, then the controller shall issue an Asymmetric<br>Namespace Access Change Notice.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3901,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2720",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5676461458206177
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2721",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20702877640724182
  },
  {
    "content": "**Figure 280: Identify – I/O Command Set Independent Identify Namespace Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2722",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4674120247364044
  },
  {
    "content": "|Bytes|1<br>O/M|Description|\n|---|---|---|\n|08|O|Namespace Attributes (NSATTR): This field specifies attributes of the<br>namespace.<br>Bits 7:1 are reserved.<br>Bit 0: If set to ‘1’, then the namespace is currently write protected due to any<br>condition (e.g., namespace write protection set for the namespace, media errors)<br>and all write access to the namespace shall fail. If cleared to ‘0’, then the<br>namespace is not currently write protected.|\n|09||Reserved|\n|11:10|O|NVM Set Identifier (NVMSETID): For NSID other than FFFFFFFFh, this field<br>indicates the NVM Set with which this namespace is associated. If NVM Sets are<br>not supported by the controller, then this field shall be cleared to 0h.|\n|13:12|O|Endurance Group Identifier (ENDGID): For NSID other than FFFFFFFFh, this<br>field indicates the Endurance Group with which this namespace is associated. If<br>Endurance Groups are not supported by the controller, then this field shall be<br>cleared to 0h.|\n|14|M|Namespace Status (NSTAT): This field indicates the status of the namespace with<br>the specified NSID.<br>Bits Description<br>7:1 Reserved<br>Namespace Ready (NRDY): A value of ‘1’ indicates that the<br>0 namespace is ready (refer to section 3.5.3). A value of ‘0’ indicates that<br>the namespace is not ready.|\n|4095:15||Reserved|\n|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1491,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2723",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.582033634185791
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|7:1|Reserved|\n|0|Namespace Ready (NRDY): A value of ‘1’ indicates that the<br>namespace is ready (refer to section 3.5.3). A value of ‘0’ indicates that<br>the namespace is not ready.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 214,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2724",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44462570548057556
  },
  {
    "content": "**5.17.2.9 Allocated Namespace ID list (CNS 10h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2725",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6672117710113525
  },
  {
    "content": "A list of up to 1,024 namespace IDs is returned to the host containing allocated NSIDs in increasing order\nthat are greater than the value specified in the Namespace Identifier (NSID) field of the Identify command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 214,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2726",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6187756657600403
  },
  {
    "content": "The controller should abort the command with a status code of Invalid Namespace or Format if the NSID\nfield is set to FFFFFFFEh or FFFFFFFFh. The NSID field may be cleared to 0h to retrieve a Namespace\nList including the namespace starting with NSID of 1h. The data structure returned is a Namespace List\n(refer to section 4.4.2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 330,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2727",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.520050585269928
  },
  {
    "content": "**5.17.2.10 Identify Namespace data structure for an Allocated Namespace ID (CNS 11h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2728",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5489495396614075
  },
  {
    "content": "The Identify Namespace data structure (refer to the NVM Command Set Specification) is returned to the\nhost for the namespace specified in the Namespace Identifier (NSID) field if it is an allocated NSID. If the\nspecified namespace is an unallocated NSID, then the controller returns a zero filled data structure. If the\nspecified namespace is not associated with an I/O Command Set that specifies logical blocks (e.g., the\nNVM Command Set), then the controller shall abort the command with a status code of Invalid I/O\nCommand Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 531,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2729",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6756204962730408
  },
  {
    "content": "If the specified namespace is an invalid NSID, then the controller shall abort the command with a status\ncode of Invalid Namespace or Format. If the NSID field is set to FFFFFFFFh, then the controller should\nabort the command with a status code of Invalid Namespace or Format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 276,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2730",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35469624400138855
  },
  {
    "content": "**5.17.2.11 Namespace Attached Controller list (CNS 12h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2731",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5853657126426697
  },
  {
    "content": "A Controller List (refer to section 4.4.1) of up to 2,047 controller identifiers is returned containing a controller\nidentifier greater than or equal to the value specified in the Controller Identifier (CDW10.CNTID) field. The\nlist contains controller identifiers of controllers that are attached to the namespace specified in the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 330,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2732",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26236364245414734
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2733",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09425067156553268
  },
  {
    "content": "Namespace Identifier (NSID) field. If the NSID field is set to FFFFFFFFh, then the controller should abort\nthe command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 166,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2734",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27348169684410095
  },
  {
    "content": "**5.17.2.12 Controller list (CNS 13h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2735",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5390401482582092
  },
  {
    "content": "A Controller List (refer to section 4.4.1) of up to 2,047 controller identifiers is returned containing a controller\nidentifier greater than or equal to the value specified in the Controller Identifier (CDW10.CNTID) field. The\nlist contains controller identifiers of controllers in the NVM subsystem that are capable of being attached to\nnamespace(s).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 351,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2736",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5372301340103149
  },
  {
    "content": "**5.17.2.13 Primary Controller Capabilities data structure (CNS 14h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2737",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6503095030784607
  },
  {
    "content": "The Primary Controller Capabilities Structure (refer to Figure 281) is returned to the host for the primary\ncontroller specified.\n\n**Figure 281: Identify – Primary Controller Capabilities Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 199,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2738",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4284982979297638
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Controller Identifier (CNTLID): This field indicates the Controller Identifier of the primary<br>controller.|\n|03:02|Port Identifier (PORTID): This field indicates the Port Identifier of the NVM subsystem port<br>associated with the primary controller. The Port Identifier for a PCI Express Port shall be unique<br>within the NVM subsystem.<br>If the NVM subsystem supports an NVMe-MI Management Endpoint on this PCIe port, then this<br>field shall contain the same value as the Port Identifier field in the Controller Information Data<br>Structure (refer to the NVM Express Management Interface Specification) for this primary<br>controller.|\n|04|Controller Resource Types (CRT): This field indicates the controller resources types<br>supported. If a primary controller supports a controller resource type, then all associated<br>secondary controllers shall support that controller resource type.<br>Bits 7:2 are reserved.<br>Bit 1 if set to ‘1’, then VI Resources are supported. Bit 1 if cleared to ‘0’, then VI Resources are<br>not supported. Refer to section 8.26.2.<br>Bit 0 if set to ‘1’, then VQ Resources are supported. Bit 0 if cleared to ‘0’, then VQ Resources<br>are not supported. Refer to section 8.26.1.|\n|31:05|Reserved|\n|35:32|VQ Resources Flexible Total (VQFRT): This field indicates the total number of VQ Flexible<br>Resources for the primary and its secondary controllers.|\n|39:36|VQ Resources Flexible Assigned (VQRFA): This field indicates the total number of VQ<br>Flexible Resources Assigned to the associated secondary controllers.|\n|41:40|VQ Resources Flexible Allocated to Primary (VQRFAP): This field indicates the total number<br>of VQ Flexible Resources currently allocated to the primary controller. This value may change<br>after a Controller Level Reset other than a Controller Reset (i.e., CC.EN transitions from ‘1’ to<br>‘0’) if a new value was set using the Virtualization Management command. The default value of<br>this field is implementation specific.|\n|43:42|VQ Resources Private Total (VQPRT): This field indicates the total number of VQ Private<br>Resources for the primary controller.|\n|45:44|VQ Resources Flexible Secondary Maximum (VQFRSM): This field indicates the maximum<br>number of VQ Flexible Resources that may be assigned to a secondary controller.|\n|47:46|VQ Flexible Resource Preferred Granularity (VQGRAN): This field indicates the preferred<br>granularity of assigning and removing VQ Flexible Resources. Assigning and removing VQ<br>Resources in this granularity minimizes any wasted internal implementation resources.|\n|63:48|Reserved|\n|67:64|VI Resources Flexible Total (VIFRT): This field indicates the total number of VI Flexible<br>Resources for the primary and its secondary controllers.|\n|71:68|VI Resources Flexible Assigned (VIRFA): This field indicates the total number of VI Flexible<br>Resources Assigned to the associated secondary controllers.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2955,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2739",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5120558142662048
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2740",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3180210292339325
  },
  {
    "content": "**Figure 281: Identify – Primary Controller Capabilities Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2741",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4631112515926361
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|73:72|VI Resources Flexible Allocated to Primary (VIRFAP): This field indicates the total number<br>of VI Flexible Resources currently allocated to the primary controller. This value may change<br>after a Controller Level Reset other than a Controller Reset (i.e., CC.EN transitions from ‘1’ to<br>‘0’) if a new value was set using the Virtualization Management command. The default value of<br>this field is implementation specific.|\n|75:74|VI Resources Private Total (VIPRT): This field indicates the total number of VI Private<br>Resources for the primary controller.|\n|77:76|VI Resources Flexible Secondary Maximum (VIFRSM): This field indicates the maximum<br>number of VI Flexible Resources that may be assigned to a secondary controller.|\n|79:78|VI Flexible Resource Preferred Granularity (VIGRAN): This field indicates the preferred<br>granularity of assigning and removing VI Flexible Resources. Assigning and removing VI<br>Resources in this granularity minimizes any wasted internal implementation resources.|\n|4095:80|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1070,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2742",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2814647853374481
  },
  {
    "content": "**5.17.2.14 Secondary Controller list (CNS 15h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2743",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6249566078186035
  },
  {
    "content": "A Secondary Controller List (refer to Figure 282) is returned to the host for up to 127 secondary controllers\nassociated with the primary controller processing this command. The list contains entries for controller\nidentifiers greater than or equal to the value specified in the Controller Identifier (CDW10.CNTID) field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 321,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2744",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5326932072639465
  },
  {
    "content": "All secondary controllers are represented, including those that are in an Offline state due to SR-IOV\nconfiguration settings (e.g., VF Enable is cleared to ‘0’ or NumVFs specifies a value that does not enable\nthe associated secondary controller).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2745",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44074776768684387
  },
  {
    "content": "**Figure 282: Secondary Controller List**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2746",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6173730492591858
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Number of Identifiers: This field indicates the number of Secondary Controller Entries in<br>the list. There are up to 127 entries in the list. A value of 0h indicates there are no entries in<br>the list.|\n|31:01|Reserved|\n|63:32|SC Entry 0: This field contains the first Secondary Controller Entry in the list, if present.|\n|95:64|SC Entry 1: This field contains the second Secondary Controller Entry in the list, if present.|\n|…|…|\n|(N*32+63):<br>(N*32+32)|SC Entry N: This field contains the N+1 Secondary Controller Entry in the list, if present.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 585,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2747",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6241374611854553
  },
  {
    "content": "**Figure 283: Secondary Controller Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2748",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5791663527488708
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Secondary Controller Identifier (SCID): This field indicates the Controller Identifier of the<br>secondary controller described by this entry.|\n|03:02|Primary Controller Identifier (PCID): This field indicates the Controller Identifier of the<br>associated primary controller.|\n|04|Secondary Controller State (SCS): This field indicates the state of the secondary controller.<br>Bits 7:1 are reserved.<br>Bit 0 if set to ‘1’, then the controller is in the Online state. Bit 0 if cleared to ‘0’, then the controller<br>is in the Offline state.|\n|07:05|Reserved|\n|09:08|Virtual Function Number (VFN): If the secondary controller is an SR-IOV VF, this field indicates<br>its VF Number, where VF Number > 0, and VF Number is no larger than the total number of VFs<br>indicated by the TotalVFs register (refer to Single Root I/O Virtualization and Sharing<br>Specification) in the PF’s SR-IOV Extended Capability structure. If the secondary controller is not<br>an SR-IOV VF, then this field is cleared to 0h.|\n|11:10|Number of VQ Flexible Resources Assigned (NVQ): This field indicates the number of VQ<br>Flexible Resources currently assigned to the indicated secondary controller.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1216,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2749",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21922558546066284
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2750",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22786130011081696
  },
  {
    "content": "**Figure 283: Secondary Controller Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2751",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4790796935558319
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|13:12|Number of VI Flexible Resources Assigned (NVI): This field indicates the number of VI Flexible<br>Resources currently assigned to the indicated secondary controller.|\n|31:14|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 220,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2752",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2355434149503708
  },
  {
    "content": "**5.17.2.15 Namespace Granularity List (CNS 16h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2753",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4946995973587036
  },
  {
    "content": "If the controller supports reporting of Namespace Granularity refer to the applicable I/O Command Set\nspecification for details.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2754",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6921367645263672
  },
  {
    "content": "The controller shall abort the command with a status code of Invalid I/O Command Set if the Command Set\nIdentifier is not associated with an I/O Command Set that supports the Namespace Granularity List.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 202,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2755",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21701601147651672
  },
  {
    "content": "**5.17.2.16 UUID List (CNS 17h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2756",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5843695402145386
  },
  {
    "content": "The format of the UUID List is defined in Figure 284. Each UUID List entry is either 0h, the NVMe Invalid\nUUID, or a valid UUID. Valid UUIDs are those which are non-zero and are not the NVMe Invalid UUID (refer\nto section 8.25).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 228,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2757",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5781790018081665
  },
  {
    "content": "If bit 9 (UUID List) is set to ‘1’ in the Controller Attributes (CTRATT) field in the Identify Controller data\nstructure (refer to Figure 275), then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 149,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2758",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6035858988761902
  },
  {
    "content": "- The UUID List shall contain at least one valid UUID (refer to section 8.25);\n\n- The UUID 1 field shall contain a non-zero value; and\n\n- A UUID field cleared to 0h indicates the end of the UUID List.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 200,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2759",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18952609598636627
  },
  {
    "content": "The list may be in any order.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2760",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30697157979011536
  },
  {
    "content": "**Figure 284: UUID List**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2761",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6474560499191284
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|31:00|Reserved|\n|63:32|UUID 1: This field contains the first UUID List Entry in the list.|\n|95:64|UUID 2: This field contains the second UUID List Entry in the list, if present, otherwise cleared<br>to 0h.|\n|…|…|\n|4063:4032|UUID 126: This field contains the last non-zero UUID List Entry in the list, if present, otherwise<br>cleared to 0h.|\n|4095:4064|UUID 127: This field shall be cleared to 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 429,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2762",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6377801895141602
  },
  {
    "content": "The format of a UUID List Entry is defined in Figure 285.\n\n**Figure 285: UUID List Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2763",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5176483988761902
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|UUID Lists Entry Header:<br>Bits Description<br>7:2 Reserved<br>Identifier Association: This field indicates whether the UUID is associated with a vendor.<br>Value Description<br>00b No association reported.<br>1:0 The UUID is associated with the vendor reported in the PCI Vendor ID<br>01b<br>field of the Identify Controller data structure (refer to Figure 275).<br>The UUID is associated with the vendor reported in the PCI Subsystem<br>10b<br>Vendor ID field of the Identify Controller data structure.<br>11b Reserved|\n\n|Bits|Description|\n|---|---|\n|7:2|Reserved|\n|1:0|Identifier Association: This field indicates whether the UUID is associated with a vendor.<br>Value Description<br>00b No association reported.<br>The UUID is associated with the vendor reported in the PCI Vendor ID<br>01b<br>field of the Identify Controller data structure (refer to Figure 275).<br>The UUID is associated with the vendor reported in the PCI Subsystem<br>10b<br>Vendor ID field of the Identify Controller data structure.<br>11b Reserved|\n\n|Value|Description|\n|---|---|\n|00b|No association reported.|\n|01b|The UUID is associated with the vendor reported in the PCI Vendor ID<br>field of the Identify Controller data structure (refer to Figure 275).|\n|10b|The UUID is associated with the vendor reported in the PCI Subsystem<br>Vendor ID field of the Identify Controller data structure.|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1424,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2764",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3181348145008087
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2765",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22250822186470032
  },
  {
    "content": "**Figure 285: UUID List Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2766",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.560670018196106
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|15:01|Reserved|\n|31:16|UUID: This field contains a 128-bit Universally Unique Identifier (UUID) as specified in RFC 4122.<br>Refer to section 4.3.6.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 180,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2767",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2526150941848755
  },
  {
    "content": "**5.17.2.17 Domain List (CNS 18h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2768",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44159749150276184
  },
  {
    "content": "Figure 286 defines a Domain List. The data structure is an ordered list by Domain Identifier, starting with\nthe first Domain Identifier that is equal to or greater than the Domain Identifier specified in CDW11.DOMID\nand is accessible by the controller processing the command. The Domain List describes the attributes for\neach Domain in the list based on the Domain Attributes Entry in Figure 287.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 396,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2769",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6577098965644836
  },
  {
    "content": "**Figure 286: Domain List**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2770",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5650396347045898
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Number of Identifiers: This field indicates the number of Domain Attributes Entries in the<br>list. There are up to 31 entries in the list. A value of 0h indicates that there are no entries<br>in the list.|\n|127:01|Reserved|\n|255:128|Entry 0: This field contains the first Domain Attributes Entry in the list, if present.|\n|383:256|Entry 1: This field contains the second Domain Attributes Entry in the list, if present.|\n|…|…|\n|(N*128+255):<br>(N*128+128)|Entry N: This field contains the N+1 Domain Attributes Entry in the list, if present.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 577,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2771",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5882606506347656
  },
  {
    "content": "**Figure 287: Domain Attributes Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2772",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38338610529899597
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Domain Identifier: This field indicates the identifier of the Domain accessible by the<br>controller that is described by this entry.|\n|15:02|Reserved|\n|31:16|Total Domain Capacity: This field indicates the total NVM capacity in this Domain. The<br>value is in bytes.|\n|47:32|Unallocated Domain Capacity: This field indicates the unallocated NVM capacity in this<br>Domain. The value is in bytes.|\n|63:48|Max Endurance Group Domain Capacity: This field indicates the maximum capacity of<br>a single Endurance Group in this Domain. If this field is cleared to 0h, the NVM subsystem<br>does not report a maximum Endurance Group Domain Capacity value.|\n|127:64|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 704,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2773",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37315693497657776
  },
  {
    "content": "**5.17.2.18 Endurance Group List (19h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2774",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5777105093002319
  },
  {
    "content": "An Endurance Group List (refer to Figure 288) of up to 2,047 Endurance Group Identifiers in increasing\norder is returned containing an Endurance Group Identifier greater than or equal to the value specified in\nthe Endurance Group Identifier (CDW11.ENDGID) field. The list contains Endurance Group Identifiers of\nEndurance Groups that are accessible by the controller processing the command. If the value specified in\nthe Endurance Group Identifier is greater than ENDGIDMAX, then the controller shall complete the\ncommand with a status code of Successful Completion and return an Endurance Group List containing no\nEndurance Group Identifiers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 643,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2775",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6168026924133301
  },
  {
    "content": "**Figure 288: Endurance Group List**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2776",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6425586342811584
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Number of Identifiers (N): This field contains the number of Endurance Group Identifiers in the list.<br>There may be up to 2,047 identifiers in the list. If this field is cleared to 0h, then no Endurance Group<br>Identifiers are in the list.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 280,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2777",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**4 Data Structures **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18920013308525085
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2778",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17296797037124634
  },
  {
    "content": "**Figure 288: Endurance Group List**\n\n|Bytes|Description|\n|---|---|\n|03:02|Identifier 0: This field contains the first Endurance Group Identifier in the list, if any.|\n|05:04|Identifier 1: This field contains the second Endurance Group Identifier in the list, if any.|\n|…|…|\n|(N*2+1):(N*2)|Identifier N-1: This field contains the last Endurance Group Identifier in the list.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 375,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2779",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18808992207050323
  },
  {
    "content": "**5.17.2.19 I/O Command Set specific Allocated Namespace ID list (CNS 1Ah)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2780",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.67513507604599
  },
  {
    "content": "A list of up to 1,024 namespace IDs is returned to the host containing allocated NSIDs in increasing order\nthat are greater than the value specified in the Namespace Identifier (NSID) field of the Identify command\nand as specified by the Command Set Identifier (CSI) field of the command. Only NSIDs for namespaces\nassociated with the I/O Command Set specified in CSI are returned. For CSI values not supported by the\ncontroller the command is aborted with a status code of Invalid Field in Command.\n\nThe controller should abort the command with a status code of Invalid Namespace or Format if the NSID\nfield is set to FFFFFFFEh or FFFFFFFFh. The NSID field may be cleared to 0h to retrieve a Namespace\nList including the namespace starting with NSID of 1h. The data structure returned is a Namespace List\n(refer to section 4.4.2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 831,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2781",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5842005610466003
  },
  {
    "content": "**5.17.2.20 I/O Command Set specific Identify Namespace data structure for an Allocated Namespace**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2782",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6361985206604004
  },
  {
    "content": "An I/O Command Set specific Identify Namespace data structure (refer to section 5.17.2.5) is returned to\nthe host for the namespace specified in the Namespace Identifier (NSID) field if it is an allocated NSID. If\nthe specified namespace is an unallocated NSID, then the controller returns a zero filled data structure.\n\nThe specific Identify Namespace data structure that is returned by this command is specified by the\nCommand Set Identifier (CSI) field in the command (refer to Figure 274). If the I/O Command Set associated\nwith the namespace specified by the NSID field does not support the specific Identify Namespace data\nstructure specified by the CSI field, the controller shall abort the command with a status code of Invalid\nField in Command.\n\nIf the specified namespace is an invalid NSID, then the controller shall abort the command with a status\ncode of Invalid Namespace or Format. If the NSID field is set to FFFFFFFFh, then the controller should\nabort the command with a status code of Invalid Namespace or Format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1031,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2783",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4222829043865204
  },
  {
    "content": "**5.17.2.21 Identify I/O Command Set data structure (CNS 1Ch)**\n\nThe Identify I/O Command Set data structure (refer to Figure 289) is returned to the host for the controller\nspecified in the Controller ID (CNTID) field of the command if the CNTID field does not have a value of\nFFFFh. If the CNTID field has a value of FFFFh, then the Identify I/O Command Set data structure is\nreturned to the host for the controller processing the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 441,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2784",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28790155053138733
  },
  {
    "content": "This CNS value shall be implemented if CAP.CSS bit 6 is set to ‘1’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2785",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19479556381702423
  },
  {
    "content": "The Identify I/O Command Set data structure consists of an array of I/O Command Set Vectors (refer to\nFigure 290) that describe the I/O Command Sets that the controller supports and the combination of\nsupported I/O Command Sets that may be simultaneously used. The I/O Command Set Profile Feature\nvalue indicates the index of the I/O Command Set Combination that is currently selected (refer to section\n5.27.1.21). I/O Command Set Combination 0 has an index value of 0h, I/O Command Set Combination 1\nhas an index value of 1h, and so on. Only I/O Command Sets that have a bit set to ‘1’ in the I/O Command\nSet Vector of the I/O Command Set Combination selected by the I/O Command Set Profile Feature value\nmay be used. All other I/O Command Sets are treated as unsupported I/O Command Sets.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 790,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2786",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1857677549123764
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2787",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15749011933803558
  },
  {
    "content": "**Figure 289: Identify I/O Command Set Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2788",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6286067366600037
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|7:0|I/O Command Set Combination 0: This field contains an I/O Command Set Vector indicating<br>the first I/O Command Set or combination of I/O Command Sets that are simultaneously<br>supported. If only one I/O Command Set is supported, then this field has only one bit set.|\n|15:8|I/O Command Set Combination 1: This field contains an I/O Command Set Vector indicating<br>the second I/O Command Set or combination of I/O Command Sets that are simultaneously<br>supported if a second I/O Command Set combination is supported; otherwise, this field is<br>cleared to 0h.<br>If this field is cleared to 0h, then no further I/O Command Set combinations are supported<br>and subsequent I/O Command Set Combinations shall have a value of 0h.|\n|23:16|I/O Command Set Combination 2: This field contains an I/O Command Set Vector indicating<br>the third I/O Command Set or combination of I/O Command Sets that are simultaneously<br>supported if a third I/O Command Set combination is supported; otherwise, this field is cleared<br>to 0h.<br>If this field is cleared to 0h, then no further I/O Command Set combinations are supported<br>and subsequent I/O Command Set Combinations shall have a value of 0h.|\n|…|…|\n|4095:4088|I/O Command Set Combination 511: This field contains an I/O Command Set Vector<br>indicating the 511th I/O Command Set or combination of I/O Command Sets that are<br>simultaneously supported if a 511th I/O Command Set combination is supported; otherwise,<br>this field is cleared to 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1531,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2789",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.432272344827652
  },
  {
    "content": "**Figure 290: I/O Command Set Vector**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2790",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35038068890571594
  },
  {
    "content": "|Bit|Description|\n|---|---|\n|63:3|Reserved|\n|2|Zoned Namespace Command Set: This bit is set to ‘1’ if the Zoned Namespace Command Set is<br>selected. This bit is cleared to ‘0’ if the Zoned Namespace Command Set is not selected.|\n|1|Key Value Command Set: This bit is set to ‘1’ if the Key Value Command Set is selected. This bit<br>is cleared to ‘0’ if the Key Value Command Set is not selected.|\n|0|NVM Command Set: This bit is set to ‘1’ if the NVM Command Set is selected. This bit is cleared<br>to ‘0’ if the NVM Command Set is not selected.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 547,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2791",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34579890966415405
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2792",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.019438503310084343
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2793",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3947034180164337
  },
  {
    "content": "Upon completion of the Identify command, the controller posts a completion queue entry to the Admin\nCompletion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 117,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2794",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21735988557338715
  },
  {
    "content": "**5.18 Keep Alive command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2795",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5905289053916931
  },
  {
    "content": "The Keep Alive command (refer to section 5.27.1.12) and associated functionality is used by the host to\ndetermine that the controller is operational and used by the controller to determine that the host is\noperational. The host and controller are operational when each is accessible and able to issue or process\ncommands. The controller indicates the granularity of the Keep Alive Timer in the KAS field in the Identify\nController data structure (refer to Figure 275).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 468,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2796",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6173484921455383
  },
  {
    "content": "If a Keep Alive Timeout has been enabled on the Admin Queue, the Keep Alive Timer is restarted when:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2797",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5952168703079224
  },
  {
    "content": "- a Keep Alive command (refer to section 3.9.1) is processed; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2798",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6242005825042725
  },
  {
    "content": "- at the end of the Keep Alive Timeout (refer to section 3.9.2) when TBKAS is set to ‘1’ and an Admin\ncommand or an I/O command is processed during the Keep Alive Timeout Interval.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 180,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2799",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16126014292240143
  },
  {
    "content": "All command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2800",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4257424473762512
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2801",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3582145571708679
  },
  {
    "content": "Upon completion of the Keep Alive command, the controller shall post a completion queue entry to the\nAdmin Completion Queue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2802",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34690427780151367
  },
  {
    "content": "**5.19 Lockdown command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2803",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6395887732505798
  },
  {
    "content": "The Lockdown command is used to control the Command and Feature Lockdown capability (refer to section\n8.4) which configures the prohibition or allowance of execution of the specified command or Set Features\ncommand targeting a specific Feature Identifier.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 255,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2804",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.586796760559082
  },
  {
    "content": "After a successful completion of a Lockdown command prohibiting a command or Feature Identifier, all\ncontrollers, if applicable, and all management endpoints, if applicable, in the NVM subsystem behave as\ndescribed in 8.4.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 222,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2805",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6013544201850891
  },
  {
    "content": "The Lockdown command uses Command Dword 10 (refer to Figure 291) and Command Dword 14 (refer\nto Figure 292). All other command specific fields are reserved.\n\n**Figure 291: Lockdown – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 201,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2806",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2953719198703766
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:8|Opcode or Feature Identifier (OFI): This field specifies the command opcode or Set Features<br>Feature Identifier identified by the Scope field.|\n|07:06|Reserved|\n|06:05|Interface (IFC): This field identifies the interfaces affected by this command. The actions of this<br>command apply if a command is received on the specified interfaces.<br>Value Affected Interfaces<br>00b Admin Submission Queue<br>Admin Submission Queue and out-of-band on a<br>01b<br>Management Endpoint<br>10b Out-of-band on a Management Endpoint<br>11b Reserved|\n|04|Prohibit (PRHBT): This bit specifies whether to prohibit or allow the command opcode or Set<br>Features Feature Identifier specified by this command. If set to ‘1’, then this command prohibits<br>the execution of the command based on other fields specified in Dword 10. If cleared to ‘0’, then<br>this command allows the execution of the command based on other fields specified in Dword 10.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 985,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2807",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.659294843673706
  },
  {
    "content": "|Value|Affected Interfaces|\n|---|---|\n|00b|Admin Submission Queue|\n|01b|Admin Submission Queue and out-of-band on a<br>Management Endpoint|\n|10b|Out-of-band on a Management Endpoint|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 197,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2808",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23658207058906555
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2809",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.371353417634964
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|03:00|Scope (SCP): This field specifies the contents of the Opcode or Feature Identifier field.<br>Value Opcode or Feature Identifier Definition<br>0h Admin command opcode<br>1h Reserved<br>2h A Set Features Feature Identifier<br>Management Interface Command Set opcode (refer to the<br>3h<br>NVM Express Management Interface Specification)<br>PCIe Command Set opcode (refer to the NVM Express<br>4h<br>Management Interface Specification)<br>5h-Fh Reserved|\n\n|Value|Opcode or Feature Identifier Definition|\n|---|---|\n|0h|Admin command opcode|\n|1h|Reserved|\n|2h|A Set Features Feature Identifier|\n|3h|Management Interface Command Set opcode (refer to the<br>NVM Express Management Interface Specification)|\n|4h|PCIe Command Set opcode (refer to the NVM Express<br>Management Interface Specification)|\n|5h-Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 846,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2810",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23008230328559875
  },
  {
    "content": "If the controller supports selection of a UUID:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2811",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21565333008766174
  },
  {
    "content": "a) by the Lockdown command; and\nb) by the Set Features command (refer to Figure 316 and section 8.24) and for the vendor specific",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 129,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2812",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2766154110431671
  },
  {
    "content": "Feature Identifier specified by the Opcode or Feature Identifier field, if the Scope field is set to 2h,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 104,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2813",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2298341542482376
  },
  {
    "content": "then Command Dword 14 (refer to Figure 292) is used to specify a UUID Index value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2814",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6014147400856018
  },
  {
    "content": "If the controller does not support selection of a UUID:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2815",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22982488572597504
  },
  {
    "content": "a) by the Lockdown command;\nb) by the Set Features command; or\nc) for the vendor specific feature identifier specified by the Opcode or Feature Identifier field, if the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2816",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09414824843406677
  },
  {
    "content": "Scope field is set to 2h,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2817",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40628889203071594
  },
  {
    "content": "then Command Dword 14 does not specify a UUID Index value. If the Scope field is not set to 2h, then\nUUID Index field is ignored.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 129,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2818",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17379982769489288
  },
  {
    "content": "**Figure 292: Lockdown – Command Dword 14**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2819",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21740131080150604
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:07|Reserved|\n|06:00|UUID Index: Refer to Figure 477.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2820",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12039341032505035
  },
  {
    "content": "If a controller processes this command specifying a command opcode or Feature Identifier that is not\nsupported as being prohibitable, then the command shall be aborted with a status code of Prohibition of\nCommand Execution Not Supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 237,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2821",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5224241614341736
  },
  {
    "content": "If a controller processes this command with the Interface field set to 01b or 10b and the NVM subsystem\ndoes not contain a Management Endpoint, then the command shall be aborted with a status code of Invalid\nField in Command.\n\nIf a controller processes this command with the Interface field set to 00b or 01b and the Scope field is set\nto 4h, then the command shall be aborted with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 424,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2822",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4332396686077118
  },
  {
    "content": "It is not an error to attempt to prohibit a command or Feature Identifier that is already prohibited from\nexecution or allow a command or Feature Identifier that is already allowed to be executed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 196,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2823",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2532789707183838
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2824",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31167319416999817
  },
  {
    "content": "Upon completion of the Lockdown command, the controller posts a completion queue entry to the Admin\nCompletion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 117,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2825",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4821450412273407
  },
  {
    "content": "Lockdown command specific status values are defined in Figure 293.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2826",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18178482353687286
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2827",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13130244612693787
  },
  {
    "content": "**Figure 293: Lockdown – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2828",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5504094362258911
  },
  {
    "content": "|Value|Description|\n|---|---|\n|28h|Prohibition of Command Execution Not Supported: The command was aborted due to the<br>specified opcode or Feature Identifier not supporting being prohibited from execution by the<br>command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 226,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2829",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37075912952423096
  },
  {
    "content": "**5.20 NVMe-MI Receive command**\n\nRefer to the NVM Express Management Interface Specification for details on the NVMe-MI Receive\ncommand.\n\n**5.21 NVMe-MI Send command**\n\nRefer to the NVM Express Management Interface Specification for details on the NVMe-MI Send command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 270,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2830",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29559776186943054
  },
  {
    "content": "**5.22 Namespace Attachment command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2831",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5414162874221802
  },
  {
    "content": "The Namespace Attachment command is used to attach and detach controllers from a namespace. The\nattach and detach operations are persistent across all reset events. Namespace attach and detach\noperations are persistent across Virtualization Management commands that set a secondary controller\noffline.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 301,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2832",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5834657549858093
  },
  {
    "content": "If the Namespace Attachment command is supported, then the Namespace Management command (refer\nto section 5.23) shall also be supported.\n\nThe Namespace Attachment command uses the Data Pointer and Command Dword 10 fields. All other\ncommand specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 269,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2833",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30359840393066406
  },
  {
    "content": "The Select field determines the data structure used as part of the command. The data structure is 4,096\nbytes in size. The data structure used for Controller Attach and Controller Detach is a Controller List (refer\nto section 4.4). The controllers that are to be attached or detached, respectively, are described in the data\nstructure.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 335,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2834",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4375959634780884
  },
  {
    "content": "If the SEL field specifies the Controller Attach value, then",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2835",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46341195702552795
  },
  {
    "content": "- If the Maximum Domain Namespace Attachments (MAXDNA) field in the Identify Controller data\nstructure (refer to Figure 275) is non-zero, then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 143,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2836",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.697124719619751
  },
  {
    "content": "`o` For each controller specified in the controller list, if attaching the namespace to that I/O\ncontroller causes the sum of the number of namespaces attached to each I/O controller in\nthe Domain to be greater than the value specified in the MAXDNA field, then the controller\nshall abort the command with a status code of Namespace Attachment Limit Exceeded;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 359,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2837",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6957440376281738
  },
  {
    "content": "- For each I/O controller specified in the controller list, if the Maximum I/O Controller Namespace\nAttachments (MAXCNA) field in the Identify Controller data structure for that controller is non-zero,\nthen:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 207,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2838",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6750295758247375
  },
  {
    "content": "`o` If attaching the namespace to that I/O controller causes that I/O controller to have the\nnumber of attached namespaces to be greater than the value specified in the MAXCNA\nfield, then the controller shall abort the command with a status code of Namespace\nAttachment Limit Exceeded.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 285,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2839",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6901538968086243
  },
  {
    "content": "If an attempt is made to attach a namespace to a controller that does not support the corresponding I/O\nCommand Set, then the command shall be aborted with a status code of I/O Command Set Not Supported.\n\nIf an attempt is made to attach a namespace to a controller that supports the corresponding I/O Command\nSet and the corresponding I/O Command Set is not enabled by the I/O Command Set profile feature, then\nthe command shall be aborted with a status code of I/O Command Set Not Enabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 490,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2840",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20714135468006134
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2841",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14055746793746948
  },
  {
    "content": "**Figure 294: Namespace Attachment – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2842",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2997538149356842
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the start of the data buffer. Refer to Figure 87 for the<br>definition of this field. If using PRPs, this field shall not be a pointer to a PRP List as the data buffer<br>may not cross more than one page boundary.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 293,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2843",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15036985278129578
  },
  {
    "content": "**Figure 295: Namespace Attachment – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2844",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.398937851190567
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:04|Reserved|\n|03:00|Select (SEL): This field selects the type of attachment to perform.<br>Value Description<br>0h Controller Attach<br>1h Controller Detach<br>2h to Fh Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 211,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2845",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6620544195175171
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0h|Controller Attach|\n|1h|Controller Detach|\n|2h to Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2846",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1456133872270584
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2847",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46944066882133484
  },
  {
    "content": "When the command is completed, the controller posts a completion queue entry to the Admin Completion\nQueue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 145,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2848",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4114990830421448
  },
  {
    "content": "Command specific status values associated with the Namespace Attachment command are defined in\nFigure 296. For failures, the byte offset of the first failing entry is reported in the Command Specific\nInformation field of the Error Information Log Entry. The controller does not process further entries in the\nController List after an error is encountered.\n\n**Figure 296: Namespace Attachment – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 426,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2849",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4062435030937195
  },
  {
    "content": "|Value|Description|\n|---|---|\n|18h|Namespace Already Attached: The controller is already attached to the namespace specified.|\n|19h|Namespace Is Private: The controller is not attached to the namespace. The request to attach the controller<br>could not be completed because the namespace is private and is already attached to one controller.|\n|1Ah|Namespace Not Attached: The controller is not attached to the namespace. The request to detach the<br>controller could not be completed.|\n|1Ch|Controller List Invalid: The controller list provided is invalid or the controller list contains an Administrative<br>controller.|\n|25h|ANA Attach Failed: The controller is not attached to the namespace as a result of an ANA condition (e.g.,<br>attaching the controller would result in an ANA Persistent Loss state (refer to section 8.1.3.4)).|\n|27h|Namespace Attachment Limit Exceeded: Attaching the namespace to a controller causes maximum<br>number of namespace attachments allowed to be exceeded.|\n|29h|I/O Command Set Not Supported: The request to attach the controller could not be completed due to the<br>I/O Command Set corresponding to the namespace is not supported by the controller.|\n|2Ah|I/O Command Set Not Enabled: The request to attach the controller could not be completed due to the I/O<br>Command Set corresponding to the namespace is restricted by the I/O Command Set profile feature.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1396,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2850",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38997194170951843
  },
  {
    "content": "**5.23 Namespace Management command**\n\nThe Namespace Management command is used to manage namespaces (refer to section 8.11), including\ncreate and delete operations.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2851",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19712774455547333
  },
  {
    "content": "Note: The controller continues to execute commands submitted to I/O Submission Queues while this\noperation is in progress.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2852",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12194710224866867
  },
  {
    "content": "If the Namespace Management command is supported, then the Namespace Attachment command (refer\nto section 5.22) shall also be supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2853",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.469123899936676
  },
  {
    "content": "Host software uses the Namespace Attachment command to attach or detach a namespace to or from a\ncontroller. The create operation does not attach the namespace to a controller. As a side effect of the delete",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 207,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2854",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13606397807598114
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2855",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14697328209877014
  },
  {
    "content": "operation, the namespace is detached from all controllers as the namespace is no longer present in the\nsystem. It is recommended that host software detach all controllers from a namespace prior to deleting the\nnamespace. If the namespace is attached to another controller (i.e., a controller other than the controller\nprocessing the operation) and that controller has Namespace Attribute Notices enabled (refer to Figure\n326), when a delete operation is requested, then as part of the delete operation a Namespace Attribute\nNotice is issued by that controller to indicate a namespace change.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 591,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2856",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35155341029167175
  },
  {
    "content": "The data structure used for the create operation is defined in Figure 300 and the CSI field specifies the I/O\nCommand Set specification. There is no data structure transferred for the delete operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 201,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2857",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34190768003463745
  },
  {
    "content": "The Namespace Management command uses the Data Pointer, Command Dword 10, and Command\nDword 11 fields. All other command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 150,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2858",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5133886933326721
  },
  {
    "content": "The Namespace Identifier (NSID) field is used as follows for create and delete operations:\n\n- **Create:** The NSID field is reserved for this operation; host software clears this field to a value of\n0h. The controller shall select an available Namespace Identifier to use for the operation; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 293,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2859",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41276872158050537
  },
  {
    "content": "- **Delete:** This field specifies the previously created namespace to delete in this operation.\nSpecifying a value of FFFFFFFFh is used to delete all namespaces in the NVM subsystem. If the\nvalue of FFFFFFFFh is specified and there are zero valid namespaces, the command completes\nsuccessfully.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 295,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2860",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4226927161216736
  },
  {
    "content": "**Figure 297: Namespace Management – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2861",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3741995692253113
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the start of the data buffer. Refer to Figure 87 for the<br>definition of this field. If using PRPs, this field shall not be a pointer to a PRP List as the data buffer<br>may not cross more than one page boundary.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 293,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2862",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20555232465267181
  },
  {
    "content": "**Figure 298: Namespace Management – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2863",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3144358992576599
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:04|Reserved|\n|03:00|Select (SEL): This field selects the type of management operation to perform.<br>Value Description<br>0h Create<br>1h Delete<br>2h to Fh Reserved|\n\n|Value|Description|\n|---|---|\n|0h|Create|\n|1h|Delete|\n|2h to Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 274,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2864",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3101857006549835
  },
  {
    "content": "**Figure 299: Namespace Management – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2865",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.52753746509552
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:24|Command Set Identifier (CSI): For a create operation (i.e., SEL 0h), this field specifies the I/O<br>Command Set for the created namespace. A CSI value of 0h creates a namespace using the NVM<br>Command Set. For all other operations this field is reserved.<br>Values for this field are defined by Figure 274.|\n|23:0|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 361,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2866",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49385711550712585
  },
  {
    "content": "**Figure 300: Namespace Management – Data Structure for Create**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2867",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43343502283096313
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|511:00|Specific to the I/O Command Set (refer to the Namespace Management command section of the<br>applicable I/O Command Set specification)|\n|1023:512|Reserved|\n|4095:1024|Vendor specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 221,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2868",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2492797076702118
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2869",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.019438503310084343
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2870",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46944066882133484
  },
  {
    "content": "When the command is completed, the controller posts a completion queue entry to the Admin Completion\nQueue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 145,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2871",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3722323179244995
  },
  {
    "content": "Namespace Management command specific status values (i.e., SCT field set to 1h) are shown in Figure\n301.\n\n**Figure 301: Namespace Management – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 175,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2872",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3651053011417389
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0Ah|Invalid Format: The User Data Format specified is not supported. This may be due to various<br>conditions, including:<br>1) specifying an invalid User Data Format number;<br>2) enabling protection information when there are not sufficient resources (e.g. metadata per<br>LBA); or<br>3) the specified format is not available in the current configuration.|\n|15h|Namespace Insufficient Capacity: Creating the namespace requires more unallocated capacity<br>than is currently available. The Command Specific Information field of the Error Information log<br>page specifies the total amount of unallocated NVM capacity required to create the namespace in<br>bytes.|\n|16h|Namespace Identifier Unavailable: The number of namespaces supported has been exceeded.|\n|1Bh|Thin Provisioning Not Supported: Thin provisioning is not supported by the controller.|\n|24h|ANA Group Identifier Invalid: The specified ANA Group Identifier (ANAGRPID) is not supported<br>in the submitted command. This may be due to various conditions, including:<br>a) specifying an ANAGRPID that does not exist;<br>b) the controller does not allow an ANAGRPID to be specified (i.e., bit 7 in the ANACAP field<br>is cleared to ‘0’); or<br>c) the specified ANAGRPID is not supported by the controller processing the command (e.g.,<br>the specified value exceeds ANAGRPMAX (refer to Figure 275)).<br>If the host specified a non-zero ANAGRPID, retrying the command with the ANAGRPID field cleared<br>to 0h may succeed.|\n|29h|I/O Command Set Not Supported: The I/O Command Set specified for a create operation is not<br>supported by the controller.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1642,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2873",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2766418755054474
  },
  {
    "content": "Dword 0 of the completion queue entry contains the Namespace Identifier created. The definition of Dword\n0 of the completion queue entry is in Figure 302.\n\n**Figure 302: Namespace Management – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2874",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41545000672340393
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Namespace Identifier (NSID): This field specifies the namespace identifier created in a Create<br>operation. This field is reserved for all other operations.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 194,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2875",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.213674396276474
  },
  {
    "content": "**5.24 Sanitize command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2876",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5333964824676514
  },
  {
    "content": "The Sanitize command is used to start a sanitize operation or to recover from a previously failed sanitize\noperation. The sanitize operation types that may be supported are Block Erase, Crypto Erase, and\nOverwrite. All sanitize operations are processed in the background (i.e., completion of the Sanitize\ncommand does not indicate completion of the sanitize operation). Refer to section 8.21 for details on the\nsanitize operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 430,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2877",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4458218514919281
  },
  {
    "content": "If the NVM subsystem supports multiple domains and the Sanitize command is not able to start a sanitize\noperation as a result of the NVM subsystem being divided (refer to section 3.2.4), then the Sanitize\ncommand shall be aborted with a status code of Asymmetric Access Inaccessible or Asymmetric Access\nPersistent Loss.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 320,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2878",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40826961398124695
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2879",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3452509045600891
  },
  {
    "content": "When a sanitize operation starts on any controller, all controllers in the NVM subsystem:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2880",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5021842122077942
  },
  {
    "content": "- Shall clear any outstanding Sanitize Operation Completed asynchronous event or Sanitize\nOperation Completed With Unexpected Deallocation asynchronous event;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 158,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2881",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5600090026855469
  },
  {
    "content": "- Shall update the Sanitize Status log (refer to section 5.16.1.25);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2882",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6542996764183044
  },
  {
    "content": "- Shall abort any command (submitted or in progress) not allowed during a sanitize operation with a\nstatus code of Sanitize In Progress (refer to section 8.21.1);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2883",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4700746536254883
  },
  {
    "content": "- Shall abort device self-test operations in progress;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2884",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3394819498062134
  },
  {
    "content": "- Suspends autonomous power state management activities as described in section 8.15.2; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 91,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2885",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16255435347557068
  },
  {
    "content": "- Shall release stream identifiers for any open streams.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2886",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15214066207408905
  },
  {
    "content": "If a sanitize operation is not in progress and the most recent sanitize operation did not fail, then a Sanitize\ncommand with a Sanitize Action set to 001b (i.e., Exit Failure Mode) shall complete with a status code of\nSuccessful Completion and perform no other action.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 268,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2887",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6374155879020691
  },
  {
    "content": "While a sanitize operation is in progress, all controllers in the NVM subsystem shall abort any command\nnot allowed during a sanitize operation with a status code of Sanitize In Progress (refer to section 8.21.1)\nand the Persistent Memory Region shall behave as described in section 8.21.1.\n\nAfter a sanitize operation fails, all controllers in the NVM subsystem shall abort any command not allowed\nduring a sanitize operation with a status code of Sanitize Failed (refer to section 8.21.1) and the Persistent\nMemory Region shall behave as described in section 8.21.1 until a subsequent sanitize operation is started\nor successful recovery from the failed sanitize operation occurs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 682,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2888",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.601962149143219
  },
  {
    "content": "If the most recent failed sanitize operation was started in unrestricted completion mode (i.e., the AUSE bit\nwas set to ‘1’ in the Sanitize command), failure recovery requires the host to issue a subsequent Sanitize\ncommand in restricted or unrestricted completion mode or to issue a subsequent Sanitize command with\nthe Exit Failure Mode action.\n\nIf the most recent failed sanitize operation was started in restricted completion mode (i.e., the AUSE bit\nwas cleared to ‘0’ in the Sanitize command), failure recovery requires the host to issue a subsequent\nSanitize command in restricted completion mode. In the case of a sanitize operation failure in restricted\ncompletion mode, before starting another sanitize operation:\n\n- any subsequent Sanitize command issued with the Exit Failure Mode action shall be aborted with\na status code of Sanitize Failed; and\n\n- any Sanitize command issued in unrestricted completion mode shall be aborted with a status code\nof Sanitize Failed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 978,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2889",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3678826093673706
  },
  {
    "content": "The Sanitize Capabilities field in the Identify Controller data structure indicates:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2890",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3290387988090515
  },
  {
    "content": "a) the sanitize operation types supported;\nb) whether setting No-Deallocate After Sanitize bit (i.e., Sanitize command Dword 10 bit 9) causes",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2891",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6658259034156799
  },
  {
    "content": "media to be modified after a successful sanitize operation completes; and\nc) whether the controller inhibits the functionality of the No-Deallocation After Sanitize bit in the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 175,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2892",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6041973233222961
  },
  {
    "content": "If an unsupported sanitize operation type is selected by a Sanitize command, then the controller shall abort\nthe command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2893",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.515669047832489
  },
  {
    "content": "If any Persistent Memory Region is enabled in an NVM subsystem, then the controller shall abort any\nSanitize command with a status code of Sanitize Prohibited While Persistent Memory Region is Enabled.\nA sanitize operation is prohibited while any Persistent Memory Region is enabled.\n\nIf any namespace is write protected in an NVM subsystem (refer to section 8.12), then the controller aborts\nany Sanitize command with a status code of Namespace is Write Protected. A sanitize operation is\nprohibited while any namespace is write protected.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 540,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2894",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4402965009212494
  },
  {
    "content": "If a firmware activation with reset is pending, then the controller shall abort any Sanitize command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2895",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6457881331443787
  },
  {
    "content": "If the Firmware Commit command that established the pending firmware activation with reset condition\nreturned a status code of:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2896",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17899180948734283
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2897",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3878213167190552
  },
  {
    "content": "a) Firmware Activation Requires Controller Level Reset;\nb) Firmware Activation Requires Conventional Reset; or\nc) Firmware Activation Requires NVM Subsystem Reset,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2898",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19637352228164673
  },
  {
    "content": "then the controller should abort the Sanitize command with that same status code.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 81,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2899",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2679747939109802
  },
  {
    "content": "If the Firmware Commit command that established the pending firmware activation with reset condition\ncompleted successfully or returned a status code other than:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 161,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2900",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5736978054046631
  },
  {
    "content": "a) Firmware Activation Requires Controller Level Reset;\nb) Firmware Activation Requires Conventional Reset; or\nc) Firmware Activation Requires NVM Subsystem Reset,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2901",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.568280041217804
  },
  {
    "content": "then the controller should abort the Sanitize command with a status code of Firmware Activation Requires\nController Level Reset.\n\nActivation of new firmware is prohibited during a sanitize operation (refer to section 8.21.1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2902",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42550474405288696
  },
  {
    "content": "Support for Sanitize commands in a Controller Memory Buffer (i.e., submitted to an Admin Submission\nQueue in a Controller Memory Buffer or specifying an Admin Completion Queue in a Controller Memory\nBuffer) is implementation specific. If an implementation does not support Sanitize commands in a Controller\nMemory Buffer and a controller’s Admin Submission Queue or Admin Completion Queue is in the Controller\nMemory Buffer, then the controller shall abort all Sanitize commands with a status code of Command Not\nSupported for Queue in CMB.\n\nAll sanitize operations (i.e., Block Erase, Crypto Erase, and Overwrite) are performed in the background\n(i.e., Sanitize command completion does not indicate sanitize operation completion). If a sanitize operation\nis started, then the controller shall complete the Sanitize command with a status code of Successful\nCompletion. If the controller completes a Sanitize command with any status code other than Successful\nCompletion, then the controller:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 991,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2903",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5661855936050415
  },
  {
    "content": "- shall not start the sanitize operation for that command;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2904",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5967631936073303
  },
  {
    "content": "- shall not modify the Sanitize Status log page; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2905",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49972596764564514
  },
  {
    "content": "- shall not alter any user data.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2906",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2771837115287781
  },
  {
    "content": "The Sanitize command uses Command Dword 10 and Command Dword 11. All other command specific\nfields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 112,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2907",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6796664595603943
  },
  {
    "content": "**Figure 303: Sanitize – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2908",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4373743534088135
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:10|Reserved|\n|09|No-Deallocate After Sanitize: If set to ‘1’ and the No-Deallocate Inhibited bit (refer to Figure 275)<br>is cleared to ‘0’, then the controller shall not deallocate any user data as a result of successfully<br>completing the sanitize operation. If:<br>a) cleared to ‘0’; or<br>b) set to ‘1’ and the No-Deallocate Inhibited bit is set to ‘1’,<br>then the controller should deallocate user data as a result of successfully completing the sanitize<br>operation. This bit shall be ignored if the Sanitize Action field is set to 001b (i.e., Exit Failure Mode).|\n|08|Overwrite Invert Pattern Between Passes (OIPBP): If set to ‘1’, then the Overwrite Pattern shall<br>be inverted between passes. If cleared to ‘0’, then the overwrite pattern shall not be inverted<br>between passes. This bit shall be ignored unless the Sanitize Action field is set to 011b (i.e.,<br>Overwrite).|\n|07:04|Overwrite Pass Count (OWPASS): This field specifies the number of overwrite passes (i.e., how<br>many times the media is to be overwritten) using the data from the Overwrite Pattern field of this<br>command. A value of 0h specifies 16 overwrite passes. This field shall be ignored unless the<br>Sanitize Action field is set to 011b (i.e., Overwrite).|\n|03|Allow Unrestricted Sanitize Exit (AUSE): If set to ‘1’, then the sanitize operation is performed in<br>unrestricted completion mode. If cleared to ‘0’, then the sanitize operation is performed in<br>restricted completion mode. This bit shall be ignored if the Sanitize Action field is set to 001b (i.e.,<br>Exit Failure Mode).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1613,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2909",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12636905908584595
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2910",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11936184763908386
  },
  {
    "content": "**Figure 303: Sanitize – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2911",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5102242827415466
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|02:00|Sanitize Action (SANACT): This field specifies the sanitize action to perform.<br>Value Description<br>000b Reserved<br>001b Exit Failure Mode<br>010b Start a Block Erase sanitize operation<br>011b Start an Overwrite sanitize operation<br>100b Start a Crypto Erase sanitize operation<br>101b to 111b Reserved|\n\n|Value|Description|\n|---|---|\n|000b|Reserved|\n|001b|Exit Failure Mode|\n|010b|Start a Block Erase sanitize operation|\n|011b|Start an Overwrite sanitize operation|\n|100b|Start a Crypto Erase sanitize operation|\n|101b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 579,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2912",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49151960015296936
  },
  {
    "content": "**Figure 304: Sanitize – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2913",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4182721972465515
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Overwrite Pattern (OVRPAT): This field is ignored unless the Sanitize Action field in Command<br>Dword 10 is set to 011b (i.e., Overwrite). This field specifies a 32-bit pattern that is used for the<br>Overwrite sanitize operation. Refer to section 8.21.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 291,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2914",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24167007207870483
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2915",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46772119402885437
  },
  {
    "content": "When the command is complete, the controller shall post a completion queue entry to the Admin Completion\nQueue indicating the status for the command. All sanitize operations are performed in the background (i.e.,\ncompletion of the Sanitize command does not indicate completion of the sanitize operation). If a sanitize\noperation is started, then the Sanitize Status log page shall be updated before posting the completion queue\nentry for the command that started that sanitize operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 487,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2916",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5135194659233093
  },
  {
    "content": "Sanitize command specific status values (i.e., SCT field set to 1h) are shown in Figure 305.\n\n**Figure 305: Sanitize – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 151,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2917",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38069939613342285
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0Bh|Firmware Activation Requires Conventional Reset: The sanitize operation could not be started<br>because a firmware activation is pending and a Conventional Reset is required.|\n|10h|Firmware Activation Requires NVM Subsystem Reset: The sanitize operation could not be<br>started because a firmware activation is pending and an NVM Subsystem Reset is required.|\n|11h|Firmware Activation Requires Controller Level Reset: The sanitize operation could not be<br>started because a firmware activation is pending and a Controller Level Reset is required.|\n|23h|Sanitize Prohibited While Persistent Memory Region is Enabled: A sanitize operation is<br>prohibited while the Persistent Memory Region is enabled.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 737,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2918",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2707260549068451
  },
  {
    "content": "**5.25 Security Receive command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2919",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5784188508987427
  },
  {
    "content": "The Security Receive command transfers the status and data result of one or more Security Send\ncommands that were previously submitted to the controller.\n\nThe association between a Security Receive command and previous Security Send commands is\ndependent on the Security Protocol. The format of the data to be transferred is dependent on the Security\nProtocol. Refer to SPC-5 for Security Protocol details.\n\nEach Security Receive command returns the appropriate data corresponding to a Security Send\ncommand as defined by the rules of the Security Protocol. The Security Receive command data may not\nbe retained if there is a loss of communication between the controller and host, or if a Controller Level\nReset occurs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 719,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2920",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32030898332595825
  },
  {
    "content": "The fields used are Data Pointer, Command Dword 10, and Command Dword 11 fields. All other\ncommand specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2921",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24756424129009247
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2922",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17682430148124695
  },
  {
    "content": "**Figure 306: Security Receive – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2923",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4362332224845886
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the start of the data buffer. Refer to Figure 87 for the<br>definition of this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2924",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26738932728767395
  },
  {
    "content": "**Figure 307: Security Receive – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2925",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49166038632392883
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:24|Security Protocol (SECP): This field specifies the security protocol as defined in SPC-5. The<br>controller shall abort the command with a status code of Invalid Field in Command if an<br>unsupported value of the Security Protocol is specified.|\n|23:16|SP Specific 1 (SPSP1): The value of this field contains bits 15:08 of the Security Protocol Specific<br>field as defined in SPC-5.|\n|15:08|SP Specific 0 (SPSP0): The value of this field contains bits 07:00 of the Security Protocol Specific<br>field as defined in SPC-5.|\n|07:00|NVMe Security Specific Field (NSSF): Refer to Figure 309 for definition of this field for Security<br>Protocol EAh. For all other Security Protocols this field is reserved.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 740,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2926",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4919118285179138
  },
  {
    "content": "**Figure 308: Security Receive – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2927",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4185733497142792
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Allocation Length (AL): The value of this field is specific to the Security Protocol In command<br>with the INC_512 field cleared to 0h as defined in SPC-5.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2928",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11584478616714478
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2929",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49581897258758545
  },
  {
    "content": "If the command is completed, then the controller shall post a completion queue entry to the Admin\nCompletion Queue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2930",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.005818723235279322
  },
  {
    "content": "**Security Protocol 00h**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2931",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.626998782157898
  },
  {
    "content": "A Security Receive command with the Security Protocol field cleared to 00h shall return information about\nthe security protocols supported by the controller. This command is used in the security discovery process\nand is not associated with a Security Send command. Refer to SPC-5 for the details of Security Protocol\n00h and the SP Specific field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 347,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2932",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5002383589744568
  },
  {
    "content": "**Security Protocol EAh**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2933",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6661232113838196
  },
  {
    "content": "Security Protocol EAh is assigned for NVMe interface use (refer to ACS-4). This protocol may be used in\nSecurity Receive and Security Send commands. The specific usage type is defined by the Security Protocol\nSpecific Field defined in Figure 309.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2934",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6682447195053101
  },
  {
    "content": "**Figure 309: Security Protocol EAh – Security Protocol Specific Field Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2935",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42611461877822876
  },
  {
    "content": "|SP Specific (SPSP)<br>Value|Description|NVMe Security Specific Field (NSSF)<br>Definition|\n|---|---|---|\n|0001h|Replay Protected Memory Block|RPMB Target|\n|0002h to FFFFh|Reserved|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 190,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2936",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26593470573425293
  },
  {
    "content": "**5.26 Security Send command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2937",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6112265586853027
  },
  {
    "content": "The Security Send command is used to transfer security protocol data to the controller. The data structure\ntransferred to the controller as part of this command contains security protocol specific commands to be\nperformed by the controller. The data structure transferred may also contain data or parameters\nassociated with the security protocol commands. Status and data that is to be returned to the host for the\nsecurity protocol commands submitted by a Security Send command are retrieved with the Security\nReceive command defined in section 5.25.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 551,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2938",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0671854093670845
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2939",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08018995821475983
  },
  {
    "content": "The association between a Security Send command and subsequent Security Receive command is\nSecurity Protocol field dependent as defined in SPC-5.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 145,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2940",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3283917009830475
  },
  {
    "content": "The fields used are Data Pointer, Command Dword 10, and Command Dword 11 fields. All other\ncommand specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2941",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3927604556083679
  },
  {
    "content": "**Figure 310: Security Send – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2942",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4005334675312042
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the start of the data buffer. Refer to Figure 87 for the<br>definition of this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2943",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2529813349246979
  },
  {
    "content": "**Figure 311: Security Send – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2944",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.478915274143219
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:24|Security Protocol (SECP): This field specifies the security protocol as defined in SPC-5. The<br>controller shall abort the command with a status code of Invalid Field in Command if a reserved<br>value of the Security Protocol is specified.|\n|23:16|SP Specific 1 (SPSP1): The value of this field contains bits 15:08 of the Security Protocol Specific<br>field as defined in SPC-5.|\n|15:08|SP Specific 0 (SPSP0): The value of this field contains bits 07:00 of the Security Protocol Specific<br>field as defined in SPC-5.|\n|07:00|NVMe Security Specific Field (NSSF): Refer to Figure 309 for definition of this field for Security<br>Protocol EAh. For all other Security Protocols this field is reserved.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 736,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2945",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4441513419151306
  },
  {
    "content": "**Figure 312: Security Send – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2946",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.389877587556839
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Transfer Length (TL): The value of this field is specific to the Security Protocol Out command<br>with the INC_512 field cleared to 0h as defined in SPC-5.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 192,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2947",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09712819755077362
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2948",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49581897258758545
  },
  {
    "content": "If the command is completed, then the controller shall post a completion queue entry to the Admin\nCompletion Queue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2949",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18151527643203735
  },
  {
    "content": "**5.27 Set Features command**\n\nThe Set Features command specifies the attributes of the Feature indicated.\n\nThe Set Features command uses the Data Pointer, Command Dword 10, and Command Dword 14. The\nuse of Command Dword 11, Command Dword 12, Command Dword 13, and Command Dword 15 fields is\nFeature specific. If Command Dword 11, Command Dword 12, Command Dword 13, or Command Dword\n15 fields are not used, then the Command Dwords are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 445,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2950",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5921747088432312
  },
  {
    "content": "**Figure 313: Set Features – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2951",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4069775342941284
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the start of the data buffer. Refer to Figure 87 for the<br>definition of this field. If using PRPs, this field shall not be a pointer to a PRP List as the data buffer<br>may not cross more than one page boundary. If no data structure is used as part of the specified<br>feature, then this field is not used.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 388,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2952",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21353931725025177
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2953",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12041085213422775
  },
  {
    "content": "**Figure 314: Set Features – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2954",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39664217829704285
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31|Save (SV): This bit specifies that the controller shall save the attribute so that the attribute persists<br>through all power states and resets.<br>The controller indicates in bit 4 of the Optional NVM Command Support field of the Identify<br>Controller data structure in Figure 275 whether this bit is supported.<br>If the Feature Identifier specified in the Set Features command is not saveable by the controller<br>and the controller receives a Set Features command with the Save bit set to ‘1’, then the command<br>shall be aborted with a status code of Feature Identifier Not Saveable.|\n|30:08|Reserved|\n|07:00|Feature Identifier (FID): This field indicates the identifier of the Feature that attributes are being<br>specified for.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 771,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2955",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4047577679157257
  },
  {
    "content": "If the controller supports selection of a UUID by the Set Features command (refer to Figure 316 and section\n8.25) and the controller supports selection of a UUID for the specified vendor specific feature identifier (refer\nto Figure 316), then Command Dword 14 is used to specify a UUID Index value (refer to Figure 315). If the\ncontroller does not support selection of a UUID by the Set Features command or the controller does not\nsupport selection of a UUID for the specified vendor specific feature identifier, then Command Dword 14\ndoes not specify a UUID Index value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 571,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2956",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3009953796863556
  },
  {
    "content": "**Figure 315: Set Features – Command Dword 14**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2957",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28433674573898315
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:07|Reserved|\n|06:00|UUID Index: Refer to Figure 477.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2958",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2926443815231323
  },
  {
    "content": "**Feature Specific Information**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2959",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5258087515830994
  },
  {
    "content": "Figure 316 defines the Features that may be configured with a Set Features command and retrieved with\na Get Features command. Refer to section 3.1.2 for mandatory, optional, and prohibited features for the\nvarious controller types. Some Features utilize a memory buffer to configure or return attributes for a\nFeature, whereas others only utilize a dword in the command or completion queue entry. If a Feature is not\npersistent across power cycles and resets, then the current value of that Feature shall be set to the default\nvalue of that Feature as part of a Controller Level Reset. For more information on Features, including default\nvalue definitions, saved value definitions, and current value definitions, refer to section 4.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 734,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2960",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5274693369865417
  },
  {
    "content": "Upon completion of a Set Features command for a feature, the host should rediscover, re-enumerate and/or\nre-initialize all capabilities associated with that feature. For example, if a namespace capability change may\noccur for a feature, then host software should pause the use of any associated namespace, submit the Set\nFeatures command for that feature and wait for that command to complete, and then re-issue commands\nto all namespaces affected by that Set Features command.\n\nThere may be commands in execution when a Feature is changed. The new settings may or may not apply\nto commands already submitted for execution when the Feature is changed. Any commands submitted to\na Submission Queue after a Set Features command is successfully completed shall utilize the new settings\nfor the associated Feature. To ensure that a Features values apply to all subsequent commands, the host\nshould allow commands being processed to complete prior to issuing the Set Features command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 979,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2961",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5911257863044739
  },
  {
    "content": "If the controller does not support a changeable value for a Feature (e.g., the Feature is not changeable),\nand a Set Features command for that Feature is processed, then if that command specifies a Feature value\nthat:\n\n- is not the same as the existing value for that Feature, then the controller shall abort that command\nwith a status code of Feature Not Changeable; and\n\n- is the same as the existing value for that Feature, then the controller may:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 451,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2962",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1611778736114502
  },
  {
    "content": "`o` complete that command successfully; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2963",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07489071041345596
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2964",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06802152097225189
  },
  {
    "content": "`o` abort that command with a status code of Feature Not Changeable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2965",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32224223017692566
  },
  {
    "content": "**Figure 316: Set Features – Feature Identifiers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2966",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19624169170856476
  },
  {
    "content": "|Feature<br>Identifier|Current Setting Persists<br>Across Power Cycle and<br>2<br>Reset|Uses<br>Memory<br>Buffer for<br>Attributes|Feature Name|\n|---|---|---|---|\n|00h|Reserved|Reserved|Reserved|\n|01h|No|No|Arbitration|\n|02h|No|No|Power Management|\n|03h|Refer to the NVM Command Set|Refer to the NVM Command Set|Refer to the NVM Command Set|\n|04h|No|No|Temperature Threshold|\n|05h|Refer to the NVM Command Set|Refer to the NVM Command Set|Refer to the NVM Command Set|\n|06h|No|No|Volatile Write Cache|\n|07h|No|No|Number of Queues|\n|08h|No|No|Interrupt Coalescing|\n|09h|No|No|Interrupt Vector Configuration|\n|0Ah|Refer to the NVM Command Set|Refer to the NVM Command Set|Refer to the NVM Command Set|\n|0Bh|No|No|Asynchronous Event Configuration|\n|0Ch|No|Yes|Autonomous Power State Transition|\n|0Dh|3<br>No|4<br>No|Host Memory Buffer|\n|0Eh|No|Yes|Timestamp|\n|0Fh|No|No|Keep Alive Timer|\n|10h|Yes|No|Host Controlled Thermal Management|\n|11h|No|No|Non-Operational Power State Config|\n|12h|Yes|No|Read Recovery Level Config|\n|13h|No|Yes|Predictable Latency Mode Config|\n|14h|No|No|Predictable Latency Mode Window|\n|15h|Refer to the NVM Command Set|Refer to the NVM Command Set|Refer to the NVM Command Set|\n|16h|No|Yes|Host Behavior Support|\n|17h|Yes|No|Sanitize Config|\n|18h|No|No|Endurance Group Event Configuration|\n|19h|Yes|No|I/O Command Set Profile|\n|1Ah|Yes|No|Spinup Control|\n|1Bh to 1Fh|Reserved|Reserved|Reserved|\n|20h|Refer to the Key Value Command Set|Refer to the Key Value Command Set|Refer to the Key Value Command Set|\n|21h to 77h|Reserved|Reserved|Reserved|\n|78h to 7Ch|Reserved for Management Features.|Reserved for Management Features.|Reserved for Management Features.|\n|7Dh|No|Yes|Enhanced Controller Metadata|\n|7Eh|No|Yes|Controller Metadata|\n|7Fh|No|Yes|Namespace Metadata|\n|80h|Yes|No|Software Progress Marker|\n|81h|No|Yes|Host Identifier|\n|82h|No|No|Reservation Notification Mask|\n|83h|Yes|No|Reservation Persistence|\n|84h|No|No|Namespace Write Protection Config|\n|85h to BFh|||Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2007,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2967",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37427857518196106
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2968",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09499399363994598
  },
  {
    "content": "**Figure 316: Set Features – Feature Identifiers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2969",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32818323373794556
  },
  {
    "content": "|Feature<br>Identifier|Current Setting Persists<br>Across Power Cycle and<br>2<br>Reset|Uses<br>Memory<br>Buffer for<br>Attributes|Feature Name|\n|---|---|---|---|\n|C0h to FFh|||1, 5<br>Vendor Specific|\n|Notes:<br>1. The behavior of a controller in response to an inactive namespace ID to a vendor specific Feature Identifier<br>is vendor specific.<br>2. This column is only valid if the feature is not saveable (refer to section 4.2). If the feature is saveable, then<br>this column is not used.<br>3. The controller does not save settings for the Host Memory Buffer feature across power states and reset<br>events, however, host software may restore the previous values. Refer to section 8.9.<br>4. The feature does not use a memory buffer for Set Features commands and does use a memory buffer for<br>Get Features commands. Refer to section 8.9.<br>5. Selection of a UUID may be supported. Refer to section 8.25.|Notes:<br>1. The behavior of a controller in response to an inactive namespace ID to a vendor specific Feature Identifier<br>is vendor specific.<br>2. This column is only valid if the feature is not saveable (refer to section 4.2). If the feature is saveable, then<br>this column is not used.<br>3. The controller does not save settings for the Host Memory Buffer feature across power states and reset<br>events, however, host software may restore the previous values. Refer to section 8.9.<br>4. The feature does not use a memory buffer for Set Features commands and does use a memory buffer for<br>Get Features commands. Refer to section 8.9.<br>5. Selection of a UUID may be supported. Refer to section 8.25.|Notes:<br>1. The behavior of a controller in response to an inactive namespace ID to a vendor specific Feature Identifier<br>is vendor specific.<br>2. This column is only valid if the feature is not saveable (refer to section 4.2). If the feature is saveable, then<br>this column is not used.<br>3. The controller does not save settings for the Host Memory Buffer feature across power states and reset<br>events, however, host software may restore the previous values. Refer to section 8.9.<br>4. The feature does not use a memory buffer for Set Features commands and does use a memory buffer for<br>Get Features commands. Refer to section 8.9.<br>5. Selection of a UUID may be supported. Refer to section 8.25.|Notes:<br>1. The behavior of a controller in response to an inactive namespace ID to a vendor specific Feature Identifier<br>is vendor specific.<br>2. This column is only valid if the feature is not saveable (refer to section 4.2). If the feature is saveable, then<br>this column is not used.<br>3. The controller does not save settings for the Host Memory Buffer feature across power states and reset<br>events, however, host software may restore the previous values. Refer to section 8.9.<br>4. The feature does not use a memory buffer for Set Features commands and does use a memory buffer for<br>Get Features commands. Refer to section 8.9.<br>5. Selection of a UUID may be supported. Refer to section 8.25.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3051,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2970",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3478046953678131
  },
  {
    "content": "**5.27.1.1 Arbitration (Feature Identifier 01h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2971",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.552804708480835
  },
  {
    "content": "This Feature controls command arbitration. Refer to section 3.4.4 for command arbitration details. The\nattributes are specified in Command Dword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2972",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4095086455345154
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 317 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2973",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3151528239250183
  },
  {
    "content": "**Figure 317: Arbitration & Command Processing – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2974",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5488388538360596
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:24|High Priority Weight (HPW): This field defines the number of commands that may be executed<br>from the high priority service class in each arbitration round. This is a 0’s based value.|\n|23:16|Medium Priority Weight (MPW): This field defines the number of commands that may be<br>executed from the medium priority service class in each arbitration round. This is a 0’s based<br>value.|\n|15:08|Low Priority Weight (LPW): This field defines the number of commands that may be executed<br>from the low priority service class in each arbitration round. This is a 0’s based value.|\n|07:03|Reserved|\n|02:00|Arbitration Burst (AB): Indicates the maximum number of commands that the controller may<br>fetch at one time from a particular Submission Queue. The value is expressed as a power of two<br>(e.g., 000b indicates one, 011b indicates eight). A value of 111b indicates no limit.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 913,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2975",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24268917739391327
  },
  {
    "content": "**5.27.1.2 Power Management (Feature Identifier 02h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2976",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5485477447509766
  },
  {
    "content": "This Feature allows the host to configure the power state. The attributes are specified in Command Dword\n11 (refer to Figure 318).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 130,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2977",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6195650696754456
  },
  {
    "content": "Upon successful completion of a Set Features command for this feature, the controller shall be in the Power\nState specified. For a transition to a non-operational power state, the device may exceed the power\nindicated for that non-operational power state as defined in section 8.15.1 (e.g., while completing this\ncommand). If enabled, autonomous power state transitions continue to occur from the new state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 407,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2978",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2574102580547333
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes described in Figure 319 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2979",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31199491024017334
  },
  {
    "content": "**Figure 318: Power Management – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2980",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30479809641838074
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:08|Reserved|\n|07:05|Workload Hint (WH): This field indicates the type of workload expected. This hint may be used<br>by the NVM subsystem to optimize performance. Refer to section 8.15.3 for more details.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 238,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2981",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4509546160697937
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2982",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20607104897499084
  },
  {
    "content": "**Figure 318: Power Management – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2983",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4727511405944824
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|04:00|Power State (PS): This field indicates the new power state into which the controller is requested<br>to transition. This power state shall be one supported by the controller as indicated in the Number<br>of Power States Supported (NPSS) field in the Identify Controller data structure. If the power state<br>specified is not supported, the controller shall abort the command and should return an error of<br>Invalid Field in Command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 470,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2984",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40931937098503113
  },
  {
    "content": "**Figure 319: Power Management – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2985",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42683497071266174
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:08|Reserved|\n|07:05|Workload Hint (WH): This field indicates the type of workload. Refer to section 8.15.3 for more<br>details.|\n|04:00|Power State (PS): This field indicates the current power state of the controller, or the power state<br>into which the controller is transitioning.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 317,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2986",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2894724905490875
  },
  {
    "content": "**5.27.1.3 Temperature Threshold (Feature Identifier 04h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2987",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6355705261230469
  },
  {
    "content": "A controller may report up to nine temperature values in the SMART / Health Information log page (i.e., the\nComposite Temperature and Temperature Sensor 1 through Temperature Sensor 8; refer to Figure 207).\nAssociated with each implemented temperature sensor is an over temperature threshold and an under\ntemperature threshold. When a temperature is greater than or equal to its corresponding over temperature\nthreshold or less than or equal to its corresponding under temperature threshold, then bit 1 of the Critical\nWarning field in the SMART / Health Information log page (refer to section 5.16.1.3) is set to ‘1’. This may\ntrigger an asynchronous event.\n\nThe over temperature threshold feature shall be implemented for Composite Temperature. The under\ntemperature threshold Feature shall be implemented for Composite Temperature if a non-zero Warning\nComposite Temperature Threshold (WCTEMP) field value is reported in the Identify Controller data\nstructure (refer to Figure 275). The over temperature threshold and under temperature threshold features\nshall be implemented for all implemented temperature sensors (i.e., all Temperature Sensor fields that\nreport a non-zero value).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1186,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2988",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8363345265388489
  },
  {
    "content": "The default value of the over temperature threshold feature for Composite Temperature is the value in the\nWarning Composite Temperature Threshold (WCTEMP) field in the Identify Controller data structure if\nWCTEMP is non-zero; otherwise, the default value is implementation specific. The default value of the\nunder temperature threshold feature for Composite Temperature is implementation specific. The default\nvalue of the over temperature threshold for all implemented temperature sensors is FFFFh. The default\nvalue of the under temperature threshold for all implemented temperature sensors is 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 599,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2989",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5621448159217834
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the temperature threshold selected by Command\nDword 11 is returned in Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 182,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2990",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6104701161384583
  },
  {
    "content": "**Figure 320: Temperature Threshold – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2991",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4420115351676941
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:22|Reserved|\n|21:20|Threshold Type Select (THSEL): This field selects the threshold type that is modified by a Set<br>Features command and whose threshold value is returned by a Get Features command.<br>Value Description<br>00b Over Temperature Threshold<br>01b Under Temperature Threshold<br>10b to 11b Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 346,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2992",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6535201668739319
  },
  {
    "content": "|Value|Description|\n|---|---|\n|00b|Over Temperature Threshold|\n|01b|Under Temperature Threshold|\n|10b to 11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2993",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24494203925132751
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2994",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10962405055761337
  },
  {
    "content": "**Figure 320: Temperature Threshold – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2995",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4945753514766693
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0h|Composite Temperature|\n|1h|Temperature Sensor 1|\n|2h|Temperature Sensor 2|\n|3h|Temperature Sensor 3|\n|4h|Temperature Sensor 4|\n|5h|Temperature Sensor 5|\n|6h|Temperature Sensor 6|\n|7h|Temperature Sensor 7|\n|8h|Temperature Sensor 8|\n|9h to Eh|Reserved|\n|Fh|All implemented temperature sensors in a Set Features<br>command. Reserved in a Get Features command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 391,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2996",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6825385093688965
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|19:16|Threshold Temperature Select (TMPSEL): This field selects the temperature whose threshold<br>is modified by a Set Features command and whose threshold value is returned by a Get Features<br>command.<br>Value Description<br>0h Composite Temperature<br>1h Temperature Sensor 1<br>2h Temperature Sensor 2<br>3h Temperature Sensor 3<br>4h Temperature Sensor 4<br>5h Temperature Sensor 5<br>6h Temperature Sensor 6<br>7h Temperature Sensor 7<br>8h Temperature Sensor 8<br>9h to Eh Reserved<br>All implemented temperature sensors in a Set Features<br>Fh<br>command. Reserved in a Get Features command.|\n|15:00|Temperature Threshold (TMPTH): Indicates the threshold value for the temperature sensor and<br>threshold type specified in Kelvins.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 772,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2997",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19406758248806
  },
  {
    "content": "**5.27.1.4 Volatile Write Cache (Feature Identifier 06h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2998",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6421337127685547
  },
  {
    "content": "This Feature controls the volatile write cache, if present, on the controller. If a volatile write cache is present\n(refer to the VWC field in Figure 275), then this feature shall be supported. The attributes are specified in\nCommand Dword 11.\n\nNote: If the controller is able to guarantee that data present in a write cache is written to non-volatile media\non loss of power, then that write cache is considered non-volatile and this feature does not apply to that\nwrite cache.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 477,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_2999",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2073572874069214
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 321 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3000",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3659161627292633
  },
  {
    "content": "If a volatile write cache is not present, then a Set Features command specifying the Volatile Write Cache\nfeature identifier shall abort with a status code of Invalid Field in Command, and a Get Features command\nspecifying the Volatile Write Cache feature identifier should abort with a status code of Invalid Field in\nCommand.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 327,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3001",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6215783953666687
  },
  {
    "content": "**Figure 321: Volatile Write Cache – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3002",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5946742296218872
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|00|Volatile Write Cache Enable (WCE): If set to ‘1’, then the volatile write cache is enabled. If<br>cleared to ‘0’, then the volatile write cache is disabled.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 207,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3003",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26004236936569214
  },
  {
    "content": "**5.27.1.5 Number of Queues (Feature Identifier 07h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3004",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5212507843971252
  },
  {
    "content": "This Feature indicates the number of queues that the host requests for the controller processing the\ncommand. This feature shall only be issued during initialization prior to creation of any I/O Submission\nand/or Completion Queues. If a Set Features command is issued for this feature after creation of any I/O\nSubmission and/or I/O Completion Queues, then the Set Features command shall abort with status code\nof Command Sequence Error. The controller shall not change the value allocated between resets. For a\nSet Features command, the attributes are specified in Command Dword 11 (refer to Figure 322). For a Get\nFeatures command, Dword 11 is ignored.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 654,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3005",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5312267541885376
  },
  {
    "content": "If a Set Features or Get Features command is submitted for this Feature, the attributes specified in Figure\n323 are returned in Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 183,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3006",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14561587572097778
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3007",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20374345779418945
  },
  {
    "content": "**Figure 322: Number of Queues – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3008",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5724103450775146
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Number of I/O Completion Queues Requested (NCQR): Indicates the number of I/O Completion<br>Queues requested by software. This number does not include the Admin Completion Queue. A<br>minimum of one queue shall be requested, reflecting that the minimum support is for one I/O<br>Completion Queue. This is a 0’s based value. The maximum value that may be specified is 65,534<br>(i.e., 65,535 I/O Completion Queues). If the value specified is 65,535, the controller should abort<br>the command with a status code of Invalid Field in Command.|\n|15:00|Number of I/O Submission Queues Requested (NSQR): Indicates the number of I/O<br>Submission Queues requested by software. This number does not include the Admin Submission<br>Queue. A minimum of one queue shall be requested, reflecting that the minimum support is for<br>one I/O Submission Queue. This is a 0’s based value. The maximum value that may be specified<br>is 65,534 (i.e., 65,535 I/O Submission Queues). If the value specified is 65,535, the controller<br>should abort the command with a status code of Invalid Field in Command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3009",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5580659508705139
  },
  {
    "content": "Note: The value allocated may be smaller or larger than the number of queues requested, often in virtualized\nimplementations. The controller may not have as many queues to allocate as are requested. Alternatively,\nthe controller may have an allocation unit of queues (e.g., power of two) and may supply more queues to\nhost software to satisfy its allocation unit.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 363,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3010",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40318676829338074
  },
  {
    "content": "**Figure 323: Number of Queues – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3011",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5820949673652649
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Number of I/O Completion Queues Allocated (NCQA): Indicates the number of I/O Completion<br>Queues allocated by the controller. A minimum of one queue shall be allocated, reflecting that the<br>minimum support is for one I/O Completion Queue. The value may not match the number<br>requested by host software. This is a 0’s based value.|\n|15:00|Number of I/O Submission Queues Allocated (NSQA): Indicates the number of I/O Submission<br>Queues allocated by the controller. A minimum of one queue shall be allocated, reflecting that the<br>minimum support is for one I/O Submission Queue. The value may not match the number<br>requested by host software. This is a 0’s based value.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 716,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3012",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2701007127761841
  },
  {
    "content": "**5.27.1.6 Interrupt Coalescing (Feature Identifier 08h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3013",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4943491816520691
  },
  {
    "content": "This Feature configures interrupt coalescing settings. The controller should signal an interrupt when either\nthe Aggregation Time or the Aggregation Threshold conditions are met. If either the Aggregation Time or\nthe Aggregation Threshold fields are cleared to 0h, then an interrupt may be generated (i.e., interrupt\ncoalescing is implicitly disabled). This Feature applies only to the I/O Queues. It is recommended that\ninterrupts for commands that complete in error are not coalesced. The settings are specified in Command\nDword 11.\n\nIf the controller detects that interrupts are already being processed for this vector, then the controller may\ndelay additional interrupts. Specifically, if the Completion Queue Head Doorbell property is being updated\nthat is associated with a particular interrupt vector, then the controller has a positive indication that\ncompletion queue entries are already being processed. In this case, the aggregation time and/or the\naggregation threshold may be reset/restarted upon the associated property write. This may result in\ninterrupts being delayed indefinitely in certain workloads where the aggregation time or aggregation\nthreshold is non-zero.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1183,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3014",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28722310066223145
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 324 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3015",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09395697712898254
  },
  {
    "content": "This Feature is valid when the controller is configured for Pin Based, MSI, Multiple MSI or MSI-X interrupts.\nThere is no requirement for the controller to persist these settings if interrupt modes are changed. It is\nrecommended that the host re-issue this Feature after changing interrupt modes.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 296,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3016",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10700239986181259
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3017",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05144016444683075
  },
  {
    "content": "**Figure 324: Interrupt Coalescing – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3018",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34030526876449585
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:08|Aggregation Time (TIME): Specifies the recommended maximum time in 100 microsecond<br>increments that a controller may delay an interrupt due to interrupt coalescing. A value of 0h<br>corresponds to no delay. The controller may apply this time per interrupt vector or across all<br>interrupt vectors. The reset value of this setting is 0h.|\n|07:00|Aggregation Threshold (THR): Specifies the recommended minimum number of completion<br>queue entries to aggregate per interrupt vector before signaling an interrupt to the host. This is a<br>0’s based value. The reset value of this setting is 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 648,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3019",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3699108958244324
  },
  {
    "content": "**5.27.1.7 Interrupt Vector Configuration (Feature Identifier 09h)**\n\nThis Feature configures settings specific to a particular interrupt vector. The settings are specified in\nCommand Dword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3020",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5969464778900146
  },
  {
    "content": "By default, coalescing settings are enabled for each interrupt vector. Interrupt coalescing is not supported\nfor the Admin Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3021",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5723088383674622
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 325 are returned\nin Dword 0 of the completion queue entry for that command for the Interrupt Vector specified in Command\nDword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 222,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3022",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6211572885513306
  },
  {
    "content": "Prior to issuing a Set Features command that specifies this Feature, the host shall configure the specified\nInterrupt Vector with an I/O Completion Queue (refer to section 5.4). If the specified Interrupt Vector is\ninvalid, or not associated with an existing I/O Completion Queue (refer to Figure 157), then the controller\nshould abort the command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 395,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3023",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5632267594337463
  },
  {
    "content": "**Figure 325: Interrupt Vector Configuration – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3024",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.613274872303009
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:17|Reserved|\n|16|Coalescing Disable (CD): If set to ‘1’, then any interrupt coalescing settings shall not be applied<br>for this interrupt vector. If cleared to ‘0’, then interrupt coalescing settings apply for this interrupt<br>vector.|\n|15:00|Interrupt Vector (IV): This field specifies the interrupt vector for which the configuration settings<br>are applied.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 396,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3025",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1786351054906845
  },
  {
    "content": "**5.27.1.8 Asynchronous Event Configuration (Feature Identifier 0Bh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3026",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4422503411769867
  },
  {
    "content": "This Feature controls the events that trigger an asynchronous event notification to the host. This Feature\nmay be used to disable reporting events in the case of a persistent condition (refer to section 5.2). If the\ncondition for an event is true when the corresponding notice is enabled, then an event is sent to the host.\nThe attributes are specified in Command Dword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 373,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3027",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2911543548107147
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 326 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3028",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3351094424724579
  },
  {
    "content": "**Figure 326: Asynchronous Event Configuration – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3029",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2807652950286865
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31|Discovery Log Page Change Notification: This bit indicates that the Discovery controller reports<br>Discovery Log Page Change Notifications. If set to ‘1’, the Discovery controller shall send a<br>notification if Discovery Log Page changes occur.|\n|30:28|Reserved|\n|27|2<br>Zone Descriptor Changed Notices : I/O Command Set specific definition.|\n|26:16|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 395,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3030",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20258882641792297
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3031",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.054286908358335495
  },
  {
    "content": "**Figure 326: Asynchronous Event Configuration – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3032",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36347150802612305
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15|Normal NVM Subsystem Shutdown: This bit determines whether an asynchronous event<br>notification is sent to the host when the NVM subsystem has started performing a normal shutdown<br>due to an NVM Subsystem Shutdown (refer to Figure 149). If this bit is set to ‘1’, then the Normal<br>NVM Subsystem Shutdown event is sent to the host if an outstanding Asynchronous Event<br>Request command exists at the time this condition occurs. If this bit is cleared to ‘0’, then the<br>controller shall not send the Normal NVM Subsystem Shutdown event to the host.|\n|14|Endurance Group Event Aggregate Log Change Notices: This bit determines whether an<br>asynchronous event notification is sent to the host when an event entry for an Endurance Group<br>(refer to section 3.2.3) has been added to the Endurance Group Event Aggregate log (refer to<br>section 5.16.1.15). If this bit is set to ‘1’, then the Endurance Group Event Aggregate Log Change<br>event is sent to the host when this condition occurs. If this bit is cleared to ‘0’, then the controller<br>shall not send the Endurance Group Event Aggregate Log Change event to the host.<br>If Endurance Groups are not supported and this bit is set to ‘1’, then the Set Features command<br>shall be aborted with a status of Invalid Field in Command.|\n|13|1<br>LBA Status Information Alert Notices : I/O Command Set specific definition.|\n|12|Predictable Latency Event Aggregate Log Change Notices: This bit determines whether an<br>asynchronous event notification is sent to the host when an event pending entry for an NVM Set<br>(refer to section 5.16.1.12) has been added to the Predictable Latency Event Aggregate Log. If<br>this bit is set to ‘1’, then the Predictable Latency Event Aggregate Log Change event is sent to the<br>host when this condition occurs. If this bit is cleared to ‘0’, then the controller shall not send the<br>Predictable Latency Event Aggregate Log Change event to the host.|\n|11|Asymmetric Namespace Access Change Notices: This bit determines whether an<br>asynchronous event notification is sent to the host when an asymmetric namespace access<br>change occurs (i.e., the contents of the Asymmetric Namespace Access log page (refer to section<br>5.16.1.13) change). If this bit is set to ‘1’, then the Asymmetric Namespace Access Change<br>Notices event is sent to the host when this condition occurs. If this bit is cleared to ‘0’, then the<br>controller shall not send the Asymmetric Namespace Access Change Notices event to the host.|\n|10|Telemetry Log Notices: This bit determines whether an asynchronous event notification is sent<br>to the host when the Telemetry Controller-Initiated Data Available field transitions from 0h to 1h in<br>the Telemetry Controller-Initiated log page. If this bit is set to ‘1’, then the Telemetry Log Changed<br>event is sent to the host when this condition occurs. If this bit is cleared to ‘0’, then the controller<br>shall not send the Telemetry Log Changed event to the host.|\n|09|Firmware Activation Notices: This bit determines whether an asynchronous event notification is<br>sent to the host for a Firmware Activation Starting event (refer to Figure 147). If this bit is set to<br>‘1’, then the Firmware Activation Starting event is sent to the host when this condition occurs. If<br>this bit is cleared to ‘0’, then the controller shall not send the Firmware Activation Starting event to<br>the host.|\n|08|Namespace Attribute Notices: This bit determines whether an asynchronous event notification<br>is sent to the host for a Namespace Attribute change (refer to Figure 147). If this bit is set to ‘1’,<br>then the Namespace Attribute Changed event is sent to the host when this condition occurs. If this<br>bit is cleared to ‘0’, then the controller shall not send the Namespace Attribute Changed event to<br>the host.|\n|07:00|SMART / Health Critical Warnings: This field determines whether an asynchronous event<br>notification is sent to the host for the corresponding Critical Warning specified in the SMART /<br>Health Information log (refer to Figure 207). If a bit is set to ‘1’, then an asynchronous event<br>notification is sent when the corresponding critical warning bit is set to ‘1’ in the SMART / Health<br>Information log. If a bit is cleared to ‘0’, then an asynchronous event notification is not sent when<br>the corresponding critical warning bit is set to ‘1’ in the SMART / Health Information log.|\n|NOTE:<br>1. Refer to the NVM Command Set Specification.<br>2. Refer to the Zoned Namespace Command Set Specification.|NOTE:<br>1. Refer to the NVM Command Set Specification.<br>2. Refer to the Zoned Namespace Command Set Specification.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 4710,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3033",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2531728446483612
  },
  {
    "content": "**5.27.1.9 Autonomous Power State Transition (Feature Identifier 0Ch)**\n\nThis feature configures the settings for autonomous power state transitions, refer to section 8.15.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 174,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3034",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21162986755371094
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3035",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28548839688301086
  },
  {
    "content": "The Autonomous Power State Transition uses Command Dword 11 and specifies the attribute information\nin the data structure indicated in Figure 327 and the Autonomous Power State Transition data structure\nconsisting of 32 of the entries defined in Figure 328.\n\nIf a Get Features command is issued for this Feature, the attributes specified in Figure 327 are returned in\nDword 0 of the completion queue entry and the Autonomous Power State Transition data structure, whose\nentry structure is defined in Figure 328, is returned in the data buffer for that command.\n\n**Figure 327: Autonomous Power State Transition – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 630,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3036",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.571408748626709
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|00|Autonomous Power State Transition Enable (APSTE): This bit specifies whether autonomous<br>power state transition is enabled. If this bit is set to ‘1’, then autonomous power state transitions<br>are enabled. If this bit is cleared to ‘0’, then autonomous power state transitions are disabled. This<br>bit is cleared to ‘0’ by default.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 386,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3037",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5933502316474915
  },
  {
    "content": "Each entry in the Autonomous Power State Transition data structure is defined in Figure 328. Each entry\nis 64 bits in size. There is an entry for each of the allowable 32 power states. For power states that are not\nsupported, the unused Autonomous Power State Transition data structure entries shall be cleared to all\nzeroes. The entries begin with power state 0 and then increase sequentially (i.e., power state 0 is described\nin bytes 7:0, power state 1 is described in bytes 15:8, etc.). The data structure is 256 bytes in size and shall\nbe physically contiguous.\n\n**Figure 328: Autonomous Power State Transition – Data Structure Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 640,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3038",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5372679829597473
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|63:32|Reserved|\n|31:08|Idle Time Prior to Transition (ITPT): This field specifies the amount of idle time that occurs in<br>this power state prior to transitioning to the Idle Transition Power State. The time is specified in<br>milliseconds. A value of 0h disables the autonomous power state transition feature for this power<br>state.|\n|07:03|Idle Transition Power State (ITPS): This field specifies the power state to which the controller<br>autonomously transitions, after there is a continuous period of idle time in the current power state<br>that exceeds the time specified in the Idle Time Prior to Transition (ITPT) field. If the ITPT field is<br>set to a non-zero value, then the state specified in this field shall be a non-operational state as<br>described in Figure 276. This field should not specify a power state with higher reported idle power<br>than the current power state. If the ITPT field is cleared to 0h, then this field should be cleared to<br>0h.|\n|02:00|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1019,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3039",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5366339087486267
  },
  {
    "content": "The Autonomous Power State Transition feature may interact with the Non-Operational Power State Config\nfeature (refer to section 5.27.1.14). Figure 329 shows these interactions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 177,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3040",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09259498864412308
  },
  {
    "content": "**Figure 329: Interactions between APSTE and NOPPME**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3041",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4611702263355255
  },
  {
    "content": "|1<br>APSTE|2<br>NOPPME|Non-operational power state entry|Background operations during<br>non-operational power states|\n|---|---|---|---|\n|1|1|3 4<br>Entered by host request or by ITPT idle timer|Allowed|\n|0|1|3<br>Entered by host request|Allowed|\n|1|0|3 4<br>Entered by host request or by ITPT idle timer|Not allowed|\n|0|0|3<br>Entered by host request|Not allowed|\n|Notes:<br>1. Defined in Figure 327.<br>2. Defined in Figure 343.<br>3. Refer to section 5.27.1.2.<br>4. Refer to Figure 328.|Notes:<br>1. Defined in Figure 327.<br>2. Defined in Figure 343.<br>3. Refer to section 5.27.1.2.<br>4. Refer to Figure 328.|Notes:<br>1. Defined in Figure 327.<br>2. Defined in Figure 343.<br>3. Refer to section 5.27.1.2.<br>4. Refer to Figure 328.|Notes:<br>1. Defined in Figure 327.<br>2. Defined in Figure 343.<br>3. Refer to section 5.27.1.2.<br>4. Refer to Figure 328.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 867,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3042",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2955331802368164
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3043",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2898671627044678
  },
  {
    "content": "**5.27.1.10 Host Memory Buffer (Feature Identifier 0Dh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3044",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6403407454490662
  },
  {
    "content": "This Feature controls the Host Memory Buffer. The attributes are specified in Command Dword 11,\nCommand Dword 12, Command Dword 13, Command Dword 14, and Command Dword 15.\n\nThe Host Memory Buffer feature provides a mechanism for the host to allocate a portion of host memory\nfor the exclusive use of the controller. After a successful completion of a Set Features command enabling\nthe host memory buffer, the host shall not write to:\n\na) The Host Memory Descriptor List (refer to Figure 335); and\nb) the associated host memory region (i.e., the memory regions described by the Host Memory",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 588,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3045",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5864295959472656
  },
  {
    "content": "until the host memory buffer has been disabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3046",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6722792983055115
  },
  {
    "content": "If the host memory buffer is enabled, then a Set Features command to enable the host memory buffer (i.e.,\nthe EHM bit (refer to Figure 330) set to ‘1’) shall abort with a status code of Command Sequence Error.\n\nIf the host memory buffer is not enabled, then a Set Features command to disable the host memory buffer\n(i.e., the EHM bit (refer to Figure 330) cleared to ‘0’) shall succeed without taking any action.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 412,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3047",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.606105387210846
  },
  {
    "content": "After a successful completion of a Set Features command that disables the host memory buffer, the\ncontroller shall not access any data in the host memory buffer until the host memory buffer has been\nenabled. The controller should retrieve any necessary data from the host memory buffer in use before\nposting the completion queue entry for the Set Features command that disables the host memory buffer.\nPosting of the completion queue entry for the Set Features command that disables the host memory buffer\nacknowledges that it is safe for the host software to modify the host memory buffer contents. Refer to\nsection 8.9.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 621,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3048",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4477551579475403
  },
  {
    "content": "**Figure 330: Host Memory Buffer – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3049",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5989930033683777
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:02|Reserved|\n|01|Memory Return (MR): If set to ‘1’, then the host is returning memory previously allocated to the<br>controller for use as the host memory buffer (HMB). That memory may have been in use for the<br>HMB prior to a reset or entering the Runtime D3 state (e.g., prior to the HMB being disabled). A<br>returned host memory buffer shall have the exact same size, descriptor list address, descriptor list<br>contents, and host memory buffer contents as last seen by the controller before the host memory<br>buffer was disabled (i.e., a Set Features command with the EHM bit cleared to '0' was processed).<br>If cleared to ‘0’, then the host is allocating host memory resources with undefined content.|\n|00|Enable Host Memory (EHM): If set to ‘1’, then the host memory buffer shall be enabled and the<br>controller may use the host memory buffer. If cleared to ‘0’, then the host memory buffer shall be<br>disabled, and the controller shall not use the host memory buffer.<br>If a Set Features command is processed with this bit cleared to ‘0’, then the controller shall ignore<br>Command Dword 12, Command Dword 13, Command Dword 14, and Command Dword 15.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1198,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3050",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5975432395935059
  },
  {
    "content": "**Figure 331: Host Memory Buffer – Command Dword 12**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3051",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5630106925964355
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Host Memory Buffer Size (HSIZE): This field specifies the size of the host memory buffer<br>allocated in memory page size (CC.MPS) units.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 174,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3052",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3104017376899719
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3053",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18058465421199799
  },
  {
    "content": "**Figure 332: Host Memory Buffer– Command Dword 13**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3054",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5217990279197693
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Host Memory Descriptor List Lower Address (HMDLLA): This field specifies the least<br>significant 32 bits of the physical location of the Host Memory Descriptor List (refer to Figure 335)<br>for the Host Memory Buffer. This address shall be 16 byte aligned, indicated by bits 3:0 being<br>cleared to 0h.<br>NOTE: The controller shall operate as if bits 3:0 are cleared to 0h. However, the controller is not<br>required to check that bits 3:0 are cleared to 0h.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 497,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3055",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5535171031951904
  },
  {
    "content": "**Figure 333: Host Memory Buffer – Command Dword 14**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3056",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.579409122467041
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Host Memory Descriptor List Upper Address (HMDLUA): This field specifies the most<br>significant 32 bits of the physical location of the Host Memory Descriptor List for the Host Memory<br>Buffer.|\n\nThe Host Memory Descriptor List Address (HMDLLA/HMDLUA) specifies the address of a physically\ncontiguous data structure in host memory that describes the address and length pairs of the Host Memory\nBuffer. The number of address and length pairs is specified in the Host Memory Descriptor List Entry Count\nin Figure 334. The Host Memory Descriptor List is described in Figure 335.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 613,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3057",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6079378724098206
  },
  {
    "content": "**Figure 334: Host Memory Buffer – Command Dword 15**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3058",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16469824314117432
  },
  {
    "content": "**Bi** **ts** **D** **esc** **ri** **pt** **i** **o** **n**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3059",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1872585266828537
  },
  {
    "content": "**Host Memory Descriptor List Entry Count (HMDLEC):** This field specifies the number of entries\n31:00\np r o vi ded in t h e H ost M e m o r y D esc ri pto r Li st .",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3060",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6639794111251831
  },
  {
    "content": "**Figure 335: Host Memory Buffer – Host Memory Descriptor List**\n\n|Bytes|Description|\n|---|---|\n|15:0|Host Memory Buffer Descriptor (refer to Figure 336) Entry 0|\n|31:16|Host Memory Buffer Descriptor Entry 1|\n|47:32|Host Memory Buffer Descriptor Entry 2|\n|63:48|Host Memory Buffer Descriptor Entry 3|\n|…|…|\n|16*n+15:16*n|Host Memory Buffer Descriptor Entry n (where n = HMDLEC - 1 (refer to Figure 334))|\n\nEach Host Memory Buffer Descriptor Entry shall describe a host memory address in memory page size\nunits and the number of contiguous memory page size units associated with the host address.\n\n**Figure 336: Host Memory Buffer – Host Memory Buffer Descriptor Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 669,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3061",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26824048161506653
  },
  {
    "content": "**Bi** **ts** **D** **esc** **ri** **pt** **i** **o** **n**\n127: 96 R ese rv ed",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3062",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28439441323280334
  },
  {
    "content": "**Buffer Size (BSIZE):** Indicates the number of contiguous memory page size (CC.MPS) units for\n95:64\nt hi s desc ri pto r.\n\n**Buffer Address (BADD):** Indicates the host memory address for this descriptor aligned to the\nmemory page size (CC.MPS). The least significant bits ( *n* :0) of this field indicate the offset within\nthe memory page is 0h (e.g., if the memory page size is 4 KiB, then bits 11:00 shall be 0h; if the\nm e m o r y page s iz e i s 8 KiB, t h e n b i ts 12: 00 s h a ll be 0 h ) .",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 501,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3063",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5284596085548401
  },
  {
    "content": "If a Get Features command is issued for this Feature, the attributes specified in Figure 337 are returned in\nDword 0 of the completion queue entry and the Host Memory Buffer Attributes data structure, whose\nstructure is defined in Figure 338, is returned in the data buffer for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 291,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3064",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2333071231842041
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3065",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2755647301673889
  },
  {
    "content": "**Figure 337: Host Memory Buffer – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3066",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5044713020324707
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|00|Enable Host Memory (EHM): If set to ‘1’, then the host memory buffer is enabled and the<br>controller may use the host memory buffer. If cleared to ‘0’, then the host memory buffer is<br>disabled, and the controller is not using the host memory buffer.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 303,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3067",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5363050103187561
  },
  {
    "content": "**Figure 338: Host Memory Buffer – Attributes Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3068",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6975472569465637
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|3:0|Host Memory Buffer Size (HSIZE): This field indicates the size of the host memory buffer<br>allocated in memory page size units.|\n|7:4|Host Memory Descriptor List Address Lower (HMDLAL): This field indicates the least<br>significant 32 bits of the physical location of the Host Memory Descriptor List (refer to Figure<br>335) for the host memory buffer. This address shall be 16 byte aligned. The least significant 4<br>bits shall be cleared to ‘0’.|\n|11:8|Host Memory Descriptor List Address Upper (HMDLAU): This field indicates the most<br>significant 32 bits of the physical location of the Host Memory Descriptor List (refer to Figure<br>335) for the host memory buffer.|\n|15:12|Host Memory Descriptor List Entry Count (HMDLEC): This field indicates the number of valid<br>Host Memory Descriptor Entries (refer to Figure 336) in the Host Memory Descriptor List (refer<br>to Figure 335).|\n|4095:16|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 945,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3069",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14324606955051422
  },
  {
    "content": "**5.27.1.11 Timestamp (Feature Identifier 0Eh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3070",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4524805545806885
  },
  {
    "content": "The Feature enables the host to set a timestamp value in the controller. A controller indicates support for\nthe Timestamp feature through the Optional NVM Command Support (ONCS) field in the Identify Controller\ndata structure. The Timestamp field value (refer to Figure 339) in a Set Features command sets a timestamp\nvalue in the controller. After the current value for this Feature is set, the controller updates that value as\ntime passes. A Get Features command that requests the current value reports the timestamp value in the\ncontroller at the time the Get Features command is processed (e.g., the value set with a Set Features\ncommand for the current value plus the elapsed time since being set).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 703,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3071",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5898512601852417
  },
  {
    "content": "Note: If the Timestamp feature is saveable (refer to Figure 195) and the host saves a value, then the\ntimestamp value restored after a subsequent power on or reset event is the value that was saved (refer to\nsection 4.2). As a result, the timestamp may appear to move backwards in time.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 286,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3072",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5976351499557495
  },
  {
    "content": "The accuracy of a Timestamp value after initialization may be affected by vendor specific factors, such as\nwhether the controller continuously counts after the timestamp is initialized, or whether the controller stops\ncounting during certain intervals (e.g., non-operational power states). If the controller stops counting during\nsuch intervals, then the Synch bit in the Timestamp – Data Structure for Get Features (refer to Figure 340)\nshall be set to ‘1’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 458,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3073",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6329241991043091
  },
  {
    "content": "If the controller maintains (i.e., continues to update) the timestamp value across any type of Controller Level\nReset (e.g., across a Controller Reset), then the controller shall also preserve the Timestamp Origin field\n(refer to Figure 340) across that type of Controller Level Reset.\n\nIf the controller does not maintain the value of the timestamp across the most recent Controller Level Reset,\nthen the Timestamp field is cleared to 0h due to that Controller Level Reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 474,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3074",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49913057684898376
  },
  {
    "content": "Timestamp values should not be used for security applications. Other application use of the Timestamp\nfeature is outside the scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3075",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4433864653110504
  },
  {
    "content": "If a Set Features command is issued for this Feature, the data structure specified in Figure 339 is transferred\nin the data buffer for that command, specifying the Timestamp value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 180,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3076",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11917521059513092
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3077",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15186209976673126
  },
  {
    "content": "**Figure 339: Timestamp – Data Structure for Set Features**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3078",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5013837218284607
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|05:00|Timestamp: Number of milliseconds that have elapsed since midnight, 01-Jan-1970, UTC.|\n|07:06|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3079",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2151489555835724
  },
  {
    "content": "If a Get Features command is issued for this Feature, the data structure specified in Figure 340 is returned\nin the data buffer for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 145,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3080",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6848734021186829
  },
  {
    "content": "**Figure 340: Timestamp – Data Structure for Get Features**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3081",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48061349987983704
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|000b|The Timestamp field was initialized to 0h by a Controller Level<br>Reset.|\n|001b|The Timestamp field was initialized with a Timestamp value using<br>a Set Features command.|\n|010b to 111b|Reserved|\n\n|Value|Definition|\n|---|---|\n|0|The controller counted time in milliseconds continuously since the<br>Timestamp value was initialized.|\n|1|The controller may have stopped counting during vendor specific<br>intervals after the Timestamp value was initialized (e.g., non-operational<br>power states).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 533,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3082",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.57391756772995
  },
  {
    "content": "|Bytes|Description|Col3|Col4|Col5|Col6|\n|---|---|---|---|---|---|\n|05:00|Timestamp:<br>If the Timestamp Origin field cleared to 000b, then this field is set to the time in milliseconds since the last<br>Controller Level Reset.<br>If the Timestamp Origin field is set to 001b, then this field is set to the last Timestamp value set by the host, plus<br>the time in milliseconds since the Timestamp was set. If the sum of the Timestamp value set by the host and the<br>elapsed time exceeds 2^48, the value returned should be reduced modulo 2^48.<br>If the Synch bit is set to ‘1’, then the Timestamp value may be reduced by vendor specific time intervals not<br>counted by the controller.|Timestamp:<br>If the Timestamp Origin field cleared to 000b, then this field is set to the time in milliseconds since the last<br>Controller Level Reset.<br>If the Timestamp Origin field is set to 001b, then this field is set to the last Timestamp value set by the host, plus<br>the time in milliseconds since the Timestamp was set. If the sum of the Timestamp value set by the host and the<br>elapsed time exceeds 2^48, the value returned should be reduced modulo 2^48.<br>If the Synch bit is set to ‘1’, then the Timestamp value may be reduced by vendor specific time intervals not<br>counted by the controller.|Timestamp:<br>If the Timestamp Origin field cleared to 000b, then this field is set to the time in milliseconds since the last<br>Controller Level Reset.<br>If the Timestamp Origin field is set to 001b, then this field is set to the last Timestamp value set by the host, plus<br>the time in milliseconds since the Timestamp was set. If the sum of the Timestamp value set by the host and the<br>elapsed time exceeds 2^48, the value returned should be reduced modulo 2^48.<br>If the Synch bit is set to ‘1’, then the Timestamp value may be reduced by vendor specific time intervals not<br>counted by the controller.|Timestamp:<br>If the Timestamp Origin field cleared to 000b, then this field is set to the time in milliseconds since the last<br>Controller Level Reset.<br>If the Timestamp Origin field is set to 001b, then this field is set to the last Timestamp value set by the host, plus<br>the time in milliseconds since the Timestamp was set. If the sum of the Timestamp value set by the host and the<br>elapsed time exceeds 2^48, the value returned should be reduced modulo 2^48.<br>If the Synch bit is set to ‘1’, then the Timestamp value may be reduced by vendor specific time intervals not<br>counted by the controller.|Timestamp:<br>If the Timestamp Origin field cleared to 000b, then this field is set to the time in milliseconds since the last<br>Controller Level Reset.<br>If the Timestamp Origin field is set to 001b, then this field is set to the last Timestamp value set by the host, plus<br>the time in milliseconds since the Timestamp was set. If the sum of the Timestamp value set by the host and the<br>elapsed time exceeds 2^48, the value returned should be reduced modulo 2^48.<br>If the Synch bit is set to ‘1’, then the Timestamp value may be reduced by vendor specific time intervals not<br>counted by the controller.|\n|06||Bits|Attribute|Definition||\n|06||07:04|Reserved|Reserved|Reserved|\n|06||03:01|Timestamp<br>Origin|Value Definition<br>The Timestamp field was initialized to 0h by a Controller Level<br>000b<br>Reset.<br>The Timestamp field was initialized with a Timestamp value using<br>001b<br>a Set Features command.<br>010b to 111b Reserved|Value Definition<br>The Timestamp field was initialized to 0h by a Controller Level<br>000b<br>Reset.<br>The Timestamp field was initialized with a Timestamp value using<br>001b<br>a Set Features command.<br>010b to 111b Reserved|\n|06||00|Synch|Value Definition<br>The controller counted time in milliseconds continuously since the<br>0<br>Timestamp value was initialized.<br>The controller may have stopped counting during vendor specific<br>1 intervals after the Timestamp value was initialized (e.g., non-operational<br>power states).|Value Definition<br>The controller counted time in milliseconds continuously since the<br>0<br>Timestamp value was initialized.<br>The controller may have stopped counting during vendor specific<br>1 intervals after the Timestamp value was initialized (e.g., non-operational<br>power states).|\n|07|Reserved|Reserved|Reserved|Reserved|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 4358,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3083",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24438506364822388
  },
  {
    "content": "**5.27.1.12 Keep Alive Timer (Feature Identifier 0Fh)**\n\nThis Feature controls the Keep Alive Timer. Refer to section 3.9 for Keep Alive details. The attributes are\nspecified in Command Dword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 195,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3084",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20758625864982605
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 341 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3085",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17080362141132355
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3086",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08923684060573578
  },
  {
    "content": "**Figure 341: Keep Alive Timer – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3087",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40771910548210144
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Keep Alive Timeout (KATO): This field specifies the timeout value for the Keep Alive feature in<br>milliseconds. The controller rounds up the value specified to the granularity indicated in the KAS<br>field in the Identify Controller data structure. If cleared to 0h, then the Keep Alive Timer is disabled.<br>The default value for this field is 0h for NVMe transports that do not require use of the Keep Alive<br>feature (e.g., NVMe over PCIe). For NVMe transports that require use of the Keep Alive feature<br>(e.g., RDMA and TCP), the default value for this field is 1D4C0h (i.e., 120,000 milliseconds or 2<br>minutes) rounded up to the granularity indicated in the KAS field.<br>Refer to the applicable NVMe Transport Binding specification for details.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 793,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3088",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32982137799263
  },
  {
    "content": "**5.27.1.13 Host Controlled Thermal Management (Feature Identifier 10h)**\n\nThis feature configures the settings for the host controlled thermal management feature, refer to section\n8.15.5. The host controlled thermal management feature uses Command Dword 11 with the attributes\nshown in Figure 342.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 298,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3089",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18122388422489166
  },
  {
    "content": "If a Get Features command is submitted for this feature, then the attributes shown in Figure 342 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3090",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21491874754428864
  },
  {
    "content": "This feature is not namespace specific.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3091",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15178075432777405
  },
  {
    "content": "**Figure 342: HCTM – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3092",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22454339265823364
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Thermal Management Temperature 1 (TMT1): This field specifies the temperature, in Kelvins,<br>when the controller begins to transition to lower power active power states or performs vendor<br>specific thermal management actions while minimizing the impact on performance (e.g., light<br>throttling) in order to attempt to reduce the Composite Temperature.<br>A value cleared to 0h, specifies that this part of the Feature shall be disabled.<br>The range of values that are supported by the controller are indicated in the Minimum Thermal<br>Management Temperature field and Maximum Thermal Management Temperature field in the<br>Identify Controller data structure in Figure 275.<br>If the host attempts to set this field to a value less than the value contained in the Minimum Thermal<br>Management Temperature field or greater than the value contained in the Maximum Thermal<br>Management Temperature field in the Identify Controller data structure in Figure 275, then the<br>command shall abort with a status code of Invalid Field in Command.<br>If the host attempts to set this field to a value greater than or equal to the value contained in the<br>Thermal Management Temperature 2 field, if non-zero, then the command shall abort with a status<br>code of Invalid Field in Command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1322,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3093",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3007660210132599
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3094",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15313273668289185
  },
  {
    "content": "**Figure 342: HCTM – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3095",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21136823296546936
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15:00|Thermal Management Temperature 2 (TMT2): This field specifies the temperature, in Kelvins,<br>when the controller begins to transition to lower power active power states or perform vendor<br>specific thermal management actions regardless of the impact on performance (e.g., heavy<br>throttling) in order to attempt to reduce the Composite Temperature.<br>A value cleared to 0h, specifies that this part of the Feature shall be disabled.<br>The range of values that are supported by the controller are indicated in the Minimum Thermal<br>Management Temperature field and Maximum Thermal Management Temperature field in the<br>Identify Controller data structure in Figure 275.<br>If the host attempts to set this field to a value less than the value contained in the Minimum Thermal<br>Management Temperature field or greater than the value contained in the Maximum Thermal<br>Management Temperature field in the Identify Controller data structure in Figure 275, then the<br>command shall abort with a status code of Invalid Field in Command.<br>If the host attempts to set this field to a non-zero value less than or equal to the value contained<br>in the Thermal Management Temperature 1 field, then the command shall abort with a status code<br>of Invalid Field in Command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1311,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3096",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33582520484924316
  },
  {
    "content": "**5.27.1.14 Non-Operational Power State Config (Feature Identifier 11h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 73,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3097",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6308026909828186
  },
  {
    "content": "This Feature configures non-operational power state settings for the controller. The settings are specified\nin Command Dword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3098",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19077003002166748
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the values in Figure 343 are returned in Dword 0\nof the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3099",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31468066573143005
  },
  {
    "content": "**Figure 343: Non-Operational Power State Config – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3100",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46966317296028137
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|00|Non-Operational Power State Permissive Mode Enable (NOPPME): If this bit is set to ‘1’, then<br>the controller may temporarily exceed the power limits of any non-operational power state, up to<br>the limits of the last operational power state, to run controller initiated background operations in<br>that state (i.e., Non-Operational Power State Permissive Mode is enabled). If this bit is cleared to<br>‘0’, then the controller shall not exceed the limits of any non-operational state while running<br>controller initiated background operations in that state (i.e., Non-Operational Power State<br>Permissive Mode is disabled).<br>If Non-Operational Power State Permissive Mode is disabled, then:<br>a) thermal management that requires power (e.g., cooling fans) may be disabled; and<br>b) performance after resuming from the non-operational power state may be degraded until<br>background activity that was not allowed while in that non-operational power state has<br>completed.<br>If the host attempts to set this bit to ‘1’ and the controller does not support Non-Operational Power<br>State Permissive Mode as indicated in the Controller Attributes (CTRATT) field of the Identify<br>Controller data structure, then the controller shall abort the command with a status code of Invalid<br>Field in Command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1358,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3101",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4031684994697571
  },
  {
    "content": "The Non-Operational Power State Config feature may interact with the Autonomous Power State Transition\nfeature (refer to section 5.27.1.9). Figure 329 shows these interactions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 176,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3102",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18324270844459534
  },
  {
    "content": "**5.27.1.15 Read Recovery Level Config (Feature Identifier 12h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3103",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5285245180130005
  },
  {
    "content": "This Feature is used to configure the Read Recovery Level (refer to section 8.17). The attributes are\nspecified in Command Dword 11 and Command Dword 12. Modifying the Read Recovery Level has no\neffect on the data contained in any associated namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 252,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3104",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22041352093219757
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3105",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1448124796152115
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 345 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3106",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34882622957229614
  },
  {
    "content": "**Figure 344: Read Recovery Level Config – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3107",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24159130454063416
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|NVM Set Identifier (NVMSETID): This field specifies the NVM Set to be modified. If NVM Sets<br>are not supported, then this field is ignored and the command applies to all namespaces in the<br>NVM subsystem.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 261,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3108",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2545495629310608
  },
  {
    "content": "**Figure 345: Read Recovery Level Config – Command Dword 12**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3109",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5232232213020325
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:04|Reserved|\n|03:00|Read Recovery Level (RRL): This field sets the Read Recovery Level for the NVM Set specified.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 147,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3110",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17682380974292755
  },
  {
    "content": "**5.27.1.16 Predictable Latency Mode Config (Feature Identifier 13h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3111",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5899574756622314
  },
  {
    "content": "This Feature configures an NVM Set to use Predictable Latency Mode, including warning event thresholds.\nPredictable Latency Mode and events are disabled by default. The attributes are specified in Command\nDword 11, Command Dword 12, and the Deterministic Threshold Configuration data structure.\n\nThe NVM Set has transitioned to Predictable Latency Mode when the controller completes a Set Features\ncommand successfully with the Predictable Latency Enable bit in Command Dword 12 set to ‘1’. A transition\nto the Predictable Latency Mode may be delayed (i.e., the Set Features command completion is delayed)\nif the NVM subsystem needs to perform background operations on the NVM in order to operate in\nPredictable Latency Mode. Upon successful completion of this command, the controller shall be in the NonDeterministic Window.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 825,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3112",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4993603229522705
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 347 are returned\nin Dword 0 of the completion queue entry for that command and the Deterministic Threshold Configuration\ndata structure is returned.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 240,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3113",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36882510781288147
  },
  {
    "content": "**Figure 346: Predictable Latency Mode Config – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3114",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.327500581741333
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|NVM Set Identifier: This field specifies the NVM Set to be modified.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3115",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3377417325973511
  },
  {
    "content": "**Figure 347: Predictable Latency Mode Config – Command Dword 12**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3116",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.63006991147995
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|00|Predictable Latency Enable: If this bit is set to ‘1’, then Predictable Latency Mode (refer to section<br>8.16) is enabled for the NVM Set specified. If this bit is cleared to ‘0’, then Predictable Latency<br>Mode is disabled for the NVM Set specified.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 303,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3117",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6241761445999146
  },
  {
    "content": "Predictable Latency Events (refer to section 5.16.1.12) are configured as described in Figure 348.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3118",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11803413182497025
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3119",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2170039862394333
  },
  {
    "content": "**Figure 348: Predictable Latency Mode – Deterministic Threshold Configuration Data**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3120",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4160543382167816
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|00|DTWIN Reads Warning|\n|01|DTWIN Writes Warning|\n|02|DTWIN Time Warning|\n|03 to 13|Reserved|\n|14|Autonomous transition from DTWIN to NDWIN due to typical or maximum value<br>exceeded.|\n|15|Autonomous transition from DTWIN to NDWIN due to Deterministic Excursion.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 294,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3121",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7422109246253967
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Enable Event: This field specifies whether an entry shall be added to the Predictable Latency<br>Event Aggregate log page for the associated event. If a bit is set to ‘1’, then an entry shall be<br>added if the specified event occurs. If a bit is cleared to ‘0’, then an entry shall not be added if the<br>specified event occurs.<br>Bits Description<br>00 DTWIN Reads Warning<br>01 DTWIN Writes Warning<br>02 DTWIN Time Warning<br>03 to 13 Reserved<br>Autonomous transition from DTWIN to NDWIN due to typical or maximum value<br>14<br>exceeded.<br>15 Autonomous transition from DTWIN to NDWIN due to Deterministic Excursion.|\n|31:02|Reserved|\n|39:32|DTWIN Reads Threshold: If the value of DTWIN Reads Estimate falls below this value and the<br>DTWIN Reads Warning is enabled, then the ‘DTWIN Reads Warning’ event is set in the<br>Predictable Latency Per NVM Set log page for the affected NVM Set.|\n|47:40|DTWIN Writes Threshold: If the value of DTWIN Writes Estimate falls below this value and the<br>DTWIN Writes Warning is enabled, then the ‘DTWIN Writes Warning’ event is set in the<br>Predictable Latency Per NVM Set log page for the affected NVM Set.|\n|55:48|DTWIN Time Threshold: If the value of DTWIN Time Estimate falls below this value and the<br>DTWIN Time Warning is enabled, then the ‘DTWIN Time Warning’ event is set in the Predictable<br>Latency Per NVM Set log page for the affected NVM Set.|\n|511:56|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1462,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3122",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4904647469520569
  },
  {
    "content": "**5.27.1.17 Predictable Latency Mode Window (Feature Identifier 14h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3123",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3976607024669647
  },
  {
    "content": "This Feature is used to set the window for the specified NVM Set and its associated namespaces if the\nNVM Set is configured in Predictable Latency Mode (refer to section 8.16). The attributes are specified in\nCommand Dword 11 and Command Dword 12. If Predictable Latency Mode is not enabled, then the\ncontroller shall abort the command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 383,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3124",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4112585186958313
  },
  {
    "content": "The transition to the window selected is complete when the Set Features command completes successfully.\nA transition to the Deterministic Window may be delayed (i.e., the Set Features command completion is\ndelayed) if the minimum time has not been spent in the Non-Deterministic Window.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 286,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3125",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4682639241218567
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 350 are returned\nin Dword 0 of the completion queue entry for that command. If Predictable Latency Mode is not enabled,\nthen the controller shall abort the command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 303,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3126",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46456602215766907
  },
  {
    "content": "**Figure 349: Predictable Latency Mode Window – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3127",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27432867884635925
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|NVM Set Identifier: This field specifies the NVM Set to be modified.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3128",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2837483584880829
  },
  {
    "content": "**Figure 350: Predictable Latency Mode Window – Command Dword 12**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3129",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3479912281036377
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:03|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3130",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2256605178117752
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3131",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16664110124111176
  },
  {
    "content": "**Figure 350: Predictable Latency Mode Window – Command Dword 12**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3132",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4342224597930908
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|02:00|Window Select: This field selects or indicates the window used by all namespaces in the NVM<br>Set.<br>Value Definition<br>000b Reserved<br>001b Deterministic Window (DTWIN)<br>010b Non-Deterministic Window (NDWIN)<br>011b to 111b Reserved|\n\n|Value|Definition|\n|---|---|\n|000b|Reserved|\n|001b|Deterministic Window (DTWIN)|\n|010b|Non-Deterministic Window (NDWIN)|\n|011b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 422,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3133",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11949250847101212
  },
  {
    "content": "**5.27.1.18 Host Behavior Support (Feature Identifier 16h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3134",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4352159798145294
  },
  {
    "content": "This Feature enables use of controller functionality that is associated with and depends upon specific host\nbehavior that may or may not be supported by all hosts. A controller does not use such functionality unless\nthe host has indicated that the host supports the specific host behavior upon which the functionality\ndepends. The host indicates that support to the controller by setting a field in this Feature. That host action\nenables controller use of the associated functionality with that host. A controller shall not use functionality\nwith a host that has not indicated support for the associated specific host behavior upon which that controller\nfunctionality depends. The attributes in Figure 351 are transferred in the data buffer.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 741,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3135",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3123513162136078
  },
  {
    "content": "For example, the Command Interrupted status code is associated with and depends upon the specific host\nbehavior that the host is expected to retry commands that are aborted with that status code. That command\nretry behavior may or may not be supported by all hosts (e.g., hosts compliant with versions 1.3 and earlier\nof the NVM Express Base Specification are unlikely to retry commands aborted with the Command\nInterrupted status code as that status code was introduced after NVM Express Base Specification, Revision\n1.3). A host that supports that command retry behavior indicates its support to the controller by setting a\nfield to 1h in the Host Behavior Support Feature. Setting that field to 1h enables controller use of the\nCommand Interrupted status code, with the result that this status code is used only with hosts that have\nindicated support for the associated command retry behavior.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 896,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3136",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12557321786880493
  },
  {
    "content": "This Feature is not saveable (refer to Figure 195). The default value of this Feature shall be all bytes cleared\nto 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 119,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3137",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23763257265090942
  },
  {
    "content": "After a successful completion of a Set Features command for this Feature, the controller may use controllerto-host functionality that depends on specific host behavior as indicated by the attributes. If multiple Set\nFeatures commands for this Feature are processed by the controller, only information from the most recent\nsuccessful command is retained (i.e., subsequent commands replace information provided by previous\ncommands).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 431,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3138",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2615644633769989
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 351 are returned\nin the data buffer for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 145,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3139",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3406018316745758
  },
  {
    "content": "**Figure 351: Host Behavior Support – Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3140",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27206674218177795
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Advanced Command Retry Enable (ACRE): If set to 1h, then the Command Interrupted status<br>code is enabled (refer to Figure 94) and command retry delays are enabled. The controller may<br>use the Command Interrupted status code and may indicate a command retry delay by setting the<br>Command Retry Delay (CRD) field to a non-zero value in the Status field of a completion queue<br>entry, refer to Figure 92. A host that sets this field to 1h indicates host support for the command<br>retry behaviors that are specified for both the Command Interrupted status code and non-zero<br>values in the CRD field.<br>If cleared to 0h, then both the Command Interrupted status code and command retry delays are<br>disabled. The controller shall not use the Command Interrupted status code, and shall clear the<br>CRD field to 0h in all CQEs.<br>All values other than 0h and 1h are reserved.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 916,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3141",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11950226128101349
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3142",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31415948271751404
  },
  {
    "content": "**Figure 351: Host Behavior Support – Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3143",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3816821277141571
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01|Extended Telemetry Data Area 4 Supported (ETDAS): If set to 1h, then Telemetry Host-Initiated<br>Data Area 4 and Telemetry Controller-Initiated Data Area 4 are supported by the host. If bit 6 of<br>the Log Page Attributes field is set to ‘1’, then the controller may populate Telemetry Host-Initiated<br>Data Area 4 (refer to section 5.16.1.8) and the Telemetry Controller-Initiated Data Area 4 (refer to<br>section 5.16.1.9).<br>If cleared to 0h, then Telemetry Host-Initiated Data Area 4 and Telemetry Controller-Initiated Data<br>Area 4 are not supported by the host.<br>All values other than 0h and 1h are reserved.|\n|02|LBA Format Extension Enable (LBAFEE): I/O Command Set specific definition. Refer to the<br>applicable I/O Command Set specification for details.<br>All values other than 0h and 1h are reserved.|\n|511:03|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 871,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3144",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09717513620853424
  },
  {
    "content": "**5.27.1.19 Sanitize Config (Feature Identifier 17h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3145",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4151206612586975
  },
  {
    "content": "This Feature controls behavior of the Sanitize command and sanitize operations. The scope of this Feature\nis the NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3146",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3429551422595978
  },
  {
    "content": "The attributes are specified in Command Dword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3147",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5623416900634766
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 352 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3148",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.266438364982605
  },
  {
    "content": "If this Feature is not saveable (refer to Figure 195), then the default value of the NODRM attribute shall be\ncleared to ‘0’ (i.e., No-Deallocate Error Response Mode).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3149",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18863259255886078
  },
  {
    "content": "If the capabilities of the Sanitize Config Feature Identifier are both changeable and saveable (refer to\nsection 4.2), then the host is able to configure this Feature when initially provisioning a device.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 204,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3150",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4112876057624817
  },
  {
    "content": "**Figure 352: Sanitize Config – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3151",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3036407232284546
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|00|No-Deallocate Response Mode (NODRM): If the No-Deallocate Inhibited bit) is set to ‘1’ in the<br>Sanitize Capabilities field of the Identify Controller data structure (refer to Figure 275), then this bit<br>defines the response of the controller to a Sanitize command processed with the No-Deallocate<br>After Sanitize bit (refer to Figure 303) set to ‘1’.<br>If this bit is set to ‘1’ (i.e., No-Deallocate Warning Response Mode), then the controller shall<br>process such Sanitize commands, and if the resulting sanitize operation is completed successfully,<br>then bits 2:0 of the Sanitize Status field in the Sanitize Status log page shall be set to 100b (refer<br>to Figure 267).<br>If this bit is cleared to ‘0’ (i.e., No-Deallocate Error Response Mode), then the controller shall abort<br>such Sanitize commands with a status code of Invalid Field in Command.<br>If the No-Deallocate Inhibited bit in the Sanitize Capabilities field of the Identify Controller data<br>structure (refer to Figure 275) is cleared to ‘0’, then this bit has no effect.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1104,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3152",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08969281613826752
  },
  {
    "content": "**5.27.1.20 Endurance Group Event Configuration (Feature Identifier 18h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3153",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4806879758834839
  },
  {
    "content": "This Feature controls the events that trigger adding an Endurance Group Event Aggregate Log Change\nNotices event to the Endurance Group Event Aggregate log. This Feature may be used to disable reporting\nevents in the case of a persistent condition (refer to section 5.2). If the condition for an event is true when\nthe corresponding notice is enabled, then an event is sent to the host. The attributes are specified in\nCommand Dword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 436,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3154",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16305102407932281
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3155",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21635101735591888
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the Endurance Group Critical Warnings field in\nCommand Dword 11 is not used and the attributes specified in Figure 353 are returned in Dword 0 of the\ncompletion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 247,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3156",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31391072273254395
  },
  {
    "content": "**Figure 353: Asynchronous Event Configuration – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3157",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17574845254421234
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:24|Reserved|\n|23:16|Endurance Group Critical Warnings: This field determines whether an event entry for an<br>Endurance Group (refer to section 3.2.3) is added to the Endurance Group Event Aggregate log<br>page (refer to section 5.16.1.15) for the corresponding Critical Warning specified in the Endurance<br>Group Information log page (refer to Figure 217). If a bit is set to ‘1’, then an entry is added when<br>the corresponding critical warning bit is set to ‘1’ in the Endurance Group Information log page. If<br>a bit is cleared to ‘0’, then an entry is not added when the corresponding critical warning bit is set<br>to ‘1’ in the Endurance Group Information log page.|\n|15:00|Endurance Group Identifier (ENDGID): This field indicates the Endurance Group for which<br>asynchronous events are being configured. If this field is cleared to 0h, then the Endurance Group<br>Critical Warnings field is not used.|\n\nIf a bit is set to ‘1’ in the Endurance Group Critical Warnings field which corresponds to a reserved bit in the\nCritical Warning field of the Endurance Group Information log page (refer to Figure 217), then the Set\nFeatures command shall be aborted with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3158",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6452925801277161
  },
  {
    "content": "If the Endurance Group Identifier specifies an Endurance Group that does not exist, then the Set Features\nor Get Features command shall be aborted with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 194,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3159",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29384884238243103
  },
  {
    "content": "**5.27.1.21 I/O Command Set Profile (Feature Identifier 19h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3160",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32161542773246765
  },
  {
    "content": "This Feature specifies the I/O Command Sets that may be used by the controller when all supported I/O\nCommand Sets (110b) are selected in CC.CSS. This Feature shall be implemented if CAP.CSS bit 6 is set\nto ‘1’. When CC.CSS is set to any value other than 110b, then this Feature has no effect and the I/O\nCommand Sets that may be used by the controller are specified by CC.CSS. If CC.CSS is set to any value\nother than 110b and the controller receives a Set Features command for this Feature, then this command\nhas no effect and returns a status code of Successful Completion.\n\nWhen all supported I/O Command Sets (110b) is selected in CC.CSS, the value of this Feature specifies\nthe index of the I/O Command Set Combination in the Identify I/O Command Set data structure that is used.\nRefer to section 5.17.2.21 for more information. The Index is specified in the I/O Command Set Combination\nIndex field of Command Dword 11 (refer to Figure 354). If any namespace attached to the controller uses\nan I/O Command Set that is not supported by the specified I/O Command Set combination, then the\ncontroller shall abort the command with a status code of I/O Command Set Combination Rejected. Upon\nsuccessful completion of a Set Features command for this Feature, the controller transitions to using the\nspecified I/O Command Set Combination.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1337,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3161",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3842218518257141
  },
  {
    "content": "**Figure 354 I/O Command Set Profile – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3162",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45066797733306885
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:09|Reserved|\n|08:00|I/O Command Set Combination Index (IOCSCI): This field specifies the index of the I/O<br>Command Set Combination that is to be used. This field is used for the Set Features command<br>only and is ignored for the Get Features command for this Feature.<br>The controller shall abort a command that specifies an index that corresponds to an I/O Command<br>Set Combination that has a value of 0h with a status code of I/O Command Set Combination<br>Rejected.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 508,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3163",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32336708903312683
  },
  {
    "content": "If a Get Features command is submitted for this Feature, then the attributes described in Figure 355 are\nreturned in Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 172,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3164",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13648244738578796
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3165",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08841298520565033
  },
  {
    "content": "**Figure 355: I/O Command Set Profile – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3166",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3262960612773895
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:09|Reserved|\n|08:00|I/O Command Set Combination Index (IOCSCI): This field returns the index of the currently<br>selected I/O Command Set Combination.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 184,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3167",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.203039288520813
  },
  {
    "content": "**5.27.1.22 Spinup Control (Feature Identifier 1Ah)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3168",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40546271204948425
  },
  {
    "content": "This Feature allows the host to configure the method for initial spinup for Endurance Groups that store\ndata on rotational media (refer to section 8.20). The NVM subsystem is the scope for this feature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 202,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3169",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6248084306716919
  },
  {
    "content": "If the NVM subsystem does not contain any Endurance Groups that store data on rotational media, then\nthe controller shall abort the Set Features command and the Get Features command for this Feature with\nstatus code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 244,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3170",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24934765696525574
  },
  {
    "content": "The method is specified in Command Dword 11 (refer to Figure 356).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3171",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40497609972953796
  },
  {
    "content": "**Figure 356: Spinup Control – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3172",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5995281934738159
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|0|If set to ‘1’, then the Spinup Control feature is enabled. If cleared to ‘0’, then the Spinup Control<br>feature is disabled. The setting is persistent.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 202,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3173",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2001992017030716
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes described in (refer to Figure 357)\nare returned in Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 178,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3174",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5187695026397705
  },
  {
    "content": "**Figure 357: Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3175",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19638903439044952
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|0|If set to ‘1’, then the Spinup Control feature is enabled. If cleared to ‘0’, then the Spinup Control<br>feature is disabled.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 175,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3176",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2267601191997528
  },
  {
    "content": "**5.27.1.23 Host Metadata (Feature Identifier 7Dh), (Feature Identifier 7Eh), (Feature Identifier 7Fh)**\n\nThe Host Metadata features are the Enhanced Controller Metadata feature (Feature Identifier 7Dh), the\nController Metadata feature (Feature Identifier 7Eh), and the Namespace Metadata feature (Feature\nIdentifier 7Fh).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 322,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3177",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5079516172409058
  },
  {
    "content": "If a Get Features command specifying one of the Host Metadata features with the SEL field set to 011b\n(i.e., Supported Capabilities) is submitted, then the Saveable bit in Dword 0 of the corresponding completion\nqueue entry shall be cleared to ‘0’ (i.e., refer to section 4.2), and the Changeable bit in Dword 0 of the\ncorresponding completion queue entry shall be set to ‘1’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 376,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3178",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5119260549545288
  },
  {
    "content": "If a Get Features command specifying one of the Host Metadata features, the controller shall perform\nadditional actions specified in Figure 358.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 144,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3179",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4128563404083252
  },
  {
    "content": "**Figure 358: Get Features – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3180",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26446449756622314
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3181",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2223280370235443
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3182",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06333454698324203
  },
  {
    "content": "**Figure 358: Get Features – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3183",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15817704796791077
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|00|Generate Default Host Metadata (GDHM): If set to ‘1’, then the controller shall generate a<br>number of vendor specific strings for the Element Types of the specified Host Metadata feature<br>value.<br>If the generated vendor specific string’s Metadata Element Descriptor does not exist for the Host<br>Metadata Data Structure that contains the default value of the specified Host Metadata Feature<br>value, then the controller shall create the Metadata Element Descriptor in the Host Metadata Data<br>Structure that contains the default value with the generated vendor specific string.<br>If the generated vendor specific string’s Metadata Element Descriptor does exist for the Host<br>Metadata Data Structure that contains the default value of the specified Host Metadata Feature<br>value, then the controller shall replace the Metadata Element Descriptor with the generated vendor<br>specific string.<br>If the number of vendor specific strings generated is 0h, then the default value for the Number of<br>Metadata Element Descriptors for the specified Host Metadata feature shall be 0h. If the number<br>of vendor specific strings generated is not 0h, then the Host Metadata Data Structure that contains<br>the default value for the Number of Metadata Element Descriptors of the specified Host Metadata<br>Feature value shall be the number of vendor specific strings created.<br>If cleared to ‘0’, then the controller shall not generate any vendor specific strings for the Element<br>Types of the specified Host Metadata feature.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1567,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3184",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5001084208488464
  },
  {
    "content": "The host issues a Set Features command specifying one of the Host Metadata features containing a Host\nMetadata data structure (refer to Figure 360). The host receives a Host Metadata data structure via the Get\nFeatures command. The content of the strings in the Host Metadata data structure are vendor specific.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 311,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3185",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18836775422096252
  },
  {
    "content": "The Action is specified in Command Dword 11 as shown in Figure 359.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3186",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5039296746253967
  },
  {
    "content": "**Figure 359: Set Features – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3187",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33128273487091064
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:15|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3188",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22280335426330566
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3189",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06002426892518997
  },
  {
    "content": "**Figure 359: Set Features – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3190",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31174466013908386
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Add/Replace Entry|\n|01b|Delete Entry Multiple|\n|10b|Add Entry Multiple|\n|11b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 120,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3191",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4333629012107849
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|14:13|Element Action (EA): This field specifies the action to perform on the specified Host Metadata<br>Feature value for each Metadata Element Descriptor data structure contained in the Host<br>Metadata data structure.<br>Value Definition<br>00b Add/Replace Entry<br>01b Delete Entry Multiple<br>10b Add Entry Multiple<br>11b Reserved<br>If the Element Action field is cleared to 00b (Add/Replace Entry) and the Metadata Element<br>Descriptor with the specified Element Type (refer to Figure 361) does not exist in the specified<br>Host Metadata Feature value, then the Controller shall create the descriptor in the specified Host<br>Metadata Feature value with the value in the Host Metadata data structure.<br>If the Element Action field is cleared to 00b (Add/Replace Entry) and one Metadata Element<br>Descriptor with the specified Element Type exists in the specified Host Metadata Feature value,<br>then the Controller shall replace with the value in the specified Host Metadata data structure.<br>If the Element Action field is cleared to 00b (Add/Replace Entry) and the Feature Identifier field is<br>set to Enhanced Controller Metadata, then the controller shall abort the Set Features command<br>with a status code of Invalid Field in Command and shall not change any Host Metadata Feature<br>value.<br>If the Element Action field is set to 01b (Delete Entry Multiple), then the Controller shall delete all<br>the specified Metadata Element Descriptors from the specified Host Metadata Feature value, if<br>any. If none of the specified Metadata Element Descriptors are present in the specified Host<br>Metadata Feature value, then the controller shall complete the Set Features command with a<br>status code of Successful Completion and shall not change any Host Metadata Feature value.<br>If the Element Action field is set to 10b (Add Entry Multiple), the Feature Identifier field is set to<br>Enhanced Controller Metadata, and no Metadata Element Descriptor with the specified Element<br>Type exists in the Enhanced Controller Metadata Feature value, then the controller shall create<br>new Metadata Element Descriptors in the Enhanced Controller Metadata Feature value with the<br>Element Type and the value specified in the Host Metadata data structure.<br>If the Element Action field is set to 10b (Add Entry Multiple), the Feature Identifier field is set to<br>Enhanced Controller Metadata, and one or more Metadata Element Descriptors with the specified<br>Element Type exists in the Enhanced Controller Metadata Feature value, then the controller shall<br>add the specified Metadata Element to the Enhanced Controller Metadata Feature value and shall<br>not modify any existing Metadata Element Descriptors.<br>If the Element Action field is set to 10b (Add Entry Multiple) and the Feature Identifier field is not<br>set to Enhanced Controller Metadata, then the controller shall abort the Set Features command<br>with a status code of Invalid Field in Command and shall not change the Host Metadata Feature<br>value.|\n|12:00|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3086,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3192",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7060928344726562
  },
  {
    "content": "Metadata Element Descriptors may be added, replaced, or deleted based on the action specified in the\nElement Action field. Modification of the Host Metadata Feature value shall be performed by the controller\nin an atomic manner.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 228,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3193",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6809611320495605
  },
  {
    "content": "If a Set Features command is submitted for a Host Metadata Feature, a Host Metadata data structure,\ndefined in Figure 360, is transferred in the data buffer for the command. The Host Metadata data structure\nis 4 KiB in size and contains zero or more Metadata Element Descriptors. If host software attempts to add\nor replace a Metadata Element that causes the Host Metadata Feature value of the specified feature to\ngrow larger than 4 KiB, then the controller shall abort the command with a status code of Invalid Field in\nCommand.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 530,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3194",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15704165399074554
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3195",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14276744425296783
  },
  {
    "content": "If the host receives a Host Metadata data structure via the Get Features command, then all of the Metadata\nElement Descriptors present for the specified feature are added to a Host Metadata data structure (refer to\nFigure 360) and returned in the data buffer for that command. The data buffer size is equal to the size of\nthe Host Metadata data structure that is 4 KiB in size.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 377,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3196",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.552202045917511
  },
  {
    "content": "**Figure 360: Host Metadata Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3197",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.511768102645874
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Number of Metadata Element Descriptors: This field contains the number of Metadata Element<br>descriptors in the data structure.|\n|01|Reserved|\n|x:02|Metadata Element Descriptor 0: This field contains the first Metadata Element descriptor or 0h<br>if there are no entries.|\n|y:x+1|Metadata Element Descriptor 1: This field contains the second Metadata Element descriptor or<br>0h if there is only 1 entry.|\n|…|…|\n|4095:z|Metadata Element Descriptor N: This field contains the (N+1)th Metadata Element descriptor or<br>0h if there are fewer than N+1 entries.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 592,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3198",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5697068572044373
  },
  {
    "content": "If the Feature Identifier field specifies Controller Metadata or Namespace Metadata, then the Host Metadata\ndata structure may contain at most one Metadata Element Descriptor of each Element Type. If the Feature\nIdentifier field specifies Enhanced Controller Metadata, then a Host Metadata data structure may contain\nmore than one Metadata Element Descriptor of each Element Type. Each Metadata Element Descriptor\ncontains the data structure shown in Figure 361.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 462,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3199",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42988258600234985
  },
  {
    "content": "**Figure 361: Metadata Element Descriptor**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3200",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29023948311805725
  },
  {
    "content": "|Bit|Description|\n|---|---|\n|31 + (Element<br>Length*8) :32|Element Value (EVAL): This field specifies the value for the element.|\n|31:16|Element Length (ELEN): This field specifies the length of the Element Value field in<br>bytes. This field shall be cleared to 0h when deleting an entry (i.e., the EA field is set to<br>01b in Command Dword 11). This field should be non-zero when adding/updating an<br>entry (i.e., the EA field is cleared to 00b). If this field is cleared to 0h when<br>adding/updating an entry, then the controller behavior is undefined.|\n|15:12|Reserved|\n|11:08|Element Revision (ER): This field specifies the revision of this element value. Unless<br>specified otherwise elsewhere in this specification, all Metadata Element Descriptors<br>shall clear this field to 0h.|\n|07:05|Reserved|\n|04:00|Element Type (ET): This field specifies the type of metadata stored in the descriptor.<br>Value Definition<br>00h Reserved<br>Element Types defined by this specification. Enhanced<br>Controller Metadata Element and Controller Metadata Element<br>01h to 17h<br>types are defined in Figure 362. Namespace Metadata Element<br>types are defined in Figure 363.<br>18h to 1Fh Vendor Specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3201",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40905144810676575
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00h|Reserved|\n|01h to 17h|Element Types defined by this specification. Enhanced<br>Controller Metadata Element and Controller Metadata Element<br>types are defined in Figure 362. Namespace Metadata Element<br>types are defined in Figure 363.|\n|18h to 1Fh|Vendor Specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 301,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3202",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5386444926261902
  },
  {
    "content": "**5.27.1.23.1 Enhanced Controller Metadata (Feature Identifier 7Dh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3203",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3221362233161926
  },
  {
    "content": "This feature is used to store metadata about the host platform in an NVM subsystem for later retrieval.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3204",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.486023485660553
  },
  {
    "content": "The metadata element types defined in Figure 362 are used by this feature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3205",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6742810606956482
  },
  {
    "content": "**Figure 362: Controller Metadata Element Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3206",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23419679701328278
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00h|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3207",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22674857079982758
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3208",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20978471636772156
  },
  {
    "content": "**Figure 362: Controller Metadata Element Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3209",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3575281798839569
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|01h|Operating System Controller Name: The name of the controller in the operating system as a UTF-8 string.|\n|02h|Operating System Driver Name: The name of the driver in the operating system as a UTF-8 string.|\n|03h|Operating System Driver Version: The version of the driver in the operating system as a UTF-8 string.|\n|04h|Pre-boot Controller Name: The name of the controller in the pre-boot environment as a UTF-8 string.|\n|05h|Pre-boot Driver Name: The name of the driver in the pre-boot environment as a UTF-8 string.|\n|06h|Pre-boot Driver Version: The version of the driver in the pre-boot environment as a UTF-8 string.|\n|07h|System Processor Model: The model of the processor as a UTF-8 string.|\n|08h|Chipset Driver Name: The chipset driver name as a UTF-8 string.|\n|09h|Chipset Driver Version: The chipset driver version as a UTF-8 string.|\n|0Ah|Operating System Name and Build: The operating system name and build as a UTF-8 string.|\n|0Bh|System Product Name: The system product name as a UTF-8 string.|\n|0Ch|Firmware Version: The host firmware (e.g., UEFI) version as a UTF-8 string.|\n|0Dh|Operating System Driver Filename: The operating system driver filename as a UTF-8 string.|\n|0Eh|Display Driver Name: The display driver name as a UTF-8 string.|\n|0Fh|Display Driver Version: The display driver version as a UTF-8 string.|\n|10h|Host-Determined Failure Record: A failure record (e.g., the reason the host has flagged a failure for an<br>NVMe Storage Device (refer to the NVM Express Management Interface Specification) FRU which may be<br>used for failure analysis) as a UTF-8 string.|\n|11h to 17h|Reserved|\n|18h to 1Fh|Vendor Specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1679,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3210",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2796515226364136
  },
  {
    "content": "Refer to section 5.27.1.23 for the definitions of Command Dword 11 and the Host Metadata Data Structure *.*",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 107,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3211",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34217751026153564
  },
  {
    "content": "The default value for the Number of Metadata Element Descriptors of the Enhanced Controller Metadata\nFeature shall be 0h on a Controller Level Reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 149,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3212",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5445399284362793
  },
  {
    "content": "If a Get Features command with the SEL field set to 011b (i.e., Supported Capabilities) with the\nEnhanced Controller Metadata Feature value is submitted, then the NS Specific bit in Dword 0 of the\ncorresponding completion queue entry shall be cleared to ‘0’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 258,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3213",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4230905771255493
  },
  {
    "content": "**5.27.1.23.2 Controller Metadata (Feature Identifier 7Eh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3214",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2667120695114136
  },
  {
    "content": "This feature is used to store metadata about the host platform in an NVM subsystem for later retrieval.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3215",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5181267857551575
  },
  {
    "content": "The Controller Metadata Feature provides backward compatibility with Management Controllers (refer to\nthe NVM Express Management Interface Specification) compliant with version 1.1 and earlier versions of\nthe NVM Express Management Interface Specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 256,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3216",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5314323306083679
  },
  {
    "content": "If a controller supports both the Enhanced Controller Metadata Feature and the Controller Metadata\nFeature, then the Controller Metadata Feature should not be used by the host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 176,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3217",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22711731493473053
  },
  {
    "content": "The metadata element types defined in Figure 362 are used by this feature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3218",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37535572052001953
  },
  {
    "content": "Refer to section 5.27.1.23 for the definitions of Command Dword 11 and the Host Metadata Data",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3219",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5656185746192932
  },
  {
    "content": "If a Set Features command’s Element Action field of Command Dword 11 is set to 10b (Add Entry Multiple),\nthen the controller shall abort the command with a status code of Invalid Field in Command and shall not\nchange the Host Metadata Feature value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 249,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3220",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5219395756721497
  },
  {
    "content": "The default value for the Number of Metadata Element Descriptors of the Controller Metadata Feature\nshall be 0h on a Controller Level Reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3221",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5125342011451721
  },
  {
    "content": "If a Get Features command with the SEL field set to 011b (i.e., Supported Capabilities) with the Controller\nMetadata Feature value is submitted, then the NS Specific bit in Dword 0 of the corresponding completion\nqueue entry shall be cleared to ‘0’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 249,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3222",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17555685341358185
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3223",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2526083290576935
  },
  {
    "content": "**5.27.1.23.3 Namespace Metadata (Feature Identifier 7Fh)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3224",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4056592285633087
  },
  {
    "content": "This feature is used to store metadata about a namespace associated with a controller in the NVM\nsubsystem for later retrieval. This feature is namespace specific. The Add Entry Multiple action is prohibited\nfor this feature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3225",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38109290599823
  },
  {
    "content": "**Figure 363: Namespace Metadata Element Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3226",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3608236610889435
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00h|Reserved|\n|01h|Operating System Namespace Name: The name of the namespace in the operating system as<br>a UTF-8 string.|\n|02h|Pre-boot Namespace Name: The name of the namespace in the pre-boot environment as a UTF-<br>8 string.|\n|03h|Operating System Namespace Name Qualifier 1: The first qualifier of the Operating System<br>Namespace Name as a UTF-8 string.|\n|04h|Operating System Namespace Name Qualifier 2: The second qualifier of the Operating System<br>Namespace Name as a UTF-8 string.|\n|05h to 17h|Reserved|\n|18h to 1Fh|Vendor Specific|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 578,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3227",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4284246861934662
  },
  {
    "content": "Refer to section 5.27.1.23 for the definitions of Command Dword 11 and the Host Metadata Data Structure *.*",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 107,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3228",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.418493390083313
  },
  {
    "content": "If a Get Features command with the SEL field set to 011b (i.e., Supported Capabilities) with the Namespace\nMetadata Feature value is submitted, then the NS Specific bit in Dword 0 of the corresponding completion\nqueue entry shall be set to ‘1’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 244,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3229",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2415439635515213
  },
  {
    "content": "**5.27.1.24 Software Progress Marker (Feature Identifier 80h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3230",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6431173086166382
  },
  {
    "content": "This Feature is a software progress marker. The software progress marker is persistent across power\nstates. This information may be used to indicate to an OS software driver whether there have been issues\nwith the OS successfully loading. The attributes are specified in Command Dword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 288,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3231",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40391963720321655
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 364 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3232",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4164935052394867
  },
  {
    "content": "**Figure 364: Software Progress Marker – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3233",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31175532937049866
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:08|Reserved|\n|07:00|Pre-boot Software Load Count (PBSLC): Indicates the load count of pre-boot software. After<br>successfully loading and initializing the controller, pre-boot software should set this field to one<br>more than the previous value of the Pre-boot Software Load Count. If the previous value is 255,<br>then the value should not be updated by pre-boot software (i.e., the value does not wrap to 0). OS<br>driver software should set this field to 0h after the OS has successfully been initialized.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 544,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3234",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23761743307113647
  },
  {
    "content": "**5.27.1.25 Host Identifier (Feature Identifier 81h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3235",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4396946430206299
  },
  {
    "content": "This feature allows the host to register a Host Identifier with the controller. The Host Identifier is used by\nthe controller to determine whether other controllers in the NVM subsystem are associated with the same\nhost. The Host Identifier may be used to designate host elements that access an NVM subsystem\nindependently of each other or for reservations.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 357,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3236",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6436487436294556
  },
  {
    "content": "The Host Identifier is contained in the data structure indicated in Figure 366. The attributes are specified in\nCommand Dword 11. If a Get Features command is issued for this Feature, the data structure specified in\nFigure 366 is returned in the data buffer for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 275,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3237",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5204476118087769
  },
  {
    "content": "The requirements and use of the Host Identifier feature is dependent on whether the NVMe over PCIe\nimplementation or NVMe over Fabrics implementation are supported. Refer to section 5.27.1.25.1 and\nsection 5.27.1.25.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 218,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3238",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5061324238777161
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3239",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15902554988861084
  },
  {
    "content": "**Figure 365: Host Identifier – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3240",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40773850679397583
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|00|Enable Extended Host Identifier (EXHID): If set to ‘1’, then the host is requesting the use of an<br>extended 128-bit Host Identifier. If cleared to ‘0’, then the host is requesting the use of a 64-bit<br>Host Identifier. NVMe over Fabrics implementations shall use an extended 128-bit Host Identifier.<br>If the controller does not support a 128-bit Host Identifier as indicated in the Controller Attributes<br>field in the Identify Controller data structure and the host sets this bit to ‘1’, then a status code of<br>Invalid Field in Command shall be returned.<br>If the controller does not support a 64-bit Host Identifier (e.g., the device is an NVMe over Fabrics<br>device) and the host clears this bit to ‘0’, then a status code of Invalid Field in Command shall be<br>returned.<br>If the NVM subsystem supports a 64-bit Host Identifier, supports a 128-bit Host Identifier and<br>detects that another controller in the NVM subsystem is already using a non-zero Host Identifier<br>of a different size than the size requested in this command, then a status code of Host Identifier<br>Inconsistent Format shall be returned.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1178,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3241",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4898167848587036
  },
  {
    "content": "**Figure 366: Host Identifier – Data Structure Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3242",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5767349600791931
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|15:00|Host Identifier (HOSTID): This field specifies a 64-bit or 128-bit identifier that uniquely identifies<br>the host associated with the controller within the NVM subsystem. The host provides an 8 byte or<br>16 byte data structure depending on the value specified in the Enable Extended Host Identifier bit.<br>The value of the Host Identifier used by a host, the method used to select this value, and the<br>method used to ensure uniqueness are outside the scope of this specification. Controllers in an<br>NVM subsystem that have the same Host Identifier are assumed to be associated with the same<br>host and have the same reservation and registration rights.<br>A Host Identifier value of 0h indicates that the host is not associated with any other controller in<br>the NVM subsystem.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 824,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3243",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2812240421772003
  },
  {
    "content": "**5.27.1.25.1 PCIe Transport Implementations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3244",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40812546014785767
  },
  {
    "content": "The Host Identifier is an optional feature when implemented on a controller using a PCIe transport. The\ncontroller may support a 64-bit Host Identifier and/or an extended 128-bit Host Identifier. It is recommended\nthat implementations support the extended 128-bit Host Identifier as indicated in the Controller Attributes\nfield in the Identify Controller data structure. The Host Identifier may be modified at any time using a Set\nFeatures command causing the controller to be logically remapped from the original host associated with\nthe old Host Identifier to a new host associated with the new Host Identifier.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 613,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3245",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6083940863609314
  },
  {
    "content": "A Host Identifier value of 0h is a valid value that indicates that the host associated with the controller is not\nassociated with any other controller in the NVM subsystem. Specifically, two controllers in an NVM\nsubsystem that both have a Host Identifier of 0h indicates that the controllers are associated with different\nhosts. Using a Host Identifier value of 0h is a valid configuration for the reservations feature. However,\nreservations and registrations associated with a Host Identifier of 0h do not persist across a Controller Level\nReset since a host that uses a Host Identifier of 0h is treated as a different host after a Controller Level",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 650,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3246",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1597338169813156
  },
  {
    "content": "**5.27.1.25.2 NVMe over Fabrics Implementations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3247",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6015617847442627
  },
  {
    "content": "The Host Identifier is a mandatory feature in NVMe over Fabrics implementations. The Host Identifier shall\nbe an extended 128-bit Host Identifier. The Host Identifier shall be set to a non-zero value in the Fabrics\nConnect command. The Host Identifier shall not be modified. A Set Features command specifying the Host\nIdentifier Feature shall be aborted with a status code of Command Sequence Error. A Get Features\ncommand specifying the Host Identifier Feature shall return the value set in the Fabrics Connect command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 520,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3248",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46597734093666077
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3249",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21907281875610352
  },
  {
    "content": "**5.27.1.26 Reservation Notification Mask (Feature Identifier 82h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3250",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6626800894737244
  },
  {
    "content": "This Feature controls the masking of reservation notifications on a per namespace basis. A Reservation\nNotification log page is created whenever a reservation notification occurs on a namespace and the\ncorresponding reservation notification type is not masked on that namespace by this Feature. If reservations\nare supported by the controller, then this Feature shall be supported. The attributes are specified in\nCommand Dword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 431,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3251",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.610040545463562
  },
  {
    "content": "A Set Features command that uses a namespace ID other than FFFFFFFFh modifies the reservation\nnotification mask for the corresponding namespace only. A Set Features command that uses a namespace\nID of FFFFFFFFh modifies the reservation notification mask of all namespaces that are attached to the\ncontroller and that support reservations. A Get Features command that uses a namespace ID other than\nFFFFFFFFh returns the reservation notification mask for the corresponding namespace. A Get Features\ncommand that uses a namespace ID of FFFFFFFFh should be aborted with status code of Invalid Field in\nCommand. If a Set Features command or a Get Features command attempts to access the Reservation\nNotification Mask on a namespace that does not support reservations or is invalid, then that command is\naborted with status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 852,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3252",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3532450199127197
  },
  {
    "content": "If a Get Features command successfully completes for this Feature, the attributes specified in Figure 367\nare returned in Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 177,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3253",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25291889905929565
  },
  {
    "content": "**Figure 367: Reservation Notification Configuration – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 73,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3254",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6745637059211731
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:04|Reserved|\n|03|Mask Reservation Preempted Notification (RESPRE): If set to ‘1’, then mask the reporting of<br>reservation preempted notification by the controller. If cleared to ‘0’, then the notification is not<br>masked and a Reservation Notification log page is created whenever notification occurs.|\n|02|Mask Reservation Released Notification (RESREL): If set to ‘1’, then mask the reporting of<br>reservation released notification by the controller. If cleared to ‘0’, then the notification is not<br>masked and a Reservation Notification log page is created whenever the notification occurs.|\n|01|Mask Registration Preempted Notification (REGPRE): If set to ‘1’, then mask the reporting of<br>registration preempted notification by the controller. If cleared to ‘0’, then the notification is not<br>masked and a Reservation Notification log page is created whenever the notification occurs.|\n|00|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 946,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3255",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5298205614089966
  },
  {
    "content": "**5.27.1.27 Reservation Persistence (Feature Identifier 83h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3256",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6076405644416809
  },
  {
    "content": "Each namespace that supports reservations has a Persist Through Power Loss (PTPL) state that may be\nmodified using either a Set Features command or a Reservation Register command (refer to section 7.3).\nThe Reservation Persistence feature attributes are specified in Command Dword 11.\n\nThe PTPL state is contained in the Reservation Persistence Feature that is namespace specific. A Set\nFeatures command that uses the namespace ID FFFFFFFFh modifies the PTPL state associated with all\nnamespaces that are attached to the controller and that support PTPL (i.e., support reservations). A Set\nFeatures command that uses a valid namespace ID other than FFFFFFFFh and corresponds to a\nnamespace that supports reservations, modifies the PTPL state for that namespace. A Get Features\ncommand that uses a namespace ID of FFFFFFFFh should be aborted with a status code of Invalid Field\nin Command. A Get Features command that uses a valid namespace ID other than FFFFFFFFh and\ncorresponds to a namespace that supports PTPL, returns the PTPL state for that namespace. If a Set\nFeatures command or a Get Features command using a namespace ID other than FFFFFFFFh attempts\nto access the PTPL state for a namespace that does not support this Feature Identifier, then the command\nis aborted with status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1322,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3257",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2777625322341919
  },
  {
    "content": "This Feature should not be saveable (refer to Figure 195). If this Feature is saveable, then the host should\nset the current value and the saved value to the same value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3258",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10963229835033417
  },
  {
    "content": "If a Get Features command successfully completes for this Feature Identifier, the attributes specified in\nFigure 368 are returned in Dword 0 of the completion queue entry for that command",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 187,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3259",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14997044205665588
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3260",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21596074104309082
  },
  {
    "content": "**Figure 368: Reservation Persistence Configuration – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3261",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4808962941169739
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|00|Persist Through Power Loss (PTPL): If set to '1', then reservations and registrants persist across<br>a power loss. If cleared to ‘0’, then reservations are released and registrants are cleared on a<br>power loss.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 264,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3262",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2445121854543686
  },
  {
    "content": "**5.27.1.28 Namespace Write Protection Config (Feature Identifier 84h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3263",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6512712836265564
  },
  {
    "content": "This Feature is used by the host to configure the namespace write protection state or to determine the write\nprotection state of a namespace. Refer to section 8.12 for definition and behaviors of the namespace write\nprotection states. The settings are specified in Command Dword 11.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 282,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3264",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5070720314979553
  },
  {
    "content": "This Feature is not saveable (refer to Figure 195). There is no default value for this Feature; the value of\nthe Feature after a power cycle or a Controller Level Reset is determined by the write protection state of\nthe namespace prior to the power cycle or Controller Level Reset, except for the Write Protect Until Power\nCycle write protection state (refer to section 8.12).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 376,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3265",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19939996302127838
  },
  {
    "content": "If a Get Features command is submitted for this Feature, the attributes specified in Figure 369 are returned\nin Dword 0 of the completion queue entry for that command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3266",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2547477185726166
  },
  {
    "content": "**Figure 369: Write Protection – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3267",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4993433952331543
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:03|Reserved|\n|02:00|Write Protection State: This field specifies the write protection state of the specified namespace.<br>Value Definition<br>000b No Write Protect<br>001b Write Protect<br>010b Write Protect Until Power Cycle<br>011b Permanent Write Protect<br>100b to 111b Reserved|\n\n|Value|Definition|\n|---|---|\n|000b|No Write Protect|\n|001b|Write Protect|\n|010b|Write Protect Until Power Cycle|\n|011b|Permanent Write Protect|\n|100b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 486,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3268",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49838945269584656
  },
  {
    "content": "If a Set Features command attempts to change the namespace write protection state of a namespace that\nis in the Write Protect Until Power Cycle state or the Permanent Write Protect state, then the command\nshall abort with a status code of Feature Not Changeable.\n\nIf a Set Features command attempts to change the namespace write protection state of a namespace to\nthe Write Protect Until Power Cycle state and bit 0 of the of the Write Protection Authentication Control field\nis cleared to ‘0’, then the command shall abort with a status code of Feature Not Changeable.\n\nIf a Set Features command changes the namespace to a write protected state, then the controller shall\ncommit all volatile write cache data and metadata associated with the specified namespace to non-volatile\nmedia as part of transitioning to the write protected state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 839,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3269",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20412075519561768
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3270",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3462483584880829
  },
  {
    "content": "Upon completion of the Set Features command, the controller posts a completion queue entry to the Admin\nCompletion Queue. If a status code of Successful Completion is returned, the completion queue entry shall\nnot be posted until the controller has completed setting attributes associated with the Feature. Set Features\ncommand specific status values are defined in Figure 370.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 377,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3271",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5813182592391968
  },
  {
    "content": "**Figure 370: Set Features – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3272",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4946061968803406
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0Dh|Feature Identifier Not Saveable: The Feature Identifier specified does not support a saveable<br>value.|\n|0Eh|Feature Not Changeable: The Feature Identifier specified does not support a changeable value.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 239,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3273",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18991288542747498
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3274",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09286093711853027
  },
  {
    "content": "**Figure 370: Set Features – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3275",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.532717764377594
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0Fh|Feature Not Namespace Specific: The Feature Identifier specified is not namespace specific.<br>The Feature Identifier settings apply across all namespaces.|\n|14h|Overlapping Range: Command Set specific definition. Refer to each I/O Command Set<br>specification for applicability and details.|\n|15h|I/O Command Set Combination Rejected: This error indicates that the controller did not accept<br>the request to select the requested I/O Command Set Combination.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 495,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3276",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3296129107475281
  },
  {
    "content": "**5.28 Virtualization Management command**\n\nThe Virtualization Management command is supported by primary controllers that support the Virtualization\nEnhancements capability. This command is used for several functions:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 218,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3277",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3018065392971039
  },
  {
    "content": "- Modifying Flexible Resource allocation for the primary controller;\n\n- Assigning Flexible Resources for secondary controllers; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 131,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3278",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5465083718299866
  },
  {
    "content": "- Setting the Online and Offline state for secondary controllers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3279",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24423730373382568
  },
  {
    "content": "Refer to section 8.26 for more on the Virtualization Enhancements capability and the Virtualization\nManagement command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 119,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3280",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6647377014160156
  },
  {
    "content": "The Virtualization Management command uses the Command Dword 10 and Command Dword 11 fields.\nAll other command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3281",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11674146354198456
  },
  {
    "content": "If the action requested specifies a range of controller resources that:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 71,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3282",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34659895300865173
  },
  {
    "content": "a) does not exist;\nb) is a Private Resource (e.g., VQ resources are requested when VQ resources are not supported, VI\n\nresources are requested when VI resources are not supported); or\nc) is currently in use (e.g., the number of Controller Resources (NR) is greater than the number of",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 283,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3283",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.470525324344635
  },
  {
    "content": "remaining available flexible resources),",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3284",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27485719323158264
  },
  {
    "content": "then the command is aborted with a status code of Invalid Resource Identifier.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3285",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38153916597366333
  },
  {
    "content": "**Figure 371: Virtualization Management – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3286",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24634326994419098
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Controller Identifier (CNTLID): This field indicates the controller for which controller resources<br>are to be modified.|\n|15:11|Reserved|\n|10:08|Resource Type (RT): This field indicates the type of controller resource to be modified.<br>Value Description<br>000b VQ Resources<br>001b VI Resources<br>010b to 111b Reserved|\n|07:04|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 377,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3287",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6422677636146545
  },
  {
    "content": "|Value|Description|\n|---|---|\n|000b|VQ Resources|\n|001b|VI Resources|\n|010b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3288",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30907362699508667
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3289",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2661782205104828
  },
  {
    "content": "**Figure 371: Virtualization Management – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3290",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29678046703338623
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|03:00|Action (ACT): This field indicates the operation for the command to perform as described below.<br>Value Description<br>0h Reserved<br>Primary Controller Flexible Allocation: Set the number of Flexible Resources<br>allocated to this primary controller following the next Controller Level Reset other<br>than a Controller Reset (i.e., CC.EN transitions from ‘1’ to ‘0’). If the Controller<br>1h<br>Identifier field does not correspond to this primary controller, then a status code<br>of Invalid Controller Identifier is returned. This value is persistent across power<br>cycles and resets.<br>2h to 6h Reserved<br>Secondary Controller Offline: Place the secondary controller in the Offline state<br>and remove all Flexible Resources. If the Controller Identifier field does not<br>7h<br>correspond to a secondary controller associated with this primary controller, then<br>a status code of Invalid Controller Identifier is returned.<br>Secondary Controller Assign: Assign the number of controller resources<br>specified in Number of Controller Resources to the secondary controller. If the<br>Controller Identifier field does not correspond to a secondary controller associated<br>8h<br>with this primary controller, then an error of Invalid Controller Identifier is returned.<br>If the secondary controller is not in the Offline state, then a status code of Invalid<br>Secondary Controller State is returned.<br>Secondary Controller Online: Place the secondary controller in the Online state.<br>If the Controller Identifier field does not correspond to a secondary controller<br>associated with this primary controller, then an error of Invalid Controller Identifier<br>9h<br>is returned. If the secondary controller is not configured appropriately (refer to<br>section 8.26) or the primary controller is not enabled, then a status code of Invalid<br>Secondary Controller State is returned.<br>Ah to Fh Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1950,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3291",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7107319235801697
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0h|Reserved|\n|1h|Primary Controller Flexible Allocation: Set the number of Flexible Resources<br>allocated to this primary controller following the next Controller Level Reset other<br>than a Controller Reset (i.e., CC.EN transitions from ‘1’ to ‘0’). If the Controller<br>Identifier field does not correspond to this primary controller, then a status code<br>of Invalid Controller Identifier is returned. This value is persistent across power<br>cycles and resets.|\n|2h to 6h|Reserved|\n|7h|Secondary Controller Offline: Place the secondary controller in the Offline state<br>and remove all Flexible Resources. If the Controller Identifier field does not<br>correspond to a secondary controller associated with this primary controller, then<br>a status code of Invalid Controller Identifier is returned.|\n|8h|Secondary Controller Assign: Assign the number of controller resources<br>specified in Number of Controller Resources to the secondary controller. If the<br>Controller Identifier field does not correspond to a secondary controller associated<br>with this primary controller, then an error of Invalid Controller Identifier is returned.<br>If the secondary controller is not in the Offline state, then a status code of Invalid<br>Secondary Controller State is returned.|\n|9h|Secondary Controller Online: Place the secondary controller in the Online state.<br>If the Controller Identifier field does not correspond to a secondary controller<br>associated with this primary controller, then an error of Invalid Controller Identifier<br>is returned. If the secondary controller is not configured appropriately (refer to<br>section 8.26) or the primary controller is not enabled, then a status code of Invalid<br>Secondary Controller State is returned.|\n|Ah to Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1807,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3292",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22434209287166595
  },
  {
    "content": "**Figure 372: Virtualization Management – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3293",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2785402536392212
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|Number of Controller Resources (NR): This field indicates a number of controller resources to<br>allocate or assign.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 170,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3294",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17019414901733398
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3295",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22081710398197174
  },
  {
    "content": "Command specific status values associated with the Virtualization management command are defined in\nFigure 373.\n\n**Figure 373: Virtualization Management – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 187,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3296",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4163391590118408
  },
  {
    "content": "|Value|Description|\n|---|---|\n|1Fh|Invalid Controller Identifier: An invalid Controller Identifier was specified.|\n|20h|Invalid Secondary Controller State: The action requested for the secondary controller<br>is invalid based on the current state of the secondary controller and its primary controller.|\n|21h|Invalid Number of Controller Resources: The specified number of Flexible Resources<br>is invalid (e.g., the Number of Controller Resources (NR) is greater than VQ Resources<br>Flexible Total (VQFRT) (refer to Figure 281), the Number of Controller Resources (NR)<br>is greater than VQ Resources Flexible Secondary Maximum (VQFRSM) (refer to Figure<br>281)).|\n|22h|Invalid Resource Identifier: At least one of the specified resource identifiers was invalid<br>(e.g., the Number of Controller Resources (NR) is greater than the number of remaining<br>available flexible resources).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 888,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3297",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31631192564964294
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3298",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2530972957611084
  },
  {
    "content": "Dword 0 of the completion queue entry contains information about the controller resources that were\nmodified as part of the Primary Controller Flexible Allocation and Secondary Controller Assign actions.\nDword 0 of the completion queue entry is defined in Figure 374.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 267,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3299",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5461612939834595
  },
  {
    "content": "**Figure 374: Virtualization Management – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3300",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2542402148246765
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|Number of Controller Resources Modified (NRM): This field indicates the number of controller<br>resources that were allocated or assigned. The value may be smaller or larger than the number<br>requested.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 257,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3301",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35946419835090637
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **6 Fabrics Command Set **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 81,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3302",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5480796098709106
  },
  {
    "content": "Fabrics commands are used to create queues and initialize a controller. Fabrics commands have an\nOpcode field of 7Fh. Fabrics commands are processed regardless of the state of controller enable (CC.EN).\nThe Fabrics command capsule is defined in section 3.3.2.1.1 and the Fabrics response capsule and status\nis defined in section 3.3.2.1.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 339,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3303",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38010087609291077
  },
  {
    "content": "Restrictions on processing commands listed in Figure 375 are defined in the Admin Command Set in\nsection 5 (e.g., while the NVM subsystem is performing a sanitize operation or processing of a Format NVM\ncommand).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 212,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3304",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38709530234336853
  },
  {
    "content": "**Figure 375: Fabrics Command Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3305",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1723150610923767
  },
  {
    "content": "|Command Type by Field|Col2|Col3|Combined<br>Command<br>2<br>Type|1<br>O/M|3<br>I/O Queue|Command|\n|---|---|---|---|---|---|---|\n|(07)|(06:02)|(01:00)|(01:00)|(01:00)|(01:00)|(01:00)|\n|Generic<br>Command|Function|Data<br>4<br>Transfer|Data<br>4<br>Transfer|Data<br>4<br>Transfer|Data<br>4<br>Transfer|Data<br>4<br>Transfer|\n|0b|000 00b|00b|00h|M|No|Property Set|\n|0b|000 00b|01b|01h|M|Yes|5<br>Connect|\n|0b|000 01b|00b|04h|M|No|Property Get|\n|0b|000 01b|01b|05h|O|Yes|Authentication Send|\n|0b|000 01b|10b|06h|O|Yes|Authentication Receive|\n|0b|000 10b|00b|08h|O|Yes|Disconnect|\n||Vendor Specific|Vendor Specific|Vendor Specific|Vendor Specific|Vendor Specific|Vendor Specific|\n|1b|na|na|C0h to FFh|O||Vendor specific|\n|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Opcodes not listed are reserved.<br>3. All Fabrics commands, other than the Disconnect command, may be submitted on the Admin Queue. The I/O Queue<br>supports Fabrics commands as specified in this column. If a Fabrics command that is not supported on an I/O Queue<br>is sent on an I/O Queue, that command shall be aborted with a status code of Invalid Field in Command.<br>4. 00b = no data transfer; 01b = host to controller; 10b = controller to host; 11b = reserved<br>5. The Connect command is submitted and completed on the same queue that the Connect command creates. Refer<br>to section 3.3.2.2.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Opcodes not listed are reserved.<br>3. All Fabrics commands, other than the Disconnect command, may be submitted on the Admin Queue. The I/O Queue<br>supports Fabrics commands as specified in this column. If a Fabrics command that is not supported on an I/O Queue<br>is sent on an I/O Queue, that command shall be aborted with a status code of Invalid Field in Command.<br>4. 00b = no data transfer; 01b = host to controller; 10b = controller to host; 11b = reserved<br>5. The Connect command is submitted and completed on the same queue that the Connect command creates. Refer<br>to section 3.3.2.2.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Opcodes not listed are reserved.<br>3. All Fabrics commands, other than the Disconnect command, may be submitted on the Admin Queue. The I/O Queue<br>supports Fabrics commands as specified in this column. If a Fabrics command that is not supported on an I/O Queue<br>is sent on an I/O Queue, that command shall be aborted with a status code of Invalid Field in Command.<br>4. 00b = no data transfer; 01b = host to controller; 10b = controller to host; 11b = reserved<br>5. The Connect command is submitted and completed on the same queue that the Connect command creates. Refer<br>to section 3.3.2.2.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Opcodes not listed are reserved.<br>3. All Fabrics commands, other than the Disconnect command, may be submitted on the Admin Queue. The I/O Queue<br>supports Fabrics commands as specified in this column. If a Fabrics command that is not supported on an I/O Queue<br>is sent on an I/O Queue, that command shall be aborted with a status code of Invalid Field in Command.<br>4. 00b = no data transfer; 01b = host to controller; 10b = controller to host; 11b = reserved<br>5. The Connect command is submitted and completed on the same queue that the Connect command creates. Refer<br>to section 3.3.2.2.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Opcodes not listed are reserved.<br>3. All Fabrics commands, other than the Disconnect command, may be submitted on the Admin Queue. The I/O Queue<br>supports Fabrics commands as specified in this column. If a Fabrics command that is not supported on an I/O Queue<br>is sent on an I/O Queue, that command shall be aborted with a status code of Invalid Field in Command.<br>4. 00b = no data transfer; 01b = host to controller; 10b = controller to host; 11b = reserved<br>5. The Connect command is submitted and completed on the same queue that the Connect command creates. Refer<br>to section 3.3.2.2.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Opcodes not listed are reserved.<br>3. All Fabrics commands, other than the Disconnect command, may be submitted on the Admin Queue. The I/O Queue<br>supports Fabrics commands as specified in this column. If a Fabrics command that is not supported on an I/O Queue<br>is sent on an I/O Queue, that command shall be aborted with a status code of Invalid Field in Command.<br>4. 00b = no data transfer; 01b = host to controller; 10b = controller to host; 11b = reserved<br>5. The Connect command is submitted and completed on the same queue that the Connect command creates. Refer<br>to section 3.3.2.2.|Notes:<br>1. O/M definition: O = Optional, M = Mandatory.<br>2. Opcodes not listed are reserved.<br>3. All Fabrics commands, other than the Disconnect command, may be submitted on the Admin Queue. The I/O Queue<br>supports Fabrics commands as specified in this column. If a Fabrics command that is not supported on an I/O Queue<br>is sent on an I/O Queue, that command shall be aborted with a status code of Invalid Field in Command.<br>4. 00b = no data transfer; 01b = host to controller; 10b = controller to host; 11b = reserved<br>5. The Connect command is submitted and completed on the same queue that the Connect command creates. Refer<br>to section 3.3.2.2.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 5373,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3306",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27066588401794434
  },
  {
    "content": "**6.1** **Authentication Receive Command and Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3307",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6064618229866028
  },
  {
    "content": "The Authentication Receive command transfers the status and data result of one or more Authentication\nSend commands that were previously submitted to the controller.\n\nThe association between an Authentication Receive command and previous Authentication Send\ncommands is dependent on the Security Protocol. The format of the data to be transferred is dependent on\nthe Security Protocol. Refer to SPC-5 for Security Protocol details.\n\nAuthentication Receive commands return the appropriate data corresponding to an Authentication Send\ncommand as defined by the rules of the Security Protocol. The Authentication Receive command data shall\nnot be retained if there is a loss of communication between the controller and host, or if a Controller Level\nReset occurs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 760,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3308",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5220282077789307
  },
  {
    "content": "**Figure 376 Authentication Receive Command – Submission Queue Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3309",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39249661564826965
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Opcode (OPC): Set to 7Fh to indicate a Fabrics command.|\n|01|Reserved|\n|03:02|Command Identifier (CID): This field specifies a unique identifier for the command. Refer to<br>the definition in Figure 80.|\n|04|Fabrics Command Type (FCTYPE): Set to 06h to indicate an Authentication Receive<br>command.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 334,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_3310",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18497906625270844
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3311",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1482446789741516
  },
  {
    "content": "**Figure 376 Authentication Receive Command – Submission Queue Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3312",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3352469205856323
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|23:05|Reserved|\n|39:24|SGL Descriptor 1 (SGL1): This field contains a Transport SGL Data Block descriptor or a<br>Keyed SGL Data Block descriptor that describes the entire data transfer. Refer to section 4.1.2<br>for the definition of SGL descriptors.|\n|40|Reserved|\n|41|SP Specific 0 (SPSP0): The value of this field contains bits 07:00 of the Security Protocol<br>Specific field as defined in SPC-5.|\n|42|SP Specific 1 (SPSP1): The value of this field contains bits 15:08 of the Security Protocol<br>Specific field as defined in SPC-5.|\n|43|Security Protocol (SECP): This field specifies the security protocol as defined in SPC-5. The<br>controller shall abort the command with Invalid Parameter indicated if a reserved value of the<br>Security Protocol is specified.|\n|47:44|Allocation Length (AL): The value of this field is specific to the Security Protocol as defined in<br>SPC-5 where INC_512 is cleared to ‘0’.|\n|63:48|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 967,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3313",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3010334372520447
  },
  {
    "content": "**Figure 377: Authentication Receive Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3314",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2131962925195694
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Reserved|\n|09:08|SQ Head Pointer (SQHD): Indicates the current Submission Queue Head pointer for the<br>associated Submission Queue.|\n|11:10|Reserved|\n|13:12|Command Identifier (CID): Indicates the identifier of the command that is being completed.|\n|15:14|Status (STS): Indicates status for the command.<br>Bits Definition<br>15:01 Status field for the command. Refer to section 3.3.3.2.1<br>00 Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 442,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3315",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6874680519104004
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|15:01|Status field for the command. Refer to section 3.3.3.2.1|\n|00|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3316",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20950067043304443
  },
  {
    "content": "**6.2** **Authentication Send Command and Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3317",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6416059136390686
  },
  {
    "content": "The Authentication Send command is used to transfer security protocol data to the controller. The data\nstructure transferred as part of this command contains security protocol specific commands to be performed\nby the controller. The data structure may contain data or parameters associated with the security protocol\nspecific commands. Status and data that is to be returned to the host for the security protocol specific\ncommands submitted by an Authentication Send command are retrieved with the Authentication Receive\ncommand defined in section 6.1.\n\nThe association between an Authentication Send command and subsequent Authentication Receive\ncommands is Security Protocol field dependent as defined in SPC-5.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 713,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3318",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5678147673606873
  },
  {
    "content": "**Figure 378: Authentication Send Command – Submission Queue Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3319",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33832868933677673
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Opcode (OPC): Set to 7Fh to indicate a Fabrics command.|\n|01|Reserved|\n|03:02|Command Identifier (CID): This field specifies a unique identifier for the command. Refer to<br>the definition in Figure 80.|\n|04|Fabrics Command Type (FCTYPE): Set to 05h to indicate an Authentication Send command.|\n|23:05|Reserved|\n|39:24|SGL Descriptor 1 (SGL1): This field contains a Transport SGL Data Block descriptor or a<br>Keyed SGL Data Block descriptor that describes the entire data transfer. Refer to section 4.1.2<br>for the definition of SGL descriptors.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 582,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_3320",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.187482088804245
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3321",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13960051536560059
  },
  {
    "content": "**Figure 378: Authentication Send Command – Submission Queue Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3322",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4482499957084656
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|40|Reserved|\n|41|SP Specific 0 (SPSP0): The value of this field contains bits 07:00 of the Security Protocol<br>Specific field as defined in SPC-5.|\n|42|SP Specific 1 (SPSP1): The value of this field contains bits 15:08 of the Security Protocol<br>Specific field as defined in SPC-5.|\n|43|Security Protocol (SECP): This field specifies the security protocol as defined in SPC-5. The<br>controller shall abort the command with a status code of Invalid Parameter indicated if a<br>reserved value of the Security Protocol is specified.|\n|47:44|Transfer Length (TL): The value of this field is specific to the Security Protocol as defined in<br>SPC-5 where INC_512 is cleared to ‘0’.|\n|63:48|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 728,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3323",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42264583706855774
  },
  {
    "content": "**Figure 379: Authentication Send Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3324",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22463878989219666
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Reserved|\n|09:08|SQ Head Pointer (SQHD): Indicates the current Submission Queue Head pointer for the<br>associated Submission Queue.|\n|11:10|Reserved|\n|13:12|Command Identifier (CID): Indicates the identifier of the command that is being completed.|\n|15:14|Status (STS): Indicates status for the command.<br>Bits Definition<br>15:01 Status field for the command. Refer to section 3.3.3.2.1<br>00 Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 442,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3325",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6874680519104004
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|15:01|Status field for the command. Refer to section 3.3.3.2.1|\n|00|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3326",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2362814098596573
  },
  {
    "content": "**6.3** **Connect Command and Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3327",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5055133104324341
  },
  {
    "content": "The Connect command is used to create a Submission and Completion Queue pair. If the Admin Queue is\nspecified, then the Connect command establishes an association between a host and a controller. The\nfields for the submission queue entry are defined in Figure 380 and the fields for the data portion are defined\nin Figure 381.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 326,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3328",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2773275673389435
  },
  {
    "content": "A host that uses a single Host NQN may employ multiple Host Identifiers to designate elements of the host\nthat access an NVM subsystem independently of each other (e.g., physical or logical partitions of the host).\nAlternatively, a host may employ multiple Host NQN values to cause each element to be treated as a\nseparate host by an NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 348,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3329",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5030472874641418
  },
  {
    "content": "If an NVM subsystem supports DH-HMAC-CHAP authentication (refer to section 6), then the Host NQN\nand the NVM Subsystem NQN parameters in a Connect command are required to be different. If the Host\nNQN and the NVM Subsystem NQN parameters in a Connect command are identical and the NVM\nsubsystem supports DH-HMAC-CHAP authentication, then the controller shall abort the command with a\nstatus code of Connect Invalid Host.\n\nThe NVM subsystem shall not allocate a Controller ID in the range FFF0h to FFFFh as a valid Controller\nID on completion of a Connect command. If the host is not allowed to establish an association to any\ncontroller in the NVM subsystem, then the controller shall abort the command with a status code of Connect\nInvalid Host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 746,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3330",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5784177184104919
  },
  {
    "content": "If the NVM subsystem supports the dynamic controller model, then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3331",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20767390727996826
  },
  {
    "content": "- the Controller ID of FFFFh is specified as the Controller ID in a Connect command for the Admin\nQueue. If the controller ID is not set to FFFFh, then the controller shall abort the command with a\nstatus code of Connect Invalid Parameters;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 240,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3332",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23130939900875092
  },
  {
    "content": "- the NVM subsystem shall allocate any available controller to the host; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3333",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25549083948135376
  },
  {
    "content": "- return that allocated Controller ID in the Connect response.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3334",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.02425849437713623
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3335",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5010572671890259
  },
  {
    "content": "If the NVM subsystem supports the static controller model, then:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3336",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22734349966049194
  },
  {
    "content": "- The host is able to request a specific controller in a Connect command for the Admin Queue. If the\nhost is not allowed to establish an association to the specified controller, then the controller shall\nabort the command with a status code of Connect Invalid Host;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3337",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6099790930747986
  },
  {
    "content": "- The Controller ID of FFFEh on the Admin Queue specifies that any Controller ID may be allocated\nand returned in the Connect response; and\n\n- If the host specifies a Controller ID value of FFFFh for the Admin Queue, then the controller shall\nabort the command with a status code of Connect Invalid Parameters.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 310,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3338",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4170982837677002
  },
  {
    "content": "The NVM subsystem may allocate specific controllers to particular hosts. If a host requests a controller that\nis not allocated to that host, then the controller shall abort the command with a status code of Connect\nInvalid Host. The mechanism for allocating specific controllers to particular hosts is outside the scope of\nthis specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 342,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3339",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5136816501617432
  },
  {
    "content": "The host shall establish an association with a controller and enable the controller before establishing a\nconnection with an I/O Queue of the controller. If the host sends a Connect command specifying a Queue\nID for an Admin Queue or I/O Queue that has already been created, then the controller shall abort the\ncommand with a status code of Command Sequence Error.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 364,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3340",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6579033136367798
  },
  {
    "content": "The controller shall abort a Connect command with a status code of Connect Invalid Parameters if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3341",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5581151247024536
  },
  {
    "content": "- the host sends a Connect command to create an I/O Queue while the controller is disabled;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 91,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3342",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5580872893333435
  },
  {
    "content": "- the Host Identifier, Host NQN, NVM Subsystem NQN, and the Controller ID values specified for an\nI/O Queue are not the same as the values specified for the associated Admin Queue in which the\nassociation between the host and controller was established;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 253,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3343",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6482266187667847
  },
  {
    "content": "- the Host NQN or NVM Subsystem NQN values do not match the values that the NVM subsystem\nis configured to support;\n\n- there is a syntax error in the Host NQN or NVM Subsystem NQN value (refer to section 4.4); or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 212,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3344",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41806069016456604
  },
  {
    "content": "- the Host Identifier is cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3345",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3640291392803192
  },
  {
    "content": "If the NVMe Subsystem Port, NVMe Transport Type or NVMe Transport Address used by the NVMe\nTransport (refer to section 6.3) are not the same as the values used for the associated Admin Queue in\nwhich the association between the host and controller was established, then it is possible that the Connect\ncommand is not received by an NVM subsystem. If the Connect command is received by an NVM\nsubsystem, then:\n\n- the NVM subsystem that receives the command may not be the same NVM subsystem to which\nthe association between the host and controller was established (i.e., the NVMe Transport Type\nand NVMe Transport Address are unique to an NVM Subsystem Port); and\n\n- the values of the NVM Subsystem NQN or Controller ID may not be valid at that NVM Subsystem\nPort (e.g., the NVM Subsystem NQN may specify a different NVM subsystem than the one that\nreceived that Connect command, or the Controller ID may specify a controller that is already bound\nto a different NVM Subsystem Port).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 982,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3346",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6838390827178955
  },
  {
    "content": "If this situation occurs and the Connect command is aborted, then the status code shall be set to Connect\nInvalid Parameters. There is no requirement that such a Connect command be received by an NVM\nsubsystem (e.g., if the NVMe Transport Address is not a valid transport address, or is the address of a\nfabric endpoint that does not support NVMe over Fabrics, then the resulting error, if any, is specific to the\nfabric).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 422,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3347",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33060476183891296
  },
  {
    "content": "Submission Queue (SQ) flow control based on the SQ Head Pointer (SQHD) field in Fabrics response\ncapsules (refer to section 3.3.2.1.2) shall be supported by all hosts and controllers. Use of SQ flow control\nis negotiated by the Connect command and response. A host requests that SQ flow control be disabled by\nsetting bit 2 of the Connect Attributes field to ‘1’ in a Connect command. A controller that agrees to disable\nSQ flow control shall set the SQHD field to FFFFh in the response to that Connect command. A controller\nthat does not agree to disable SQ flow control shall set the SQHD field to a value other than FFFFh in the\nresponse to that Connect command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 665,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3348",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20388774573802948
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3349",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.038839392364025116
  },
  {
    "content": "If the Connect command did not request that SQ flow control be disabled, then the controller shall not set\nthe SQHD field to FFFFh in the response to that Connect command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 171,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3350",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6060781478881836
  },
  {
    "content": "SQ flow control is disabled and shall not be used for a created queue pair only if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3351",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5926644206047058
  },
  {
    "content": "a) bit 2 is set to ‘1’ in the Connect Attributes field of the Connect command that creates the queue",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3352",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5010591745376587
  },
  {
    "content": "pair; and\nb) the SQHD field is set to FFFFh in the response to that Connect command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3353",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6739456057548523
  },
  {
    "content": "If SQ flow control is disabled, then the SQHD field is reserved in Fabrics response capsules for all command\ncompletions on that queue pair after the response that completes the Connect command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 194,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3354",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6541275978088379
  },
  {
    "content": "SQ flow control is enabled and shall be used for a created queue pair if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 73,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3355",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5668426752090454
  },
  {
    "content": "a) bit 2 is cleared to ‘0’ in the Connect Attributes field of the Connect command that creates the queue",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 104,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3356",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4754709005355835
  },
  {
    "content": "pair; or\nb) the SQHD field is not set to FFFFh in the response to that Connect command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3357",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4212534725666046
  },
  {
    "content": "If SQ flow control is enabled, then the controller shall use the SQHD field in Fabrics response capsules for\nall command completions on that queue pair, except for command completions that omit the SQHD value\ndue to use of the SQHD pointer update optimization described in section 3.3.2.7.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3358",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32988405227661133
  },
  {
    "content": "**Figure 380: Connect Command – Submission Queue Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3359",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.343458890914917
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Opcode (OPC): Set to 7Fh to indicate a Fabrics command.|\n|01|Reserved|\n|03:02|Command Identifier (CID): This field specifies a unique identifier for the command. Refer to<br>the definition in Figure 80.|\n|04|Fabrics Command Type (FCTYPE): Set to 01h to indicate a Connect command.|\n|23:05|Reserved|\n|39:24|SGL Descriptor 1 (SGL1): This field contains a Transport SGL Data Block descriptor or a<br>Keyed SGL Data Block descriptor that describes the entire data transfer. Refer to section 4.1.2<br>for the definition of SGL descriptors.|\n|41:40|Record Format (RECFMT): Specifies the format of the Connect command capsule. The format<br>of the record specified in this definition shall be 0h. If the NVM subsystem does not support the<br>value specified, then a status code of Incompatible Format shall be returned.|\n|43:42|Queue ID (QID): Specifies the Queue Identifier for the Admin Queue or I/O Queue to be created.<br>The identifier is used for both the Submission and Completion Queue. The identifier for the<br>Admin Submission Queue and Completion Queue is 0h. The identifier for an I/O Submission<br>and Completion Queue is in the range 1 to 65,534.<br>If the value in this field specifies the Queue ID of a queue that already exists, then the controller<br>shall abort the command with a status code of Invalid Queue Identifier.|\n|45:44|Submission Queue Size (SQSIZE): This field indicates the size of the Submission Queue to<br>be created. If the size is 0h or larger than the controller supports, then a status code of Connect<br>Invalid Parameters shall be returned. The maximum size of the Admin Submission Queue is<br>specified in the Discovery Log Page Entry for the NVM subsystem. Refer to Figure 264. This is<br>a 0’s based value.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1779,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_3360",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1584961861371994
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3361",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10990236699581146
  },
  {
    "content": "**Figure 380: Connect Command – Submission Queue Entry**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3362",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09962999820709229
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00b|Urgent|\n|01b|High|\n|10b|Medium|\n|11b|Low|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 75,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3363",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12539733946323395
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|46|Connect Attributes (CATTR): This field indicates attributes for the connection.<br>Bits 7:4 are reserved.<br>Bit 3 indicates support for deleting individual I/O Queues. If this bit is set to ‘1’, then the host<br>supports the deletion of individual I/O Queues. If this bit is cleared to ‘0’, then the host does not<br>support the deletion of individual I/O Queues.<br>Bit 2 if set to ‘1’, then the host is requesting that SQ flow control be disabled. If cleared to ‘0’,<br>then SQ flow control shall not be disabled.<br>Bits 1:0 indicate the priority class to use for commands within this Submission Queue. This field<br>is only used when the weighted round robin with urgent priority class is the arbitration<br>mechanism selected (refer to CC.AMS in Figure 46), the field is ignored if weighted round robin<br>with urgent priority class is not used. Refer to section 3.4.4. This field is only valid for I/O Queues<br>and shall be cleared to 00b for Admin Queue connections.<br>Value Definition<br>00b Urgent<br>01b High<br>10b Medium<br>11b Low|\n|47|Reserved|\n|51:48|Keep Alive Timeout (KATO): In the Connect command for the Admin Queue, this field has the<br>same definition as the Keep Alive Timeout (Keep Alive Timer) defined in section 5.27.1.12.<br>Upon successful completion of the Connect command the controller shall enable and activate<br>the Keep Alive timer as described in section 3.9.<br>In the Connect command for an I/O Queue, this field is reserved.|\n|63:52|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1519,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3364",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3822074234485626
  },
  {
    "content": "**Figure 381: Connect Command – Data**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3365",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22234222292900085
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|15:00|Host Identifier (HOSTID): This field has the same definition as the Host Identifier defined<br>in section 5.27.1.25. The controller shall set the Host Identifer Feature to this value.|\n|17:16|Controller ID (CNTLID): Specifies the controller ID requested. This field corresponds to<br>the Controller ID (CNTLID) value returned in the Identify Controller data structure for a<br>particular controller. If the NVM subsystem uses the dynamic controller model, then the<br>value shall be FFFFh for the Admin Queue and any available controller may be returned.<br>If the NVM subsystem uses the static controller model and the value is FFFEh for the<br>Admin Queue, then any available controller may be returned.|\n|255:18|Reserved|\n|511:256|NVM Subsystem NVMe Qualified Name (SUBNQN): NVMe Qualified Name (NQN) that<br>uniquely identifies the NVM subsystem. Refer to section 4.4.|\n|767:512|Host NVMe Qualified Name (HOSTNQN): NVMe Qualified Name (NQN) that uniquely<br>identifies the host. Refer to section 4.4.|\n|1023:768|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1062,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3366",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.396982342004776
  },
  {
    "content": "The Connect response provides status for the Connect command. If a connection is established, then the\nController ID allocated to the host is returned. The Connect response is defined in Figure 382.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 198,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3367",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6534702181816101
  },
  {
    "content": "For a Connect command that fails, the controller shall not:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3368",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2969560921192169
  },
  {
    "content": "- return a status code of Invalid Field in Command; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3369",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3456495404243469
  },
  {
    "content": "- add an entry to the Error Information log page.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3370",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04865006357431412
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3371",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12855084240436554
  },
  {
    "content": "**Figure 382: Connect Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3372",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42995724081993103
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Status Code Specific: The value is dependent on the status returned. Refer to Figure 383.|\n|07:04|Reserved|\n|09:08|SQ Head Pointer (SQHD): If the Connect command requested that SQ flow control be disabled,<br>then a value of FFFFh in this field indicates that SQ flow control is disabled for the created queue<br>pair. Otherwise, this field indicates the current Submission Queue Head pointer for the associated<br>Submission Queue and also indicates that SQ flow control is enabled for the created queue pair.|\n|11:10|Reserved|\n|13:12|Command Identifier (CID): Indicates the identifier of the command that is being completed.|\n|15:14|Status (STS): Indicates status for the command.<br>Bits Definition<br>Status field for the command. Refer to section 3.3.3.2.1. Refer to Figure 97 for<br>15:01<br>values specific to the Connect command.<br>00 Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 890,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3373",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6165716648101807
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|15:01|Status field for the command. Refer to section 3.3.3.2.1. Refer to Figure 97 for<br>values specific to the Connect command.|\n|00|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 173,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3374",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.552007794380188
  },
  {
    "content": "**Figure 383: Connect Response – Dword 0 Value Based on Status Code**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3375",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4102805554866791
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Controller ID (CNTLID): Specifies the controller ID allocated to the host. If a<br>particular controller was specified in the CNTLID field of the Connect command,<br>then this field shall contain the same value.|\n|03:02|Authentication and Security Requirements (AUTHREQ): Specifies the NVMe<br>in-band authentication and security requirements. The field is bit significant. If all<br>bits are cleared to ‘0’, then no requirements are specified.<br>Bits Definition<br>15:03 Reserved<br>Authentication and Secure Channel Required (ASCR): If this<br>bit is set to ‘1’, then authentication using NVMe over Fabrics<br>Authentication protocols followed by secure channel<br>02 establishment is required and the ATR bit should be cleared to<br>‘0’. If this bit is cleared to ‘0’, then authentication using NVMe over<br>Fabrics Authentication protocols followed by secure channel<br>establishment is not required.<br>Authentication Transaction Required (ATR): If this bit is set to<br>‘1’, then authentication using NVMe over Fabrics Authentication<br>01<br>protocols is required. If this bit is cleared to ‘0’, then authentication<br>using NVMe over Fabrics Authentication protocols is not required.<br>00 Obsolete.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3376",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5554048418998718
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|15:03|Reserved|\n|02|Authentication and Secure Channel Required (ASCR): If this<br>bit is set to ‘1’, then authentication using NVMe over Fabrics<br>Authentication protocols followed by secure channel<br>establishment is required and the ATR bit should be cleared to<br>‘0’. If this bit is cleared to ‘0’, then authentication using NVMe over<br>Fabrics Authentication protocols followed by secure channel<br>establishment is not required.|\n|01|Authentication Transaction Required (ATR): If this bit is set to<br>‘1’, then authentication using NVMe over Fabrics Authentication<br>protocols is required. If this bit is cleared to ‘0’, then authentication<br>using NVMe over Fabrics Authentication protocols is not required.|\n|00|Obsolete.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 765,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3377",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.51200270652771
  },
  {
    "content": "|Status Code|Definition of Dword 0|Col3|Col4|Col5|\n|---|---|---|---|---|\n|Successful<br>Completion|Bytes Description<br>Controller ID (CNTLID): Specifies the controller ID allocated to the host. If a<br>01:00 particular controller was specified in the CNTLID field of the Connect command,<br>then this field shall contain the same value.<br>Authentication and Security Requirements (AUTHREQ): Specifies the NVMe<br>in-band authentication and security requirements. The field is bit significant. If all<br>bits are cleared to ‘0’, then no requirements are specified.<br>Bits Definition<br>15:03 Reserved<br>Authentication and Secure Channel Required (ASCR): If this<br>bit is set to ‘1’, then authentication using NVMe over Fabrics<br>Authentication protocols followed by secure channel<br>03:02 02 establishment is required and the ATR bit should be cleared to<br>‘0’. If this bit is cleared to ‘0’, then authentication using NVMe over<br>Fabrics Authentication protocols followed by secure channel<br>establishment is not required.<br>Authentication Transaction Required (ATR): If this bit is set to<br>‘1’, then authentication using NVMe over Fabrics Authentication<br>01<br>protocols is required. If this bit is cleared to ‘0’, then authentication<br>using NVMe over Fabrics Authentication protocols is not required.<br>00 Obsolete.|Bytes Description<br>Controller ID (CNTLID): Specifies the controller ID allocated to the host. If a<br>01:00 particular controller was specified in the CNTLID field of the Connect command,<br>then this field shall contain the same value.<br>Authentication and Security Requirements (AUTHREQ): Specifies the NVMe<br>in-band authentication and security requirements. The field is bit significant. If all<br>bits are cleared to ‘0’, then no requirements are specified.<br>Bits Definition<br>15:03 Reserved<br>Authentication and Secure Channel Required (ASCR): If this<br>bit is set to ‘1’, then authentication using NVMe over Fabrics<br>Authentication protocols followed by secure channel<br>03:02 02 establishment is required and the ATR bit should be cleared to<br>‘0’. If this bit is cleared to ‘0’, then authentication using NVMe over<br>Fabrics Authentication protocols followed by secure channel<br>establishment is not required.<br>Authentication Transaction Required (ATR): If this bit is set to<br>‘1’, then authentication using NVMe over Fabrics Authentication<br>01<br>protocols is required. If this bit is cleared to ‘0’, then authentication<br>using NVMe over Fabrics Authentication protocols is not required.<br>00 Obsolete.|Bytes Description<br>Controller ID (CNTLID): Specifies the controller ID allocated to the host. If a<br>01:00 particular controller was specified in the CNTLID field of the Connect command,<br>then this field shall contain the same value.<br>Authentication and Security Requirements (AUTHREQ): Specifies the NVMe<br>in-band authentication and security requirements. The field is bit significant. If all<br>bits are cleared to ‘0’, then no requirements are specified.<br>Bits Definition<br>15:03 Reserved<br>Authentication and Secure Channel Required (ASCR): If this<br>bit is set to ‘1’, then authentication using NVMe over Fabrics<br>Authentication protocols followed by secure channel<br>03:02 02 establishment is required and the ATR bit should be cleared to<br>‘0’. If this bit is cleared to ‘0’, then authentication using NVMe over<br>Fabrics Authentication protocols followed by secure channel<br>establishment is not required.<br>Authentication Transaction Required (ATR): If this bit is set to<br>‘1’, then authentication using NVMe over Fabrics Authentication<br>01<br>protocols is required. If this bit is cleared to ‘0’, then authentication<br>using NVMe over Fabrics Authentication protocols is not required.<br>00 Obsolete.|Bytes Description<br>Controller ID (CNTLID): Specifies the controller ID allocated to the host. If a<br>01:00 particular controller was specified in the CNTLID field of the Connect command,<br>then this field shall contain the same value.<br>Authentication and Security Requirements (AUTHREQ): Specifies the NVMe<br>in-band authentication and security requirements. The field is bit significant. If all<br>bits are cleared to ‘0’, then no requirements are specified.<br>Bits Definition<br>15:03 Reserved<br>Authentication and Secure Channel Required (ASCR): If this<br>bit is set to ‘1’, then authentication using NVMe over Fabrics<br>Authentication protocols followed by secure channel<br>03:02 02 establishment is required and the ATR bit should be cleared to<br>‘0’. If this bit is cleared to ‘0’, then authentication using NVMe over<br>Fabrics Authentication protocols followed by secure channel<br>establishment is not required.<br>Authentication Transaction Required (ATR): If this bit is set to<br>‘1’, then authentication using NVMe over Fabrics Authentication<br>01<br>protocols is required. If this bit is cleared to ‘0’, then authentication<br>using NVMe over Fabrics Authentication protocols is not required.<br>00 Obsolete.|\n|Connect<br>Invalid<br>Parameters|Bytes Description<br>Invalid Parameter Offset (IPO): If an invalid parameter is reported, then this<br>01:00 field specifies the offset in bytes to the invalid parameter from the start of the<br>SQE or the data.<br>Invalid Attributes (IATTR): Specifies attributes of the invalid field parameter.<br>Bits 7:1 are reserved.<br>02 Bit 0 if cleared to ‘0’, then the invalid parameter is specified from the start of the<br>SQE. Bit 0 if set to ‘1’, then the invalid parameter is specified from the start of<br>the data.<br>03 Reserved|Bytes Description<br>Invalid Parameter Offset (IPO): If an invalid parameter is reported, then this<br>01:00 field specifies the offset in bytes to the invalid parameter from the start of the<br>SQE or the data.<br>Invalid Attributes (IATTR): Specifies attributes of the invalid field parameter.<br>Bits 7:1 are reserved.<br>02 Bit 0 if cleared to ‘0’, then the invalid parameter is specified from the start of the<br>SQE. Bit 0 if set to ‘1’, then the invalid parameter is specified from the start of<br>the data.<br>03 Reserved|Bytes Description<br>Invalid Parameter Offset (IPO): If an invalid parameter is reported, then this<br>01:00 field specifies the offset in bytes to the invalid parameter from the start of the<br>SQE or the data.<br>Invalid Attributes (IATTR): Specifies attributes of the invalid field parameter.<br>Bits 7:1 are reserved.<br>02 Bit 0 if cleared to ‘0’, then the invalid parameter is specified from the start of the<br>SQE. Bit 0 if set to ‘1’, then the invalid parameter is specified from the start of<br>the data.<br>03 Reserved|Bytes Description<br>Invalid Parameter Offset (IPO): If an invalid parameter is reported, then this<br>01:00 field specifies the offset in bytes to the invalid parameter from the start of the<br>SQE or the data.<br>Invalid Attributes (IATTR): Specifies attributes of the invalid field parameter.<br>Bits 7:1 are reserved.<br>02 Bit 0 if cleared to ‘0’, then the invalid parameter is specified from the start of the<br>SQE. Bit 0 if set to ‘1’, then the invalid parameter is specified from the start of<br>the data.<br>03 Reserved|\n|All Other<br>Status Values||Bytes|Description||\n|All Other<br>Status Values||03:00|Reserved|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 7305,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3378",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42589855194091797
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Invalid Parameter Offset (IPO): If an invalid parameter is reported, then this<br>field specifies the offset in bytes to the invalid parameter from the start of the<br>SQE or the data.|\n|02|Invalid Attributes (IATTR): Specifies attributes of the invalid field parameter.<br>Bits 7:1 are reserved.<br>Bit 0 if cleared to ‘0’, then the invalid parameter is specified from the start of the<br>SQE. Bit 0 if set to ‘1’, then the invalid parameter is specified from the start of<br>the data.|\n|03|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 538,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3379",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2615416347980499
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3380",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.023420391604304314
  },
  {
    "content": "**6.4** **Disconnect Command and Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3381",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5616337656974792
  },
  {
    "content": "The Disconnect command is used to delete the I/O Queue on which the command is submitted. If a\nDisconnect command is submitted on an Admin Queue, then the controller shall abort the command with a\nstatus code of Invalid Queue Type. If the controller is not able to delete the I/O Queue, then the controller\nshall abort the command with a status code of Controller Busy. The fields for the submission queue entry\nare defined in Figure 384.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 438,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3382",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6318782567977905
  },
  {
    "content": "The NVMe Transport connection is not deleted upon issuance of a Disconnect command; the host and\ncontroller may delete the NVMe Transport connection and associated resources after all NVMe Queues\n(I/O Queues and/or Admin Queue) associated with that NVMe Transport connection have been deleted\n(refer to section 3.3.2.4).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 320,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3383",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5820397734642029
  },
  {
    "content": "The completion queue entry for the Disconnect command shall be the last entry submitted to the I/O Queue\nCompletion queue by the controller (i.e., no completion queue entries shall be submitted to the I/O Queue\nCompletion Queue after the completion queue entry for the Disconnect command). The controller shall not\nperform command processing for any command on an I/O queue after sending the completion queue entry\nfor the Disconnect command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 442,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3384",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6996274590492249
  },
  {
    "content": "The host should not submit commands to an I/O Submission Queue after the submission of a Disconnect\ncommand to that I/O Submission Queue; submitting commands to an I/O Queue after a Disconnect\ncommand is submitted to that I/O Queue results in undefined behavior.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 262,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3385",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48125624656677246
  },
  {
    "content": "**Figure 384: Disconnect Command and Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3386",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5464359521865845
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Opcode (OPC): Set to 7Fh to indicate a Fabrics command.|\n|01|Reserved|\n|03:02|Command Identifier (CID): This field specifies a unique identifier for the command. Refer to the<br>definition in Figure 80.|\n|04|Fabrics Command Type (FCTYPE): Set to 08h to indicate a Disconnect command.|\n|23:05|Reserved|\n|39:24|SGL Descriptor 1 (SGL1): This field is reserved, as there is no data transferred by this command.|\n|41:40|Record Format (RECFMT): Specifies the format of the Disconnect command capsule. The format<br>of the record specified in this definition shall be 0h. If the NVM subsystem does not support the<br>value specified, then a status code of Incompatible Format shall be returned.|\n|63:48|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 739,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_3387",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5478789806365967
  },
  {
    "content": "The Disconnect response provides status for the Disconnect command. The Disconnect response is\ndefined in Figure 385.\n\n**Figure 385: Disconnect Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 154,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3388",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.364694207906723
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Reserved|\n|09:08|SQ Head Pointer (SQHD): Indicates the current Submission Queue Head pointer for the<br>associated Submission Queue.|\n|11:10|Reserved|\n|13:12|Command Identifier (CID): Indicates the identifier of the command that is being completed.|\n|15:14|Status (STS): Indicates status for the command.<br>Bits Definition<br>Status field for the command. Refer to section 3.3.3.2.1. Refer to Figure 97 for<br>15:01<br>values specific to the Connect command.<br>00 Reserved|\n\n|Bits|Definition|\n|---|---|\n|15:01|Status field for the command. Refer to section 3.3.3.2.1. Refer to Figure 97 for<br>values specific to the Connect command.|\n|00|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 687,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3389",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21157507598400116
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3390",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11217691004276276
  },
  {
    "content": "**6.5** **Property Get Command and Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3391",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6415930986404419
  },
  {
    "content": "The Property Get command is used to specify the property value to return to the host (refer to section 3.1.3).\nThe fields for the Property Get command are defined in Figure 386. If an invalid property or invalid offset is\nspecified, then a status code of Invalid Field in Command shall be returned.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 298,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3392",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5923649668693542
  },
  {
    "content": "**Figure 386: Property Get Command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3393",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.457262247800827
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Opcode (OPC): Set to 7Fh to indicate a Fabrics command.|\n|01|Reserved|\n|03:02|Command Identifier (CID): This field specifies a unique identifier for the command. Refer to the<br>definition in Figure 80.|\n|04|Fabrics Command Type (FCTYPE): Set to 04h to indicate a Property Get command.|\n|39:05|Reserved|\n|40|Attributes (ATTRIB): Specifies attributes for the Property Get command.<br>Bits 7:3 are reserved.<br>Bits 2:0 specifies the size of the property to return. Valid values are shown in the table below.<br>Value Definition<br>000b 4 bytes<br>001b 8 bytes<br>010b to 111b Reserved|\n|43:41|Reserved|\n|47:44|Offset (OFST): Specifies the offset to the property to get. Refer to section 3.1.3.|\n|63:48|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 744,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_3394",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5144339799880981
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|000b|4 bytes|\n|001b|8 bytes|\n|010b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3395",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11868855357170105
  },
  {
    "content": "The Property Get response is used to return the value of the property requested to the host. The Property\nGet response is defined in Figure 387.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 144,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3396",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6610289216041565
  },
  {
    "content": "**Figure 387: Property Get Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3397",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3486049771308899
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Value (VALUE): Indicates the value returned for the property if the Property Get command is<br>successful. If the size of the property is four bytes, then the value is specified in bytes 03:00 and<br>bytes 07:04 are reserved.|\n|09:08|SQ Head Pointer (SQHD): Indicates the current Submission Queue Head pointer for the<br>associated Submission Queue.|\n|11:10|Reserved|\n|13:12|Command Identifier (CID): Indicates the identifier of the command that is being completed.|\n|15:14|Status (STS): Indicates status for the command.<br>Bits Definition<br>15:01 Status field for the command. Refer to section 3.3.3.2.1.<br>00 Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 660,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3398",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6788280606269836
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|15:01|Status field for the command. Refer to section 3.3.3.2.1.|\n|00|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 107,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3399",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3355869948863983
  },
  {
    "content": "**6.6** **Property Set Command and Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3400",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6590557098388672
  },
  {
    "content": "The Property Set command is used to set the value of a property (refer to section 3.1.3). The fields for the\nProperty Set command are defined in Figure 388. If an invalid property or invalid offset is specified, then a\nstatus code of Invalid Field in Command shall be returned.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 277,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3401",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6503917574882507
  },
  {
    "content": "**Figure 388: Property Set Command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3402",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4087880849838257
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|00|Opcode (OPC): Set to 7Fh to indicate a Fabrics command.|\n|01|Reserved|\n|03:02|Command Identifier (CID): This field specifies a unique identifier for the command. Refer to the<br>definition in Figure 80.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 237,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_3403",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1844870001077652
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3404",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10326288640499115
  },
  {
    "content": "**Figure 388: Property Set Command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3405",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5233182907104492
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|04|Fabrics Command Type (FCTYPE): Cleared to 00h to indicate a Property Set command.|\n|39:05|Reserved|\n|40|Attributes (ATTRIB): Specifies attributes for the Property Set command.<br>Bits 7:3 are reserved.<br>Bits 2:0 specifies the size of the property to update. Valid values are shown in the table below.<br>Value Definition<br>000b 4 bytes<br>001b 8 bytes<br>010b to 111b Reserved|\n|43:41|Reserved|\n|47:44|Offset (OFST): Specifies the offset to the property to set. Refer to section 3.1.3.|\n|55:48|Value (VALUE): Specifes the value used to update the property. If the size of the property is four<br>bytes, then the value is specified in bytes 51:48 and bytes 55:52 are reserved.|\n|63:56|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 730,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3406",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5553849339485168
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|000b|4 bytes|\n|001b|8 bytes|\n|010b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 82,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3407",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2759754955768585
  },
  {
    "content": "The Property Set response provides status for the Property Set command. The Property Set response is\ndefined in Figure 389.\n\n**Figure 389: Property Set Response**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3408",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25444886088371277
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Reserved|\n|09:08|SQ Head Pointer (SQHD): Indicates the current Submission Queue Head pointer for the<br>associated Submission Queue.|\n|11:10|Reserved|\n|13:12|Command Identifier (CID): Indicates the identifier of the command that is being completed.|\n|15:14|Status (STS): Indicates status for the command.<br>Bits Definition<br>15:01 Status field for the command. Refer to section 3.3.3.2.1.<br>00 Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 443,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3409",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6833781599998474
  },
  {
    "content": "|Bits|Definition|\n|---|---|\n|15:01|Status field for the command. Refer to section 3.3.3.2.1.|\n|00|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 107,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3410",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**6 Fabrics Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38803964853286743
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **7 I/O Commands **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3411",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48230618238449097
  },
  {
    "content": "An I/O command is a command submitted to an I/O Submission Queue. Figure 390 lists the I/O commands\nthat are defined for use in all I/O Command Sets. The following subsections provide definitions for each\ncommand. Refer to section 3.1.2 for mandatory, optional, and prohibited I/O commands for the various\ncontroller types. The following subsections describe the definition for each of these commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 401,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3412",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5608552098274231
  },
  {
    "content": "The user data format and any end-to-end protection information is I/O Command Set specific. Refer to each\nI/O Command Set specification for applicability and additional details, if any. Refer to the referenced I/O\nCommand Set specification for all I/O Command Set specific commands described in Figure 390.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 306,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3413",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2398146688938141
  },
  {
    "content": "Commands shall only be submitted by the host when the controller is ready as indicated in the Controller\nStatus property (CSTS.RDY) and after appropriate I/O Submission Queue(s) and I/O Completion Queue(s)\nhave been created.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 224,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 5
    },
    "chunk_id": "91cfd52ab0dc_3414",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Key: - - - - (Dashed Line) – Communication Boundary",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5001351237297058
  },
  {
    "content": "The submission queue entry (SQE) structure and the fields that are common to all I/O commands are\ndefined in section 3.3.3. The completion queue entry (CQE) structure and the fields that are common to all\nI/O commands are defined in section 3.3.3.2. The command specific fields in the SQE and CQE structures\n(i.e., SQE Command Dwords 10-15, CQE Dword 0, and CQE Dword 1) for I/O Commands supported across\nall I/O Command Sets are defined in this section.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 454,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3415",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4303657114505768
  },
  {
    "content": "**Figure 390: Opcodes for I/O Commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3416",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3022749125957489
  },
  {
    "content": "|Opcode by Field|Col2|Col3|Combined<br>1<br>Opcode|2<br>Command|Reference|\n|---|---|---|---|---|---|\n|(07)|(06:02)|(01:00)|(01:00)|(01:00)|(01:00)|\n|Standard<br>Command|Function|Data<br>3<br>Transfer|Data<br>3<br>Transfer|Data<br>3<br>Transfer|Data<br>3<br>Transfer|\n|0b|000 00b|00b|00h|4<br>Flush|7.1|\n|0b|000 11b|01b|0Dh|Reservation Register|7.3|\n|0b|000 11b|10b|0Eh|Reservation Report|7.5|\n|0b|001 00b|01b|11h|Reservation Acquire|7.2|\n|0b|001 01b|01b|15h|Reservation Release|7.4|\n|Vendor Specific|Vendor Specific|Vendor Specific|Vendor Specific|Vendor Specific|Vendor Specific|\n|1b|n/a|NOTE 3|80h to FFh|Vendor specific||\n|Notes:<br>1. Opcodes not listed are I/O Command Set specific or reserved.<br>2. All I/O commands use the Namespace Identifier (NSID) field. The value FFFFFFFFh is not supported in this field<br>unless footnote 4 in this figure indicates that a specific command does support that value.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified<br>or transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no<br>data transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command may support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.|Notes:<br>1. Opcodes not listed are I/O Command Set specific or reserved.<br>2. All I/O commands use the Namespace Identifier (NSID) field. The value FFFFFFFFh is not supported in this field<br>unless footnote 4 in this figure indicates that a specific command does support that value.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified<br>or transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no<br>data transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command may support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.|Notes:<br>1. Opcodes not listed are I/O Command Set specific or reserved.<br>2. All I/O commands use the Namespace Identifier (NSID) field. The value FFFFFFFFh is not supported in this field<br>unless footnote 4 in this figure indicates that a specific command does support that value.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified<br>or transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no<br>data transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command may support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.|Notes:<br>1. Opcodes not listed are I/O Command Set specific or reserved.<br>2. All I/O commands use the Namespace Identifier (NSID) field. The value FFFFFFFFh is not supported in this field<br>unless footnote 4 in this figure indicates that a specific command does support that value.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified<br>or transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no<br>data transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command may support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.|Notes:<br>1. Opcodes not listed are I/O Command Set specific or reserved.<br>2. All I/O commands use the Namespace Identifier (NSID) field. The value FFFFFFFFh is not supported in this field<br>unless footnote 4 in this figure indicates that a specific command does support that value.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified<br>or transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no<br>data transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command may support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.|Notes:<br>1. Opcodes not listed are I/O Command Set specific or reserved.<br>2. All I/O commands use the Namespace Identifier (NSID) field. The value FFFFFFFFh is not supported in this field<br>unless footnote 4 in this figure indicates that a specific command does support that value.<br>3. Indicates the data transfer direction of the command. All options to the command shall transfer data as specified<br>or transfer no data. All commands, including vendor specific commands, shall follow this convention: 00b = no<br>data transfer; 01b = host to controller; 10b = controller to host; 11b = bidirectional.<br>4. This command may support the use of the Namespace Identifier (NSID) field set to FFFFFFFFh.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 4874,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3417",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11468002200126648
  },
  {
    "content": "**7.1** **Flush command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3418",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5893175005912781
  },
  {
    "content": "The Flush command is used to request that the contents of volatile write cache be made non-volatile.\n\nIf a volatile write cache is enabled (refer to section 5.27.1.4), then the Flush command shall commit data\nand metadata associated with the specified namespace(s) to non-volatile media. The flush applies to all\ncommands for the specified namespace(s) completed by the controller prior to the submission of the Flush\ncommand. The controller may also flush additional data and/or metadata from any namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 508,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3419",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5900854468345642
  },
  {
    "content": "If bits 2:1 are set to 11b in the VWC field (refer to Figure 275) and the specified NSID is FFFFFFFFh, then\nthe Flush command applies to all namespaces attached to the controller processing the Flush command.\nIf bits 2:1 are set to 10b in the VWC field and the specified NSID is FFFFFFFFh, then the controller aborts\nthe command with a status code of Invalid Namespace or Format. If bits 2:1 are cleared to 00b in the VWC\nfield, then the controller behavior if the specified NSID is FFFFFFFFh is not indicated. Controllers compliant",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 532,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3420",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22797709703445435
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3421",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.659537672996521
  },
  {
    "content": "with NVM Express Base Specification revision 1.4 and later shall not set bits 2:1 in the VWC field to the\nvalue of 00b.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 119,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3422",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1822289228439331
  },
  {
    "content": "If a volatile write cache is not present or not enabled, then Flush commands shall have no effect and:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3423",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27371856570243835
  },
  {
    "content": "a) shall complete successfully if a sanitize operation is not in progress; and\nb) may complete successfully if a sanitize operation is in progress.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 147,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3424",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17194703221321106
  },
  {
    "content": "All command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3425",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4257424473762512
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3426",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34166327118873596
  },
  {
    "content": "Upon completion of the Flush command, the controller posts a completion queue entry to the associated\nI/O Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 123,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3427",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22302617132663727
  },
  {
    "content": "**7.2** **Reservation Acquire command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3428",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6940458416938782
  },
  {
    "content": "The Reservation Acquire command is used to acquire a reservation on a namespace, preempt a reservation\nheld on a namespace, and abort a reservation held on a namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3429",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5368536710739136
  },
  {
    "content": "The command uses Command Dword 10 and a Reservation Acquire data structure in memory. If the\ncommand uses PRPs for the data transfer, then PRP Entry 1 and PRP Entry 2 fields are used. If the\ncommand uses SGLs for the data transfer, then the SGL Entry 1 field is used. All other command specific\nfields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 315,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3430",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.629974365234375
  },
  {
    "content": "**Figure 391: Reservation Acquire – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3431",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4303632378578186
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the location of a data buffer where data is transferred<br>from. Refer to Figure 87 for the definition of this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 197,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3432",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26521748304367065
  },
  {
    "content": "**Figure 392: Reservation Acquire – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3433",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5873067378997803
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:08|Reservation Type (RTYPE): This field specifies the type of reservation to be created. The field is<br>defined in Figure 394.|\n|07:04|Reserved|\n|03|Ignore Existing Key (IEKEY): If this bit is set to a ‘1’, the controller shall return an error of Invalid<br>Field in Command. If this bit is cleared to ‘0’, then the Current Reservation Key is checked.|\n|02:00|Reservation Acquire Action (RACQA): This field specifies the action that is performed by the<br>command.<br>RACQA Value Description Reference<br>000b Acquire 8.19.5<br>001b Preempt 8.19.7<br>010b Preempt and Abort 8.19.7<br>011b to 111b Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 657,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3434",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5537904500961304
  },
  {
    "content": "|RACQA Value|Description|Reference|\n|---|---|---|\n|000b|Acquire|8.19.5|\n|001b|Preempt|8.19.7|\n|010b|Preempt and Abort|8.19.7|\n|011b to 111b|Reserved|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 158,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3435",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4101938307285309
  },
  {
    "content": "**Figure 393: Reservation Acquire Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3436",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.578479528427124
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Current Reservation Key (CRKEY): The field specifies the current reservation key<br>associated with the host.|\n|15:08|Preempt Reservation Key (PRKEY): If the Reservation Acquire Action is set to 001b (i.e.,<br>Preempt) or 010b (i.e., Preempt and Abort), then this field specifies the reservation key to<br>be unregistered from the namespace. For all other Reservation Acquire Action values, this<br>field is reserved.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 455,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3437",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1803576648235321
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3438",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3021896183490753
  },
  {
    "content": "**Figure 394: Reservation Type Encoding**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3439",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4493899345397949
  },
  {
    "content": "|Value|Description|\n|---|---|\n|0h|Reserved|\n|1h|Write Exclusive Reservation|\n|2h|Exclusive Access Reservation|\n|3h|Write Exclusive - Registrants Only Reservation|\n|4h|Exclusive Access - Registrants Only Reservation|\n|5h|Write Exclusive - All Registrants Reservation|\n|6h|Exclusive Access - All Registrants Reservation|\n|7h to FFh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 339,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3440",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1713603436946869
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3441",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.496917188167572
  },
  {
    "content": "When the command is completed, the controller shall post a completion queue entry to the associated I/O\nCompletion Queue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 159,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3442",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2664797604084015
  },
  {
    "content": "**7.3** **Reservation Register command**\n\nThe Reservation Register command is used to register, unregister, or replace a reservation key.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 137,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3443",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6309110522270203
  },
  {
    "content": "The command uses Command Dword 10 and a Reservation Register data structure in memory (refer to\nFigure 397). If the command uses PRPs for the data transfer, then PRP Entry 1 and PRP Entry 2 fields are\nused. If the command uses SGLs for the data transfer, then the SGL Entry 1 field is used. All other command\nspecific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 338,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3444",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.618362545967102
  },
  {
    "content": "**Figure 395: Reservation Register – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3445",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4400675594806671
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the location of a data buffer where data is transferred<br>from. Refer to Figure 87 for the definition of this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 197,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3446",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28518375754356384
  },
  {
    "content": "**Figure 396: Reservation Register – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3447",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49797523021698
  },
  {
    "content": "|CPTPL Value|Description|\n|---|---|\n|00b|No change to PTPL state|\n|01b|Reserved|\n|10b|Clear PTPL state to ‘0’. Reservations are released and registrants are<br>cleared on a power on.|\n|11b|Set PTPL state to ‘1’. Reservations and registrants persist across a power<br>loss.|\n\n|Bits|Description|\n|---|---|\n|31:30|Change Persist Through Power Loss State (CPTPL): This field allows the Persist Through<br>Power Loss (PTPL) state associated with the namespace to be modified as a side effect of<br>processing this command. If the Reservation Persistence Feature (refer to section 5.27.1.27) is<br>saveable, then any change to the PTPL state as a result of processing this command shall be<br>applied to both the current value and the saved value of that feature.<br>CPTPL Value Description<br>00b No change to PTPL state<br>01b Reserved<br>Clear PTPL state to ‘0’. Reservations are released and registrants are<br>10b<br>cleared on a power on.<br>Set PTPL state to ‘1’. Reservations and registrants persist across a power<br>11b<br>loss.|\n|29:04|Reserved|\n|03|Ignore Existing Key (IEKEY): If this bit is set to a ‘1’, then Reservation Register Action (RREGA)<br>field values that use the Current Reservation Key (CRKEY) shall succeed regardless of the value<br>of the Current Reservation Key field in the command (i.e., the current reservation key is not<br>checked).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1363,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3448",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28798574209213257
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3449",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2453153431415558
  },
  {
    "content": "**Figure 396: Reservation Register – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3450",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6287990212440491
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|02:00|Reservation Register Action (RREGA): This field specifies the registration action that is<br>performed by the command.<br>RREGA Value Description Reference<br>000b Register Reservation Key 8.19.3<br>001b Unregister Reservation Key 8.19.4<br>010b Replace Reservation Key 8.19.3<br>011b to 111b Reserved|\n\n|RREGA Value|Description|Reference|\n|---|---|---|\n|000b|Register Reservation Key|8.19.3|\n|001b|Unregister Reservation Key|8.19.4|\n|010b|Replace Reservation Key|8.19.3|\n|011b to 111b|Reserved|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 540,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3451",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6251826286315918
  },
  {
    "content": "**Figure 397: Reservation Register Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3452",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6106042861938477
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|07:00|Current Reservation Key (CRKEY): If the Reservation Register Action is 001b (i.e.,<br>Unregister Reservation Key) or 010b (i.e., Replace Reservation Key), then this field contains<br>the current reservation key associated with the host. For all other Reservation Register<br>Action values, this field is reserved.<br>The controller ignores the value of this field when the Ignore Existing Key (IEKEY) bit is set<br>to ‘1’.|\n|15:08|New Reservation Key (NRKEY): If the Reservation Register Action field is cleared to 000b<br>(i.e., Register Reservation Key) or 010b (i.e., Replace Reservation Key), then this field<br>contains the new reservation key associated with the host. For all other Reservation Register<br>Action values, this field is reserved.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 789,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3453",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12768526375293732
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3454",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.496917188167572
  },
  {
    "content": "When the command is completed, the controller shall post a completion queue entry to the associated I/O\nCompletion Queue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 159,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3455",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27060192823410034
  },
  {
    "content": "**7.4** **Reservation Release command**\n\nThe Reservation Release command is used to release or clear a reservation held on a namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 135,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3456",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5492494106292725
  },
  {
    "content": "The command uses Command Dword 10 and a Reservation Release data structure in memory. If the\ncommand uses PRPs for the data transfer, then PRP Entry 1 and PRP Entry 2 fields are used. If the\ncommand uses SGLs for the data transfer, then the SGL Entry 1 field is used. All other command specific\nfields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 315,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3457",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5171617865562439
  },
  {
    "content": "**Figure 398: Reservation Release – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3458",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3969891667366028
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the location of a data buffer where data is transferred<br>from. Refer to Figure 87 for the definition of this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 197,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3459",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2246493101119995
  },
  {
    "content": "**Figure 399: Reservation Release – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3460",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.598153293132782
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:08|Reservation Type (RTYPE): If the Reservation Release Action field is cleared to 000b (i.e.,<br>Release), then this field specifies the type of reservation that is being released. The reservation<br>type in this field shall match the current reservation type. If the reservation type in this field does<br>not match the current reservation type, then the controller should return a status code of Invalid<br>Field in Command. This field is defined in Figure 394.|\n|07:04|Reserved|\n|03|Ignore Existing Key (IEKEY): If this bit is set to a ‘1’, the controller shall return an error of Invalid<br>Field in Command. If this bit is cleared to ‘0’, then the Current Reservation Key is checked.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 740,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3461",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2569977343082428
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3462",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2489805519580841
  },
  {
    "content": "**Figure 399: Reservation Release – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3463",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5165853500366211
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|02:00|Reservation Release Action (RRELA): This field specifies the reservation action that is<br>performed by the command.<br>Value Description Reference<br>000b Release 8.19.6<br>001b Clear 8.19.8<br>010b to 111b Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 253,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3464",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6160688400268555
  },
  {
    "content": "|Value|Description|Reference|\n|---|---|---|\n|000b|Release|8.19.6|\n|001b|Clear|8.19.8|\n|010b to 111b|Reserved|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3465",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4915615916252136
  },
  {
    "content": "**Figure 400: Reservation Release Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3466",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48574650287628174
  },
  {
    "content": "|Bytes|O/M|Description|\n|---|---|---|\n|7:0|M|Current Reservation Key (CRKEY): The field specifies the current reservation key<br>associated with the host.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3467",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18985086679458618
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3468",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.496917188167572
  },
  {
    "content": "When the command is completed, the controller shall post a completion queue entry to the associated I/O\nCompletion Queue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 159,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3469",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2755545675754547
  },
  {
    "content": "**7.5** **Reservation Report command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3470",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6862244009971619
  },
  {
    "content": "The Reservation Report command returns a Reservation Status data structure to memory that describes\nthe registration and reservation status of a namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3471",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6821892261505127
  },
  {
    "content": "The size of the Reservation Status data structure is a function of the number of controllers in the NVM\nsubsystem that are associated with hosts that are registrants of the namespace (i.e., there is a Registered\nController data structure and/or Registered Controller extended data structure for each such controller).\nThe controller returns the data structure in Figure 404 if the host has selected a 64-bit Host Identifier and\nthe data structure in Figure 405 if the host has selected a 128-bit Host Identifier (refer to section 5.27.1.25).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 541,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3472",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44359254837036133
  },
  {
    "content": "If a 64-bit Host Identifier has been specified and the Extended Data Structure bit is set to ‘1’ in Command\nDword 11, then the controller shall abort the command with the status code of Host Identifier Inconsistent\nFormat. If a 128-bit Host Identifier has been specified and the Extended Data Structure bit is cleared to ‘0’\nin Command Dword 11, then the controller shall abort the command with the status code of Host Identifier\nInconsistent Format.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 450,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3473",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42246201634407043
  },
  {
    "content": "The command uses Command Dword 10 and Command Dword 11. If the command uses PRPs for the\ndata transfer, then PRP Entry 1 and PRP Entry 2 fields are used. If the command uses SGLs for the data\ntransfer, then the SGL Entry 1 field is used. All other command specific fields are reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 285,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3474",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2773247957229614
  },
  {
    "content": "**Figure 401: Reservation Report – Data Pointer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3475",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3939456045627594
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|127:00|Data Pointer (DPTR): This field specifies the location of a data buffer where data is transferred<br>to. Refer to Figure 87 for the definition of this field.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 195,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3476",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.275200217962265
  },
  {
    "content": "**Figure 402: Reservation Report – Command Dword 10**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3477",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4838036894798279
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:00|Number of Dwords (NUMD): This field specifies the number of dwords of the Reservation Status<br>data structure to transfer. This is a 0’s based value.<br>If this field corresponds to a length that is less than the size of the Reservation Status data<br>structure, then only that specified portion of the data structure is transferred. If this field<br>corresponds to a length that is greater than the size of the Reservation Status data structure, then<br>the entire contents of the data structure are transferred and no additional data is transferred.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 589,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3478",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32119590044021606
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3479",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16164004802703857
  },
  {
    "content": "**Figure 403: Reservation Report – Command Dword 11**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3480",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28644677996635437
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:01|Reserved|\n|00|Extended Data Structure (EDS): If set to ‘1’, then the controller returns the extended data<br>structure defined in Figure 405. If cleared to ‘0’, then the controller returns the data structure<br>defined in Figure 404.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 270,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3481",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46529421210289
  },
  {
    "content": "**Figure 404: Reservation Status Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3482",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3962351977825165
  },
  {
    "content": "|PTPLS Value|Description|\n|---|---|\n|0|Reservations are released and registrants are cleared on a power on.|\n|1|Reservations and registrants persist across a power loss.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 170,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3483",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47923028469085693
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|03:00|Generation (GEN): This field contains a 32-bit wrapping counter that is incremented any time<br>any one the following occur:<br>• a Reservation Register command completes successfully on any controller<br>associated with the namespace;<br>• a Reservation Release command with Reservation Release Action (RRELA) set to<br>001b (i.e., Clear) completes successfully on any controller associated with the<br>namespace; and<br>• a Reservation Acquire command with Reservation Acquire Action (RACQA) set to<br>001b (Preempt) or 010b (Preempt and Abort) completes successfully on any<br>controller associated with the namespace.<br>If the value of this field is FFFFFFFFh, then the field shall be cleared to 0h when incremented<br>(i.e., rolls over to 0h).|\n|04|Reservation Type (RTYPE): This field indicates whether a reservation is held on the<br>namespace. A value of 0h indicates that no reservation is held on the namespace. A non-zero<br>value indicates a reservation is held on the namespace and the reservation type is defined in<br>Figure 394.|\n|06:05|Number of Registered Controllers (REGCTL): This field indicates the number of controllers<br>that are associated with hosts that are registrants of the namespace. This indicates the number<br>of Registered Controller data structures and/or Registered Controller extended data structures<br>contained in this data structure.|\n|08:07|Reserved|\n|09|Persist Through Power Loss State (PTPLS): This field indicates the Persist Through Power<br>Loss State associated with the namespace.<br>PTPLS Value Description<br>0 Reservations are released and registrants are cleared on a power on.<br>1 Reservations and registrants persist across a power loss.|\n|23:10|Reserved|\n|47:24|Registered Controller Data Structure 0|\n||...|\n|24*n+47:<br>24*(n+1)|Registered Controller Data Structure n|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1868,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3484",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39906638860702515
  },
  {
    "content": "**Figure 405: Reservation Status Extended Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3485",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.414789080619812
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|23:00|Refer to Figure 404 for definition.|\n|63:24|Reserved|\n|127:64|Registered Controller Extended Data Structure 0|\n||...|\n|64*(n+1)+63:<br>64*(n+1)|Registered Controller Extended Data Structure n|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3486",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22559607028961182
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3487",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28144845366477966
  },
  {
    "content": "**Figure 406: Registered Controller Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3488",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47894370555877686
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Controller ID (CNTLID): This field contains the controller ID (i.e., the value of the CNTLID field<br>in the Identify Controller data structure) of the controller whose status is reported in this data<br>structure.<br>If the controller is a dynamic controller (refer to section 3.1.1) that is not associated with a host,<br>then the Controller ID field shall be set to FFFFh.|\n|02|Reservation Status (RCSTS): This field indicates the reservation status of the controller<br>described by this data structure.<br>Bits 7:1 are reserved.<br>Bit 0 is set to '1' if the controller is associated with a host that holds a reservation on the<br>namespace.|\n|07:03|Reserved|\n|15:08|Host Identifier (HOSTID): This field contains the 64-bit Host Identifier of the controller<br>described by this data structure.|\n|23:16|Reservation Key (RKEY): This field contains the reservation key of the host associated with<br>the controller described by this data structure.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 989,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3489",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48049071431159973
  },
  {
    "content": "**Figure 407: Registered Controller Extended Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3490",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48892322182655334
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Controller ID (CNTLID): Refer to Figure 406 for definition.|\n|02|Reservation Status (RCSTS): Refer to Figure 406 for definition.|\n|07:03|Reserved|\n|15:08|Reservation Key (RKEY): Refer to Figure 406 for definition.|\n|31:16|Host Identifier (HOSTID): This field contains the 128-bit Host Identifier of the controller<br>described by this data structure.|\n|63:32|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 405,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3491",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08151422441005707
  },
  {
    "content": "**Command Completion**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3492",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.496917188167572
  },
  {
    "content": "When the command is completed, the controller shall post a completion queue entry to the associated I/O\nCompletion Queue indicating the status for the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 159,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3493",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**7 I/O Commands **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07475369423627853
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **8 Extended Capabilities **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3494",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6509008407592773
  },
  {
    "content": "This section of the document describes extended capabilities that are optional and available for\nimplementation on an NVMe device.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 130,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3495",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17034615576267242
  },
  {
    "content": "**8.1** **Asymmetric Namespace Access Reporting**\n\n**Asymmetric Namespace Access Reporting Overview**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3496",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6323912739753723
  },
  {
    "content": "Asymmetric Namespace Access (ANA) occurs in environments where namespace access characteristics\n(e.g., performance or ability to access the media) may vary based on:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3497",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3994382917881012
  },
  {
    "content": "- the controller used to access the namespace (e.g., Fabrics); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3498",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3635314702987671
  },
  {
    "content": "- the internal configuration of the NVM subsystem. Asymmetric Namespace Access Reporting is\nused to indicate to the host information about those access characteristics.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3499",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43331286311149597
  },
  {
    "content": "Shared namespaces may be accessed through controllers via multiple PCIe ports or fabric ports (refer to\nsection 2.4.1). The controllers that provide access to a shared namespace may provide identical access\ncharacteristics through all controllers (i.e., symmetric access), or may provide different access\ncharacteristics through some controllers (i.e., asymmetric access).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 372,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3500",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6291225552558899
  },
  {
    "content": "Private namespaces are accessed by only one controller at a time. The access characteristics of the\nnamespace through that controller may be impacted as a result of changes to the internal configuration of\nthe NVM subsystem. If the access characteristics of the namespace through that controller are impacted\nby the internal configuration of the NVM subsystem, then asymmetric access occurs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 391,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3501",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6203727722167969
  },
  {
    "content": "Symmetric access to a namespace occurs when:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3502",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17889194190502167
  },
  {
    "content": "- the access characteristics using one controller are identical to the access characteristics when\nusing a different controller; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 132,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3503",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36125802993774414
  },
  {
    "content": "- changes to the internal configuration of the NVM subsystem do not impact the access\ncharacteristics.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3504",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28939253091812134
  },
  {
    "content": "Asymmetric access to a namespace occurs when:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3505",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18767444789409637
  },
  {
    "content": "- the access characteristics using one controller may differ from the access characteristics when\nusing a different controller; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 130,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3506",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4130555987358093
  },
  {
    "content": "- changes to the internal configuration of the NVM subsystem may impact the access characteristics.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3507",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6907922029495239
  },
  {
    "content": "While commands may be sent to a shared namespace through any attached controller with asymmetric\naccess, the characteristics (e.g., performance or ability to access the media) may differ based on which\ncontroller is used; as a result, the host should consider those characteristics when selecting which controller\nto use for each command that accesses the namespace. The NVM subsystem may perform autonomous\ninternal reconfiguration that results in a change to the access characteristics.\n\nIf an NVM subsystem supports Asymmetric Namespace Access Reporting, then all controllers in that NVM\nsubsystem shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 607,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3508",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6378864645957947
  },
  {
    "content": "- set bit 3 to ‘1’ in the Controller Multi-path I/O and Namespace Sharing Capabilities (CMIC) field in\nthe Identify Controller data structure (refer to Figure 275) to indicate support for Asymmetric\nNamespace Access Reporting;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 226,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3509",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6770063042640686
  },
  {
    "content": "- set bit 0 to ‘1’ in the Asymmetric Namespace Access Capabilities (ANACAP) field in the Identify\nController data structure to indicate that the ANA Optimized state is able to be reported;\n\n- set bit 1 to ‘1’ in the ANACAP field in the Identify Controller data structure if ANA Non-Optimized\nstate is able to be reported;\n\n- set bit 2 to ‘1’ in the ANACAP field in the Identify Controller data structure if ANA Inaccessible state\nis able to be reported;\n\n- set bit 3 to ‘1’ in the ANACAP field in the Identify Controller data structure if ANA Persistent Loss\nstate is able to be reported;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 588,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3510",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23314842581748962
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3511",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19712787866592407
  },
  {
    "content": "- set bit 4 to ‘1’ in the ANACAP field in the Identify Controller data structure if ANA Change state is\nable to be reported;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3512",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26159194111824036
  },
  {
    "content": "- support Asymmetric Namespace Access Change Notices (refer to section 5.27.1.8); and\n\n- support the Asymmetric Namespace Access log page (refer to section 5.16.1.13).\n\nNamespaces attached to a controller that supports Asymmetric Namespace Access Reporting shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 263,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3513",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09152810275554657
  },
  {
    "content": "- be members of an ANA Group; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3514",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5880889892578125
  },
  {
    "content": "- supply a valid ANA Group Identifier in the ANA Group Identifier (ANAGRPID) field in the Identify\nNamespace data structure (refer to the applicable I/O Command Set specification).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 180,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3515",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1884307861328125
  },
  {
    "content": "A controller that supports Asymmetric Namespace Access Reporting may also support multiple domains\n(refer to section 3.2.4).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3516",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49957647919654846
  },
  {
    "content": "Figure 408 shows an example of an NVM subsystem where access characteristics vary as a result of the\npresence of two independent domains. In this example, the non-volatile media for namespace B and for\nnamespace C are contained within the same domain that contains controller 2. As a result, controller 2\nprovides optimized access to namespace B and to namespace C while controller 1 does not provide\noptimized access to namespace B or to namespace C. In an NVM subsystem that supports multiple\ndomains (refer to section 3.2.4), the Media Access Boundary shown in Figure 408 may be a Communication\nboundary as shown in Figure 75 and Figure 76.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 643,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3517",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4535777270793915
  },
  {
    "content": "**Figure 408: Namespace B and C optimized through Controller 2**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3518",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22164572775363922
  },
  {
    "content": "Port *x* NVM Port *y*",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3519",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2535168528556824
  },
  {
    "content": "To provide optimized access to namespace B through controller 1, the NVM subsystem may be\nadministratively reconfigured, or may perform autonomous internal reconfiguration actions that change the\naccess characteristics of namespace B when accessed through controller 1 and controller 2 as shown in\nFigure 409. Controller 2 provides optimized access to namespace C while controller 1 provides optimized\naccess to namespace B. In an NVM subsystem that supports multiple domains (refer to section 3.2.4), the\nMedia Access Boundary shown in Figure 409 may be a Communication boundary as shown in Figure 75\nand Figure 76.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 616,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3520",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35411468148231506
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3521",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21808503568172455
  },
  {
    "content": "**Figure 409: Namespace B optimized through Controller 1**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3522",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23540431261062622
  },
  {
    "content": "Port *x* NVM Port *y*",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3523",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.058910150080919266
  },
  {
    "content": "Namespaces that are members of the same ANA Group perform identical asymmetric namespace access\nstate transitions. The ANA Group maintains the same asymmetric namespace access state for all\nnamespaces that are members of that ANA Group (i.e., a change in the asymmetric namespace access\nstate of one namespace only occurs as part of a change in the asymmetric namespace access state of all\nnamespaces that are members of that ANA Group). Namespaces that are members of the same ANA\nGroup shall be members of the same domain (refer to section 2.3.1). The method for assigning namespaces\nto ANA Groups is outside the scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 643,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3524",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5840036869049072
  },
  {
    "content": "An ANA Group may contain zero or more namespaces, zero or more NVM Sets, or zero or more Endurance\nGroups. The mapping of namespaces, NVM Sets, and Endurance Groups to ANA Groups is vendor\nspecific.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 198,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3525",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6024813652038574
  },
  {
    "content": "A valid ANA Group Identifier is a non-zero value that is less than or equal to ANAGRPMAX (refer to Figure\n275).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3526",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5810448527336121
  },
  {
    "content": "The ANA Group Identifier (ANAGRPID) for each ANA Group shall be unique within the NVM subsystem. If\nbit 6 in the ANACAP field in the Identify Controller data structure is set to ‘1’, then the ANA Group Identifier\nshall not change while the namespace is attached to any controller in the NVM subsystem. If bit 6 in the\nANACAP field is cleared to ‘0’, then the ANA Group Identifier may change while the namespace is attached\nto any controller in the NVM subsystem. If the ANA Group Identifier changes, the controller shall issue the\nAsymmetric Namespace Access Change Notice as described in 8.1.3.6.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 597,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3527",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2985270321369171
  },
  {
    "content": "Figure 410 shows the following four namespaces:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3528",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4145362377166748
  },
  {
    "content": "- the private namespace A in a first ANA Group;\n\n- namespace B and namespace D, that are in the same second ANA Group; and\n\n- namespace C that is in a third ANA Group.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 167,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3529",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.195798859000206
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3530",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21595551073551178
  },
  {
    "content": "**Figure 410: Multiple Namespace groups**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3531",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.215676411986351
  },
  {
    "content": "Port *x* NVM Port *y*",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3532",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29740607738494873
  },
  {
    "content": "**Asymmetric Namespace Access states**\n\nThe Asymmetric Namespace Access State indicates information about the characteristics of the\nrelationship between a controller and an ANA Group. The following asymmetric namespace access states\nare defined:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3533",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24954819679260254
  },
  {
    "content": "- ANA Optimized (refer to section 8.1.3.1);\n\n- ANA Non-Optimized (refer to section 8.1.3.2);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3534",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5183337926864624
  },
  {
    "content": "- ANA Inaccessible (refer to section 8.1.3.3);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3535",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5327121019363403
  },
  {
    "content": "- ANA Persistent Loss (refer to section 8.1.3.4); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3536",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5803873538970947
  },
  {
    "content": "- ANA Change (refer to section 8.1.3.5).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3537",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48452088236808777
  },
  {
    "content": "**8.1.3.1** **ANA Optimized state**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3538",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4028354287147522
  },
  {
    "content": "While the relationship between the controller and an ANA group is in this state, the characteristic of that\nrelationship to each namespace in that group is optimized. Commands processed by a controller that\nreports this state for an ANA Group provide optimized access characteristics to any namespace in that ANA\nGroup. A controller that supports ANA Reporting shall support reporting this state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 396,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3539",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4178587794303894
  },
  {
    "content": "While in this state, all commands, functions, and operations supported by the namespace shall perform as\ndescribed in this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 137,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3540",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27189910411834717
  },
  {
    "content": "**8.1.3.2** **ANA Non-Optimized state**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3541",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46208715438842773
  },
  {
    "content": "While the relationship between the controller and an ANA group is in this state, the characteristic of that\nrelationship to each namespace in that group is non-optimized. Commands processed by a controller that\nreports this state for an ANA Group provide non-optimized access characteristics (e.g., the processing of\nsome commands, especially those involving data transfer, may operate with lower performance or may use\nNVM subsystem resources less effectively than if a controller is used that reports the optimized state) to\nany namespace in that ANA Group. Support for reporting this state is optional.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 605,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3542",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39275261759757996
  },
  {
    "content": "While in this state, all commands, functions, and operations supported by the namespace shall perform as\ndescribed in this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 137,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3543",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33348649740219116
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3544",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17166045308113098
  },
  {
    "content": "**8.1.3.3** **ANA Inaccessible state**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3545",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5248512625694275
  },
  {
    "content": "While the relationship between the controller and an ANA group is in this state, the characteristic of that\nrelationship to each namespace in that group is inaccessible. Commands processed by a controller that\nreports this state for an ANA Group are not able to access user data of namespaces in that ANA Group.\nThe namespaces may become accessible through the controller reporting this state at a future time (i.e., a\nsubsequent ANA state transition may occur). Support for reporting this state is optional.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 508,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3546",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5715317726135254
  },
  {
    "content": "While in this state, accurate namespace related capacity information may not be available. As a result,\nsome namespace capacity information returned in the Identify Namespace data structure (e.g., the NUSE\nfield and the NVMCAP field), are cleared to 0h. For that namespace capacity information, hosts should use\nthe Identify Namespace data structure returned from a controller that reports the relationship between the\ncontroller and the namespace to be in the ANA Optimized state or in the ANA Non-Optimized state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 515,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3547",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34403884410858154
  },
  {
    "content": "A controller shall abort commands, other than those described in section 8.1.4, with a status code of\nAsymmetric Access Inaccessible if those commands are submitted while the relationship between the\nnamespace specified by the command and the controller processing the command is in this state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 294,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3548",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5154152512550354
  },
  {
    "content": "While ANA Inaccessible state is reported by a controller for the namespace, the host should retry the\ncommand on a different controller that is reporting ANA Optimized state or ANA Non-Optimized state. If no\ncontrollers are reporting ANA Optimized state or ANA Non-Optimized state, then a transition may be\noccurring such that a controller reporting the Inaccessible state may become accessible and the host should\nretry the command on the controller reporting Inaccessible state for at least ANATT seconds (refer to Figure\n275). Refer to section 8.10.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 554,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3549",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5313154458999634
  },
  {
    "content": "**8.1.3.4** **ANA Persistent Loss state**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3550",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4555739462375641
  },
  {
    "content": "While the relationship between the controller and an ANA group is in this state, the characteristic of that\nrelationship to each namespace in that group is persistently inaccessible. Commands processed by a\ncontroller that reports this state for an ANA Group are persistently not able to access user data of\nnamespaces in that ANA Group. The relationship between a controller and an ANA Group in this state shall\nnot transition to any other ANA state. Support for reporting this state is optional.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 497,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3551",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5133563876152039
  },
  {
    "content": "While in this state, accurate namespace related capacity information may not be available. As a result,\nsome namespace capacity information returned in the Identify Namespace data structure (e.g., the NUSE\nfield and the NVMCAP field), are cleared to 0h. For that namespace capacity information, hosts should use\nthe Identify Namespace data structure returned from a controller that reports the relationship between the\ncontroller and the namespace to be in the ANA Optimized state or in the ANA Non-Optimized state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 515,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3552",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34548693895339966
  },
  {
    "content": "A controller shall abort commands, other than those described in section 8.1.4, with a status code of\nAsymmetric Access Persistent Loss if those commands are submitted while the relationship between the\nnamespace specified by the command and the controller processing the command is in this state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 297,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3553",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5418359041213989
  },
  {
    "content": "While ANA Persistent Loss state is reported by a controller for the namespace, the host should retry the\ncommand on a different controller that is reporting ANA Optimized state or ANA Non-Optimized state. If no\ncontrollers are reporting ANA Optimized state or ANA Non-Optimized state, then a transition may be\noccurring such that a controller reporting the Inaccessible state may become accessible and the host should\nretry the command on the controller reporting Inaccessible state for at least ANATT seconds (refer to Figure\n275).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 532,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3554",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44016286730766296
  },
  {
    "content": "**8.1.3.5** **ANA Change state**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3555",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46373721957206726
  },
  {
    "content": "The change from one asymmetric namespace access state to another asymmetric namespace access state\nis called a transition. Transitions may occur in such a way that the ANA Change state is not visible to the\nhost (i.e., the ANA Change state may or may not be reported in the Asymmetric Namespace Access State\nfield in the Asymmetric Namespace Access log page (refer to section 5.16.1.13)). Support for reporting this\nstate is optional.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 434,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3556",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4027058184146881
  },
  {
    "content": "A controller shall abort commands, other than those described in 8.1.4, with a status code of Asymmetric\nAccess Transition if those commands are submitted while the relationship between the namespace\nspecified by the command and the controller processing the command is in this state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 284,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3557",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12803645431995392
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3558",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20739980041980743
  },
  {
    "content": "While ANA Change state is reported by a controller for the namespace, the host should:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3559",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28153690695762634
  },
  {
    "content": "a) after a short delay, retry the command on the same controller for at least ANATT (refer to Figure",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3560",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5288238525390625
  },
  {
    "content": "275) seconds (e.g., if ANATT is 30, perform 3 retries at 10 s intervals, or 10 retries at 3 s intervals);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 105,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3561",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33026331663131714
  },
  {
    "content": "or\nb) retry the command on a different controller that is reporting ANA Optimized state or ANA Non\nOptimized state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 115,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3562",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09534221887588501
  },
  {
    "content": "**8.1.3.6** **Asymmetric Namespace Access Change Notifications**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3563",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6793068051338196
  },
  {
    "content": "If Asymmetric Namespace Access Change Notices are enabled on a controller, then an Asymmetric\nNamespace Access Change Notice shall be sent as described in section 5.27.1.8 by the controllers where\nthe change occurred:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 217,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3564",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46981891989707947
  },
  {
    "content": "a) if an ANA Group Identifier (refer to Figure 275) changes;\nb) if an asymmetric namespace access state transition fails (e.g., a transition begins, but does not",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 161,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3565",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5948484539985657
  },
  {
    "content": "complete and the controller returns to the state that existed before the transition began); or\nc) upon entry to the following ANA states, unless the state entry is a result of a namespace\nattachment:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 199,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3566",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4720393717288971
  },
  {
    "content": "- ANA Optimized State;\n\n- ANA Non-Optimized State;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 0
    },
    "chunk_id": "91cfd52ab0dc_3567",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Document Root",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6358063817024231
  },
  {
    "content": "- ANA Inaccessible State; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3568",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6215934753417969
  },
  {
    "content": "- ANA Persistent Loss State.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3569",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29288503527641296
  },
  {
    "content": "**Asymmetric Namespace Access States Command Processing Effects**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3570",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4958612620830536
  },
  {
    "content": "Processing of Admin commands that:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3571",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3642721176147461
  },
  {
    "content": "- are not NVM Command Set specific commands; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3572",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27358031272888184
  },
  {
    "content": "- do not use the Namespace Identifier (i.e., Figure 139 – “Namespace Identifier Used” column\nindicates “No”),",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3573",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16927765309810638
  },
  {
    "content": "are not affected by ANA states, except as specified in Figure 411.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3574",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1871539056301117
  },
  {
    "content": "Figure 411 describes Asymmetric Namespace Access effects on command processing.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3575",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6988770961761475
  },
  {
    "content": "**Figure 411: ANA effects on Command Processing**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3576",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5409854650497437
  },
  {
    "content": "|Command|ANA State|Effects on command processing|\n|---|---|---|\n|Get Features|ANA Inaccessible,<br>ANA Persistent Loss,<br>or ANA Change|1<br>The following feature identifiers are not available :<br>a) Reservation Notification Mask (i.e., 82h);<br>b) Reservation Persistence (i.e., 83h); and<br>2<br>c) I/O Command Set specific feature identifiers .|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 350,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3577",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17973433434963226
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3578",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18492618203163147
  },
  {
    "content": "**Figure 411: ANA effects on Command Processing**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3579",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6143710017204285
  },
  {
    "content": "|Command|ANA State|Effects on command processing|\n|---|---|---|\n|Get Log Page|ANA Inaccessible,<br>ANA Persistent Loss,<br>or ANA Change|The following log pages are affected:<br>a) Error Information (i.e., 01h): The log page is not<br>required to contain entries for namespaces whose<br>relationship to the controller processing the<br>command is in the:<br>a. ANA Inaccessible state (refer to section<br>8.1.3.3);<br>b. the ANA Persistent Loss state (refer to<br>section 8.1.3.4); or<br>c. the ANA Change state (refer to section<br>8.1.3.5).<br>1<br>The following log pages are not available :<br>a) Media Unit Status log page (refer to section<br>5.16.1.16); and<br>b) Supported Capacity Configuration List log page<br>(refer to section 5.16.1.17).|\n|Identify|ANA Inaccessible or<br>ANA Persistent Loss|Capacity fields in the Identify Namespace data structure<br>(refer to the applicable I/O Command Set specification)<br>information are cleared to 0h.|\n|Set Features|ANA Inaccessible|The saving of features shall not be supported and the<br>1<br>following feature identifiers are not available :<br>a) Reservation Notification Mask (i.e., 82h);<br>b) Reservation Persistence (i.e., 83h); and<br>2<br>I/O Command Set specific feature identifiers .<br>If the NSID is set to FFFFFFFFh, then the command shall<br>3<br>abort with a status code of Asymmetric Access Inaccessible<br>(refer to section 8.1.3.3).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1407,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3580",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21308183670043945
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3581",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18492618203163147
  },
  {
    "content": "**Figure 411: ANA effects on Command Processing**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3582",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5331499576568604
  },
  {
    "content": "|Command|ANA State|Effects on command processing|\n|---|---|---|\n||ANA Change|The saving of features shall not be supported and the<br>1<br>following feature identifiers are not available :<br>a) Reservation Notification Mask (i.e., 82h);<br>b) Reservation Persistence (i.e., 83h); and<br>2<br>c) I/O Command Set specific feature identifiers .<br>If the NSID is set to FFFFFFFFh, then the command shall<br>3<br>abort with a status code of Asymmetric Access Transition<br>(refer to section 8.1.3.5).|\n||ANA Persistent Loss|The command shall abort with a status code of Asymmetric<br>Access Persistent Loss (refer to section 8.1.3.4).|\n|Notes:<br>1. If the ANA state is ANA Inaccessible State, then commands that use feature identifiers or log pages<br>that are not available shall abort with a status code of Asymmetric Access Inaccessible. If the ANA<br>state is ANA Persistent Loss State, then commands that use feature identifiers or log pages that are<br>not available shall abort with a status code of Asymmetric Access Persistent Loss. If the ANA state<br>is ANA Change State, then commands that use feature identifiers or log pages that are not available<br>shall abort with a status code of Asymmetric Access Transition.<br>2. I/O Command Set specific definition. Refer to each I/O Command Set specification for applicability<br>and additional details, if any.<br>3. If any namespace that is attached to the controller is in an ANA Group that is in the ANA Inaccessible<br>state, the ANA Persistent Loss state, or the ANA Change state, then the command shall abort with<br>the indicated status. Depending on the ANA state of the ANA Group that contains a namespace<br>(e.g., an ANA state changes during the processing of the command), the specified feature identifier<br>may be altered for some attached namespaces and not altered for other attached namespaces.|Notes:<br>1. If the ANA state is ANA Inaccessible State, then commands that use feature identifiers or log pages<br>that are not available shall abort with a status code of Asymmetric Access Inaccessible. If the ANA<br>state is ANA Persistent Loss State, then commands that use feature identifiers or log pages that are<br>not available shall abort with a status code of Asymmetric Access Persistent Loss. If the ANA state<br>is ANA Change State, then commands that use feature identifiers or log pages that are not available<br>shall abort with a status code of Asymmetric Access Transition.<br>2. I/O Command Set specific definition. Refer to each I/O Command Set specification for applicability<br>and additional details, if any.<br>3. If any namespace that is attached to the controller is in an ANA Group that is in the ANA Inaccessible<br>state, the ANA Persistent Loss state, or the ANA Change state, then the command shall abort with<br>the indicated status. Depending on the ANA state of the ANA Group that contains a namespace<br>(e.g., an ANA state changes during the processing of the command), the specified feature identifier<br>may be altered for some attached namespaces and not altered for other attached namespaces.|Notes:<br>1. If the ANA state is ANA Inaccessible State, then commands that use feature identifiers or log pages<br>that are not available shall abort with a status code of Asymmetric Access Inaccessible. If the ANA<br>state is ANA Persistent Loss State, then commands that use feature identifiers or log pages that are<br>not available shall abort with a status code of Asymmetric Access Persistent Loss. If the ANA state<br>is ANA Change State, then commands that use feature identifiers or log pages that are not available<br>shall abort with a status code of Asymmetric Access Transition.<br>2. I/O Command Set specific definition. Refer to each I/O Command Set specification for applicability<br>and additional details, if any.<br>3. If any namespace that is attached to the controller is in an ANA Group that is in the ANA Inaccessible<br>state, the ANA Persistent Loss state, or the ANA Change state, then the command shall abort with<br>the indicated status. Depending on the ANA state of the ANA Group that contains a namespace<br>(e.g., an ANA state changes during the processing of the command), the specified feature identifier<br>may be altered for some attached namespaces and not altered for other attached namespaces.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 4336,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3583",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.03154025599360466
  },
  {
    "content": "**8.2** **Boot Partitions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3584",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4784381687641144
  },
  {
    "content": "Boot Partitions provide an optional area of NVM storage that may be read by the host without the host\ninitializing queues or enabling the controller. The simplified interface to access Boot Partitions may be used\nfor platform initialization code (e.g., a bootloader that is executed from host ROM) to boot to a pre-OS\nenvironment (e.g., UEFI) instead of storing the image on another non-volatile storage medium (e.g., SPI\nflash). Refer to section 8.2.1 for the procedure to read the contents of a Boot Partition.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 512,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3585",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6972175240516663
  },
  {
    "content": "A controller that supports Boot Partitions has two Boot Partitions of equal size using Boot Partition identifiers\n0h and 1h. The two Boot Partitions allow the host to update one and verify the contents before marking the\nBoot Partition active. Controllers in the NVM subsystem may share the same Boot Partitions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 312,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3586",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5211713910102844
  },
  {
    "content": "The contents of Boot Partitions are only modified using the Firmware Image Download and Firmware\nCommit commands (refer to section 8.2.2) and may be secured using Replay Protected Memory Block to\nprevent unauthorized modifications (refer to section 8.2.3).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 256,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3587",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4371815621852875
  },
  {
    "content": "**Reading from a Boot Partition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3588",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5766062140464783
  },
  {
    "content": "A Boot Partition is a continuous block of data as shown in Figure 412, that the host may read via NVMe\nproperties.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 114,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3589",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34516647458076477
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3590",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15416444838047028
  },
  {
    "content": "**Figure 412: Boot Partition Overview**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3591",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40417784452438354
  },
  {
    "content": "To read the contents of a Boot Partition using NVMe properties, the host allocates a Boot Partition Memory\nBuffer in host memory for the controller to copy contents from a Boot Partition. The host initializes the Boot\nPartition Memory Buffer Base Address. The host sets the Boot Partition ID, Boot Partition Read Size, and\nBoot Partition Read Offset to initiate the Boot Partition read operation. The host may continue reading from\nthe Boot Partition until the entire Boot Partition has been read.\n\nA portion of the Boot Partition may be read by the host any time the NVM subsystem is powered (i.e.,\nwhether or not CC.EN is set to ‘1’). The host shall not modify transport specific properties (described in the\napplicable NVMe Transport binding specification), reset, or shutdown the controller while a Boot Partition\nread is in progress.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 838,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3592",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6735338568687439
  },
  {
    "content": "To read data from a Boot Partition, the host follows these steps:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3593",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4426307678222656
  },
  {
    "content": "1. Initialize the transport (e.g., PCIe link), if necessary;\n2. Determine if Boot Partitions are supported by the controller (CAP.BPS);\n3. Determine which Boot Partition is active (BPINFO.ABPID) and the size of the Boot Partition",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3594",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5005154013633728
  },
  {
    "content": "(BPINFO.BPSZ);\n4. Allocate a physically contiguous memory buffer in the host to store the contents of a Boot Partition;\n5. Initialize the address (BPMBL.BMBBA) into the memory buffer where the contents should be",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 211,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3595",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4587417244911194
  },
  {
    "content": "copied;\n6. Initiate the transfer of data from a Boot Partition by writing to the Boot Partition Read Select",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 107,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3596",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5307682752609253
  },
  {
    "content": "(BPRSEL) property. This includes setting the Boot Partition identifier (BPRSEL.BPID), size of\nBoot Partition Read Size (BPRSEL.BPRSZ) and Boot Partition Read Offset (BPRSEL.BPROF).\nThe controller sets the Boot Read Status (BPINFO.BRS) field while transferring the Boot Partition\ncontents to indicate a Boot Partition read operation is in progress; and\n7. Wait for the controller to completely transfer the requested portion of the Boot Partition, indicated\n\nin the status field (BPINFO.BRS). If BPINFO.BRS is set to 10b, the requested Boot Partition data\nhas been transferred to the Boot Partition Memory Buffer. If BPINFO.BRS is set to 11b, there was\nan error transferring the requested Boot Partition data and the host may request the Boot Partition\ndata again.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 763,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3597",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6381381750106812
  },
  {
    "content": "In constrained memory environments, the host may read the contents of a Boot Partition with a small Boot\nPartition Memory Buffer by reading a small portion of a Boot Partition, moving the data out of the Boot\nMemory Buffer to another memory location, and then reading another portion of the Boot Partition until the\nentire Boot Partition has been read.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 352,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3598",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.522162139415741
  },
  {
    "content": "If the Boot Partition log page is supported (refer to section 5.16.1.1), then the Boot Partition can be accessed\nthrough the Boot Partition log page (refer to section 5.16.1.21).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 178,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3599",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4516986310482025
  },
  {
    "content": "**Writing to a Boot Partition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3600",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4487173855304718
  },
  {
    "content": "Boot Partition contents may be modified by the host using the Firmware Image Download and Firmware\nCommit commands while the controller is enabled (CC.EN set to ‘1’).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 166,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3601",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6378580927848816
  },
  {
    "content": "The process for updating a Boot Partition is:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3602",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06658682227134705
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3603",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1587577909231186
  },
  {
    "content": "1. The host issues a Firmware Image Download command to download the contents of the Boot",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3604",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6098451018333435
  },
  {
    "content": "Partition to a controller. There may be multiple portions of the Boot Partition to download, thus the\noffset for each portion of the Boot Partition being downloaded is specified in the Firmware Image\nDownload command. Host software shall send the Boot Partition image in order starting with the\nbeginning of the Boot Partition;\n2. Unlock Boot Partitions for writing (refer to section 8.2.3);\n3. The host submits a Firmware Commit command (refer to section 5.12) on that controller with a\n\nCommit Action of 110b which specifies that the downloaded image replaces the contents of the\nBoot Partition specified in the Boot Partition ID field;\n4. The controller completes the Firmware Commit command. The following actions are taken in",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 730,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3605",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5321434140205383
  },
  {
    "content": "certain error scenarios:\na. If the firmware activation was not successful because the Boot Partition could not be written,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3606",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5456656217575073
  },
  {
    "content": "then the controller reports an error of Boot Partition Write Prohibited;\n5. (Optional) The host reads the contents of the Boot Partition to verify they are correct (refer to section",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 181,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3607",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5143749713897705
  },
  {
    "content": "8.2.1). Host software updates the active Boot Partition ID by issuing a Firmware Commit command\nwith a Commit Action of 111b; and\n6. The host locks Boot Partition access to prevent further modification (refer to section 8.2.3).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 227,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3608",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5030689239501953
  },
  {
    "content": "If an internal error, reset, or power loss condition occurs while committing the downloaded image to a Boot\nPartition, the contents of the Boot Partition may contain the old contents, new contents, or a mixture of both.\nHost software should verify the contents of a Boot Partition before marking that Boot Partition active to\nensure the active Boot Partition is stable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 369,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3609",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.631075918674469
  },
  {
    "content": "Host software should not read the contents of a Boot Partition while writing to the Boot Partition. The\ncontroller may return a combination of new and old data if the host attempts to perform a Boot Partition\nread operation while overwriting the contents.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 255,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3610",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4946334958076477
  },
  {
    "content": "Host software should not overlap firmware/boot partition image update command sequences (refer to\nsection 1.5.23). During a boot partition image update command sequence, if a Firmware Image Download\ncommand or a Firmware Commit command is submitted for another firmware/boot partition image update\ncommand sequence, the results of both that command and the in-progress firmware image update are\nundefined.\n\nHost software should use the same controller or Management Endpoint (refer to the NVM Express\nManagement Interface Specification) for all commands that are part of a boot partition image update\ncommand sequence. If the commands for a single firmware/boot partition image update command\nsequence are submitted to more than one controller and/or Management Endpoint, the controller may abort\nthe Firmware Commit command with Invalid Firmware Image status.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 860,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3611",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "ASQ SQ SQ SQ",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.276981383562088
  },
  {
    "content": "**Boot Partition Protection**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3612",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6614949107170105
  },
  {
    "content": "A controller that supports Boot Partitions and RPMB shall support Boot Partition Protection. Boot Partition\nProtection may be configured using RPMB (refer to section 8.18). Figure 413 shows an overview of Boot\nPartition Protection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 231,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3613",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06456759572029114
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3614",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19041816890239716
  },
  {
    "content": "**Figure 413: Boot Partition Protection Overview**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3615",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49307557940483093
  },
  {
    "content": "The default state for all Boot Partitions is the “Unlocked” state. In this state, host software may read and\nwrite a Boot Partition.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 132,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3616",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.69415682554245
  },
  {
    "content": "All Boot Partitions remain unlocked until Boot Partition Protection is enabled by host software. Host software\nenables Boot Partition Protection by setting the Boot Partition Protection Enable bit in the RPMB Device\nConfiguration Block data structure (refer to section 8.18). Once Boot Partition Protection is enabled, the\ncontroller shall reject Authenticated Device Configuration Block Writes that disable Boot Partition Protection\n(i.e., enabling Boot Partition Protection is permanent). Once Boot Partition Protection is enabled, Boot\nPartitions are able to be modified only after unlocking the Boot Partition using RPMB.\n\nAfter activating Boot Partition Protection, the default state for all Boot Partitions is the “Locked” state. In this\nstate, host software may read a Boot Partition. In this state, the controller rejects attempts to write to a Boot\nPartition using the Firmware Commit command.\n\nEach Boot Partition may be locked or unlocked independently using the corresponding bit in the Device\nConfiguration Block data structure.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1041,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3617",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0976119190454483
  },
  {
    "content": "**8.3** **Capacity Management**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3618",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5250404477119446
  },
  {
    "content": "Capacity Management is a capability for organizing physical media into Endurance Groups and NVM Sets.\nThere are two different forms of Capacity Management, Fixed Capacity Management and Variable Capacity\nManagement. A controller that supports Capacity Management shall support at least one form.\n\nThe host uses Fixed Capacity Management to create Endurance Groups and NVM Sets by selecting a\nconfiguration which explicitly allocates Media Units (refer to section 8.3.2) to Endurance Groups and NVM\nSets.\n\nThe host uses Variable Capacity Management to:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 551,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3619",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5252172350883484
  },
  {
    "content": "- create a single Endurance Group by specifying the desired capacity;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3620",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.604828417301178
  },
  {
    "content": "- create a single NVM Set by specifying the desired capacity;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3621",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2879813015460968
  },
  {
    "content": "- delete a single Endurance Group; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3622",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44893530011177063
  },
  {
    "content": "- delete a single NVM Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3623",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41163694858551025
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3624",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3448500335216522
  },
  {
    "content": "The Capacity Adjustment Factor is the ratio between the capacity consumed by an Endurance Group from\nthe Unallocated NVM Capacity field in the Identify Controller data structure and the total NVM capacity in\nthat Endurance Group, i.e.:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 235,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3625",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.007579295430332422
  },
  {
    "content": "𝐶𝑎𝑝𝑎𝑐𝑖𝑡𝑦 𝐶𝑜𝑛𝑠𝑢𝑚𝑒𝑑\n𝐶𝑎𝑝𝑎𝑐𝑖𝑡𝑦 𝐴𝑑𝑗𝑢𝑠𝑡𝑚𝑒𝑛𝑡 𝐹𝑎𝑐𝑡𝑜𝑟= 𝐼𝑁𝑇𝐸𝐺𝐸𝑅\n~~(~~ 𝐸𝑛𝑑𝑢𝑟𝑎𝑛𝑐𝑒 𝐺𝑟𝑜𝑢𝑝 𝐶𝑎𝑝𝑎𝑐𝑖𝑡𝑦 [∗100)]",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3626",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10754817724227905
  },
  {
    "content": "(E.g., the value 200 indicates that creation of an Endurance Group with a total NVM capacity of 5 GiB\nconsumes 10 GiB of the Unallocated NVM Capacity indicated by the controller).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 179,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3627",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4091939926147461
  },
  {
    "content": "If an Endurance Group is created, then the controller performs the following actions as an atomic operation:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 108,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3628",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28078073263168335
  },
  {
    "content": "a) the value indicated by the Unallocated NVM Capacity (UNVMCAP) field of the Identify Controller",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3629",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5606440901756287
  },
  {
    "content": "data structure is changed based on the requested capacity, the Capacity Adjustment Factor of\nthe created Endurance Group, and the granularity at which the controller allocates NVM capacity;\nand\nb) the Endurance Group Identifier is added to the Endurance Group List.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3630",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43199512362480164
  },
  {
    "content": "If an Endurance Group is deleted, then the controller performs the following actions in sequence:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3631",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44260284304618835
  },
  {
    "content": "1) the Endurance Group Identifier is removed from the Endurance Group List;\n2) if the Media Unit Status log page is supported, then the Endurance Group Identifier field is",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 171,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3632",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6380615830421448
  },
  {
    "content": "cleared to 0h in all Media Unit Status Descriptors, if any, that indicate the deleted Endurance\nGroup;\n3) every NVM Set in the Endurance Group is deleted; and\n4) the value indicated by the Unallocated NVM Capacity (UNVMCAP) field of the Identify Controller",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 256,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3633",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49864503741264343
  },
  {
    "content": "data structure is increased by the value that was indicated by the Total Endurance Group\nCapacity (TEGCAP) field of the Endurance Group Information log page of the deleted Endurance\nGroup.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 188,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3634",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16857710480690002
  },
  {
    "content": "If any of the entities modified by the above sequence are accessed after the sequence begins and before\nit completes, then the results are indeterminate.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3635",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2393842339515686
  },
  {
    "content": "If an NVM Set is created, then the controller performs the following actions as an atomic operation:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3636",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3960845470428467
  },
  {
    "content": "a) the NVM Set Identifier is added to the NVM Set List; and\nb) the Unallocated Endurance Group Capacity indicated by the Endurance Group Information log",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 152,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3637",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5644233226776123
  },
  {
    "content": "page (refer to Figure 217) is decreased by the amount of capacity allocated to the NVM Set; the\ncontroller may allocate NVM capacity in units such that the requested size for an NVM Set may\nbe rounded up to the next unit boundary.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 230,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3638",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48689281940460205
  },
  {
    "content": "If an NVM Set is deleted, then the controller performs the following actions in sequence:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3639",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46943721175193787
  },
  {
    "content": "1) the NVM Set Identifier is removed from the NVM Set List;\n2) if the Media Unit Status log page is supported, then the NVM Set Identifier field is cleared to 0h in\n\nall Media Unit Status Descriptors, if any, that indicated the deleted NVM Set;\n3) for each namespace in the deleted NVM Set:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 290,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3640",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25886961817741394
  },
  {
    "content": "a. all commands targeting the namespace are handled as described for namespace",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3641",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4477348029613495
  },
  {
    "content": "deletion in section 8.11;\nb. the namespace identifier is removed from the Allocated Namespace ID list;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3642",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.665268063545227
  },
  {
    "content": "the namespace is deleted;\nc. the namespace identifier is added to the Changed Namespace List; and\nd. a Namespace Attribute Changed event is generated for hosts other than the host which",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 185,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3643",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1554061472415924
  },
  {
    "content": "issued the Capacity Management command;\nand",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3644",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46535614132881165
  },
  {
    "content": "4) the Unallocated Endurance Group Capacity indicated by the Endurance Group Information log",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3645",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3951099216938019
  },
  {
    "content": "page is increased by the amount of capacity formerly allocated to the NVM Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3646",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14411808550357819
  },
  {
    "content": "If any of the entities modified by the above sequence are accessed after the sequence begins and before\nit completes, then the results are indeterminate.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3647",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11541955173015594
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3648",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41278356313705444
  },
  {
    "content": "If an NVM Set is created or deleted, the value indicated by the Unallocated NVM Capacity (UNVMCAP)\nfield of the Identify Controller data structure is not changed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3649",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1680409014225006
  },
  {
    "content": "**Fixed Capacity Management**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3650",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12421157211065292
  },
  {
    "content": "A Media Unit represents a component of the underlying media in a domain. An implementation may choose\nto represent each die as a separate Media Unit; however, this is not required. A Media Unit is the smallest\nmedia component for which the controller reports wear information (refer to the Available Spare field and\nthe Percentage Used field in the Media Unit Status Descriptor, Figure 249).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 391,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3651",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4236103892326355
  },
  {
    "content": "Two or more I/O operations to a Media Unit at the same time may interfere with each other as they contend\nfor resources internal to or shared by that Media Unit.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 161,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3652",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29096275568008423
  },
  {
    "content": "A controller supporting Fixed Capacity Management:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3653",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4623703956604004
  },
  {
    "content": "a) shall support the Media Unit Status log page (refer to section 5.16.1.16);\nb) shall support Endurance Groups (refer to section 3.2.3);\nc) may support NVM Sets (refer to section 3.2.2);\nd) shall set the Fixed Capacity Management bit to ‘1’ in the CTRATT field of the Identify Controller",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 288,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3654",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6004709005355835
  },
  {
    "content": "data structure (refer to Figure 275);\ne) shall support the Supported Capacity Configuration List log page (refer to section 5.16.1.17); and\nf) shall support the Select Capacity Configuration operation of the Capacity Management command\n(refer to section 5.3).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 259,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3655",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26212042570114136
  },
  {
    "content": "Media Units are accessed by way of Channels that represent communication pathways that may be a\nsource of contention. This information is reported to facilitate the composition of NVM Sets that minimize\ninterference between independent writers competing for this type of resource.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 280,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3656",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5490423440933228
  },
  {
    "content": "The host allocates the Media Units in a domain to Endurance Groups and NVM Sets by:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3657",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3690717816352844
  },
  {
    "content": "1) reading the Supported Capacity Configuration List log page (refer to Figure 250) and selecting\n\nthe desired configuration; and\n2) issuing a Capacity Management command specifying the Select Capacity Configuration operation\n\nand the Capacity Configuration Identifier of the desired configuration.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 298,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3658",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5359479188919067
  },
  {
    "content": "Following successful completion of the command, each Media Unit is allocated to one Endurance Group\nand to one NVM Set. The resulting configuration of Media Units is reported by the Media Unit Status log\npage (refer to section 5.16.1.16).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 238,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3659",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39006349444389343
  },
  {
    "content": "**Variable Capacity Management**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3660",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6883941888809204
  },
  {
    "content": "Variable Capacity Management allows the dynamic creation and deletion of Endurance Groups and NVM\nSets.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3661",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6039544343948364
  },
  {
    "content": "A controller supporting Variable Capacity Management:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3662",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39132532477378845
  },
  {
    "content": "a) may support the Media Unit Status log page;\nb) shall support Endurance Groups;\nc) may support NVM Sets;\nd) shall set the Variable Capacity Management bit to ‘1’ in the CTRATT field of the Identify",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 199,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3663",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6483488082885742
  },
  {
    "content": "Controller data structure (refer to Figure 275);\ne) shall support the Create Endurance Group operation of the Capacity Management command;\nf) may support the Delete Endurance Group operation of the Capacity Management command; and\ng) if NVM Sets are supported:\n\na. shall support the Create NVM Set operation of the Capacity Management command;\nb. shall report non-zero values in the Total Endurance Group Capacity field and the\n\nUnallocated Endurance Group Capacity field in the Endurance Group Information log\npage (refer to Figure 217); and\nc. may support the Delete NVM Set operation of the Capacity Management command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 622,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3664",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.422210156917572
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3665",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22757141292095184
  },
  {
    "content": "If a controller supports the Delete Endurance Group operation of the Capacity Management command,\nthen it shall set the Delete Endurance Group bit to ‘1’ in the CTRATT field of the Identify Controller data\nstructure.\n\nIf a controller supports the Delete NVM Set operation of the Capacity Management command, then it shall\nset the Delete NVM Set bit to ‘1’ in the CTRATT field of the Identify Controller data structure.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 418,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3666",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36368098855018616
  },
  {
    "content": "A typical sequence of operations for allocating capacity is:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3667",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5443662405014038
  },
  {
    "content": "1) determine the available capacities in each domain (refer to section 3.2.4);\n2) create Endurance Group with desired capacity (refer to section 5.3);\n3) create NVM Set with desired capacity in the Endurance Group (refer to section 5.3); and\n4) create namespace with desired capacity in the NVM Set (refer to section 5.23).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 323,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3668",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4255084991455078
  },
  {
    "content": "A typical sequence of operations for deallocating capacity is:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3669",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2592284679412842
  },
  {
    "content": "1) delete namespace, if any, (refer to section 5.23);\n2) delete NVM Set, if any, (refer to section 5.3); and\n3) delete Endurance Group (refer to section 5.3).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 158,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3670",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6303941607475281
  },
  {
    "content": "If there is insufficient unallocated capacity in an Endurance Group for the controller to create an NVM Set,\nthen the host can delete one or more NVM Sets in that Endurance Group and create the new NVM Set\nusing some or all of the available capacity.\n\nIf there is insufficient unallocated capacity in a domain for the controller to create an Endurance Group,\nthen the host can delete one or more Endurance Groups in that domain and create a new Endurance Group\nusing some or all of the available capacity.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 505,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3671",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10560307651758194
  },
  {
    "content": "**8.4** **Command and Feature Lockdown**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3672",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6341382265090942
  },
  {
    "content": "The Command and Feature Lockdown capability is used to prohibit the execution of commands submitted\nto NVM Express controllers and/or Management Endpoints in an NVM subsystem. Within this feature,\ncommands and Feature Identifiers are defined with the following scopes:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 268,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3673",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34946495294570923
  },
  {
    "content": "- Admin Command Set commands defined by the Opcode field;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3674",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4830412268638611
  },
  {
    "content": "- Set Features command features defined by the Feature Identifier field;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3675",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43088972568511963
  },
  {
    "content": "- Management Interface Command Set commands defined by the Opcode field (refer to the NVM\nExpress Management Interface Specification); and\n\n- PCIe Command Set commands defined by the Opcode field (refer to the NVM Express\nManagement Interface Specification).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 258,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3676",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39833223819732666
  },
  {
    "content": "Admin Command Set commands and Feature Identifiers are defined to be prohibitable by this feature,\nhowever it is vendor specific which of the Command Set commands and Feature Identifiers are prohibitable\nfrom execution, including the Lockdown command itself.\n\nThe prohibition of commands or Feature Identifiers on an interface is specified in the Interface field of the\nLockdown command (refer to section 5.19). The prohibition applies to all applicable:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 454,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3677",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14980129897594452
  },
  {
    "content": "- NVM Express controllers; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3678",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34070125222206116
  },
  {
    "content": "- Management Endpoints,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3679",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2377270609140396
  },
  {
    "content": "in the NVM subsystem, as specified in the Interface field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3680",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1582767516374588
  },
  {
    "content": "The Lockdown command is used to specify commands that are prohibited from execution (i.e., locked\ndown) and may be used further to then again allow that command to be executed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 176,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3681",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4914359450340271
  },
  {
    "content": "The prohibiting of execution of a command as part of this feature shall persist until:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 86,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3682",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37346333265304565
  },
  {
    "content": "a) power cycle of the NVM subsystem; or\nb) further being allowed by a follow-on Lockdown command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3683",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5948386192321777
  },
  {
    "content": "If a prohibited Admin Command Set command or Feature Identifier is processed by a controller in the NVM\nsubsystem, then that command shall be aborted with a status code of Command Prohibited by Command\nand Feature Lockdown.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 223,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3684",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3034469783306122
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3685",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43576961755752563
  },
  {
    "content": "If a prohibited Management Interface Command Set command or PCIe Command Set command is\nprocessed by a management endpoint in the NVM subsystem, then that command shall be aborted and\nsend a Response Message with an Access Denied Error Response (refer to the NVM Express Management\nInterface Specification).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 307,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3686",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6750897169113159
  },
  {
    "content": "The prohibition or allowance of the execution of commands using this feature treats from where the\ncommand was received, being an NVM Express controller Admin Submission Queue or an out-of-band\nManagement Endpoint independently. This means that a command may be prohibited if received on an\nNVM Express controller Admin Submission Queue but allowed if received on an out-of-band Management\nEndpoint, if supported. The Interface field in the Lockdown command is used to specify this behavior.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 491,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3687",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5292730331420898
  },
  {
    "content": "A host may use the Command and Feature Lockdown log page (refer to section 5.16.1.20) to determine\nthe commands and Feature Identifiers that are allowed to be prohibited from execution. A Get Log Page\ncommand specifying the Command and Feature Lockdown log page returns a list of command opcodes or\nFeature Identifiers depending on the scope specified in the Get Log Page command. The returned list of\nopcodes or Feature Identifiers are the opcodes or Feature Identifiers that are:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 481,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3688",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38186994194984436
  },
  {
    "content": "a) supported as being prohibitable from execution using the Lockdown command;\nb) currently prohibited from execution if received on an NVM Express controller submission queue;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 175,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3689",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49152687191963196
  },
  {
    "content": "or\nc) currently prohibited from execution if received out-of-band on a Management Endpoint.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 91,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3690",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21918120980262756
  },
  {
    "content": "If the Command and Feature Lockdown capability is supported (i.e., bit 10 in the OACS field in Figure 275\nis set to ‘1’), then the controller shall support the Lockdown command and the Command and Feature\nLockdown log.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 218,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3691",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2016548067331314
  },
  {
    "content": "**8.5** **Controller Memory Buffer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3692",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5259447693824768
  },
  {
    "content": "The Controller Memory Buffer (CMB) is a region of general purpose read/write memory on the controller.\nThe controller indicates support for the CMB by setting CAP.CMBS to ‘1’. The host indicates intent to use\nthe CMB by setting CMBMSC.CRE to ‘1’. Once this bit is set to ‘1’, the controller indicates the properties of\nthe CMB via the CMBLOC and CMBSZ properties (refer to section 3.1.3).\n\nThe CMB may be used for a variety of purposes. The controller indicates which purposes the memory may\nbe used for by setting support flags in the CMBSZ property.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 551,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3693",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6433789730072021
  },
  {
    "content": "The CMB’s PCI Express address range is used for external memory read and write requests to the CMB.\nThe PCI Express base address of the CMB is defined by the PCI Base Address Register (BAR) indicated\nby CMBLOC.BIR, and the offset indicated by CMBLOC.OFST. The size of the CMB is indicated by\nCMBSZ.SZ.\n\nThe controller uses the CMB’s controller address range to reference CMB with addresses supplied by the\nhost. The PCI Express address range and the controller address range of the CMB may differ, but both\nranges have the same size, and equivalent offsets within each range have a one-to-one correspondence.\nThe host configures the controller address range via the CMBMSC property.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 682,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3694",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6692835092544556
  },
  {
    "content": "The host enables the CMB’s controller memory space via the CMBMSC.CMSE bit. When controller memory\nspace is enabled, if host supplies an address referencing the CMB’s controller address range, then the\ncontroller directs memory read or write requests for this address to the CMB.\n\nWhen the CMB’s controller memory space is disabled, the controller does not consider any host-supplied\naddress to reference the CMB’s controller address range, and memory read and write requests are directed\nelsewhere (e.g., to memory other than the CMB).\n\nTo prevent possible misdirection of the controller’s memory requests, before host software enables the\nCMB’s controller memory space, the host should configure the CMB’s controller address range to so that\nthe addresses do not overlap any address that host software intends to use for DMA.\n\nIn versions prior to NVM Express Base Specification revision 1.4, for a controller that supports the CMB,\nthe CMB’s controller address range is fixed to be equal to its PCI Express address range, and the CMB’s\ncontroller memory space is always enabled whenever the controller is enabled. To prevent misdirection of\ncontroller memory requests when such a controller is assigned to a virtual machine, host software (on the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 1249,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3695",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39036694169044495
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3696",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3371308147907257
  },
  {
    "content": "hypervisor or host OS) should not enable translation of the CMB’s PCI Express address range and should\nensure that this address range does not overlap any range of pre-translated addresses that the virtual\nmachine may use for DMA.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 230,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3697",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4810323715209961
  },
  {
    "content": "Host software may configure the CMBMSC property so that CMB operates when the controller is assigned\nto a virtual machine that only supports NVM Express Base Specification revision 1.3 and earlier. To prevent\nthat virtual machine from unintentionally clearing the CMBMSC property to 0h, the contents of the CMBSMC\nproperty are preserved across Controller Reset and Function Level Reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 386,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3698",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32243236899375916
  },
  {
    "content": "Submission Queues in host memory require the controller to perform a PCI Express read from host memory\nin order to fetch the submission queue entries. Submission Queues in controller memory enable host\nsoftware to directly write the entire submission queue entry to the controller's internal memory space,\navoiding one read from the controller to the host. This approach reduces latency in command execution\nand improves efficiency in a PCI Express fabric topology that may include multiple switches. Similarly, PRP\nLists or SGLs require separate fetches across the PCI Express fabric, which may be avoided by writing the\nPRP or SGL to the Controller Memory Buffer. Completion Queues in the Controller Memory Buffer may be\nused for peer to peer or other applications. For writes of small amounts of data, it may be advantageous to\nhave the host write the data and/or metadata to the Controller Memory Buffer rather than have the controller\nfetch it from host memory.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 966,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3699",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22626470029354095
  },
  {
    "content": "The contents of the Controller Memory Buffer are undefined as the result of:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3700",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09355521202087402
  },
  {
    "content": "- the CMBMSC.CMSE bit transitioning from ‘0’ to ‘1’;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3701",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14753344655036926
  },
  {
    "content": "- a Controller Reset; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3702",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6188382506370544
  },
  {
    "content": "- a Function Level Reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3703",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12201796472072601
  },
  {
    "content": "Host software should initialize any memory in the Controller Memory Buffer before being referenced (e.g.,\na Completion Queue shall be initialized by host software in order for the Phase Tag to be used correctly).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 212,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3704",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20214657485485077
  },
  {
    "content": "A CMB implementation has a maximum sustained write throughput. The CMB implementation may also\nhave an optional write elasticity buffer used to buffer writes from CMB PCIe write requests. When the CMB\nsustained write throughput is less than the PCI Express link throughput, then such a write elasticity buffer\nallows PCIe write request burst throughput to exceed the CMB sustained write throughput without back\npressuring into the PCI Express fabric.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 450,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3705",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.636089563369751
  },
  {
    "content": "The time required to transfer data from the write elasticity buffer to the CMB is the amount of data written\nto the elasticity buffer divided by the Controller Memory Buffer Sustained Write Throughput (refer to section\n3.1.3.18). The time to transfer the entire contents of the write elasticity buffer is the Controller Memory\nBuffer Elasticity Buffer Size (refer to section 3.1.3.17) divided by the Controller Memory Buffer Sustained\nWrite Throughput.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 452,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3706",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42709872126579285
  },
  {
    "content": "A controller memory-based queue is used in the same manner as a host memory-based queue – the\ndifference is the memory address used is located within the controller’s own memory rather than in the host\nmemory. The Admin or I/O Queues may be placed in the Controller Memory Buffer. If the\nCMBLOC.CQMMS bit (refer to Figure 52) is cleared to ‘0’, then for a particular queue, all memory\nassociated with it shall reside in either the Controller Memory Buffer or outside the Controller Memory\nBuffer.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 496,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3707",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6845008730888367
  },
  {
    "content": "If the CMBLOC.CQPDS bit (refer to Figure 52) is cleared to ‘0’, then for all queues in the Controller Memory\nBuffer, the queue shall be physically contiguous.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 158,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3708",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5275182127952576
  },
  {
    "content": "The controller may support PRP Lists and SGLs in the Controller Memory Buffer. If the CMBLOC.CDPMLS\nbit (refer to Figure 52) is cleared to ‘0’, then for a particular PRP List or SGL associated with a single\ncommand, all memory associated with the PRP List or SGL shall be either entirely located in the Controller\nMemory Buffer or entirely located outside the Controller Memory Buffer.\n\nPRP Lists and SGLs associated with a command may be placed in the Controller Memory Buffer if that\ncommand is present in a Submission Queue in the Controller Memory Buffer. If:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 563,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3709",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.620078444480896
  },
  {
    "content": "a) CMBLOC.CDPCILS bit (refer to Figure 52) is cleared to ‘0’; and\nb) a command is not present in a Submission Queue in the Controller Memory Buffer,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3710",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.194766566157341
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3711",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1461651474237442
  },
  {
    "content": "then the PRP Lists and SGLs associated with that command shall not be placed in the Controller Memory\nBuffer.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3712",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5271791219711304
  },
  {
    "content": "The controller may support data and metadata in the Controller Memory Buffer. If the CMBLOC.CDMMMS\nbit (refer to Figure 52) is cleared to ‘0’, then all data and metadata, if any, associated with a particular\ncommand shall be either entirely located in the Controller Memory Buffer or entirely located outside the\nController Memory Buffer.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 338,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3713",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4869760274887085
  },
  {
    "content": "If the requirements for the Controller Memory Buffer use are violated by the host, the controller shall abort\nthe associated command with a status code of Invalid Use of Controller Memory Buffer.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 195,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3714",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36736583709716797
  },
  {
    "content": "The address region allocated for the CMB shall be 4 KiB aligned. It is recommended that a controller\nallocate the CMB on an 8 KiB boundary. The controller shall support burst transactions up to the maximum\npayload size, support byte enables, and arbitrary byte alignment. The host shall ensure that all writes to the\nCMB that are needed for a command have been sent before updating the SQ Tail doorbell property. The\nMemory Write Request to the SQ Tail doorbell property shall not have the Relaxed Ordering bit set to ‘1’,\nto ensure that prior writes to the CMB have completed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 577,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3715",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18777254223823547
  },
  {
    "content": "**8.6** **Device Self-test Operations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3716",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6617449522018433
  },
  {
    "content": "A device self-test operation is a diagnostic testing sequence that tests the integrity and functionality of the\ncontroller and may include testing of the media associated with namespaces. The operation is broken\ndown into a series of segments, where each segment is a set of vendor specific tests. The segment\nnumber in the Self-test Result Data Structure (refer to section 5.16.1.7) is used for reporting purposes to\nindicate where a test failed, if any. The test performed in each segment may be the same for the short\ndevice self-test operation and the extended device self-test operation.\n\nA device self-test operation is performed in the background allowing concurrent processing of some\ncommands and requiring suspension of the device self-test operation to process other commands. Which\ncommands may be processed concurrently versus require suspension of the device self-test operation is\nvendor specific.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 912,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3717",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6516944766044617
  },
  {
    "content": "If the controller receives any command that requires suspension of the device self-test operation to\nprocess and complete, then the controller shall:\n\n1) suspend the device self-test operation;\n2) process and complete that command; and\n3) resume the device self-test operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 277,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3718",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47761639952659607
  },
  {
    "content": "During a device self-test operation, the performance of the NVM subsystem may be degraded (e.g.,\ncontrollers not performing the device self-test operation may also experience degraded performance).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 197,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3719",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48555877804756165
  },
  {
    "content": "The following device self-test operations are defined:\n\na) short device self-test operation (refer to section 8.6.1); and\nb) extended device self-test operation (refer to section 8.6.2).\n\nFigure 414 is an informative example of a device self-test operation with the associated segments and tests\nperformed in each segment.\n\n**Figure 414: Example Device Self-test Operation (Informative)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 388,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3720",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4445008635520935
  },
  {
    "content": "|Segment|Test Performed|Failure Criteria|\n|---|---|---|\n|1 – RAM Check|Write a test pattern to RAM, followed by a read and compare<br>of the original data.|Any uncorrectable error or<br>data miscompare|\n|2 – SMART Check|Check SMART or health status for Critical Warning bits set<br>to ‘1’ in SMART / Health Information Log.|Any Critical Warning bit set to<br>‘1’ fails this segment|\n|3 – Volatile memory<br>backup|Validate volatile memory backup solution health (e.g.,<br>measure backup power source charge and/or discharge<br>time).|Significant degradation in<br>backup capability|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 582,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3721",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21515728533267975
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3722",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2824271023273468
  },
  {
    "content": "**Figure 414: Example Device Self-test Operation (Informative)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3723",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38171979784965515
  },
  {
    "content": "|Segment|Col2|Test Performed|Failure Criteria|\n|---|---|---|---|\n|4 – Metadata validation|4 – Metadata validation|Confirm/validate all copies of metadata.|Metadata is corrupt and is not<br>recoverable|\n|5 – NVM integrity|5 – NVM integrity|Write/read/compare to reserved areas of each NVM. Ensure<br>also that every read/write channel of the controller is<br>exercised.|Data miscompare|\n|Extended only|6 – Data Integrity|Perform background housekeeping tasks, prioritizing<br>actions that enhance the integrity of stored data.<br>Exit this segment in time to complete the remaining<br>segments and meet the timing requirements for extended<br>device self-test operation indicated in the Identify Controller<br>data structure.|Metadata is corrupt and is not<br>recoverable|\n|7 – Media Check|7 – Media Check|Perform random reads from every available good physical<br>block.<br>Exit this segment in time to complete the remaining<br>segments. The time to complete is dependent on the type of<br>device self-test operation.|Inability to access a physical<br>block|\n|8 – Drive Life|8 – Drive Life|End-of-life condition: Assess the drive’s suitability for<br>continuing write operations.|The Percentage Used is set to<br>255 in the SMART / Health<br>Information Log or an analysis<br>of internal key operating<br>parameters indicates that data<br>is at risk if writing continues|\n|9 – SMART Check|9 – SMART Check|Same as 2 – SMART Check|Same as 2 – SMART Check|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1454,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3724",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27998238801956177
  },
  {
    "content": "**Short Device Self-Test Operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3725",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.657271683216095
  },
  {
    "content": "A short device self-test operation should complete in two minutes or less. The percentage complete of the\nshort device self-test operation is indicated in the Current Percentage Complete field in the Device Selftest Log (refer to section 5.16.1.7).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 248,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3726",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6832905411720276
  },
  {
    "content": "A short device self-test operation:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3727",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3314182460308075
  },
  {
    "content": "a) shall be aborted by any Controller Level Reset that affects the controller on which the device",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3728",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44986188411712646
  },
  {
    "content": "self-test is being performed;\nb) shall be aborted by a Format NVM command as described in Figure 415;\nc) shall be aborted when a sanitize operation is started (refer to section 5.24);\nd) shall be aborted if a Device Self-test command with the Self-Test Code field set to Fh is",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 276,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3729",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.356425940990448
  },
  {
    "content": "processed; and\ne) may be aborted if the specified namespace is removed from the namespace inventory.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3730",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3044128715991974
  },
  {
    "content": "**Figure 415: Format NVM command Aborting a Device Self-Test Operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3731",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5174769759178162
  },
  {
    "content": "|1<br>FNA bit|NSID in Format NVM command|NSID in Device Self-test command|Abort Device Self-<br>Test operation?|\n|---|---|---|---|\n|0|Any allocated NSID value<br>(refer to section 3.2.1.3)|Any active NSID value<br>(refer to section 3.2.1.2)|Yes, if the NSID<br>values are the same|\n|0|FFFFFFFFh|Any active NSID value<br>(refer to section 3.2.1.2)|Yes|\n|0|Any allocated NSID value<br>(refer to section 3.2.1.3)|FFFFFFFFh|Optional|\n|0|FFFFFFFFh|FFFFFFFFh|Yes|\n|1|Ignored|Ignored|Yes|\n|Key:<br>Optional = The device self-test operation is not required to be aborted but may be aborted.|Key:<br>Optional = The device self-test operation is not required to be aborted but may be aborted.|Key:<br>Optional = The device self-test operation is not required to be aborted but may be aborted.|Key:<br>Optional = The device self-test operation is not required to be aborted but may be aborted.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 883,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3732",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30619198083877563
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3733",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4449787139892578
  },
  {
    "content": "**Figure 415: Format NVM command Aborting a Device Self-Test Operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3734",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6294757723808289
  },
  {
    "content": "|1<br>FNA bit|NSID in Format NVM command|NSID in Device Self-test command|Abort Device Self-<br>Test operation?|\n|---|---|---|---|\n|Notes:<br>1. For a Format NVM command with Secure Erase, this column refers to Bit 1 in the FNA field in the Identify<br>Controller data structure (refer to Figure 275) and bit 0 in the FNA field is ignored. For a Format NVM command<br>without Secure Erase, this column refers to bit 0 in the FNA field, and bit 1 in the FNA field is ignored.|Notes:<br>1. For a Format NVM command with Secure Erase, this column refers to Bit 1 in the FNA field in the Identify<br>Controller data structure (refer to Figure 275) and bit 0 in the FNA field is ignored. For a Format NVM command<br>without Secure Erase, this column refers to bit 0 in the FNA field, and bit 1 in the FNA field is ignored.|Notes:<br>1. For a Format NVM command with Secure Erase, this column refers to Bit 1 in the FNA field in the Identify<br>Controller data structure (refer to Figure 275) and bit 0 in the FNA field is ignored. For a Format NVM command<br>without Secure Erase, this column refers to bit 0 in the FNA field, and bit 1 in the FNA field is ignored.|Notes:<br>1. For a Format NVM command with Secure Erase, this column refers to Bit 1 in the FNA field in the Identify<br>Controller data structure (refer to Figure 275) and bit 0 in the FNA field is ignored. For a Format NVM command<br>without Secure Erase, this column refers to bit 0 in the FNA field, and bit 1 in the FNA field is ignored.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1504,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3735",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3587140738964081
  },
  {
    "content": "**Extended Device Self-Test Operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3736",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6614886522293091
  },
  {
    "content": "An extended device self-test operation should complete in the time indicated in the Extended Device Selftest Time field in the Identify Controller data structure or less. The percentage complete of the extended\ndevice self-test operation is indicated in the Current Percentage Complete field in the Device Self-test Log\n(refer to section 5.16.1.7).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 348,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3737",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6351093649864197
  },
  {
    "content": "An extended device self-test operation shall persist across any Controller Level Reset and shall resume\nafter completion of the reset or any restoration of power, if any. The segment where the extended device\nself-test operation resumes is vendor specific, but implementations should only have to perform tests\nagain within the last segment that was being tested prior to the reset.\n\nAn extended device self-test operation:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 423,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3738",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48825007677078247
  },
  {
    "content": "a) shall be aborted by a Format NVM command as described in Figure 415;\nb) shall be aborted when a sanitize operation is started (refer to section 5.24);\nc) shall be aborted if a Device Self-test command with the Self-Test Code field set to Fh is",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3739",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41872286796569824
  },
  {
    "content": "processed; and\nd) may be aborted if the specified namespace is removed from the namespace inventory.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3740",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.284385085105896
  },
  {
    "content": "**8.7** **Directives**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3741",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44114401936531067
  },
  {
    "content": "Directives is a mechanism to enable host and NVM subsystem or controller information exchange. The\nDirective Receive command (refer to section 5.10) is used to transfer data related to a specific Directive\nType from the controller to the host. The Directive Send command (refer to section 5.11) is used to transfer\ndata related to a specific Directive Type from the host to the controller. Other commands may include a\nDirective Specific value specific for a given Directive Type (e.g., the Write command in the NVM Command\nSet).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 529,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3742",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5532301068305969
  },
  {
    "content": "Support for Directives is optional and is indicated in the Optional Admin Command Support (OACS) field in\nthe Identify Controller data structure (refer to Figure 275).\n\nIf a controller supports Directives, then the controller shall:\n\n- Indicate support for Directives in the Optional Admin Command Support (OACS) field in the\nIdentify Controller data structure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 361,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3743",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5703747272491455
  },
  {
    "content": "- Support the Directive Receive command;\n\n- Support the Directive Send command; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 83,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3744",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33604753017425537
  },
  {
    "content": "- Support the Identify Directive (i.e., Type 00h).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3745",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4261604845523834
  },
  {
    "content": "The Directive Types that may be supported by a controller (refer to Figure 416) are the Identify Directive\n(refer to section 8.7.2), and the Streams Directive (refer to section 8.7.3). The Directive Specific field and\nDirective Operation field are dependent on the Directive Type specified in the command (e.g., Directive\nSend, Directive Receive, or I/O command).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 363,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3746",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.586125910282135
  },
  {
    "content": "**Figure 416: Directive Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3747",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5211884379386902
  },
  {
    "content": "|Directive|Directive Type Value|Definition|I/O Command Directive|\n|---|---|---|---|\n|Identify|00h|Section 8.7.2|No|\n|Streams|01h|Section 8.7.3|Yes|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 147,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3748",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16461656987667084
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3749",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09073562175035477
  },
  {
    "content": "If a Directive is not supported or is supported and disabled, then all Directive Send commands and Directive\nReceive commands with that Directive Type shall be aborted with a status code of Invalid Field in\nCommand.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 215,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3750",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5907647609710693
  },
  {
    "content": "Support for a specific directive type is indicated using the Return Parameters operation of the Identify\nDirective. A specific directive may be enabled or disabled using the Enable operation of the Identify\nDirective. Before using a specific directive, the host should determine if that directive is supported and\nshould enable that directive using the Identify Directive.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 372,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3751",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4767272472381592
  },
  {
    "content": "**Directive Use in I/O Commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3752",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6744367480278015
  },
  {
    "content": "I/O Command Directives are the subset of Directive Types that may be used as part of I/O commands. For\nexample, a Write command in the NVM Command Set may specify a Directive Type and an associated\nDirective Specific value. I/O Command Directives shall have a Directive Type value that is less than or\nequal to 0Fh due to the size of the Directive Type field in I/O commands. When a Directive Type is specified\nin an I/O command, the most significant four bits are assumed to be 0h. A Directive Type of 00h in an I/O\ncommand specifies that the I/O command is not using Directives.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 580,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3753",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6184445023536682
  },
  {
    "content": "In an I/O command, if the Directive Type (DTYPE) field is set to an I/O Command Directive, then the\nDirective Specific (DSPEC) field includes additional information for the associated I/O command (refer to\nFigure 417).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 218,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3754",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45220819115638733
  },
  {
    "content": "**Figure 417: Directive Specific Field Interpretation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3755",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5554289221763611
  },
  {
    "content": "|Directive Type Value|Directive Specific Field Definition|\n|---|---|\n|00h (Directives not in use)|Field not used.|\n|01h (Streams)|Specifies the identifier of the stream associated with the data.|\n|02h to 0Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 217,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3756",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29664576053619385
  },
  {
    "content": "- if no I/O Command Directive is enabled or the DTYPE field is cleared to 00h, then the DTYPE field\nand the DSPEC field are ignored; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3757",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.699787974357605
  },
  {
    "content": "- if one or more I/O Command Directives is enabled and the DTYPE field is set to a value that is not\nsupported or not enabled, then the controller shall abort the command with a status code of Invalid\nField in Command **.**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 223,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3758",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49382662773132324
  },
  {
    "content": "For the Streams Directive (i.e., DTYPE field set to 01h), if the DSPEC field is cleared to 0h in an I/O\ncommand that supports the Streams Directive, then that I/O command shall be processed normally (i.e., as\nif DTYPE field is cleared to 00h).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 243,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3759",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28427955508232117
  },
  {
    "content": "**Identify (Directive Type 00h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3760",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6430848836898804
  },
  {
    "content": "The Identify Directive is used to determine the Directive Types that the controller supports and to enable\nuse of the supported Directives. If Directives are supported, then this Directive Type shall be supported.\n\nThe Directive operations that shall be supported for the Identify Directive are listed in Figure 418.\n\n**Figure 418: Identify Directive – Directive Operations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 375,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3761",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6059189438819885
  },
  {
    "content": "|Directive Command|Directive Operation Name|Directive Operation Value|Definition|\n|---|---|---|---|\n|Directive Receive|Return Parameters|01h|Section 8.7.2.1.1|\n|Directive Receive|Reserved|All other values||\n|Directive Send|Enable Directive|01h|Section 8.7.2.2.1|\n|Directive Send|Reserved|All other values||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 306,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3762",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.625724732875824
  },
  {
    "content": "**8.7.2.1** **Directive Receive**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3763",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5648298859596252
  },
  {
    "content": "This section defines operations used with the Directive Receive command for the Identify Directive.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3764",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20871755480766296
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3765",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16229645907878876
  },
  {
    "content": "**8.7.2.1.1** **Return Parameters (Directive Operation 01h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3766",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3482983708381653
  },
  {
    "content": "This operation returns a data structure that contains a bit vector specifying the Directive Types supported\nby the controller and a bit vector specifying the Directive Types enabled for the namespace. The data\nstructure returned is defined in Figure 419. If an NSID value of FFFFFFFFh is specified, then the controller\nshall abort the command with a status code of Invalid Field in Command. The DSPEC field in command\nDword 11 is not used for this operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 458,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3767",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4676555097103119
  },
  {
    "content": "**Figure 419: Identify Directive – Return Parameters Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3768",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3315146565437317
  },
  {
    "content": "|Bytes|Bits|Description|\n|---|---|---|\n|||Directives Supported|\n|31:00|255:02|Reserved|\n|31:00|01|Streams Directive: This bit is set to ‘1’ if the Streams Directive is supported. This bit is<br>cleared to ‘0’ if the Streams Directive is not supported.|\n|31:00|00|Identify Directive: This bit shall be set to ‘1’ to indicate that the Identify Directive is<br>supported.|\n|||Directives Enabled|\n|63:32|255:02|Reserved|\n|63:32|01|Streams Directive: This bit is set to ‘1’ if the Streams Directive is enabled. This bit is<br>cleared to ‘0’ if the Streams Directive is not enabled.|\n|63:32|00|Identify Directive: This bit shall be set to ‘1’ to indicate that the Identify Directive is<br>enabled.|\n|4095:64|n/a|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 715,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3769",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2922859191894531
  },
  {
    "content": "**8.7.2.2** **Directive Send**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3770",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5214630365371704
  },
  {
    "content": "This section defines operations used with the Directive Send command for the Identify Directive.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3771",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40906408429145813
  },
  {
    "content": "**8.7.2.2.1** **Enable Directive (Directive Operation 01h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3772",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.498587429523468
  },
  {
    "content": "The Enable Directive operation is used to enable a specific Directive for use within a namespace by all\ncontrollers that are associated with the same Host Identifier. The DSPEC field in command Dword 11 is not\nused for this operation. The Identify Directive is always enabled. The enable state of each Directive on each\nshared namespace attached to enabled controllers associated with the same non-zero Host Identifier is the\nsame. If an NSID value of FFFFFFFFh is specified, then the Enable Directive operation applies to the NVM\nsubsystem (i.e., all namespaces and all controllers associated with the NVM subsystem). On an NVM\nSubsystem Reset, all Directives other than the Identify Directive are disabled in the Domains impacted by\nthat reset (refer to section 3.7.1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 771,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3773",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23129776120185852
  },
  {
    "content": "On a Controller Level Reset:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3774",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.294374942779541
  },
  {
    "content": "- all Directives other than the Identify Directive are disabled for that controller; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3775",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.693389892578125
  },
  {
    "content": "- if there is an enabled controller associated with the Host Identifier for the controller that was reset,\nthen for namespaces attached to enabled controllers associated with that Host Identifier, Directives\nare not disabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3776",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6804543137550354
  },
  {
    "content": "If a host sets the Host Identifier of a controller to the same non-zero Host Identifier as one or more other\ncontrollers in the NVM subsystem, then setting that Host Identifier shall result in each shared namespace\nattached to that controller having the same enable state for each Directive as the enable state for each\nDirective for that namespace attached to other controllers associated with that Host Identifier.\n\nIf a host enables a controller that has the same non-zero Host Identifier as one or more other controllers in\nthe NVM subsystem, then enabling that controller shall result in each shared namespace attached to that\ncontroller having the same enable state for each Directive as the enable state for each Directive for that\nnamespace attached to other controllers associated with that Host Identifier.\n\nFor all controllers in an NVM subsystem that have the same non-zero Host Identifier, if a host changes the\nenable state of any Directive for a shared namespace attached to a controller by a means other than a\nController Level Reset, then that change shall be made to the enable state of that Directive for that\nnamespace attached to any other controller associated with that Host Identifier.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1209,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3777",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3885548710823059
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3778",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12686851620674133
  },
  {
    "content": "**Figure 420: Enable Directive – Command Dword 12**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3779",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5434066653251648
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:08|Directive Type (DTYPE): This field specifies the Directive Type to enable or disable. If this field<br>specifies the Identify Directive (i.e., 00h), then a status code of Invalid Field in Command shall be<br>returned.|\n|07:01|Reserved|\n|00|Enable Directive (ENDIR): If set to ‘1’ and the Directive Type is supported, then the Directive is<br>enabled. If cleared to ‘0’, then the Directive is disabled. If this bit is set to ‘1’ for a Directive that is<br>not supported, then a status code of Invalid Field in Command shall be returned.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 589,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3780",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4797983169555664
  },
  {
    "content": "**Streams (Directive Type 01h, Optional)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3781",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6542185544967651
  },
  {
    "content": "The Streams Directive enables the host to indicate (i.e., by using the stream identifier) to the controller that\nthe specified user data in a User Data Out command (e.g., logical blocks in a write command) are part of\none group of associated data. This information may be used by the controller to store related data in\nassociated locations or for other performance enhancements.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 379,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3782",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6062787771224976
  },
  {
    "content": "The controller provides information in response to the Return Parameters operation about the configuration\nof the controller that indicates Stream Write Size, Stream Granularity Size, and stream resources at the\nNVM subsystem and namespace levels.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 247,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3783",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5444087982177734
  },
  {
    "content": "Data that is aligned to and in multiples of the Stream Write Size (SWS) provides optimal performance of\nthe write commands to the controller. The SWS unit of granularity is defined independently for each I/O\nCommand Set. The Stream Granularity Size indicates the size of the media that is prepared as a unit for\nfuture allocation for write commands and is a multiple of the Stream Write Size. The controller may allocate\nand group together a stream in Stream Granularity Size (SGS) units. Refer to Figure 421.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 509,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3784",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47591137886047363
  },
  {
    "content": "**Figure 421: Directive Streams – Stream Alignment and Granularity**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3785",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5737495422363281
  },
  {
    "content": "Stream Granularity (SGS)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3786",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43256714940071106
  },
  {
    "content": "SGS (first) ... SGS (last)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3787",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09668339043855667
  },
  {
    "content": "One example of this is if the host issues an NVM Command Set Dataset Management command (refer to\nthe Dataset Management command section of the NVM Command Set Specification) to deallocate logical\nblocks that are associated with a stream, that host should specify a starting LBA and length that is aligned\nto and in multiples of the Stream Granularity Size. This provides optimal performance and endurance of the\nmedia.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 419,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3788",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5705280900001526
  },
  {
    "content": "Stream resources are the resources in the NVM subsystem that are necessary to track operations\nassociated with a specified stream identifier. There are a maximum number of stream resources that are\navailable in an NVM subsystem as indicated by the Max Stream Limit (MSL) field in the Return Parameters\ndata structure (refer to Figure 425).\n\nAvailable NVM subsystem stream resources are stream resources that are not allocated for exclusive use\nin any namespace. Available NVM subsystem stream resources are reported in the NVM Subsystem\nStreams Available (NSSA) field (refer to Figure 425) and may be used by any host in any namespace that:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 640,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3789",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4699552059173584
  },
  {
    "content": "- has the Streams Directive enabled;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3790",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5154936909675598
  },
  {
    "content": "- has not been allocated exclusive stream resources by that host if bit 0 of the NSSC field is cleared\nto ‘0’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 114,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3791",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2334652841091156
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3792",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2589789927005768
  },
  {
    "content": "- has not been allocated exclusive stream resources by any host if bit 0 of the NSSC field is set to\n‘1’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 105,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3793",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6276211738586426
  },
  {
    "content": "Each time stream resources are allocated for exclusive use in a specified namespace, the available NVM\nsubsystem stream resources reported in the NSSA field are reduced.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3794",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.281114786863327
  },
  {
    "content": "For a given namespace:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 22,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3795",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5173797607421875
  },
  {
    "content": "a) a host allocates stream resources to that namespace for the exclusive use of that host(s) by issuing\n\nthe Allocate Resources operation;\nb) other hosts may concurrently allocate stream resources to that namespace for their exclusive use;\n\nand\nc) hosts which have not allocated stream resources to that namespace may use available NVM",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 335,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3796",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5987396836280823
  },
  {
    "content": "subsystem stream resources for access to that namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3797",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43387681245803833
  },
  {
    "content": "The Directive operations that shall be supported if the Streams Directive is supported are listed in Figure\n422. The Directive Specific field in a command is referred to as the Stream Identifier when the Directive\nType field is set to the Streams Directive.\n\n**Figure 422: Streams – Directive Operations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 305,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3798",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5346757173538208
  },
  {
    "content": "|Directive Command|Directive Operation<br>Name|Directive Operation Value|Definition|\n|---|---|---|---|\n|Directive Receive|Return Parameters|01h|Section 8.7.3.1.1|\n|Directive Receive|Get Status|02h|Section 8.7.3.1.2|\n|Directive Receive|Allocate Resources|03h|Section 8.7.3.1.3|\n|Directive Receive|Reserved|All other values||\n|Directive Send|Release Identifier|01h|Section 8.7.3.2.1|\n|Directive Send|Release Resources|02h|Section 8.7.3.2.2|\n|Directive Send|Reserved|All other values||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 482,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3799",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16108223795890808
  },
  {
    "content": "Stream identifiers are assigned by the host and may be in the range 0001h to FFFFh. The host may specify\na sparse set of stream identifiers (i.e., there is no requirement for the host to use Stream Identifiers in any\nparticular order).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 235,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3800",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5490818619728088
  },
  {
    "content": "The host may access a namespace through multiple controllers in the NVM subsystem. The controllers in\nan NVM subsystem indicate in bit 0 of the NSSC field (refer to Figure 425) if a stream identifier is unique\nbased on the Host Identifier (i.e., the same stream identifier used to access the same namespace by a host\nthat has registered a different Host Identifier is referencing a different stream), or if a stream identifier may\nbe used by multiple Host Identifiers (i.e., the same stream identifier used to access the same namespace\nby a host that has registered a different Host Identifier is referencing the same stream). All controllers in an\nNVM subsystem shall report the same value in the NSSC field.\n\nIf multiple controllers receive a registration of a Host Identifier (refer to section 5.27.1.16) that has the same\nnon-zero value, then that value represents a single host that is accessing the namespace through those\ncontrollers and a stream identifier is used across those controllers to access the same stream on the\nnamespace. If a Host Identifier has a unique non-zero value, then each value represents a unique host that\nis accessing the namespace and:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3801",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.811279833316803
  },
  {
    "content": "- if bit 0 of the NSSC field is cleared to ‘0’, then the same stream identifier on controllers with different\nnon-zero Host Identifiers does not have the same meaning for a particular namespace (i.e., the\nstream identifier is not used across controllers with different non-zero Host Identifiers to access the\nsame stream on the namespace); and\n\n- if bit 0 of the NSSC field is set to ‘1’, then the same stream identifier on any controller with a nonzero Host Identifier has the same meaning for a particular namespace (i.e., the stream identifier is\nused across controllers to access the same stream on the namespace).\n\nIf a Host Identifier is cleared to 0h, then a unique host is accessing the namespace and the stream identifier\ndoes not have the same meaning for a particular namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 789,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3802",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24792836606502533
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3803",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1878504455089569
  },
  {
    "content": "**Figure 423: Example Multi-Stream and NSSC**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3804",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6864761710166931
  },
  {
    "content": "In the example shown in Figure 423, if NSSC bit 0 is cleared to ‘0’, then there are three streams as follows:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3805",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45872288942337036
  },
  {
    "content": "- Stream ID 1-a and Stream ID 1-b have the same meaning;\n\n- Stream ID 1-c has a different meaning; and\n\n- Stream ID 1-d has a different meaning.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 144,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3806",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5569297075271606
  },
  {
    "content": "In the example shown in Figure 423, if NSSC bit 0 is set to ‘1’, then there is one stream as follows:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3807",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5299205183982849
  },
  {
    "content": "- Stream ID 1-a, Stream ID 1-b, Stream ID 1-c, and Stream ID 1-d have the same meaning.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3808",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04606015607714653
  },
  {
    "content": "The controller(s) recognized by the NVM subsystem as being associated with a specific host or hosts and\nattached to a specific namespace either:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 144,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3809",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3145028054714203
  },
  {
    "content": "- utilizes a number of stream resources allocated for exclusive use of that namespace as returned\nin response to an Allocate Resources operation; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3810",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6058488488197327
  },
  {
    "content": "- utilizes resources from the NVM subsystem stream resources.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3811",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41111457347869873
  },
  {
    "content": "The value of Namespace Streams Allocated (NSA) indicates how many resources for individual stream\nidentifiers have been allocated for exclusive use for the specified namespace by the associated controllers.\nThis indicates the maximum number of stream identifiers that may be open at any given time in the specified\nnamespace by the associated controllers. To request a different number of resources than are currently\nallocated for exclusive use by the associated controllers for a specific namespace, all currently allocated\nresources are first required to be released using the Release Resources operation. There is no mechanism\nto incrementally increase or decrease the number of allocated resources for a given namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 725,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3812",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5162126421928406
  },
  {
    "content": "Streams are opened by the controller when the host issues a Write command that specifies a stream\nidentifier that is not currently open. While a stream is open the controller maintains context for that stream\n(e.g., buffers for associated data). The host may determine the streams that are open using the Get Status\noperation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 326,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3813",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5852975249290466
  },
  {
    "content": "For a namespace that has a non-zero value of Namespace Streams Allocated (NSA), if the host submits a\nWrite command specifying a stream identifier not currently in use and stream resources are exhausted,\nthen an arbitrary stream identifier for that namespace is released by the controller to free the stream\nresources associated with that stream identifier for the new stream. The host may ensure the number of\nopen streams does not exceed the allocated stream resources for the namespace by explicitly releasing\nstream identifiers as necessary using the Release Identifier operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 584,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3814",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19577716290950775
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3815",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23959967494010925
  },
  {
    "content": "For a namespace that has zero namespace stream resources allocated, if the host submits an I/O command\nspecifying a stream identifier not currently in use and:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 159,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3816",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6902288198471069
  },
  {
    "content": "- NVM subsystem streams available are exhausted, then an arbitrary stream identifier for an arbitrary\nnamespace that is using NVM subsystem stream resources is released by the NVM subsystem to\nfree the stream resources associated with that stream identifier for the new stream; or\n\n- all NVM subsystem stream resources have been allocated for exclusive use for specific\nnamespaces, then the Write command is treated as a normal Write command that does not specify\na stream identifier.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 484,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3817",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5125569701194763
  },
  {
    "content": "The host determines parameters associated with stream resources using the Return Parameters operation.\nThe host may get a list of open stream identifiers using the Get Status operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 185,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3818",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5454362630844116
  },
  {
    "content": "If the Streams Directive becomes disabled for use by a host within a namespace, then all stream resources\nand stream identifiers shall be released for that host for the affected namespace. If the host issues a Format\nNVM command, then all stream identifiers for all open streams for affected namespaces shall be released.\nIf the host deletes a namespace, then all stream resources and all stream identifiers for that namespace\nshall be released. If the write protection state of a namespace changes such that the namespace becomes\nwrite protected (refer to section 8.12), then the controller shall release all stream resources and stream\nidentifiers for that namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 669,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3819",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5166027545928955
  },
  {
    "content": "Streams Directive defines the command specific status values specified in Figure 424.\n\n**Figure 424: Streams Directive – Command Specific Status Values**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 153,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3820",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48691055178642273
  },
  {
    "content": "|Value|Description|\n|---|---|\n|7Fh|Stream Resource Allocation Failed: The controller was not able to allocate stream resources<br>for exclusive use of the specified namespace and no NVM subsystem stream resources are<br>available.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 231,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3821",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2603304982185364
  },
  {
    "content": "**8.7.3.1** **Directive Receive**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3822",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.547362208366394
  },
  {
    "content": "This section defines operations used with the Directive Receive command for the Streams Directive.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3823",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3930203914642334
  },
  {
    "content": "**8.7.3.1.1** **Return Parameters (Directive Operation 01h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3824",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33321917057037354
  },
  {
    "content": "The Return Parameter operation returns a data structure that specifies the features and capabilities\nsupported by the Streams Directive, including namespace specific values. The DSPEC field in command\nDword 11 is not used for this operation. The data structure returned is defined in Figure 425. If an NSID\nvalue of FFFFFFFFh is specified, then the controller:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 360,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3825",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2773788869380951
  },
  {
    "content": "- returns the NVM subsystem specific values;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3826",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4442444443702698
  },
  {
    "content": "- may return any namespace specific values that are the same for all namespaces (e.g., SWS);\nand",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3827",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45638659596443176
  },
  {
    "content": "- clears all other namespace specific fields to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3828",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13985419273376465
  },
  {
    "content": "**Figure 425: Streams Directive – Return Parameters Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3829",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4518980085849762
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|NVM Subsystem Specific Fields|NVM Subsystem Specific Fields|\n|01:00|Max Streams Limit (MSL): This field indicates the maximum number of concurrently open<br>streams that the NVM subsystem supports. This field returns the same value independent of<br>specified namespace.|\n|03:02|NVM Subsystem Streams Available (NSSA): This field indicates the number of NVM subsystem<br>stream resources available. These are the stream resources that are not allocated for the<br>exclusive use by a host in any specific namespace. This field returns the same value independent<br>of specified namespace.|\n|05:04|NVM Subsystem Streams Open (NSSO): This field indicates the number of open streams in the<br>NVM subsystem that are not associated with a namespace for which resources were allocated<br>using an Allocate Resources operation. This field returns the same value independent of specified<br>namespace.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 925,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3830",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42044028639793396
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3831",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19597193598747253
  },
  {
    "content": "**Figure 425: Streams Directive – Return Parameters Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3832",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3882998526096344
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|06|NVM Subsystem Stream Capability (NSSC): This field indicates the stream capabilities of the<br>NVM subsystem.<br>Bits 7:1 are reserved.<br>Bit 0 indicates whether stream identifiers may be shared by multiple Host Identifiers, or if a stream<br>identifier is associated with a single Host Identifier. If bit 0 is cleared to ‘0’, then the stream identifier<br>is associated with a single non-zero Host Identifier. If bit 0 is set to ‘1’, then the stream identifier<br>may be associated with multiple non-zero Host Identifiers.|\n|15:07|Reserved|\n|Namespace Specific Fields|Namespace Specific Fields|\n|19:16|Stream Write Size (SWS): This field indicates the alignment and size of the optimal stream write<br>as a number for the specified namespace where the unit of granularity is specified by the<br>applicable I/O Command Set. The size indicated should be less than or equal to Maximum Data<br>Transfer Size (MDTS) that is specified in units of minimum memory page size. SWS may change<br>if the namespace is reformatted with a different User Data Format. If the NSID value is set to<br>FFFFFFFFh, then this field may be cleared to 0h if a single user data size cannot be indicated.<br>Refer to the applicable I/O Command Set specification for how this field is utilized to optimize<br>performance and endurance.|\n|21:20|Stream Granularity Size (SGS): This field indicates the stream granularity size for the specified<br>namespace in Stream Write Size (SWS) units. If the NSID value is set to FFFFFFFFh, then this<br>field may be cleared to 0h.<br>Refer to the applicable I/O Command Set specification for how this field is utilized to optimize<br>performance and endurance.|\n|Namespace and Host Identifier Specific Fields|Namespace and Host Identifier Specific Fields|\n|23:22|Namespace Streams Allocated (NSA): This field indicates the number of stream resources<br>allocated for exclusive use of the specified namespace.<br>If bit 0 of the NSSC field is cleared to ‘0’, then those exclusive stream resources are shared by the<br>controller processing the Return Parameters operation and by all other controllers that share the<br>same non-zero Host Identifier, and are attached to the specified namespace.<br>If bit 0 of the NSSC field is set to ‘1’, then those exclusive stream resources are shared by all<br>controllers that are associated with any non-zero Host Identifier and are attached to this<br>namespace.<br>If this value is non-zero, then the namespace may have up to NSA number of concurrently open<br>streams. If this field is cleared to 0h, then no stream resources are currently allocated to this<br>namespace and the namespace may have up to NSSA number of concurrently open streams.|\n|25:24|Namespace Streams Open (NSO): This field indicates the number of open streams in the<br>specified namespace.<br>If bit 0 of the NSSC field is cleared to ‘0’, then this field indicates the number of streams that were<br>opened by the controller processing the Return Parameters operation and by all other controllers<br>that share the same non-zero Host Identifier, and are attached to this namespace.<br>If bit 0 of the NSSC field is set to ‘1’, then this field indicates the number of streams that were<br>opened by the controller processing the Return Parameters operation and all other controllers that<br>are associated with any non-zero Host Identifier and are attached to this namespace.<br>NOTE: It is not possible for a host to retrieve the number of open streams using resources<br>allocated to the specified namespace by other hosts.|\n|31:26|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3604,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3833",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1696726679801941
  },
  {
    "content": "**8.7.3.1.2** **Get Status (Directive Operation 02h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3834",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3726096749305725
  },
  {
    "content": "The Get Status operation returns information about the status of currently open streams for the specified\nnamespace and the host issuing the Get Status operation. The DSPEC field in command Dword 11 is not\nused for this operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 230,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3835",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16219235956668854
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3836",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2548500597476959
  },
  {
    "content": "If NSSC bit 0 is cleared to ‘0’, then the information returned describes only those resources for the specified\nnamespace that are associated with hosts that are registered with the same non-zero Host Identifier value\nas the host issuing the Get Status operation. If NSSC bit 0 is set to ‘1’, then the information returned\ndescribes the resources for the specified namespace that are associated with hosts that are registered with\nany non-zero Host Identifier.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 460,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3837",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5200496912002563
  },
  {
    "content": "If an NSID value of FFFFFFFFh is specified, then the controller shall return information about the status of\ncurrently open streams in the NVM subsystem that use resources which are not allocated for the exclusive\nuse of a particular namespace. If a stream identifier value being returned is in use by different namespaces,\nthen that stream identifier shall be returned only once.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 380,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3838",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44613566994667053
  },
  {
    "content": "Stream Identifier 1 (i.e., returned at offset 03:02) contains the value of the open stream of lowest numerical\nvalue. Each subsequent field contains the value of the next numerically greater stream identifier of an open\nstream.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 227,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3839",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16755148768424988
  },
  {
    "content": "The data structure returned is defined in Figure 426. All fields are specific to the namespace specified if the\nNSID value was not set to FFFFFFFFh.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 148,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3840",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3207733929157257
  },
  {
    "content": "**Figure 426: Streams Directive – Get Status Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3841",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43514543771743774
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|01:00|Open Stream Count: This field specifies the number of streams that are currently open.|\n|03:02|Stream Identifier 1: This field specifies the stream identifier of the first (numerically lowest) open<br>stream.|\n|05:04|Stream Identifier 2: This field specifies the stream identifier of the second open stream.|\n|…|…|\n|131071:<br>131070|Stream Identifier 65,535: This field specifies the stream identifier of the 65,535th open stream.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 469,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3842",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1093669906258583
  },
  {
    "content": "**8.7.3.1.3** **Allocate Resources (Directive Operation 03h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3843",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49330636858940125
  },
  {
    "content": "The Allocate Resources operation indicates the number of streams that the host requests for the exclusive\nuse for the specified namespace. If bit 0 of the NSSC field is cleared to ‘0’, then those resources are for the\nexclusive use of hosts that are registered with the same Host Identifier as the host that made the request.\nIf bit 0 of the NSSC field is set to ‘1’, then those resources are for the exclusive use of any host that is\nregistered with any non-zero Host Identifier. The DSPEC field in command Dword 11 is not used for this\noperation. The operation returns the number of streams allocated in Dword 0 of the completion queue entry.\nThe value allocated may be less than or equal to the number requested. The allocated resources shall be\nreflected in the Namespace Streams Allocated field of the Return Parameters data structure.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 840,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3844",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4082721173763275
  },
  {
    "content": "If the controller is unable to allocate any stream resources for the exclusive use for the specified\nnamespace, then the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 138,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3845",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39776167273521423
  },
  {
    "content": "- return a status value of Stream Resource Allocation Failed; or",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3846",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4257016181945801
  },
  {
    "content": "- if NVM subsystem stream resources are available, then clear NSA to 0h in the completion queue\nentry to indicate that the host may use stream resources from the NVM subsystem for this",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 184,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3847",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4358166754245758
  },
  {
    "content": "If the specified namespace already has stream resources allocated for the exclusive use of the host issuing\nthe Allocate Resources operation, then the controller shall return a status code of Invalid Field in Command.\nTo allocate additional streams resources, the host should release resources and request a complete set of",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 323,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3848",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10057038813829422
  },
  {
    "content": "No data transfer occurs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3849",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0755898579955101
  },
  {
    "content": "**Figure 427: Allocate Resources – Command Dword 12**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3850",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2769094407558441
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|Namespace Streams Requested (NSR): This field specifies the number of stream resources the<br>host is requesting be allocated for exclusive use by the namespace specified.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3851",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33133989572525024
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3852",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15516364574432373
  },
  {
    "content": "**Figure 428: Allocate Resources – Completion Queue Entry Dword 0**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3853",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3937484323978424
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|31:16|Reserved|\n|15:00|Namespace Streams Allocated (NSA): This field indicates the number of streams resources that<br>have been allocated for exclusive use by the namespace specified. The allocated resources are<br>available to all controllers associated with that host.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 302,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3854",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2063387781381607
  },
  {
    "content": "**8.7.3.2** **Directive Send**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3855",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5609951019287109
  },
  {
    "content": "This section defines operations used with the Directive Send command for the Streams Directive.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3856",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34895575046539307
  },
  {
    "content": "**8.7.3.2.1** **Release Identifier (Directive Operation 01h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3857",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5175155401229858
  },
  {
    "content": "The Release Identifier operation specifies that the stream identifier specified in the DSPEC field in\ncommand Dword 11 is no longer in use by the host. Specifically, if the host uses that stream identifier in a\nfuture operation, then that stream identifier is referring to a different stream. If the specified identifier does\nnot correspond to an open stream for the specified namespace, then the Directive Send command should\nnot fail as a result of the specified identifier. If there are stream resources allocated for the exclusive use of\nthe specified namespace, then those exclusive stream resources remain allocated for this namespace and\nmay be re-used in a subsequent write command. If there are no stream resources allocated for the exclusive\nuse of the specified namespace, then the stream resources are returned to the NVM subsystem stream\nresources for future use by a namespace without exclusive allocated stream resources. If an NSID value\nof FFFFFFFFh is specified, then the controller shall abort the command with a status code of Invalid Field\nin Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1072,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3858",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1157350018620491
  },
  {
    "content": "No data transfer occurs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3859",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.027016788721084595
  },
  {
    "content": "**8.7.3.2.2** **Release Resources (Directive Operation 02h)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3860",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5523872375488281
  },
  {
    "content": "The Release Resources operation is used to release all streams resources allocated for the exclusive use\nof the namespace attached to all controllers:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 150,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3861",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31842371821403503
  },
  {
    "content": "- associated with the same non-zero Host Identifier of the controller that processed the operation if\nbit 0 of the NSSC field is cleared to ‘0’; and\n\n- associated with any non-zero Host Identifier if bit 0 of the NSSC field is set to ‘1’.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 238,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3862",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27226561307907104
  },
  {
    "content": "On successful completion of this command, the exclusive allocated stream resources are released and the\nNamespace Streams Allocated (refer to Figure 425) field is cleared to 0h for the specified namespace. If\nthis command is issued when no streams resources are allocated for the exclusive use of the namespace,\nthen the Directive Send command shall take no action and shall not fail as a result of no allocated stream",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 418,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3863",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2428409606218338
  },
  {
    "content": "No data transfer occurs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 24,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3864",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.05827556177973747
  },
  {
    "content": "**8.8** **Doorbell Stride for Software Emulation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3865",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5615959167480469
  },
  {
    "content": "The doorbell stride, specified in CAP.DSTRD (refer to Figure 36), may be used to separate doorbells by a\nnumber of bytes in memory space. The doorbell stride is a number of bytes equal to (2 ^ (2 + CAP.DSTRD)).\nThis is useful in software emulation of an NVM Express controller. In this case, a software thread is\nmonitoring doorbell notifications. The software thread may be made more efficient by monitoring one\ndoorbell per discrete cacheline or utilize the monitor/mwait CPU instructions. For hardware implementations\nof the NVM Express interface, the expected doorbell stride value is 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 592,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3866",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2604539692401886
  },
  {
    "content": "**8.9** **Host Memory Buffer**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3867",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5729341506958008
  },
  {
    "content": "The Host Memory Buffer (HMB) feature allows the controller to utilize an assigned portion of host memory\nexclusively. The use of the host memory resources is vendor specific. Host software may not be able to\nprovide any or a limited amount of the host memory resources requested by the controller. The controller\nshall function properly without host memory resources. Refer to section 5.27.1.10.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 395,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3868",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2350717931985855
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3869",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24763643741607666
  },
  {
    "content": "The controller may indicate limitations for the minimum usable descriptor entry size and the maximum\nnumber of descriptor entries (refer to the HMMINDS and HMMAXD fields in the Identify Controller data\nstructure, Figure 275). If the host does not create the Host Memory Buffer within the indicated limits, then\nthe host memory allocated for use by the controller may not be fully utilized (e.g., descriptor entries beyond\nthe maximum number of entries indicated may be ignored by the controller).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 496,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3870",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.656334400177002
  },
  {
    "content": "During initialization, host software may provide a descriptor list that describes a set of host memory address\nranges for exclusive use by the controller. The host memory resources assigned are for the exclusive use\nof the controller (host software should not modify the ranges) until host software requests that the controller\nrelease the ranges and the controller completes the Set Features command. The controller is responsible\nfor initializing the host memory resources. Host software should request that the controller release the\nassigned ranges prior to a shutdown event, a Runtime D3 event, or any other event that requires host\nsoftware to reclaim the assigned ranges. After the controller acknowledges that the ranges are no longer\nin use, host software may reclaim the host memory resources. In the case of Runtime D3, host software\nshould provide the host memory resources to the controller again and inform the controller that the ranges\nwere in use prior to the RTD3 event and have not been modified.\n\nThe host memory resources are not persistent in the controller across a reset event. Host software should\nprovide the previously allocated host memory resources to the controller after the reset completes. If host\nsoftware is providing previously allocated host memory resources (with the same contents) to the controller,\nthe Memory Return bit is set to ‘1’ in the Set Features command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1404,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3871",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5681613087654114
  },
  {
    "content": "The controller shall ensure that there is no data loss or data corruption in the event of a surprise removal\nwhile the Host Memory Buffer feature is being utilized.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3872",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17767561972141266
  },
  {
    "content": "**8.10 Host Operation with Asymmetric Namespace Access Reporting (Informative)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 80,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3873",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47159695625305176
  },
  {
    "content": "**Host ANA Normal Operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3874",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5177808403968811
  },
  {
    "content": "The host determines if ANA is supported by examining bit 3 in the CMIC field in the Identify Controller data\nstructure (refer to Figure 275). The NSID or Identifier (refer to section 4.3) is used to determine when\nmultiple paths to the same namespace are available. The host examines the ANA log page (refer to section\n5.16.1.13) for each controller to determine the ANA state of each group of namespaces attached to that\ncontroller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 433,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3875",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5724202990531921
  },
  {
    "content": "To send a command to a namespace, the host should select a controller that reports the ANA Optimized\nState (refer to section 8.1.3.1) and send the command to that controller. If more than one controller that\nreports the ANA Optimized state for a namespace are found, then the host may use all of those controllers\nto send commands.\n\nIf there are no controllers that report the ANA Optimized state for a namespace, then the host should select\na controller that reports ANA Non-Optimized State (refer to section 8.1.3.2) for that namespace and send\nthe command to that controller. If more than one controller that reports ANA Non-Optimized state for a\nnamespace are found, then the host may use all of those controllers to send commands.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 735,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3876",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40682026743888855
  },
  {
    "content": "If multiple controllers are being used, then the algorithm for determining which controller to use next is\noutside the scope of this specification (e.g., the host may select a simple round robin algorithm, a queue\ndepth weighted algorithm, a transfer length weighted algorithm, or any other algorithm).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 302,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3877",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32735762000083923
  },
  {
    "content": "If there are no controllers that report the ANA Optimized state for a namespace and there are no controllers\nthat report the ANA Non-Optimized state for that namespace, then the host should examine controllers that\nreport the ANA Inaccessible state as described in section 8.10.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 280,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3878",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5897936820983887
  },
  {
    "content": "**Host ANA Inaccessible Operation**\n\nIf the ANA log page reports an ANA state of ANA Inaccessible State for an ANA Group or a command\nreturns a status code of Asymmetric Access Inaccessible, then the host should:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 212,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3879",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4550361931324005
  },
  {
    "content": "- not use that controller to send commands to any namespace in that ANA Group; and\n\n- select a different controller for sending commands to all namespaces in that ANA Group.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 173,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3880",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1344941109418869
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3881",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24601256847381592
  },
  {
    "content": "If there are no controllers that report the ANA Optimized state for a namespace and there are no controllers\nthat report the ANA Non-Optimized state, then a transition may be occurring that also impacts controllers\nthat are reporting the ANA Inaccessible state. As a result, the host should use the methods described for\nHost ANA Transition operation (refer to section 8.10.5) to determine if the controller reporting ANA\nInaccessible state transitions during the ANATT time interval to an ANA state that enables commands to\nbe processed by that controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 557,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3882",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5386111736297607
  },
  {
    "content": "**Host ANA Persistent Loss Operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3883",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5755174160003662
  },
  {
    "content": "If the ANA log page reports an ANA state of ANA Persistent Loss State for an ANA Group or a command\nreturns a status code of Asymmetric Access Persistent Loss, then the host should not use that controller to\nsend commands to any namespace in that ANA Group, and select a different controller for sending\ncommands to any namespace in that ANA Group. If the controller supports the Namespace Management\ncapability (refer to section 8.11), then the namespaces in an ANA Group reporting this state should be\ndetached.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 513,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3884",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4777851700782776
  },
  {
    "content": "**Host ANA Change Notice Operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3885",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5462464094161987
  },
  {
    "content": "If the ANA log page reports an ANA state of ANA Change State for an ANA Group or a command returns\na status code of Asymmetric Access Transition, then the host should temporarily not use that controller to\nsend commands to any namespace in that ANA Group. If only controllers reporting ANA Inaccessible State\nare available, then the host should follow these procedures to determine which controller to use. To use a\ncontroller, the host may:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 441,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3886",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39649996161460876
  },
  {
    "content": "a) if Asymmetric Namespace Access Change Notices are enabled (refer to section 5.27.1.8) on the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3887",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4455748498439789
  },
  {
    "content": "controller, wait for an Asymmetric Namespace Access Change Notice from that controller. Upon\nreceipt of that notice, the host should examine the ANA log page to determine the new ANA state\nand resume sending commands based on the new ANA state. Such notice should occur within the\nANATT time (refer to Figure 275); or\nb) delay and retry the command during the ANATT time interval. The host should not immediately",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 412,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3888",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6468054056167603
  },
  {
    "content": "retry, but rather, divide the ANATT time into equal intervals for command retry purposes (e.g., if\nANATT is 30, perform 3 retries at 10 s intervals, or 10 retries at 3 s intervals). During or upon\ncompletion of the ANATT time interval, the new ANA state of the ANA Group should be known\n(e.g., one of the command retries returned a different status that indicates completion of the\ntransition to a new ANA state). If the retried command did not complete without error, the ANA log\npage should be examined on each controller that provides access to the namespace and the host\nshould resume sending commands based on the new ANA state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 633,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3889",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5892558693885803
  },
  {
    "content": "If the ANATT time interval expires, then the host should use a different controller for sending commands to\nthe namespaces in that ANA Group. The ANATT interval reported by the controller should prevent this type\nof timer expiration from occurring.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 248,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3890",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4080996811389923
  },
  {
    "content": "**Host ANA Transition Operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3891",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16402265429496765
  },
  {
    "content": "Receipt of an Asymmetric Namespace Access Change Notice from a controller may indicate:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 87,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3892",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3592437207698822
  },
  {
    "content": "a) that the ANA state reported in one or more ANA Group Descriptors has changed;\nb) a new NSID has been added to one or more of the ANA Group Descriptors;\nc) an NSID has been removed from one or more of the ANA Group Descriptors; and/or\nd) the NSID of a namespace has moved from one ANA Group Descriptor to a different ANA Group",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 328,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3893",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5321929454803467
  },
  {
    "content": "Descriptor (i.e., the ANAGRPID field in the Identify Namespace data structure for that namespace\nhas changed), if bit 6 in the ANACAP field is cleared to ‘0’ in the Identify Controller data structure\n(refer to Figure 275).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 222,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3894",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41943085193634033
  },
  {
    "content": "As a result of receiving an Asymmetric Namespace Access Change Notice, the host should read the ANA\nlog page (refer to section 5.16.1.13) to check for each of those possible changes.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 182,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3895",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2166670709848404
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3896",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04042373225092888
  },
  {
    "content": "**All Paths Down Condition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3897",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48996084928512573
  },
  {
    "content": "An all paths down condition occurs when there are no paths available on the host to access the\nnamespaces in an ANA Group (i.e., the NVM media). To determine whether an all paths down condition\nhas occurred, the host may examine the ANA log page on each controller that provides access to the\nnamespaces in a particular ANA Group. All paths that are not in the ANA Persistent Loss state should be\nchecked. If no paths to the namespaces in that ANA Group become available (i.e., transition to the ANA\nOptimized state or the ANA Non-Optimized state) for the duration of an ANATT time interval, then an all\npaths down condition has occurred for the namespaces in that ANA Group.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 675,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3898",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2967492640018463
  },
  {
    "content": "**8.11 Namespace Management**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3899",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5318393111228943
  },
  {
    "content": "The Namespace Management capability consists of the Namespace Management command (refer to\nsection 5.23) and the Namespace Attachment command (refer to section 5.22). The Namespace\nManagement command is used to create a namespace or delete a namespace. The Namespace\nAttachment command is used to attach and detach controllers from a namespace. The Namespace\nManagement capability is intended for use during manufacturing or by a system administrator.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 451,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3900",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6273658275604248
  },
  {
    "content": "If the Namespace Management capability is supported, then the controller:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 73,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3901",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5580186247825623
  },
  {
    "content": "a) shall support the Namespace Management command and the Namespace Attachment",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3902",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4914669096469879
  },
  {
    "content": "command;\nb) shall set bit 3 to ‘1’ in the OACS field (refer to Figure 275);\nc) should support the Namespace Attribute Changed asynchronous event (refer to Figure 147",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3903",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4457324147224426
  },
  {
    "content": "and section 5.27.1.8); and\nd) may support Namespace Granularity (refer to the NVM Command Set Specification).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3904",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46534568071365356
  },
  {
    "content": "If a namespace is detached from a controller, then the NSID that referred to that namespace becomes an\ninactive NSID (refer to section 3.2.1.4) on that controller. If a namespace is deleted from the NVM\nsubsystem, then the NSID that referred to that namespace becomes an unallocated NSID (refer to section\n3.2.1.3) in the NVM subsystem. Previously submitted but uncompleted or subsequently submitted\ncommands to the affected NSID are handled by the controller as if they were issued to an inactive NSID\n(refer to Figure 87).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 524,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3905",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.503069281578064
  },
  {
    "content": "The size of a namespace is based on the size requested in a create operation, the format of the namespace,\nand any characteristics (e.g., endurance). The controller determines the NVM capacity allocated for that\nnamespace. Namespaces may be created with different usage characteristics (e.g., endurance) that utilize\ndiffering amounts of NVM capacity. Namespace characteristics and the mapping of these characteristics to\nNVM capacity usage are outside the scope of this specification.\n\nReporting of capacity information for the NVM subsystem, Domain, Endurance Group, and NVM Set are\ndescribed in section 3.8. For each namespace, the NVM Set and the Endurance Group that contain the\nnamespace are reported in the Identify Namespace data structure. The NVM Set to be used for a\nnamespace is based on the value in the NVM Set Identifier field in a create operation. If the NVM Set\nIdentifier field is cleared to 0h in a create operation, then the controller shall choose the NVM Set from\nwhich to allocate capacity to create the namespace.\n\nIf the NVM Set Identifier field and the Endurance Group Identifier field are both cleared to 0h in a create\noperation, then the controller shall choose the Endurance Group and the NVM Set from which to allocate\ncapacity to create the namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1284,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3906",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.962860643863678
  },
  {
    "content": "If the NVM Set Identifier field is cleared to 0h and the Endurance Group Identifier field is set to a non-zero\nvalue in a create operation, then the controller shall choose the NVM Set in the specified Endurance Group\nfrom which to allocate capacity to create the namespace.\n\nIf the NVM Set Identifier field is set to a non-zero value and the Endurance Group Identifier field is cleared\nto 0h in a create operation, then the controller shall abort the command with a status code of Invalid Field\nin Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 507,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3907",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45784249901771545
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3908",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4566453695297241
  },
  {
    "content": "If the NVM Set Identifier field and the Endurance Group Identifier field are both set to non-zero values in a\ncreate operation and the specified NVM Set exists in the specified Endurance Group, then the controller\nshall allocate capacity for the created namespace from the specified NVM Set.\n\nIf the NVM Set Identifier field and the Endurance Group Identifier field are both set to non-zero values in a\ncreate operation and the specified NVM Set does not exist in the specified Endurance Group, then the\ncontroller shall abort the command with a status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 586,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3909",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6208528876304626
  },
  {
    "content": "For each namespace, the NVM capacity used for that namespace is reported in the Identify Namespace\ndata structure (refer to the applicable I/O Command Set specification). The controller may allocate NVM\ncapacity in units such that the requested size for a namespace may be rounded up to the next unit boundary.\nThe units in which NVM capacity is allocated are reported in the Namespace Granularity List (refer to the\nNVM Command Set Specification), if supported. For example when using the NVM Command Set, if host\nsoftware requests a namespace of 32 logical blocks with a logical block size of 4 KiB for a total size of\n128 KiB and the allocation unit for the implementation is 1 MiB, then the NVM capacity consumed may be\nrounded up to 1 MiB. The NVM capacity fields may not correspond to the logical block size multiplied by\nthe total number of logical blocks.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 863,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3910",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6182737350463867
  },
  {
    "content": "The method of allocating ANA Group identifiers is outside the scope of this specification. If the ANA Group\nIdentifier (refer to Figure 280 and the Identify Namespace data structure in the NVM Command Set\nSpecification) is cleared to 0h, then the controller shall determine the ANAGRPID that is assigned to that",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 311,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3911",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3120448589324951
  },
  {
    "content": "To create a namespace, host software performs the following actions:\n\n1. Host software requests the Identify Namespace data structure that specifies common namespace",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3912",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4736504554748535
  },
  {
    "content": "capabilities (i.e., using an Identify command with the NSID field set to FFFFFFFFh and the CNS\nfield cleared to 0h);\n2. If the controller supports reporting of I/O Command Set specific Namespace Management",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3913",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41331979632377625
  },
  {
    "content": "content (refer to the Namespace Management section in the applicable I/O Command Set\nspecification), host software optionally requests that information (e.g. Namespace Granularity).\n3. Host software determines available capacity (refer to section 3.8);\n4. Host software creates the data structure defined in Figure 300 (e.g., taking into account the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 349,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3914",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6297743916511536
  },
  {
    "content": "common namespace capabilities, available capacity);\n5. Host software issues the Namespace Management command specifying the Create operation",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3915",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6134825944900513
  },
  {
    "content": "and the data structure. On successful completion of the command, the Namespace Identifier of\nthe new namespace is returned in Dword 0 of the completion queue entry. At this point, the new\nnamespace is not attached to any controller; and\n6. Host software requests the Identify Namespace data structures for the new namespace to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 326,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3916",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5458397269248962
  },
  {
    "content": "determine all attributes of the namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3917",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4905150830745697
  },
  {
    "content": "To attach a namespace, host software performs the following actions:\n\n1. Host software issues the Namespace Attachment command specifying the Controller Attach",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 159,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3918",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6571248173713684
  },
  {
    "content": "operation to attach the specified namespace to one or more controllers; and\n2. If Namespace Attribute Notices are enabled, the controller(s) newly attached to the namespace",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 172,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3919",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4617699384689331
  },
  {
    "content": "report a Namespace Attribute Changed asynchronous event to the host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3920",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4709692597389221
  },
  {
    "content": "To detach a namespace, host software performs the following actions:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3921",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6542243361473083
  },
  {
    "content": "1. Host software issues the Namespace Attachment command specifying the Controller Detach",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3922",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6288816332817078
  },
  {
    "content": "operation to detach the specified namespace from one or more controllers; and\n2. If Namespace Attribute Notices are enabled, the controllers that were detached from the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3923",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4189665913581848
  },
  {
    "content": "namespace report a Namespace Attribute Changed asynchronous event to the host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3924",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5033480525016785
  },
  {
    "content": "To delete a namespace, host software performs the following actions:\n\n1. Host software should detach the namespace from all controllers;\n2. Host software issues the Namespace Management command specifying the Delete operation for",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3925",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5848025679588318
  },
  {
    "content": "the specified namespace. On successful completion of the command, the namespace has been\ndeleted; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3926",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1319369375705719
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3927",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25210532546043396
  },
  {
    "content": "3. If Namespace Attribute Notices are enabled, any controller(s) not processing the Namespace",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3928",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5742162466049194
  },
  {
    "content": "Management command that was attached to the namespace reports a Namespace Attribute\nChanged asynchronous event to the host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 123,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3929",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2553510367870331
  },
  {
    "content": "**8.12 Namespace Write Protection**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3930",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6229081153869629
  },
  {
    "content": "Namespace Write Protection is an optional configurable controller capability that enables the host to control\nthe write protection state of a namespace or to determine the write protection state of a namespace. Support\nfor this capability is reported in the Namespace Write Protection Capabilities (NWPC) field in the Identify\nController data structure (refer to Figure 275).\n\nFigure 429 defines the write protection states that may be supported for a namespace. All states persist\nacross power cycles and Controller Level Resets (refer to section 3.7.2) except Write Protect Until Power\nCycle state, which transitions to the No Write Protect state on the occurrence of a power cycle.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 684,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3931",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.682417094707489
  },
  {
    "content": "**Figure 429: Namespace Write Protection State Definitions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3932",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5795052647590637
  },
  {
    "content": "|State|Definition|Persistent Across|Col4|\n|---|---|---|---|\n|State|Definition|Power Cycles|Controller<br>Level Resets|\n|No Write Protect|The namespace is not write protected.|Yes|Yes|\n|Write Protect|The namespace is write protected.|Yes|Yes|\n|Write Protect Until<br>Power Cycle|The namespace is write protected until the<br>next power cycle.|No|Yes|\n|Permanent Write<br>Protect|The namespace is permanently write<br>protected.|Yes|Yes|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 435,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3933",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6676043272018433
  },
  {
    "content": "Figure 430 defines the transition between write protection states. All state transitions are based on Set\nFeatures commands unless otherwise specified. The initial state of a namespace at the time of its creation\nis the No Write Protect state.\n\n**Figure 430: Namespace Write Protection State Machine Model**\n\nThe Write Protect Until Power Cycle and Permanent Write Protect states are subject to the Namespace\nWrite Protection Authentication Control mechanism, which determines whether the controller processes or\naborts Set Features commands which cause a transition into either of these two states (refer to section\n8.18).\n\nThe results of using Namespace Write Protection in combination with an external write protection system\n(e.g., TCG Storage Interface Interactions Specification) are outside the scope of this specification.\n\n**Namespace Write Protection – Theory of Operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 884,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3934",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6932651400566101
  },
  {
    "content": "If Namespace Write Protection is supported by the controller, then the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3935",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22355002164840698
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3936",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3439498245716095
  },
  {
    "content": "- Indicate the level of support for Namespace Write Protection capabilities in the Namespace Write\nProtection Capabilities (NWPC) field in the Identify Controller data structure; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 182,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3937",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.624396562576294
  },
  {
    "content": "- Support the Namespace Write Protection Config Feature (refer to section 5.27.1.28).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3938",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6433097124099731
  },
  {
    "content": "If the Write Protect Until Power Cycle or the Permanent Write Protect states are supported by the controller,\nthen the controller shall support the Namespace Write Protection Authentication Control field in the RPMB\nDevice Configuration Block data structure (refer to section 8.18).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 282,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3939",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5001614689826965
  },
  {
    "content": "The controller shall not set the Critical Warning field, bit 3 (refer to Figure 207) to ‘1’ if the read-only condition\non the media is a result of a change in the namespace write protection state as defined by the Namespace\nWrite Protection State Machine (refer to Figure 430), or due to any autonomous namespace write protection\nstate transitions (e.g., power cycle). Host software may check the current namespace write protection state\nof a namespace using the Get Features command with the Namespace Write Protection Config Feature\nIdentifier.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 546,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3940",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5417323112487793
  },
  {
    "content": "If any controller in the NVM subsystem supports Namespace Write Protection, then the write protection\nstate of a namespace shall be enforced by any controller to which that namespace is attached.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 195,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3941",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.588749349117279
  },
  {
    "content": "**8.12.1.1 Namespace Write Protection – Command Interactions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3942",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5510820150375366
  },
  {
    "content": "Unless otherwise noted, the commands listed in Figure 431 are processed normally when specifying an\nNSID for a namespace that is write protected.\n\n**Figure 431: Commands Allowed when Specifying a Write Protected NSID**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 218,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3943",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31868839263916016
  },
  {
    "content": "|Admin Command Set|NVM Command Set|\n|---|---|\n|Device Self–test|Compare|\n|1<br>Directive Send|1<br>Dataset Management|\n|3<br>Directive Receive|Read|\n|Get Features|Reservation Register|\n|Get Log Page|Reservation Report|\n|Identify|Reservation Acquire|\n|Namespace Attachment|Reservation Release|\n|1<br>Security Receive|1<br>Vendor Specific|\n|1<br>Security Send|2<br>Flush|\n|1<br>Set Features|Verify|\n|1<br>Vendor Specific||\n|Notes:<br>1. The controller shall fail commands if the specified action attempts to modify the non-<br>volatile storage medium of the specified namespace.<br>2. A Flush command shall complete successfully with no effect. All volatile write cache<br>data and metadata associated with the specified namespace is written to non-volatile<br>storage medium as part of transitioning to the write protected state (refer to section<br>5.27.1.28).<br>3. A Directive Receive command which attempts to allocate streams resources shall<br>be aborted with a status code of Namespace is Write Protected.|Notes:<br>1. The controller shall fail commands if the specified action attempts to modify the non-<br>volatile storage medium of the specified namespace.<br>2. A Flush command shall complete successfully with no effect. All volatile write cache<br>data and metadata associated with the specified namespace is written to non-volatile<br>storage medium as part of transitioning to the write protected state (refer to section<br>5.27.1.28).<br>3. A Directive Receive command which attempts to allocate streams resources shall<br>be aborted with a status code of Namespace is Write Protected.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1602,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3944",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3818366527557373
  },
  {
    "content": "Commands not listed in Figure 431, and which meet the following conditions, shall be aborted with a status\ncode of Namespace Is Write Protected (refer to Figure 94):",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3945",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48222556710243225
  },
  {
    "content": "a) Commands that specify an NSID for a namespace that is write protected;\nb) Commands that specify an NSID for a namespace that is not write protected and the execution of\n\nwhich would modify another namespace that is write protected (e.g., a Format NVM command);\nand\nc) Commands that do not specify an NSID, and the execution of which would modify a namespace",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 360,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3946",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46102213859558105
  },
  {
    "content": "that is write protected (e.g., Sanitize command).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3947",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14505517482757568
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3948",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4092465341091156
  },
  {
    "content": "**8.13 NVMe over Fabrics Secure Channel and In-band Authentication**\n\nNVMe over Fabrics supports both fabric secure channel (that includes authentication) and NVMe in-band\nauthentication. Fabric authentication is part of establishing a fabric secure channel via an NVMe Transport\nspecific protocol that provides authentication, encryption, and integrity checking (e.g., IPsec; refer to RFC\n4301 or TLS; refer to RFC 8446). NVMe in-band authentication is performed immediately after a Connect\ncommand (refer to section 6.3) succeeds using the Authentication Send and Authentication Receive\ncommands (refer to section 6.1 and section 6.2) to tunnel authentication protocol commands between the\nhost and the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 716,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3949",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24160657823085785
  },
  {
    "content": "Enrollment of the host and controller in an authentication mechanism, including provisioning of\nauthentication credentials to the host and controller, is outside the scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 194,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3950",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25555652379989624
  },
  {
    "content": "If both fabric secure channel and NVMe in-band authentication are used, the identities for these two\ninstances of authentication may differ for the same NVMe Transport connection. For example, if an iWARP\nNVMe Transport is used with IPsec as the fabric secure channel technology, the IPsec identities for\nauthentication are associated with the IP network (e.g., DNS host name or IP address), whereas NVMe inband authentication uses NVMe identities (i.e., Host NQNs). The NVMe Transport binding specification\nmay provide further guidance and requirements on the relationship between these two identities, but\ndetermination of which NVMe Transport identities are authorized to be used with which NVMe identities is\npart of the security policy for the deployed NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 772,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3951",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45683199167251587
  },
  {
    "content": "**Fabric Secure Channel**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3952",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5299931168556213
  },
  {
    "content": "The Transport Requirements field in the Fabrics Discovery Log Page Entry (refer to Figure 264) indicates\nwhether a fabric secure channel shall be used for an NVMe Transport connection to an NVM subsystem.\nThe secure channel mechanism is specific to the type of fabric.\n\nIf establishment of a secure channel fails or a secure channel is not established when required by the\ncontroller, the resulting errors are fabric-specific and may not be reported to the NVMe layer on the host.\nSuch errors may result in the controller being inaccessible to the host via the NVMe Transport connection\non which the failure to establish a fabric secure channel occurred.\n\nAn NVM subsystem that requires use of a fabric secure channel (i.e., as indicated by the TREQ field in the\nassociated Discovery Log Page Entry) shall not allow capsules to be transferred until a secure channel has\nbeen established for the NVMe Transport connection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 921,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3953",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25906285643577576
  },
  {
    "content": "All Discovery Log Page Entries for an NVM subsystem should report the same value of TREQ to each host.\nDiscovery Log Page Entries for an NVM subsystem may report different values of TREQ to different hosts.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 206,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3954",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.009077727794647217
  },
  {
    "content": "Figure 432 shows an example of secure channel establishment using TLS.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 70,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3955",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1282671093940735
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3956",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19365845620632172
  },
  {
    "content": "**Figure 432: Example of TLS secure channel establishment**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3957",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5259778499603271
  },
  {
    "content": "1.A TCP/TLS session negotiation is performed and a",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3958",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38991621136665344
  },
  {
    "content": "secure channel is established",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3959",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**2 Theory of Operation **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.350321501493454
  },
  {
    "content": "2.The Connect exchange is performed to set up",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3960",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11112596839666367
  },
  {
    "content": "NVMe queue and associate host to controller",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3961",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28284886479377747
  },
  {
    "content": "3.Secure channel and queue are set up, ready for",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3962",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24813632667064667
  },
  {
    "content": "subsequent operations",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3963",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.00478723319247365
  },
  {
    "content": "**NVMe In-band Authentication**\n\nThe Authentication and Security Requirements (AUTHREQ) field in the Connect response capsule (refer\nto Figure 382) indicates whether NVMe in-band authentication is required.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 206,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3964",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39559489488601685
  },
  {
    "content": "If one or more of the bits in the AUTHREQ field are set to ‘1’, then the controller requires that the host\nauthenticate on that queue in order to proceed with Fabrics, Admin, and I/O commands. Authentication\nsuccess is defined by the specific security protocol that is used for authentication. If any command other\nthan Connect, Authentication Send, or Authentication Receive is received prior to authentication success,\nthen the controller shall abort the command with Authentication Required status.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 501,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3965",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.695330023765564
  },
  {
    "content": "If all bits in the AUTHREQ field are cleared to ‘0’, then the controller does not require the host to\nauthenticate, and the NVM subsystem shall not abort any command with a status code value of\nAuthentication Required.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 218,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3966",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5086652040481567
  },
  {
    "content": "If NVMe in-band authentication succeeds, then any supported commands for the associated queue type\nmay be processed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 116,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3967",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5399144291877747
  },
  {
    "content": "The host may initiate a subsequent authentication transaction at any time for reauthentication purposes.\nInitiating reauthentication shall not invalidate a prior authentication. If the reauthentication transaction\nconcludes with the controller sending an AUTH_Failure1 message (refer to section 8.13.4.2), then the\ncontroller shall terminate all commands with a status code of Operation Denied and disconnect the NVMe\nover Fabrics connection. If the reauthentication transaction concludes with the host sending an\nAUTH_Failure2 message, then the host shall disconnect the NVMe over Fabrics connection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 601,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3968",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5876181125640869
  },
  {
    "content": "The state of an in-progress authentication transaction is soft-state. If the subsequent command in an\nauthentication transaction is not received by the controller within a timeout equal to:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 189,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3969",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3795589804649353
  },
  {
    "content": "- the Keep Alive Timeout value (refer to Figure 380), if the Keep Alive Timer is enabled; or\n\n- the default Keep Alive Timeout value (i.e., two minutes), if the Keep Alive Timer is disabled;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 190,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3970",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36099889874458313
  },
  {
    "content": "then the authentication transaction has timed out and the controller should discard the authentication\ntransaction state (including the T_ID value, refer to section 8.13.4.1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 175,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3971",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6232357025146484
  },
  {
    "content": "For an initial authentication, an authentication transaction timeout should be treated as an authentication\nfailure with termination of the transport connection. For reauthentication, an authentication transaction\ntimeout should not be treated as an authentication failure. Authentication commands used to continue that\ntransaction after an authentication transaction timeout should be aborted with a status code of Command\nSequence Error.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 439,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3972",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07357810437679291
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3973",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36227208375930786
  },
  {
    "content": "Figure 433 shows an example of authentication transaction for NVMe/TCP.\n\n**Figure 433: Example of authentication transaction for NVMe/TCP**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 139,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3974",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.451620876789093
  },
  {
    "content": "1.A TCP session is established",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3975",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5026625394821167
  },
  {
    "content": "2.The Connect exchange is performed to set up",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3976",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11112596839666367
  },
  {
    "content": "NVMe queue and associate host to controller",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3977",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16696768999099731
  },
  {
    "content": "3.The host performs an authentication transaction",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3978",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30165472626686096
  },
  {
    "content": "with the controller to authenticate the end-points",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3979",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.010760309174656868
  },
  {
    "content": "4. Queue is ready for subsequent operations",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3980",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.014363349415361881
  },
  {
    "content": "**8.13.2.1 NVMe In-band Authentication Protocol-Specific Requirements**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 71,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3981",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39188331365585327
  },
  {
    "content": "Authentication requirements for security commands are based on the security protocol indicated by the\nSECP field in the command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3982",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5934349894523621
  },
  {
    "content": "The authentication protocols defined by this specification use the security protocol identifier E9h (assigned\nto NVMe by SPC-5, a SCSI standard). The messages of the defined authentication protocols are selfidentifying, therefore the SPSP0 field and the SPSP1 field of the Authentication Send and Authentication\nReceive commands shall be set to 01h. Authentication messages are mapped to NVMe over Fabrics\ncommand and response pairs. The mapping of authentication messages to the Authentication Send\ncommand is shown in Figure 434.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 531,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3983",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.593540370464325
  },
  {
    "content": "**Figure 434: Mapping of authentication messages to the Authentication Send command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3984",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23476754128932953
  },
  {
    "content": "|1<br>Field|Value|\n|---|---|\n|SPSP0|01h|\n|SPSP1|01h|\n|SECP|E9h|\n|TL|Specifies the amount of data to transfer in bytes|\n|Notes:<br>1. Refer to section 6.2.|Notes:<br>1. Refer to section 6.2.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 190,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3985",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2514592409133911
  },
  {
    "content": "The mapping of authentication messages to the Authentication Receive command is shown in Figure 435.\nSecurity processing requirements associated with the Authentication Receive command (e.g., delays in\nthird-party authentication verification) may result in delays in controller completion of an Authentication\nReceive command. The host should consider these possible delays associated with the Authentication\nReceive command.\n\n**Figure 435: Mapping of authentication messages to the Authentication Receive command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 515,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3986",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16010503470897675
  },
  {
    "content": "|1<br>Field|Value|\n|---|---|\n|SPSP0|01h|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3987",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06501931697130203
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3988",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1511429101228714
  },
  {
    "content": "|1<br>Field|Value|\n|---|---|\n|SPSP1|01h|\n|SECP|E9h|\n|AL|Specifies the amount of data to transfer in bytes2|\n|Notes:<br>1. Refer to section 6.1.<br>2. The size of the largest authentication message that could be received.|Notes:<br>1. Refer to section 6.1.<br>2. The size of the largest authentication message that could be received.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 333,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3989",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26637139916419983
  },
  {
    "content": "**NVMe In-band Authentication Followed by Secure Channel Establishment**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3990",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36823540925979614
  },
  {
    "content": "It is possible to leverage an authentication transaction to generate shared key material to use as pre-shared\nkey (PSK) to establish a secure channel (e.g., with IPsec or TLS). In this case, the PSK generated to set\nup a secure channel on the Admin Queue may be reused to set up additional secure channels on the I/O\nqueues. Figure 436 shows an example of this possibility for TLS.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 381,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3991",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.418709933757782
  },
  {
    "content": "**Figure 436: Example of TLS secure channel concatenated to an authentication transaction**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 91,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3992",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3690866231918335
  },
  {
    "content": "1.A TCP session is established",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3993",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5026625394821167
  },
  {
    "content": "2.The Connect exchange is performed to set up",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3994",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11112596839666367
  },
  {
    "content": "NVMe queue and associate host to controller",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3995",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16696768999099731
  },
  {
    "content": "3.The host performs an authentication transaction",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3996",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3542529046535492
  },
  {
    "content": "with the controller, transaction that generates a\npre-shared key PSK between host and controller",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3997",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4948146343231201
  },
  {
    "content": "4. The pre-shared key PSK is used to perform a TLS",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3998",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2634061872959137
  },
  {
    "content": "negotiation and to establish a secure channel",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_3999",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6085426807403564
  },
  {
    "content": "5. Secure channel and queue are set up, ready for",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4000",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2083940953016281
  },
  {
    "content": "subsequent operations",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4001",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09175386279821396
  },
  {
    "content": "**Common Authentication Messages**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4002",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5673894286155701
  },
  {
    "content": "**8.13.4.1 AUTH_Negotiate Message**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4003",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5992853045463562
  },
  {
    "content": "The AUTH_Negotiate message is sent from the host to the controller and is used to indicate the\nauthentication protocols the host is able to use in this authentication transaction and which secure channel\nprotocol, if any, to concatenate to this authentication transaction. The AUTH_Negotiate message format is\nshown in Figure 437.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 330,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4004",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6615219712257385
  },
  {
    "content": "**Figure 437: AUTH_Negotiate message format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4005",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5261522531509399
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|0|AUTH_TYPE: 00h (i.e., common messages)|\n|1|AUTH_ID: 00h (i.e., AUTH_Negotiate)|\n|3:2|Reserved|\n|5:4|T_ID: 16-bit transaction identifier|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4006",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15252451598644257
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4007",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15782390534877777
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|6|SC_C: Secure channel concatenation|\n|7|NAPD: Number of authentication protocol descriptors|\n|71:8|Authentication protocol descriptor #1|\n|135:72|Authentication protocol descriptor #2|\n|…||\n|NAPD*64+7:(NAPD-1)*64+8|Authentication protocol descriptor #NAPD|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 288,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4008",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6261076927185059
  },
  {
    "content": "The SC_C field determines if a secure channel concatenation to the authentication transaction is requested\nand with which secure channel protocol, as shown in Figure 438.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 170,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4009",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4778176248073578
  },
  {
    "content": "**Figure 438: Secure channel protocol identifiers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4010",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.534407377243042
  },
  {
    "content": "|Value|Description|Transport<br>Applicability|\n|---|---|---|\n|00h|No secure channel concatenation|n/a|\n|01h|Secure channel concatenation with TLS (refer to section 8.13.5.9)|TCP|\n|All other<br>values|Reserved||",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4011",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4122328758239746
  },
  {
    "content": "The AUTH_Negotiate message is structured as a list of 64-byte authentication protocol descriptors to\nenable extensibility to define additional authentication protocols. Currently only one authentication protocol\nis defined (i.e., DH-HMAC-CHAP), therefore the AUTH_Negotiate message carries only one authentication\nprotocol descriptor (i.e., NAPD=1). Implementations should support more than one descriptor to enable\nprotocol extensibility. The first byte of an authentication protocol descriptor identifies the specific\nauthentication protocol, as shown in Figure 439.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 568,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4012",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5800865888595581
  },
  {
    "content": "**Figure 439: Authentication protocol identifiers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4013",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4225716292858124
  },
  {
    "content": "|Value|Description|\n|---|---|\n|01h|DH-HMAC-CHAP (refer to section 8.13.5)|\n|All other values|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4014",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21352125704288483
  },
  {
    "content": "Upon receiving an AUTH_Negotiate message, if the SC_C value indicated by the host does not satisfy the\nsecurity requirements of the controller (e.g., the host did not request secure channel concatenation, but the\ncontroller’s security policy requires secure channel concatenation), then the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 308,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4015",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.641690194606781
  },
  {
    "content": "- reply to the AUTH_Negotiate message with an AUTH_Failure1 message having reason code\n‘Authentication failure’ and reason code explanation ‘Secure channel concatenation mismatch’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 184,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4016",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5005009770393372
  },
  {
    "content": "- disconnect the NVMe over Fabrics connection upon transmitting the AUTH_Failure1 message.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4017",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.331996887922287
  },
  {
    "content": "Upon receiving an AUTH_Negotiate message, if the protocol descriptors proposed by the host do not satisfy\nthe security requirements of the controller, then the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 177,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4018",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6292359232902527
  },
  {
    "content": "- reply to the AUTH_Negotiate message with an AUTH_Failure1 message having reason code\n‘Authentication failure’ and reason code explanation ‘Authentication protocol not usable’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 181,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4019",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5074502229690552
  },
  {
    "content": "- disconnect the NVMe over Fabrics connection upon transmitting the AUTH_Failure1 message.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4020",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47355780005455017
  },
  {
    "content": "**8.13.4.2 AUTH_Failure Messages**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4021",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5010973215103149
  },
  {
    "content": "The AUTH_Failure1 message is sent from the controller to the host, the AUTH_Failure2 message is sent\nfrom the host to the controller. The format of the AUTH_Failure1 message and of the AUTH_Failure2\nmessage is shown in Figure 440.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 230,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4022",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10343769192695618
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4023",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08964874595403671
  },
  {
    "content": "**Figure 440: AUTH_Failure1 and AUTH_Failure2 message format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4024",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47798341512680054
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|0|AUTH_TYPE: 00h (i.e., common messages)|\n|1|AUTH_ID:<br>F0h (i.e., AUTH_Failure2)<br>F1h (i.e., AUTH_Failure1)|\n|3:2|Reserved|\n|5:4|T_ID: 16-bit transaction identifier|\n|6|Reason code|\n|7|Reason code explanation|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 244,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4025",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4993570148944855
  },
  {
    "content": "The AUTH_Failure reason codes are listed in Figure 441.\n\n**Figure 441: AUTH_Failure reason codes**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4026",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6129918694496155
  },
  {
    "content": "|Value|Description|\n|---|---|\n|01h|Authentication failure: The authentication transaction failed|\n|All other values|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 125,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4027",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5033624172210693
  },
  {
    "content": "The AUTH_Failure reason code explanations are listed in Figure 442.\n\n**Figure 442: AUTH_Failure reason code explanations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4028",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4499237835407257
  },
  {
    "content": "|Value|Description|\n|---|---|\n|01h|Authentication failed: Authentication of the involved host or NVM subsystem failed.|\n|02h|Authentication protocol not usable: The protocol descriptors proposed by the host do<br>not satisfy the security requirements of the controller (refer to section 8.13.4.1).|\n|03h|Secure channel concatenation mismatch: The SC_C value indicated by the host does<br>not satisfy the security requirements of the controller (refer to section 8.13.4.1).|\n|04h|Hash function not usable: The HashIDList proposed by the host does not satisfy the<br>security requirements of the controller (refer to section 8.13.5.2).|\n|05h|DH group not usable: The DHgIDList proposed by the host does not satisfy the security<br>requirements of the controller (refer to section 8.13.5.2).|\n|06h|Incorrect payload: The payload of the received message is not correct.|\n|07h|Incorrect protocol message: The received message is not the expected next message<br>in the authentication protocol sequence.|\n|All other values|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1026,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4029",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46498337388038635
  },
  {
    "content": "**8.13.4.3 Mapping of Common Authentication Messages to Authentication Commands**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 81,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4030",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5422139763832092
  },
  {
    "content": "The AUTH_Negotiate message and the AUTH_Failure2 message are sent from the host to the controller,\ntherefore they are mapped to the Authentication Send command. The AUTH_Failure1 message is sent\nfrom the controller to the host, therefore it is mapped to the Authentication Receive command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 289,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4031",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23519422113895416
  },
  {
    "content": "**DH-HMAC-CHAP Protocol**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4032",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5882890820503235
  },
  {
    "content": "**8.13.5.1 Protocol Operations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4033",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27706554532051086
  },
  {
    "content": "DH-HMAC-CHAP is a key based Authentication and key management protocol that uses the Challenge\nHandshake Authentication Protocol (CHAP, refer to RFC 1994) enhanced to use the Hashed Message\nAuthentication Code (HMAC) mechanism (refer to RFC 2104) with stronger hash functions and augmented\nwith an optional Diffie-Hellman (DH) exchange (refer to RFC 2631, clause 2.2.1). DH-HMAC-CHAP\nprovides bidirectional or unidirectional Authentication between a host and a controller.\n\nThe Diffie-Hellman part of the protocol is optional. When the Diffie-Hellman part of the protocol is not used,\nDH-HMAC-CHAP is referred to as HMAC-CHAP. If insufficiently random keys are used (refer to section\n8.13.5.7), HMAC-CHAP potentially allows a passive eavesdropper to discover the key through an off-line\ndictionary attack, so its usage should be minimized. DH-HMAC-CHAP provides strong protection from",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 884,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4034",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.041432660073041916
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4035",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.015620269812643528
  },
  {
    "content": "passive eavesdroppers. However, an active attacker could reduce the operation of this protocol so that only\nHMAC-CHAP is used, and as a result gain sufficient information to mount an off-line dictionary attack on\nthe HMAC-CHAP key.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 231,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4036",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5183106064796448
  },
  {
    "content": "An implementation that supports DH-HMAC-CHAP authentication shall support DH-HMAC-CHAP with a\nNULL DH exchange. All implementations of DH-HMAC-CHAP shall be configurable to require a DH\nexchange (i.e., to not use HMAC-CHAP).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 224,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4037",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6499736905097961
  },
  {
    "content": "In order to authenticate with the DH-HMAC-CHAP protocol, each host and NVM subsystem shall be\nprovided with a DH-HMAC-CHAP key that is associated with the entity’s NQN. Two entities may\nimpersonate one another if they have the same key, therefore when the assigned keys are not different for\neach entity there is a security vulnerability (refer to section 8.13.5.7).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 366,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4038",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5232180953025818
  },
  {
    "content": "To authenticate another entity, an entity is required to either:\n\na) know the key associated with the entity to be authenticated; or\nb) rely on a third party that knows the key to verify the authentication.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 206,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4039",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.282657265663147
  },
  {
    "content": "An example of a DH-HMAC-CHAP authentication transaction is shown in Figure 443, with the notation\nshown in Figure 444. The DH-HMAC-CHAP_Success2 message that is shown as a dashed line is used\nonly for bidirectional authentication.\n\n**Figure 443: Example of DH-HMAC-CHAP authentication transaction**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 298,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4040",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14488263428211212
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4041",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2608566880226135
  },
  {
    "content": "**Figure 444: Mathematical notations for DH-HMAC-CHAP**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4042",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5396773815155029
  },
  {
    "content": "|Symbols|Description|\n|---|---|\n|NQN, NQN<br>c h|NQN of the NVM subsystem that contains the controller and NQN of the host|\n|K, K<br>c h|DH-HMAC-CHAP key of the NVM subsystem that contains the controller and<br>DH-HMAC-CHAP key of the host|\n|p, g|Modulus (p) and generator (g) of the chosen DH group (refer to Figure 447)|\n|x, y|Random numbers used as exponents in a DH exchange|\n|C, C<br>1 2|Random challenge values|\n|C, C<br>a1 a2|Augmented challenge values|\n|S, S<br>1 2|32-bit sequence numbers|\n|R, R<br>1 2|Reply values|\n|T_ID|Authentication transaction identifier|\n|SC_C|Secure channel concatenation indication|\n|H( )|One-way hash function (refer to Figure 446)|\n|HMAC(K, Str)|HMAC function (refer to RFC 2104) with key K on string Str using hash function H( )|\n||||Concatenation operation|\n|K<br>S|Session key|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 817,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4043",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42563870549201965
  },
  {
    "content": "When used with a non-NULL DH exchange, the DH-HMAC-CHAP protocol is able to generate a session\nkey K S to be used to establish a TLS session between host and controller (refer to section 8.13.5.9).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 197,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4044",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5883276462554932
  },
  {
    "content": "For an NVM subsystem, the controller is the entity running the protocol, using the identity and credentials\nof the NVM subsystem. The DH-HMAC-CHAP protocol proceeds in the following order:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 188,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4045",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33896690607070923
  },
  {
    "content": "1) The authentication transaction shall begin with the host sending the common AUTH_Negotiate",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4046",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6163177490234375
  },
  {
    "content": "message to negotiate the authentication protocol to use and its associated parameters (refer to\nsection 8.13.4.1). The AUTH_Negotiate message carries the transaction identifier (T_ID) for the\nentire authentication transaction and the list of authentication protocol descriptors for the\nauthentication protocols that may be used in this authentication transaction. For DH-HMAC-CHAP,\nthe authentication protocol descriptor includes the list of hash functions (HashIDList) and DiffieHellman group identifiers (DHgIDList) that may be used in this authentication protocol transaction.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 579,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4047",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6628848314285278
  },
  {
    "content": "2) If the parameters of the received DH-HMAC-CHAP protocol descriptor are compatible with the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 93,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4048",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5991091132164001
  },
  {
    "content": "controller’s policies, then the controller shall reply with a DH-HMAC-CHAP_Challenge message\n(refer to section 8.13.5.3) carrying the same transaction identifier value (T_ID) received in the\nAUTH_Negotiate message, the identifiers of the hash function (HashID) and the DH group (DHgID)\nselected for use among the ones proposed by the host in the AUTH_Negotiate message, a\nsequence number (S 1 ), a random challenge value (C 1 ), and the DH exponential (g [x] mod p). If the\ncontroller selects a NULL DH group identifier, then the DH portion of the DH-HMAC-CHAP protocol\nshall not be used, and the protocol reduces to a HMAC-CHAP transaction.\n\n3) If the received DH-HMAC-CHAP_Challenge message is valid, then the host shall send a DH\nHMAC-CHAP_Reply message (refer to section 8.13.5.4) carrying the same transaction identifier\nvalue (T_ID), the response R 1 to the challenge value C 1, and its own DH exponential (g [y] mod p).\nThe DH Value Length shall be cleared to 0h if the controller has sent a NULL DH group identifier\nin the DH-HMAC-CHAP_Challenge message. If bidirectional authentication is requested, then the\nDH-HMAC-CHAP_Reply message shall carry also a sequence number S 2 and a random challenge\nvalue C 2 that differs from the challenge value C 1 received in the DH-HMAC-CHAP_Challenge",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1297,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4049",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6061539649963379
  },
  {
    "content": "4) If the authentication verification by the controller succeeds, then the controller shall reply with a",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 104,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4050",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49338868260383606
  },
  {
    "content": "DH-HMAC-CHAP_Success1 message (refer to section 8.13.5.5) carrying the same transaction\nidentifier value (T_ID). If bidirectional authentication was requested, then the DH-HMACCHAP_Success1 message shall also carry the response R 2 to the challenge value C 2 . If the\nauthentication verification fails, then the controller shall send an AUTH_Failure1 message and\ndisconnect the NVMe over Fabrics connection upon transmitting it.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 428,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4051",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2586040794849396
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4052",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09792952239513397
  },
  {
    "content": "5) The authentication transaction ends here, unless bidirectional authentication has been requested.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4053",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45181572437286377
  },
  {
    "content": "In this case, as shown by the dashed arrow in Figure 443, if the authentication verification by the\nhost succeeds, then the host shall send a DH-HMAC-CHAP_Success2 message (refer to section\n8.13.5.6) carrying the same transaction identifier value (T_ID). If the authentication verification fails,\nthen the host shall send an AUTH_Failure2 message and disconnect the NVMe over Fabrics\nconnection upon transmitting it.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 416,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4054",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5050082802772522
  },
  {
    "content": "If the controller receives a message that is not the expected next message in the DH-HMAC-CHAP protocol\nsequence, then the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4055",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3025396764278412
  },
  {
    "content": "- reply with an AUTH_Failure1 message having reason code ‘Authentication failure’ and reason code\nexplanation ‘Incorrect protocol message’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 143,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4056",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4702624976634979
  },
  {
    "content": "- disconnect the NVMe over Fabrics connection upon transmitting the AUTH_Failure1 message.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4057",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2098686248064041
  },
  {
    "content": "If the host receives a message that is not the expected next message in the DH-HMAC-CHAP protocol\nsequence, then the host shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4058",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35595276951789856
  },
  {
    "content": "- reply with an AUTH_Failure2 message having reason code ‘Authentication failure’ and reason code\nexplanation ‘Incorrect protocol message’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 143,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4059",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48475131392478943
  },
  {
    "content": "- disconnect the NVMe over Fabrics connection upon transmitting the AUTH_Failure2 message.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4060",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29050418734550476
  },
  {
    "content": "The payload format of a message shall be validated before performing any other security computation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4061",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27477025985717773
  },
  {
    "content": "**8.13.5.2 DH-HMAC-CHAP Authentication Protocol Descriptor**\n\nThe authentication protocol descriptor for DH-HMAC-CHAP (refer to section 8.13.4.1) is shown in Figure\n445.\n\n**Figure 445: Authentication protocol descriptor for DH-HMAC-CHAP**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 238,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4062",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6568255424499512
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|0|AuthID: Authentication protocol identifier (01h for DH-HMAC-CHAP)|\n|1|Reserved|\n|2|HashIDList Length (HALEN): Number of hash function identifiers (1 to 30)|\n|3|DHgIDList Length (DHLEN): Number of Diffie-Hellman group identifiers (1 to 30)|\n|3+HALEN:4|HashIDList: Array of hash function identifiers (one byte per identifier)|\n|33:4+HALEN|Padding bytes cleared to 0h, if present|\n|33+DHLEN:34|DHgIDList: Array of Diffie-Hellman Group identifiers (one byte per identifier)|\n|63:34+DHLEN|Padding bytes cleared to 0h, if present|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 557,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4063",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6319115161895752
  },
  {
    "content": "The one-way hash functions used by DH-HMAC-CHAP are shown in Figure 446.\n\n**Figure 446: DH-HMAC-CHAP hash function identifiers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4064",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5255690217018127
  },
  {
    "content": "|Identifier|Hash Function|Hash Length (bytes)|1<br>Hash Block Size (bytes)|Reference|\n|---|---|---|---|---|\n|00h|Reserved|Reserved|Reserved|Reserved|\n|01h|SHA-256|32|64|RFC 6234|\n|02h|SHA-384|48|128|RFC 6234|\n|03h|SHA-512|64|128|RFC 6234|\n|04h-DFh|Reserved|Reserved|Reserved|Reserved|\n|E0h-FEh|Vendor specific|Vendor specific|Vendor specific|Vendor specific|\n|FFh|Reserved|Reserved|Reserved|Reserved|\n|Notes:<br>1. The hash block size is used by the HMAC calculation|Notes:<br>1. The hash block size is used by the HMAC calculation|Notes:<br>1. The hash block size is used by the HMAC calculation|Notes:<br>1. The hash block size is used by the HMAC calculation|Notes:<br>1. The hash block size is used by the HMAC calculation|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 727,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4065",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4197816252708435
  },
  {
    "content": "The SHA-256 hash function shall be supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4066",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18687954545021057
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4067",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07232390344142914
  },
  {
    "content": "Upon receiving an AUTH_Negotiate message, if the HashIDList proposed by the host does not satisfy the\nsecurity requirements of the controller (e.g., the host proposed SHA-256, but the controller’s security policy\nrequires a SHA-384 hash), then the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4068",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5608518719673157
  },
  {
    "content": "- reply to the AUTH_Negotiate message with an AUTH_Failure1 message having reason code\n‘Authentication failure’ and reason code explanation ‘Hash function not usable’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 171,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4069",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46583354473114014
  },
  {
    "content": "- disconnect the NVMe over Fabrics connection upon transmitting the AUTH_Failure1 message.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4070",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.01225546095520258
  },
  {
    "content": "The Diffie-Hellman (DH) groups used by DH-HMAC-CHAP are shown in Figure 447.\n\n**Figure 447: DH-HMAC-CHAP Diffie-Hellman group identifiers**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 139,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4071",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44722437858581543
  },
  {
    "content": "|Identifier|DH group size|Generator (g)|Modulus (p) and Reference|\n|---|---|---|---|\n|00h|NULL|n/a|n/a|\n|01h|2048-bit|2|refer to RFC 7919|\n|02h|3072-bit|2|refer to RFC 7919|\n|03h|4096-bit|2|refer to RFC 7919|\n|04h|6144-bit|2|refer to RFC 7919|\n|05h|8192-bit|2|refer to RFC 7919|\n|06h-DFh|Reserved|Reserved|Reserved|\n|E0h-FEh|Vendor specific|Vendor specific|Vendor specific|\n|FFh|Reserved|Reserved|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 406,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4072",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4241240620613098
  },
  {
    "content": "The 00h identifier indicates that no Diffie-Hellman exchange is performed, which reduces the DH-HMACCHAP protocol to the HMAC-CHAP protocol.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4073",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40129122138023376
  },
  {
    "content": "The 2048-bit DH group and the 3072-bit DH group shall be supported. A mechanism shall be provided to\ndisable (i.e., prohibit) use of the 2048-bit DH group.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4074",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45613470673561096
  },
  {
    "content": "Upon receiving an AUTH_Negotiate message, if the DHgIDList proposed by the host does not satisfy the\nsecurity requirements of the controller (e.g., the host proposed only the NULL DH group, but the controller’s\nsecurity policy requires a DH group whose size is 3072-bit or larger), then the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 308,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4075",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6594215035438538
  },
  {
    "content": "- reply to the AUTH_Negotiate message with an AUTH_Failure1 message having reason code\n‘Authentication failure’ and reason code explanation ‘DH group not usable’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 166,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4076",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43697378039360046
  },
  {
    "content": "- disconnect the NVMe over Fabrics connection upon transmitting the AUTH_Failure1 message.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4077",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2364530861377716
  },
  {
    "content": "**8.13.5.3 DH-HMAC-CHAP_Challenge Message**\n\nThe DH-HMAC-CHAP_Challenge message is sent for the controller to the host. The format of the DHHMAC-CHAP_Challenge message is shown in Figure 448.\n\n**Figure 448: DH-HMAC-CHAP_Challenge message format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4078",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5791977643966675
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|0|AUTH_TYPE: 01h (i.e., DH-HMAC-CHAP)|\n|1|AUTH_ID: 01h (i.e., DH-HMAC-CHAP_Challenge)|\n|3:2|Reserved|\n|5:4|T_ID: 16-bit transaction identifier|\n|6|Hash Length (HL): Length in bytes of the selected hash function|\n|7|Reserved|\n|8|HashID: Identifier of selected hash function|\n|9|DHgID: Identifier of selected Diffie-Hellman group|\n|11:10|DH Value Length (DHVLEN): Length in bytes of DH value. If no DH value is<br>included in the message, then this field is cleared to 0h|\n|15:12|Sequence Number (SEQNUM): Sequence number S<br>1|\n|15+HL:16|Challenge Value (CVAL): Challenge C<br>1|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 610,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4079",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10115889459848404
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4080",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2075512856245041
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|15+HL+DHVLEN:16+HL|DH Value (DHV): DH exponential gx mod p. This field is not present (i.e., the<br>CVAL field is the last field in the message) if DHVLEN is cleared to 0h|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 203,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4081",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3543429374694824
  },
  {
    "content": "**Hash Length (HL):** Shall be set to the length in bytes of the selected hash function, as specified in Figure\n446.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 116,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4082",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4952491223812103
  },
  {
    "content": "**HashID:** Shall be set to the hash function identifier (refer to Figure 446) selected for this authentication\ntransaction among those proposed in the DH-HMAC-CHAP protocol descriptor in the AUTH_Negotiate\nmessage. The controller shall select a hash function in accord with its applicable policy.\n\n**DHgID:** Shall be set to the DH group identifier (refer to Figure 447) selected for this authentication\ntransaction among those proposed in the DH-HMAC-CHAP protocol descriptor in the AUTH_Negotiate\nmessage. The controller shall select a DH group identifier in accord with its applicable policy. If this field is\ncleared to 0h, the DH portion of the DH-HMAC-CHAP protocol shall not be performed in this authentication\ntransaction.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 731,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4083",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4473390281200409
  },
  {
    "content": "**DH Value Length (DHVLEN):** Diffie-Hellman exponential length. This length shall be a multiple of 4. If the\nDH group identifier is cleared to 0h (i.e., NULL DH exchange), this field shall be cleared to 0h. Otherwise,\nit shall be set to the length in bytes of the DH Value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 274,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4084",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3111400604248047
  },
  {
    "content": "**Sequence Number (SEQNUM):** 32-bit sequence number S 1 . A random non-zero value shall be used as\nthe initial value. The sequence number is incremented modulo 2 [32] after each use, except that the value 0h\nis skipped (i.e., incrementing the value FFFFFFFFh results in the value 00000001h).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 292,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4085",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33935362100601196
  },
  {
    "content": "**Challenge Value (CVAL):** Shall be set to a random challenge value C 1 (refer to section 8.13.5.7). Each\nchallenge value should be unique and unpredictable, since repetition of a challenge value in conjunction\nwith the same key may reveal information about the key or the correct response to this challenge. The\nalgorithm for generating the challenge value is outside the scope of this specification. Randomness of the\nchallenge value is crucial to the security of the protocol (refer to section 8.13.5.7). The CVAL length is the\nsame as the length of the selected hash function (i.e., HL).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 592,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4086",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31285029649734497
  },
  {
    "content": "**DH Value (DHV):** Diffie-Hellman exponential. If the DH Value Length is cleared to 0h, this field is not\npresent. The DH value shall be set to the value of g [x] mod p, where x is a random number selected by the\ncontroller that shall be at least 256 bits long (refer to section 8.13.5.7) and p and g shall have the values\nindicated in Figure 447, based on the selected DH group identifier.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 391,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4087",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41167718172073364
  },
  {
    "content": "Upon receiving a DH-HMAC-CHAP_Challenge message, if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4088",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22703443467617035
  },
  {
    "content": "- the Hash Length (HL) does not match the value specified in Figure 446 for the selected hash\nfunction;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4089",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18129488825798035
  },
  {
    "content": "- the Sequence Number (SEQNUM) is cleared to 0h;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4090",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2956444025039673
  },
  {
    "content": "- DHgID is non-zero and the DH Value Length (DHVLEN) is cleared to 0h; or\n\n- DHgID is non-zero and the DH Value (DHV) is 0, 1, or p-1;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 134,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4091",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12965764105319977
  },
  {
    "content": "- reply with an AUTH_Failure2 having reason code ‘Authentication failure’ and reason code\nexplanation ‘Incorrect payload’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 126,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4092",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.01775701344013214
  },
  {
    "content": "- disconnect the NVMe over Fabrics connection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4093",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07272769510746002
  },
  {
    "content": "**8.13.5.4 DH-HMAC-CHAP_Reply Message**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4094",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6139068007469177
  },
  {
    "content": "The DH-HMAC-CHAP_Reply message is sent from the host to the controller. The host may request\nauthentication of the controller to enable bidirectional authentication, by including a DH-HMAC-CHAP\nchallenge value C 2 in this message. The challenge value C 2 shall be different from the challenge value C 1\nreceived in the DH-HMAC-CHAP_Challenge message.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 350,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4095",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.698225200176239
  },
  {
    "content": "The format of the DH-HMAC-CHAP_Reply message is shown in Figure 449.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4096",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24033468961715698
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4097",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18583153188228607
  },
  {
    "content": "**Figure 449: DH-HMAC-CHAP_Reply message format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4098",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2138688862323761
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00h|The Challenge Value is not valid|\n|01h|The Challenge Value is valid|\n|All other<br>values|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 133,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4099",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5595099329948425
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|0|AUTH_TYPE: 01h (i.e., DH-HMAC-CHAP)|\n|1|AUTH_ID: 02h (i.e., DH-HMAC-CHAP_Reply)|\n|3:2|Reserved|\n|5:4|T_ID: 16-bit transaction identifier|\n|6|Hash Length (HL): Length in bytes of the selected hash function|\n|7|Reserved|\n|8|Challenge Valid (CVALID):<br>Value Definition<br>00h The Challenge Value is not valid<br>01h The Challenge Value is valid<br>All other<br>Reserved<br>values|\n|9|Reserved|\n|11:10|DH Value Length (DHVLEN): Length in bytes of DH value. If no DH value<br>is included in the message, then this field is cleared to 0h|\n|15:12|Sequence Number (SEQNUM): Sequence number S<br>2|\n|15+HL:16|Response Value (RVAL): Response R<br>1|\n|15+2*HL:16+HL|Challenge Value (CVAL): Challenge C, if valid (i.e., if the CVALID field<br>2<br>is set to 01h), cleared to 0h otherwise|\n|15+2*HL+DHVLEN:16+2*HL|DH Value (DHV): DH exponential gy mod p. This field is not present (i.e.,<br>the CVAL field is the last field in the message) if DHVLEN is cleared to 0h|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 989,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4100",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48734384775161743
  },
  {
    "content": "**Hash Length (HL):** Shall be set to the length in bytes of the selected hash function, as specified in Figure\n446.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 116,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4101",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19316315650939941
  },
  {
    "content": "**Challenge Valid:** If the host does not require bidirectional authentication or no establishment of a secure\nchannel after unidirectional authentication is sought (refer to section 8.13), this field shall be cleared to 0h.\nOtherwise, this field shall be set to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 267,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4102",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2671283781528473
  },
  {
    "content": "**DH Value Length (DHVLEN):** Diffie-Hellman exponential length. This length shall be a multiple of 4. If the\nDH group identifier is cleared to 0h (i.e., NULL DH exchange), this field shall be cleared to 0h. Otherwise,\nit shall be set to the length in bytes of the DH Value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 274,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4103",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3039872944355011
  },
  {
    "content": "**Sequence Number (SEQNUM):** 32-bit sequence number S 2 . A random non-zero value shall be used as\nthe initial value. The sequence number is incremented modulo 2 [32] after each use, except that the value 0h\nis skipped (i.e., incrementing the value FFFFFFFFh results in the value 00000001h). The value 0h is used\nto indicate that bidirectional authentication is not performed, but a challenge value C 2 is carried in order to\ngenerate a pre-shared key (PSK) for subsequent establishment of a secure channel (refer to section 8.13)",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 531,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4104",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36921176314353943
  },
  {
    "content": "**Response Value (RVAL):** DH-HMAC-CHAP response value R 1 . The value of R 1 is computed using the\nhash function H( ) selected by the HashID parameter in the DH-HMAC-CHAP_Challenge message, and\nthe augmented challenge C a1 . If the NULL DH group has been selected, the augmented challenge C a1 is\nequal to the challenge C 1 received from the controller (i.e., C a1 = C 1 ). If a non-NULL DH group has been\nselected, the augmented challenge is computed applying the HMAC function using the hash function H( )\nselected by the HashID parameter in the DH-HMAC-CHAP_Challenge message with the hash of the\nephemeral DH key resulting from the combination of the random value y selected by the host with the DH\nexponential (i.e., g [x] mod p) received from the controller as HMAC key (refer to RFC 2104) to the challenge\nC 1 (i.e., C a1 = HMAC(H((g [x] mod p) [y] mod p), C 1 ) = HMAC(H(g [xy] mod p), C 1 )). The value of R 1 shall be\ncomputed applying the HMAC function using the hash function H( ) selected by the HashID parameter in\nthe DH-HMAC-CHAP_Challenge message with key K h as HMAC key to the concatenation of the\naugmented challenge C a1, the sequence number S 1, the transaction identifier T_ID, the secure channel\nconcatenation indication SC_C sent in the AUTH_Negotiate message, the eight ASCII characters\n”HostHost” to indicate the host is computing the reply, the host NQN not including the null terminator, a 00h",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1423,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4105",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1489303857088089
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4106",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4676477909088135
  },
  {
    "content": "byte, and the NVM subsystem NQN not including the null terminator (i.e., R 1 = HMAC(K h, C a1 || S 1 || T_ID\n|| SC_C || ”HostHost” || NQN h || 00h || NQN c )). Using C language notation:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 186,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4107",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6231890916824341
  },
  {
    "content": "C a1 = (DHgID == 00h) ? C 1 : HMAC(H((g [x] mod p) [y] mod p)), C 1 )\nR 1 = HMAC(K h, C a1 || S 1 || T_ID || SC_C || ”HostHost” || NQN h || 00h || NQN c )",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 154,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4108",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1423439383506775
  },
  {
    "content": "**Challenge Value (CVAL):** Shall be set to a random challenge value C 2 (refer to section 8.13.5.7). Each\nchallenge value should be unique and unpredictable, since repetition of a challenge value in conjunction\nwith the same key may reveal information about the key or the correct response to this challenge. The\nalgorithm for generating the challenge value is outside the scope of this specification. Randomness of the\nchallenge value is crucial to the security of the protocol (refer to section 8.13.5.7). The CVAL length is the\nsame as the length of the selected hash function (i.e., HL).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 592,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4109",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3096057176589966
  },
  {
    "content": "**DH Value (DHV):** Diffie-Hellman exponential. If the DH Value Length is cleared to 0h, this field is not\npresent. The DH Value shall be set to the value of g [y] mod p, where y is a random number selected by the\nhost that shall be at least 256 bits long (refer to section 8.13.5.7) and p and g shall have the values indicated\nin Figure 447, based on the selected DH group identifier.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 385,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4110",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4370236098766327
  },
  {
    "content": "Upon receiving a DH-HMAC-CHAP_Reply message, if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4111",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16283389925956726
  },
  {
    "content": "- the Hash Length (HL) does not match the value specified in Figure 446 for the selected hash\nfunction;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4112",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3123926818370819
  },
  {
    "content": "- DHgID is non-zero and the DH Value Length (DHVLEN) is cleared to 0h; or\n\n- DHgID is non-zero and the DH Value (DHV) is 0, 1, or p-1;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 134,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4113",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18013419210910797
  },
  {
    "content": "then the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4114",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.013902275823056698
  },
  {
    "content": "- reply with an AUTH_Failure1 message having reason code ‘Authentication failure’ and reason code\nexplanation ‘Incorrect payload’; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 134,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4115",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.015587243251502514
  },
  {
    "content": "- disconnect the NVMe over Fabrics connection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4116",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17444710433483124
  },
  {
    "content": "In addition, the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4117",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4162592589855194
  },
  {
    "content": "- check the challenge value C 2, if the Challenge Valid field is set to 01h, to verify it is different from\nthe challenge value C 1 the controller previously sent. If C 2 is equal to C 1, the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 209,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4118",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12085381895303726
  },
  {
    "content": "`o` reply with an AUTH_Failure1 message having reason code ‘Authentication failure’ and\nreason code explanation ‘Authentication failed’; and\n`o` disconnect the NVMe over Fabrics connection; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4119",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24522599577903748
  },
  {
    "content": "- verify the response value R 1 using the negotiated hash function. If verification of the response value\nR 1 does not succeed, the controller shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 149,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4120",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22669212520122528
  },
  {
    "content": "`o` reply with an AUTH_Failure1 message having reason code ‘Authentication failure’ and\nreason code explanation ‘Authentication failed’; and\n`o` disconnect the NVMe over Fabrics connection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 189,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4121",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30643340945243835
  },
  {
    "content": "If verification of the response value R 1 succeeds, the host has been authenticated and the controller\nshall continue with a DH-HMAC-CHAP_Success1 message.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4122",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6128341555595398
  },
  {
    "content": "**8.13.5.5 DH-HMAC-CHAP_Success1 Message**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4123",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6951473951339722
  },
  {
    "content": "The DH-HMAC-CHAP_Success1 message is sent from the controller to the host and indicates that the\ncontroller has successfully authenticated the host. The format of the DH-HMAC-CHAP_Success1 message\nis shown in Figure 450.\n\n**Figure 450: DH-HMAC-CHAP_Success1 message format**\n\n|Bytes|Description|\n|---|---|\n|0|AUTH_TYPE: 01h (i.e., DH-HMAC-CHAP)|\n|1|AUTH_ID: 03h (i.e., DH-HMAC-CHAP_Success1)|\n|3:2|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 407,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4124",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1312960833311081
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4125",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1702558398246765
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|5:4|T_ID: 16-bit transaction identifier|\n|6|Hash Length (HL): Length in bytes of the selected hash function|\n|7|Reserved|\n|8|Response Valid (RVALID):<br>Value Definition<br>00h The Response Value is not valid<br>01h The Response Value is valid<br>All other values Reserved|\n|15:9|Reserved|\n|15+HL:16|Response Value (RVAL): Response R, if valid (i.e., if the RVALID field is set to 01h), cleared<br>2<br>to 0h otherwise|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 450,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4126",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.521399736404419
  },
  {
    "content": "|Value|Definition|\n|---|---|\n|00h|The Response Value is not valid|\n|01h|The Response Value is valid|\n|All other values|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 128,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4127",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2262626588344574
  },
  {
    "content": "**Hash Length (HL):** Shall be set to the length in bytes of the selected hash function, as specified in Figure\n446.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 116,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4128",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15928024053573608
  },
  {
    "content": "**Response Valid:** If the host did not request authentication of the controller (i.e., bidirectional authentication)\nthis field shall be cleared to 0h to indicate that no response is conveyed (i.e., the Response Value field is\nnot valid). If the host did request authentication of the controller, this field shall be set to 01h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 329,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4129",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4226461946964264
  },
  {
    "content": "**Response Value (RVAL):** DH-HMAC-CHAP response value R 2 . The value of R 2 is computed using the\nhash function H( ) selected by the HashID parameter of the DH-HMAC-CHAP_Challenge message, and\nthe augmented challenge C a2 . If the NULL DH group has been selected, the augmented challenge C a2 is\nequal to the challenge C 2 received from the host (i.e., C a2 = C 2 ). If a non-NULL DH group has been selected,\nthe augmented challenge is computed applying the HMAC function using the hash function H( ) selected\nby the HashID parameter in the DH-HMAC-CHAP_Challenge message with the hash of the ephemeral DH\nkey resulting from the combination of the random value x selected by the controller with the DH exponential\n(i.e., g [y] mod p) received from the host as HMAC key (refer to RFC 2104) to the challenge C 2 (i.e., C a2 =\nHMAC(H((g [y] mod p) [x] mod p), C 2 ) = HMAC(H(g [xy] mod p)), C 2 ). The value of R 2 shall be computed applying\nthe HMAC function using the hash function H( ) selected by the HashID parameter in the DH-HMACCHAP_Challenge message with key K c as HMAC key to the concatenation of the augmented challenge\nC a2, the sequence number S 2, the transaction identifier T_ID, the secure channel concatenation indication\nSC_C received in the AUTH_Negotiate message, the ten ASCII characters ”Controller” to indicate the\ncontroller is computing the reply, the NVM subsystem NQN not including the null terminator, a 00h byte,\nand the host NQN not including the null terminator (i.e., R 2 = HMAC(K c, C a2 || S 2 || T_ID || SC_C ||\n”Controller” || NQN c || 00h || NQN h )). Using C language notation:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1615,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4130",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5224360823631287
  },
  {
    "content": "C a2 = (DHgID == 00h) ? C 2 : HMAC(H((g [y] mod p) [x] mod p)), C 2 )\nR 2 = HMAC(K c, C a2 || S 2 || T_ID || SC_C || ”Controller” || NQN c || 00h || NQN h )",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 156,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4131",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.397439569234848
  },
  {
    "content": "Upon receiving a DH-HMAC-CHAP_Success1 message:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4132",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2896372675895691
  },
  {
    "content": "- if the Hash Length (HL) does not match the value specified in Figure 446 for the selected hash\nfunction, the host shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4133",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20470811426639557
  },
  {
    "content": "`o` reply with an AUTH_Failure2 message having reason code ‘Authentication failure’ and\nreason code explanation ‘Incorrect payload’; and\n`o` disconnect the NVMe over Fabrics connection; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 189,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4134",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.336770236492157
  },
  {
    "content": "- if the Response Valid field is set to 01h, the host shall verify the response value R 2 using the\nnegotiated hash function and DH group. If verification of the response value R 2 does not succeed,\nthe host shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 214,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4135",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29038408398628235
  },
  {
    "content": "`o` reply with an AUTH_Failure2 message having reason code ‘Authentication failure’ and\nreason code explanation ‘Authentication failed’; and\n`o` disconnect the NVMe over Fabrics connection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 189,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4136",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32762810587882996
  },
  {
    "content": "If verification of the response value R 2 succeeds, the controller has been authenticated and the host\nshall continue with a DH-HMAC-CHAP_Success2 message.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 155,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4137",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1082608699798584
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4138",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14093811810016632
  },
  {
    "content": "**8.13.5.6 DH-HMAC-CHAP_Success2 Message**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4139",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6925073266029358
  },
  {
    "content": "The DH-HMAC-CHAP_Success2 message is sent from the host to the controller and indicates that the host\nhas successfully authenticated the controller. The format of the DH-HMAC-CHAP_Success2 message is\nshown in Figure 451.\n\n**Figure 451: DH-HMAC-CHAP_Success2 message format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 274,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4140",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6413848996162415
  },
  {
    "content": "|Bytes|Description|\n|---|---|\n|0|AUTH_TYPE: 01h (i.e., DH-HMAC-CHAP)|\n|1|AUTH_ID: 04h (i.e., DH-HMAC-CHAP_Success2)|\n|3:2|Reserved|\n|5:4|T_ID: 16-bit transaction identifier|\n|15:6|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 189,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4141",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49847811460494995
  },
  {
    "content": "**8.13.5.7 DH-HMAC-CHAP Security Requirements**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4142",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6151290535926819
  },
  {
    "content": "In order to authenticate with the DH-HMAC-CHAP protocol, each host or controller uses a DH-HMACCHAP key that is associated with the entity’s NQN. A DH-HMAC-CHAP key is unidirectional (i.e., used only\nfor one direction of an authentication transaction). A DH-HMAC-CHAP key should not be associated with\nmore than one NQN as this opens security vulnerabilities. All DH-HMAC-CHAP implementations should\ncheck for use of the same key with more than one NQN and should generate an administrative warning if\nthis situation occurs (e.g., as a result of configuring a DH-HMAC-CHAP key to verify authentication of\nanother entity).\n\nThe DH-HMAC-CHAP key is derived from an administratively configured secret (refer to section 8.13.5.8).\nEach host and NVM subsystem shall support:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 769,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4143",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5847449898719788
  },
  {
    "content": "- transforming the provided secret into a key applying the HMAC function using the hash function\nspecified in the secret representation (refer to section 8.13.5.8) with the secret as HMAC key to the\nconcatenation of its own NQN not including the null terminator and the seventeen ASCII characters\n“NVMe-over-Fabrics” (i.e., key = HMAC(secret, NQN || ”NVMe-over-Fabrics”)). This transformation\nensures the resulting key is uniquely associated with the entity identified by the NQN; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 484,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4144",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6402018070220947
  },
  {
    "content": "- using the provided secret as a key. This is intended for use with key management solutions able to\nensure that key is uniquely associated with the entity identified by the NQN.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 178,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4145",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48880162835121155
  },
  {
    "content": "NVM subsystems should support the ability to use a different NVM subsystem key with each host. Hosts\nshould support the ability to use a different host key with each NVM subsystem. NVM subsystems should\nsupport the ability to use a different NVM subsystem secret with each host. Hosts should support the ability\nto use a different host secret with each NVM subsystem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 367,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4146",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5754402875900269
  },
  {
    "content": "If an implementation of NVMe over Fabrics is capable of functioning as both a host and an NVM subsystem,\nthen that implementation shall use either:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 147,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4147",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6496202945709229
  },
  {
    "content": "- one NQN for the host functionality and a different NQN for the NVM subsystem functionality; or\n\n- one NQN for both host functionality and NVM subsystem functionality.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4148",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15722839534282684
  },
  {
    "content": "DH-HMAC-CHAP implementations may reuse a DH exponential (e.g., g [x] mod p or g [y] mod p). The primary\nrisk in allowing reuse of a DH exponential is replay of a prior authentication sequence based on the attacker\nreusing the other exponential. For DH-HMAC-CHAP, replay is prevented with extremely high probability by\nthe requirement that all challenges be randomly generated. See section 2.12 of RFC 7296 for guidance on\nDH exponential reuse.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 443,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4149",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6477847695350647
  },
  {
    "content": "The security of the DH-HMAC-CHAP protocol requires secrets, challenges, and DH exponents (i.e., x and\ny) to be generated from actual randomness. For a discussion of randomness and sources of randomness,\nrefer to RFC 4086.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 221,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4150",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5146640539169312
  },
  {
    "content": "Implementations shall use a cryptographic random number generator that should be seeded with at least\n256 bits of entropy to generate random numbers for this protocol. The secret provisioning mechanism for",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4151",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16968916356563568
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4152",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15080435574054718
  },
  {
    "content": "each host and controller is outside of scope of this specification. For instance, secrets could be provisioned\nvia an encrypted HTTPS-based connection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 151,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4153",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17462487518787384
  },
  {
    "content": "**8.13.5.8 Secret Representation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4154",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43315285444259644
  },
  {
    "content": "In order to facilitate provisioning, management, and interchange (e.g., copy & paste in an administrative\nconfiguration tool) of secrets, all NVMe over Fabrics entities shall support the following ASCII representation\nof secrets:\n```\n    DHHC-1:xx:<Base64 encoded string>:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 272,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4155",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45286157727241516
  },
  {
    "content": "- ”DHHC-1” indicates this is a version 1 representation of a secret for the DH-HMAC-CHAP protocol;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4156",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24110838770866394
  },
  {
    "content": "- ‘:’ is used both as a separator and a terminator;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4157",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3444729447364807
  },
  {
    "content": "- xx indicates the hash function to be used to transform the secret in key (refer to section 8.13.5.7),\nencoded as the ASCII representation of the hexadecimal value specified in Figure 446 (e.g., the\ntwo ASCII characters “01” indicate SHA-256). The two ASCII characters “00” indicate no transform\n(i.e., use the secret as a key); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 333,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4158",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5486635565757751
  },
  {
    "content": "- The Base64 (refer to RFC 4648) string encodes the secret (32, 48, or 64 bytes binary) followed by\nthe CRC-32 (refer to RFC 1952) of the secret (4 bytes binary).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 162,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4159",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6742770075798035
  },
  {
    "content": "As an example, the 32-byte secret:\n```\n89AEB31A 874EAF84 841B4673 6B0DFDF2 BA58D30A A2A545A3 E235A352 1E07594Ch",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4160",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41140177845954895
  },
  {
    "content": "```\nis represented as: “ `DHHC-1:00:ia6zGodOr4SEG0Zzaw398rpY0wqipUWj4jWjUh4HWUz6aQ2n:` ”\nwhen intended to be used as a key without transform.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4161",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16529101133346558
  },
  {
    "content": "When provided with a secret in this format, NVMe over Fabrics entities shall verify the validity of the\nprovided secret by computing the CRC-32 value of the secret and checking the computed value with the\nprovided value. If they do not match, then the secret shall not be used.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 277,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4162",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14565646648406982
  },
  {
    "content": "**8.13.5.9 Generated PSK for TLS**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4163",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3510759770870209
  },
  {
    "content": "When used with a non-NULL DH exchange, the DH-HMAC-CHAP protocol is able to generate a session\nkey K S used to generate a pre-shared key (PSK) to establish a secure channel session with the TLS protocol\nbetween host and controller. A TLS session is concatenated to an authentication transaction when the\nSC_C indication is set to 01h in the AUTH_Negotiate message. A TLS session should not be concatenated\nto an authentication transaction if the involved host and controller are administratively configured with a\nPSK for use with each other. In this case, host and controller should just establish a TLS session based on\nthe configured PSK.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 641,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4164",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.589942216873169
  },
  {
    "content": "The session key K S shall be computed from the ephemeral DH key (i.e., g [xy] mod p) generated during the\nDH-HMAC-CHAP transaction by applying the hash function H( ) selected by the HashID parameter in the\nDH-HMAC-CHAP_Challenge message (i.e., K S = H(g [xy] mod p)). The size of the session key K S is\ndetermined by the selected hash function, as shown in Figure 446. Specifically:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 382,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4165",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6417579650878906
  },
  {
    "content": "- The host computes K S as the hash of the ephemeral DH key resulting from the combination of the\nrandom value y selected by the host with the DH exponential (i.e., g [x] mod p) received from the\ncontroller (i.e., K S = H((g [x] mod p) [y] mod p) = H(g [xy] mod p)).\n\n- The controller computes K S as the hash of the ephemeral DH key resulting from the combination\nof the random value x selected by the controller with the DH exponential (i.e., g [y] mod p) received\nfrom the host (i.e., K S = H((g [y] mod p) [x] mod p) = H(g [xy] mod p)).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 540,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4166",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4018179774284363
  },
  {
    "content": "The generated PSK for TLS shall be computed applying the HMAC function using the hash function H( )\nselected by the HashID parameter in the DH-HMAC-CHAP_Challenge message with the session key K S\nas key to the concatenation of the two challenges C 1 and C 2 (i.e., generated PSK = HMAC(K S, C 1 || C 2 )).\nThe generated PSK used to set up a TLS secure channel on the Admin Queue may be reused to set up\nadditional TLS secure channels on the I/O queues (refer to the PSK Reuse section of the NVMe TCP\nTransport Specification). The lifetime of this generated PSK should be no more than ten minutes; this\nrequires authentication for I/O queues created after this time.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 665,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4167",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18442432582378387
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4168",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08155693858861923
  },
  {
    "content": "The host may request secure channel concatenation with the TLS protocol by setting the SC_C indication\nin the AUTH_Negotiate message to 01h while performing only unidirectional authentication. In this case the\nhost shall still send a challenge value C 2 to the controller and clear the sequence number S 2 to 0h to indicate\nthat controller authentication is not requested.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 372,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4169",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3289049565792084
  },
  {
    "content": "**8.13.5.10 Mapping of DH-HMAC-CHAP Messages to Authentication Commands**\n\nThe DH-HMAC-CHAP_Reply message and the DH-HMAC-CHAP_Success2 message are sent from the\nhost to the controller, therefore they are mapped to the Authentication Send command. The DH-HMACCHAP_Challenge message and the DH-HMAC-CHAP_Success1 message are sent from the controller to\nthe host, therefore they are mapped to the Authentication Receive command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 426,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4170",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.04855827987194061
  },
  {
    "content": "**8.14 Persistent Memory Region**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4171",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46234098076820374
  },
  {
    "content": "The Persistent Memory Region (PMR) is an optional region of general purpose PCI Express read/write\npersistent memory that may be used for a variety of purposes. The controller indicates support for the PMR\nby setting CAP.PMRS (refer to section 3.1.3.1) to ‘1’ and indicates whether the controller supports\ncommand data and metadata transfers to or from the PMR by setting support flags in the PMRCAP property.\nWhen command data and metadata transfers to or from PMR are supported, all data and metadata\nassociated with a particular command shall be either entirely located in the Persistent Memory Region or\noutside the Persistent Memory Region.\n\nThe PMR’s PCI Express address range is used for external memory read and write requests to the PMR.\nThe PCI Express address range and size of the PMR is defined by the PCI Base Address Register (BAR)\nindicated by PMRCAP.BIR. The PMR consumes the entire address region exposed by the BAR and\nsupports all the required features of the PCI Express programming model (i.e., it in no way restricts what is\notherwise permitted by PCI Express).\n\nThe controller uses the PMR’s controller address range to reference PMR with addresses supplied by the\nhost. The PCI Express address range and the controller address range of the PMR may differ, but both\nranges have the same size, and equivalent offsets within each range have a one-to-one correspondence.\nThe host configures the controller address range via the PMRMSCU and PMRMSCL properties.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1480,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4172",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7242252826690674
  },
  {
    "content": "The host enables the PMR’s controller memory space via the PMRMSCL.CMSE bit. When controller\nmemory space is enabled, if host supplies an address referencing the PMR’s controller address range, then\nthe controller directs memory read or write requests for this address to the PMR.\n\nWhen the PMR’s controller memory space is disabled, the controller does not consider any host-supplied\naddress to reference the PMR’s controller address range, and memory read and write requests are directed\nelsewhere (e.g., to memory other than the PMR).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 537,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4173",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5840935111045837
  },
  {
    "content": "The contents of data written to the PMR while the PMR is ready persists across power cycles, Controller\nLevel Resets, and disabling of the PMR. The mechanism used to make a write to the PMR persistent is\nimplementation specific. For example, in one implementation this may mean that a write to non-volatile\nmemory has completed while in another implementation this may mean that the write has been stored in a\nnon-volatile write buffer and is written to non-volatile memory at some later point.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 494,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4174",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6215638518333435
  },
  {
    "content": "A PMR implementation has a maximum sustained write throughput. The PMR implementation may also\nhave an optional write elasticity buffer used to buffer writes from PMR PCIe write requests. When the PMR\nsustained write throughput is less than the PCI Express link throughput, then such a write elasticity buffer\nallows PCIe write request burst throughput to exceed the PMR sustained write throughput without back\npressuring into the PCI Express fabric.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 450,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4175",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4338984787464142
  },
  {
    "content": "The time required to transfer data from the write elasticity buffer to nonvolatile media is the amount of data\nwritten to the elasticity buffer divided by the Persistent Memory Region Sustained Write Throughput (refer\nto section 3.1.3.26). The time to transfer the entire contents of the write elasticity buffer is the Persistent\nMemory Region Elasticity Buffer Size (refer to section 3.1.3.25) divided by the Persistent Memory Region\nSustained Write Throughput.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 462,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4176",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07918508350849152
  },
  {
    "content": "The host enables the PMR by setting PMRCTL.EN to ‘1’. Once enabled, the controller indicates that the\nPMR is ready by clearing PMRSTS.NRDY to ‘0’. It is not necessary to enable the controller to enable the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4177",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2550007700920105
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4178",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15392616391181946
  },
  {
    "content": "PMR. Restoring and saving the contents of the PMR may take time to complete. When the host modifies\nthe value of PMRCTL.EN, the host should wait for at least the time interval specified in PMRCAP.PMRTO\nfor PMRSTS.NRDY to reflect the change.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 240,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4179",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5269663333892822
  },
  {
    "content": "When the PMR is not ready, PMR reads complete successfully and return an undefined value while PMR\nwrites complete normally, but do not update memory (i.e., the contents of the PMR address written remains\nunchanged). The undefined value returned by a PMR read following a sanitize operation is such that\nrecovery of any previous user data from any cache or the non-volatile media is not possible.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 396,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4180",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5708993673324585
  },
  {
    "content": "When the PMR becomes read-only or unreliable, then a critical warning is reported in the SMART/Health\nInformation Log which may be used to trigger an NVMe interface asynchronous event. Since reporting of\nan asynchronous event may occur an unspecified amount of time after the PMR health status has changed,\nthe host should assume that all operations to the PMR have been affected since the last time normal\noperation was reported in PMRSTS.HSTS.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 445,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4181",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4451664686203003
  },
  {
    "content": "PMRCAP.PMRWBM enumerates supported PMR write barrier mechanisms. At least one mechanism shall\nbe supported. An implementation may optionally support a mechanism where a PCI Express read of any\nsize to the PMR, including a “zero-length read,” ensures that all previous memory writes (i.e., Posted PCI\nExpress requests) to the PMR have completed and are persistent. An implementation may optionally\nsupport a write barrier mechanism that utilizes a read of the PMRSTS property. When supported, a read of\nthe PMRSTS property allows a host to:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 539,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4182",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5932846665382385
  },
  {
    "content": "- ensure that previously issued memory writes to the PMR have completed; and\n\n- determine whether the PMR updates associated with those writes have completed without error\nand are persistent.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 191,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4183",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6399149298667908
  },
  {
    "content": "A PMR memory write error may be the result of a poisoned PCI Express TLP, an NVM subsystem internal\nerror, or a PMR health status issue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4184",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4183485209941864
  },
  {
    "content": "Regardless of the supported PMR write barrier mechanisms, a host may periodically read the PMRSTS\nproperty to ensure that reads to the PMR have returned valid data. For example, if a read to the PMRSTS\nproperty indicates that the PMR is operating normally is then followed by a series of reads, and finally a\nsecond read to the PMRSTS property that indicates the PMR is unreliable, then one or more of the reads\nbetween the two PMRSTS property reads may have returned invalid data. Such polling of the PMRSTS\nproperty may be unnecessary if the host handles poisoned TLPs and/or poisoned TLP error reporting is\nenabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 618,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4185",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6977517604827881
  },
  {
    "content": "The PMR write elasticity buffer size along with the PMR sustained write throughput allows a host to\ndetermine the amount of time for a read associated with a Persistent Memory Region write barrier\nmechanism to complete.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 219,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4186",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37824392318725586
  },
  {
    "content": "Support for PRPs, SGL Lists, Completion Queues, and Submission Queues in the Persistent Memory\nRegion is outside the scope of this specification. If the host attempts to use the Persistent Memory Region\nfor a PRP, SGL List, Completion Queue, or Submission Queue, the controller may abort the command with\na status code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 347,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4187",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16513846814632416
  },
  {
    "content": "**8.15 Power Management**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4188",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4525907337665558
  },
  {
    "content": "The power management capability allows the host to manage NVM subsystem power statically or\ndynamically. Static power management consists of the host determining the maximum power that may be\nallocated to an NVM subsystem and setting the NVM Express power state to one that consumes this\namount of power or less. Dynamic power management is illustrated in Figure 452 and consists of the host\nmodifying the NVM Express power state to best satisfy changing power and performance objectives. This\npower management mechanism is meant to complement and not replace autonomous power management\nor thermal management performed by a controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 636,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4189",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47808849811553955
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4190",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26954659819602966
  },
  {
    "content": "**Figure 452: Dynamic Power Management**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4191",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44744235277175903
  },
  {
    "content": "The number of power states implemented by a controller is returned in the Number of Power States\nSupported (NPSS) field in the Identify Controller data structure. If the controller supports this feature, at\nleast one power state shall be defined and optionally, up to a total of 32 power states may be supported.\nPower states shall be contiguously numbered starting with zero such that each subsequent power state\nconsumes less than or equal to the maximum power consumed in the previous state. Thus, power state\nzero indicates the maximum power that the NVM subsystem is capable of consuming.\n\nAssociated with each power state is a Power State Descriptor in the Identify Controller data structure (refer\nto Figure 276). The descriptors for all implemented power states may be viewed as forming a table as\nshown in the example in Figure 453 for a controller with seven implemented power states. Note that Figure\n453 is illustrative and does not include all fields in the power state descriptor. The Maximum Power (MP)\nfield indicates the sustained maximum power that may be consumed in that state, where power\nmeasurement methods are outside the scope of this specification. The controller may employ autonomous\npower management techniques to reduce power consumption below this level, but under no circumstances\nis power allowed to exceed this level except for non-operational power states as described in section 8.15.1.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1422,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4192",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6481657028198242
  },
  {
    "content": "**Figure 453: Example Power State Descriptor Table**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4193",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3703630268573761
  },
  {
    "content": "|Power<br>State|Maximum<br>Power<br>(MP)|Entry<br>Latency<br>(ENLAT)|Exit<br>Latency<br>(EXLAT)|Relative<br>Read<br>Throughput<br>(RRT)|Relative<br>Read<br>Latency<br>(RRL)|Relative<br>Write<br>Throughput<br>(RWT)|Relative<br>Write<br>Latency<br>(RWL)|\n|---|---|---|---|---|---|---|---|\n|0|25 W|5 µs|5 µs|0|0|0|0|\n|1|18 W|5 µs|7 µs|0|0|1|0|\n|2|18 W|5 µs|8 µs|1|0|0|0|\n|3|15 W|20 µs|15 µs|2|0|2|0|\n|4|10 W|20 µs|30 µs|1|1|3|0|\n|5|8 W|50 µs|50 µs|2|2|4|0|\n|6|5 W|20 µs|5,000 µs|4|3|5|1|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 484,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4194",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2520405948162079
  },
  {
    "content": "The Idle Power (IDLP) field indicates the typical power consumed by the NVM subsystem over 30 seconds\nin the power state when idle (e.g., there are no pending commands, property accesses, background\nprocesses, nor device self-test operations). The measurement starts after the NVM subsystem has been\nidle for 10 seconds.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 320,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4195",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6622462272644043
  },
  {
    "content": "The Active Power (ACTP) field indicates the largest average power of the NVM subsystem over a 10 second\nwindow on a particular workload (refer to section 8.15.3). Active Power measurement starts when the first\ncommand is submitted and ends when the last command is completed. The largest average power over a\n10 second window, consumed by the NVM subsystem in that state is reported in the Active Power field. If\nthe workload completes faster than 10 seconds, the average active power should be measured over the\nperiod of the workload. Non-operational states shall set Active Power Scale, Active Power Workload, and\nActive Power fields to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 643,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4196",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28302001953125
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4197",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28175637125968933
  },
  {
    "content": "The host may dynamically modify the power state using the Set Features command and determine the\ncurrent power state using the Get Features command. The host may directly transition between any two\nsupported power states. The Entry Latency (ENLAT) field in the Power State Descriptor data structure\nindicates the maximum amount of time in microseconds to enter that power state and the Exit Latency\n(EXLAT) field indicates the maximum amount of time in microseconds to exit that state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 485,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4198",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5391212105751038
  },
  {
    "content": "The maximum amount of time to transition between any two power states is equal to the sum of the old\nstate’s exit latency and the new state’s entry latency. The host is not required to wait for a previously\nsubmitted power state transition to complete before initiating a new transition. The maximum amount of\ntime for a sequence of power state transitions to complete is equal to the sum of transition times for each\nindividual power state transition in the sequence.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 468,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4199",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3704186677932739
  },
  {
    "content": "Associated with each power state descriptor are Relative Read Throughput (RRT), Relative Write\nThroughput (RWT), Relative Read Latency (RRL) and Relative Write Latency (RWL) fields that provide the\nhost with an indication of relative performance in that power state. Relative performance values provide an\nordering of performance characteristics between power states. Relative performance values may repeat,\nmay be skipped, and may be assigned in any order (i.e., increasing power states are not required to have\nincreasing relative performance values).\n\nA lower relative performance value indicates better performance (e.g., higher throughput or lower latency).\nFor example, in Figure 453 power state 1 has higher read throughput than power state 2, and power states\n0 through 3 all have the same read latency. Relative performance ordering is only with respect to a single\nperformance characteristic. Thus, although the relative read throughput value of one power state may equal\nthe relative write throughput value of another power state, this does not imply that the actual read and write\nperformance of these two power states are equal.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4200",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4168783128261566
  },
  {
    "content": "The default NVM Express power state is implementation specific and shall correspond to a state that does\nnot consume more power than the lowest value specified in the applicable form factor specification, if any.\nRefer to the Power Management section in the applicable NVMe Transport binding specification for\ntransport specific power requirements impacting NVMe power states, if any.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 384,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4201",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42031607031822205
  },
  {
    "content": "**Non-Operational Power States**\n\nA power state may be a non-operational power state, as indicated by Non-Operational State (NOPS) field\nin Figure 276. Non-operational power states allow the following operations:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 212,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4202",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1530384123325348
  },
  {
    "content": "- PMR accesses, if any;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4203",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6018513441085815
  },
  {
    "content": "- CMB accesses, if any;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 23,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4204",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3007429540157318
  },
  {
    "content": "- processing of Admin commands and processing background operations, if any, initiated by that\ncommand (e.g., Device Self-test command (refer to section 5.9), Sanitize command (refer to\nsection 5.24)); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4205",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09214676171541214
  },
  {
    "content": "- additional transport-specific accesses as defined in the applicable NVMe Transport binding\nspecification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 107,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4206",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2302691638469696
  },
  {
    "content": "For the operations listed in the preceding paragraph, the controller:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4207",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2057463526725769
  },
  {
    "content": "- may exceed the power advertised by the non-operational power state;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4208",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5788645148277283
  },
  {
    "content": "- shall logically remain in the current non-operational power state unless an I/O command is received\nor if an explicit transition is requested by a Set Features command with the Power Management\nFeature Identifier; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 219,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4209",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5294877290725708
  },
  {
    "content": "- shall not exceed the maximum power advertised for the most recent operational power state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 92,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4210",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.532745897769928
  },
  {
    "content": "Execution of controller initiated background operations may exceed the power advertised by the nonoperational power state, if Non-Operational Power State Permissive Mode is supported and enabled (refer\nto section 5.27.1.14).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 224,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4211",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4416462779045105
  },
  {
    "content": "No I/O commands are processed by the controller while in a non-operational power state. The host should\nwait until there are no pending I/O commands prior to issuing a Set Features command to change the\ncurrent power state of the device to a non-operational power state and not submit new I/O commands until",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 307,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4212",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0948866531252861
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4213",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0986061692237854
  },
  {
    "content": "the Set Features command completes. Issuing an I/O command in parallel may result in the controller being\nin an unexpected power state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 135,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4214",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44308483600616455
  },
  {
    "content": "When in a non-operational power state, regardless of whether autonomous power state transitions are\nenabled, the controller shall autonomously transition back to the most recent operational power state to\nprocess an I/O command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 228,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4215",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.659628689289093
  },
  {
    "content": "**Autonomous Power State Transitions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4216",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.648733377456665
  },
  {
    "content": "The controller may support autonomous power state transitions, as indicated in the Identify Controller data\nstructure in Figure 275. Autonomous power state transitions provide a mechanism for the host to configure\nthe controller to automatically transition between power states on certain conditions without software\nintervention.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 330,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4217",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6071486473083496
  },
  {
    "content": "The entry condition to transition to the Idle Transition Power State is that the controller has been in idle for\na continuous period of time exceeding the Idle Time Prior to Transition time specified. The controller is idle\nwhen there are no commands outstanding to any I/O Submission Queue. If a controller has an operation in\nprocess (e.g., device self-test operation) that would cause controller power to exceed that advertised for\nthe proposed non-operational power state, then the controller should not autonomously transition to that\nstate.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 546,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4218",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6435658931732178
  },
  {
    "content": "The power state to transition to shall be a non-operational power state (a non-operational power state may\nautonomously transition to another non-operational power state). If an operational power state is specified,\nthen the controller should abort the command with a status code of Invalid Field in Command. Refer to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 317,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4219",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1853812336921692
  },
  {
    "content": "section 8.15.1 for more details.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4220",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2263440489768982
  },
  {
    "content": "**NVM Subsystem Workloads**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4221",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5796248316764832
  },
  {
    "content": "The workload values described in this section may specify a workload hint in the Power Management\nFeature (refer to section 5.27.1.2) to inform the NVM subsystem or indicate the conditions for the active\npower level.\n\nActive power values in the power state descriptors are specified for a particular workload since they may\nvary based on the workload of the NVM subsystem. The workload field indicates the conditions to observe\nthe energy values. If Active Power is indicated for a power state, a corresponding workload shall also be\nindicated.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 544,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4222",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6327899694442749
  },
  {
    "content": "The workload values are described in Figure 454.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4223",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5905567407608032
  },
  {
    "content": "**Figure 454: Workload Hints**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 30,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4224",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3759889602661133
  },
  {
    "content": "|Value|Description|\n|---|---|\n|000b|No Workload: The workload is unknown or not provided.|\n|001b|Workload #1: Extended Idle Period with a Burst of Random Writes. Workload #1 consists of five<br>(5) minutes of idle followed by thirty-two (32) random write commands of size 1 MiB submitted to a<br>single controller while all other controllers in the NVM subsystem are idle, and then thirty (30)<br>seconds of idle.|\n|010b|Workload #2: Heavy Sequential Writes. Workload #2 consists of 80,000 sequential write<br>commands of size 128 KiB submitted to a single controller while all other controllers in the NVM<br>subsystem are idle. The submission queue(s) should be sufficiently large allowing the host to ensure<br>there are multiple commands pending at all times during the workload.|\n|011b to 111b|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 808,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4225",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20059539377689362
  },
  {
    "content": "**Runtime D3 Transitions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4226",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4235113263130188
  },
  {
    "content": "In Runtime D3 (RTD3) main power is removed from the controller. Auxiliary power may or may not be\nprovided. RTD3 is used for additional power savings when the controller is expected to be idle for a period\nof time.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 214,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4227",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "Transport Specifications",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5793002843856812
  },
  {
    "content": "To enable host software to determine when to use RTD3, the controller reports the latency to enter RTD3\nand the latency to resume from RTD3 in the Identify Controller data structure in Figure 275. The host may",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 209,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4228",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13516877591609955
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4229",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11622302979230881
  },
  {
    "content": "use the sum of these two values to evaluate whether the expected idle period is long enough to benefit\nfrom a transition to RTD3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 129,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4230",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5011451244354248
  },
  {
    "content": "The RTD3 Resume Latency is the expected elapsed time from the time power is applied until the controller\nis able to:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 116,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4231",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07597076892852783
  },
  {
    "content": "a) process and complete I/O commands; and\nb) access the NVM associated with attached namespace(s), if any, as part of I/O command",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 129,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4232",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11683384329080582
  },
  {
    "content": "The latency reported is based on a normal shutdown with optimal controller settings preceding the RTD3\nresume. The latency reported assumes that host software enables and initializes the controller and sends\na 4 KiB read operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 231,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4233",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6887211203575134
  },
  {
    "content": "If CSTS.ST is cleared to ‘0’, then the RTD3 Entry Latency is the expected elapsed time from the time\nCC.SHN is set to 01b by host software until CSTS.SHST is set to 10b by the controller. When CSTS.SHST\nis set to 10b, it is safe for host software to remove power from the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 283,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4234",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43772295117378235
  },
  {
    "content": "In this specification, RTD3 refers to the D3 cold power state described in the PCI Express Specification. RTD3\ndoes not include the PCI Express D3 hot power state because main power is not removed from the controller\nin the D3 hot power state. Refer to the PCI Express Base Specification for details on the D3 hot power state\nand the D3 cold power state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 354,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4235",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19259461760520935
  },
  {
    "content": "**Host Controlled Thermal Management**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4236",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6852635145187378
  },
  {
    "content": "A controller may support host controlled thermal management (HCTM), as indicated in the Host Controlled\nThermal Management Attributes of the Identify Controller data structure in Figure 275. Host controlled\nthermal management provides a mechanism for the host to configure a controller to automatically transition\nbetween active power states or perform vendor specific thermal management actions in order to attempt to\nmeet thermal management requirements specified by the host. If active power states transitions are used\nto attempt to meet these thermal management requirements specified by the host, then those active power\nstates transitions are vendor specific.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 666,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4237",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6655256748199463
  },
  {
    "content": "The host specifies and enables the thermal management requirements by setting the Thermal Management\nTemperature 1 field and/or Thermal Management Temperature 2 field (refer to section 5.27.1.13) in a Set\nFeatures command to a non-zero value. The supported range of values for the Thermal Management\nTemperature 1 field and Thermal Management Temperature 2 field are indicated in the Identify Controller\ndata structure in Figure 275.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 433,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4238",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5727649331092834
  },
  {
    "content": "The Thermal Management Temperature 1 specifies that if the Composite Temperature (refer to Figure 208)\nis:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4239",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6435572504997253
  },
  {
    "content": "a) greater than or equal to this value; and\nb) less than the Thermal Management Temperature 2, if non-zero,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 107,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4240",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3699057996273041
  },
  {
    "content": "then the controller should start transitioning to lower power active power states or perform vendor specific\nthermal management actions while minimizing the impact on performance in order to attempt to reduce the\nComposite Temperature (e.g., transition to an active power state that performs light throttling).\n\nThe Thermal Management Temperature 2 field specifies that if the Composite Temperature is greater than\nor equal to this value, then the controller shall start transitioning to lower power active power states or\nperform vendor specific thermal management actions regardless of the impact on performance in order to\nattempt to reduce the Composite Temperature (e.g., transition to an active power state that performs heavy\nthrottling).\n\nIf the controller is currently in a lower power active power state or performing vendor specific thermal\nmanagement actions because of this feature (e.g., throttling performance) because the Composite\nTemperature is:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 963,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4241",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.538833737373352
  },
  {
    "content": "a) greater than or equal to the current value of the Thermal Management Temperature 1 field; and\nb) less than the current value of the Thermal Management Temperature 2 field,",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 174,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4242",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2219206541776657
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4243",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17196543514728546
  },
  {
    "content": "and the Composite Temperature decreases to a value below the current value of the Thermal Management\nTemperature 1 field, then the controller should return to the active power state that the controller was in\nprior to going to a lower power active power state or stop performing vendor specific thermal management\nactions because of this feature, the Composite Temperature and the current value of the Thermal\nManagement Temperature 1 field.\n\nIf the controller is currently in a lower power active power state or performing vendor specific thermal\nmanagement actions because the Composite Temperature is greater than or equal to the current value of\nthe Thermal Management Temperature 2 field and the Composite Temperature decreases to a value less\nthan the current value of the Thermal Management Temperature 1 field, then the controller should return\nto the active power state that the controller was in prior to going to a lower power active power state or stop\nperforming vendor specific thermal management actions because of this feature, and the Composite\nTemperature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1074,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4244",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6826080083847046
  },
  {
    "content": "The temperature at which the controller stops being in a lower power active power state or performing\nvendor specific thermal management actions because of this feature is vendor specific (i.e., hysteresis is\nvendor specific).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 226,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4245",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37167859077453613
  },
  {
    "content": "Figure 455 shows examples of how the Composite Temperature may be affected by this feature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 91,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4246",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2574644684791565
  },
  {
    "content": "**Figure 455: HCTM Example**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4247",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20843426883220673
  },
  {
    "content": "|Col1|Col2|Col3|Col4|Col5|e.g., heavy thottling<br>e.g., light throttle<br>No Thermal Management|\n|---|---|---|---|---|---|\n|||||||\n|||||||\n|Lines represent the<br>Composite Temperature|Lines represent the<br>Composite Temperature|Lines represent the<br>Composite Temperature|Lines represent the<br>Composite Temperature|Lines represent the<br>Composite Temperature|Lines represent the<br>Composite Temperature|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 411,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4248",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21874761581420898
  },
  {
    "content": "Note: Since the host controlled thermal management (HCTM) feature uses the Composite Temperature,\nthe actual interactions between a platform (e.g., tablet, or laptop) and two different device implementations\nmay vary even with the same Thermal Management Temperature 1 and Thermal Management\nTemperature 2 temperature settings. The use of this feature requires validation between those devices’\nimplementations and the platform in order to be used effectively.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 460,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4249",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16311563551425934
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4250",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1843373030424118
  },
  {
    "content": "**8.16 Predictable Latency Mode**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4251",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6029516458511353
  },
  {
    "content": "Predictable Latency Mode is used to achieve predictable latency for read and write operations. When\nconfigured to operate in this mode using the Predictable Latency Mode Config Feature (refer to section\n5.27.1.16), the namespaces in an NVM Set (refer to section 3.2.2) provide windows of operation for\ndeterministic operation or non-deterministic operation.\n\nWhen Predictable Latency Mode is enabled:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 400,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4252",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2745266556739807
  },
  {
    "content": "- NVM Sets and their associated namespaces have vendor specific quality of service attributes;\n\n- I/O commands that access NVM in the same NVM Set have the same quality of service attributes;\nand\n\n- I/O commands that access NVM in one NVM Set do not impact the quality of service of I/O\ncommands that access NVM in a different NVM Set.\n\nThe quality of service attributes apply within the NVM subsystem and do not include the PCIe or fabric\nconnection. To enhance isolation, the host should submit I/O commands for different NVM Sets to different\nI/O Submission Queues.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 568,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4253",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.496869295835495
  },
  {
    "content": "Read Recovery Levels (refer to section 8.17) shall be supported when Predictable Latency Mode is\nsupported. The host configures the Read Recovery Level to specify the tradeoff between the quality of\nservice versus the amount of error recovery to apply for a particular NVM Set.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 277,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4254",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29716968536376953
  },
  {
    "content": "The Deterministic Window (DTWIN) is the window of operation during which the NVM Set is able to provide\ndeterministic latency for read and write operations. The Non-Deterministic Window (NDWIN) is the window\nof operation during which the NVM Set is not able to provide deterministic latency for read and write\noperations as a result of preparing for a subsequent Deterministic Window. Examples of actions that may\nbe performed in the Non-Deterministic Window include background operations on the non-volatile media.\nThe current window that an NVM Set is operating in is configured by the host using the Predictable Latency\nMode Window Feature or by the controller as a result of an autonomous action.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 700,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4255",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.613469660282135
  },
  {
    "content": "**Figure 456: Deterministic and Non-Deterministic Windows**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4256",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5277601480484009
  },
  {
    "content": "To remain in the Deterministic Window, the host is required to follow operating rules (refer to section 8.16.1)\nensuring that certain attributes do not exceed the typical or maximum values indicated in the Predictable\nLatency Per NVM Set log page. If the attributes exceed any of the typical or maximum values indicated in\nthe Predictable Latency Per NVM Set log page or a Deterministic Excursion occurs, then the associated\nNVM Set may autonomously transition to the Non-Deterministic Window. A Deterministic Excursion is a\nrare occurrence in the NVM subsystem that requires immediate action by the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 611,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4257",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5920208096504211
  },
  {
    "content": "The host configures Predictable Latency Events to report using the Predictable Latency Mode Config\nfeature. The host may configure a Predictable Latency Event to be triggered when that value exceeds a\nspecific value in order to manage window changes and avoid autonomous transitions by the controller.\nRefer to section 8.16.3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 326,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4258",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07442934066057205
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4259",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3720797300338745
  },
  {
    "content": "If Predictable Latency Mode is supported, then all controllers in the NVM subsystem shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4260",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45857369899749756
  },
  {
    "content": "- Support one or more NVM Sets;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4261",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2875775992870331
  },
  {
    "content": "- Support Read Recovery Levels;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4262",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18082551658153534
  },
  {
    "content": "- Support the Predictable Latency Mode log page for each NVM Set;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4263",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6483564972877502
  },
  {
    "content": "- Support the Predictable Latency Event Aggregate log page;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4264",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5412510633468628
  },
  {
    "content": "- Support the Predictable Latency Mode Config Feature;\n\n- Support the Predictable Latency Mode Window Feature;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 110,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4265",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5573674440383911
  },
  {
    "content": "- Support Predictable Latency Event Aggregate Log Change Notices; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 69,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4266",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45316123962402344
  },
  {
    "content": "- Indicate support for Predictable Latency Mode in the Controller Attributes field in the Identify\nController data structure.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 125,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4267",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21818946301937103
  },
  {
    "content": "**Host Operating Rules to Achieve Determinism**\n\nIn order to achieve deterministic operation, the host is required to follow operating rules.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4268",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40802523493766785
  },
  {
    "content": "An NVM Set remains in the Deterministic Window while attributes do not exceed any of the typical or\nmaximum values indicated in the Predictable Latency Per NVM Set log page, there is not a Deterministic\nExcursion, and the host does not request a transition to the Non-Deterministic Window. The attributes\nspecified in this specification are the number of random 4 KiB reads, the number of writes in Optimal Write\nSize, and time in the Deterministic Window. Additional attributes are vendor specific.\n\nFor reads, writes, and time in the Deterministic Window, two values are provided in the Predictable Latency\nPer NVM Set log page (refer to section 5.16.1.11):",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 659,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4269",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3612171411514282
  },
  {
    "content": "- A typical or maximum amount of that attribute that the host may consume during any given DTWIN;\nand\n\n- A reliable estimate of the amount of that attribute that remains to be consumed during the current\nDTWIN.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4270",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6346045136451721
  },
  {
    "content": "Figure 457 shows how the Typical, Maximum, and Reliable Estimates for the DTWIN attributes increase or\ndecrease when the associated NVM Set is in the Deterministic Window or Non-Deterministic Window.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 199,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4271",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3142341077327728
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4272",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2030176967382431
  },
  {
    "content": "**Figure 457: DTWIN Attributes and Estimates**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4273",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33060261607170105
  },
  {
    "content": "An NVM Set may transition autonomously to the NDWIN if, since entry to the current DTWIN:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4274",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3892495036125183
  },
  {
    "content": "a) the number of reads is greater than the value indicated in the DTWIN Reads Typical field;\nb) the number of writes is greater than the value indicated in the DTWIN Writes Typical field;\nc) the amount of time indicated in the DTWIN Time Maximum field has passed; or\nd) a Deterministic Excursion occurs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 303,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4275",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6898825764656067
  },
  {
    "content": "Figure 458 is an example that shows the relationship between the typical and reliable estimate values for\nDTWIN Reads. DTWIN Reads Reliable Estimate begins near the DTWIN Reads Typical value at the start\nof the current DTWIN at time 0. During the first time increment, the host reads *x* units, and the value of the\nreliable estimate at time t2 is decremented by approximately *x* . During the second time increment, the host\nreads a smaller amount consisting of *y* units and thus the reliable estimate at t3 is decremented by\napproximately *y* .",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 547,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4276",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14800339937210083
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4277",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18004488945007324
  },
  {
    "content": "**Figure 458: Typical and Reliable Estimate Example**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 53,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4278",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06040389463305473
  },
  {
    "content": "The host configures the current window to be either DTWIN or NDWIN using a Set Features command with\nthe Predictable Latency Mode Window Feature. The host may use the reliable estimates provided in the\nPredictable Latency Mode log page to ensure that the host transitions the NVM Set to the NDWIN prior to\nany reliable estimates exceeding one of the typical or maximum values (e.g., DTWIN Reads Estimate = 0).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 409,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4279",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3384578824043274
  },
  {
    "content": "The reliable estimates provided shall have the following properties when in the Deterministic Window:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4280",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5184421539306641
  },
  {
    "content": "- The estimates shall be monotonically decreasing towards 0h for the entirety of the DTWIN,\ndepending on the attribute. For example, DTWIN Reads Reliable Estimate is monotonically\ndecreasing and thus does not increase without transitioning from the DTWIN to the NDWIN; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 272,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4281",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4458359181880951
  },
  {
    "content": "- The estimates shall not change abruptly unless operating conditions have changed abruptly. The\nestimate should be based on averaging or smoothing of data collected over some period of time.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 191,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4282",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12691786885261536
  },
  {
    "content": "**Configuring Periodic Windows**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4283",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.288412868976593
  },
  {
    "content": "When using the NVM Set in Predictable Latency Mode, the host should transition the controller to NDWIN\nfor periodic maintenance. The maintenance is required in order for the NVM subsystem to reliably provide\nthe amount of time indicated for Deterministic Windows.\n\nThere are three static time based parameters reported in the Predictable Latency Per NVM Set log page\n(refer to section 5.16.1.11) that may be used by the host to configure periodic windows. The values provided\nare worst-case for the life of the NVM subsystem:\n\n- NDWIN Time Minimum Low is the minimum time that the NVM Set remains in the Non-Deterministic\nWindow. The controller may delay completion of a Set Features command requesting a transition\nto the Deterministic Window until this time is completed. This time does not account for additional\nhost activity in the Non-Deterministic Window;\n\n- NDWIN Time Minimum High is the minimum time that the host should allow the NVM Set to remain\nin the Non-Deterministic Window after the NVM Set remained in the previous Deterministic Window\nfor DTWIN Time Maximum. This time does not account for additional host activity in the NonDeterministic Window; and\n\n- DTWIN Time Maximum is the maximum time that the NVM Set is able to stay in a Deterministic\nWindow.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 1272,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4284",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.348293274641037
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4285",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2918362617492676
  },
  {
    "content": "The DTWIN Time Maximum and NDWIN Time Minimum High may provide a ratio of the amount of\nmaintenance that needs to be performed based on the time that the NVM Set remains in the DTWIN,\nassuming no threshold is exceeded. Any scaling of the time in the Non-Deterministic Window based on the\nread, write, and time behavior in the previous Deterministic Window is implementation dependent.\n\nThe DTWIN Time Estimate may be used by the host when a Deterministic Excursion has occurred. This\nestimate allows the host to re-synchronize an NVM Set with other NVM Sets operating in Predictable\nLatency Mode, if applicable.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 611,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4286",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10864352434873581
  },
  {
    "content": "**Configuring and Managing Events**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4287",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26400092244148254
  },
  {
    "content": "The host may configure events to be triggered when thresholds do not exceed certain levels or when\nautonomous transitions occur using the Predictable Latency Mode Feature. The host submits a Set Feature\ncommand for the particular NVM Set and configures the specific event(s) and threshold(s) values that shall\ntrigger a Predictable Latency Event Aggregate Log Change Notice event for that particular NVM Set to the\nhost. Refer to Figure 348.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 441,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4288",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6845447421073914
  },
  {
    "content": "The host determines the NVM Sets that have outstanding events by reading the Predictable Latency Event\nAggregate log page (refer to section 5.16.1.12). An entry is returned for each NVM Set that has an event\noutstanding. The host may use the NVM Set Identifier Maximum value reported in the Identify Controller\ndata structure in order to determine the maximum size of this log page.\n\nTo determine the specific event(s) that have occurred for a reported NVM Sets, the host reads the\nPredictable Latency Per NVM Set log page (refer to section 5.16.1.11) for that NVM Set. The Event Type\nfield indicates the event(s) that have occurred (e.g., an autonomous transition to the NDWIN). An event(s)\nfor a particular NVM Set is cleared if the controller successfully processes a read for the Predictable Latency\nPer NVM Set log page for the affected NVM Set where the Get Log Page command has the Retain\nAsynchronous Event parameter cleared to ‘0’. If the Event Type field in the Predictable Latency Per NVM\nSet log page is cleared to 0h, then events for that particular NVM Set are not reported in the Predictable\nLatency Event Aggregate log page.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1140,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4289",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16649290919303894
  },
  {
    "content": "**8.17 Read Recovery Level**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4290",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4913793206214905
  },
  {
    "content": "The Read Recovery Level (RRL) is a NVM Set configurable attribute that balances the completion time for\nread commands and the amount of error recovery applied to those read commands. The Read Recovery\nLevel applies to an NVM Set with which the Read Recovery Level is associated. A namespace created\nwithin an NVM Set inherits the Read Recovery Level of that NVM Set. If NVM Sets are not supported, all\nnamespaces in the NVM subsystem use an identical Read Recovery Level.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 471,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4291",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6082602739334106
  },
  {
    "content": "The controller indicates support for Read Recovery Levels in the Controller Attributes field in the Identify\nController data structure (refer to Figure 275). If Read Recovery Levels are supported, then the specific\nlevels supported are indicated in the Read Recovery Levels Supported field in the Identify Controller data\nstructure. There are 16 levels that may be supported. Level 0, if supported, provides the maximum amount\nof recovery. Level 4 is a mandatory level that provides a nominal amount of recovery and is the default\nlevel. Level 15 is a mandatory level that provides the minimum amount of recovery and is referred to as the\n‘Fast Fail’ level. The levels are organized based on the amount of recovery supported, such that a higher\nnumbered level provides less recovery than the preceding lower level.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 814,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4292",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5468827486038208
  },
  {
    "content": "Interactions between the Read Recovery Level and the Limited Retry (LR) field in I/O commands are\nimplementation specific.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4293",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6659677028656006
  },
  {
    "content": "The Read Recovery Level may be configured using a Set Features command for the Read Recovery Level\nConfig Feature. The Read Recovery Level may be determined using a Get Features command for the Read\nRecovery Level Config Feature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4294",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13768534362316132
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4295",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24451030790805817
  },
  {
    "content": "**Figure 459: Read Recovery Level Overview**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4296",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4153977632522583
  },
  {
    "content": "|Level|O/M|Description|\n|---|---|---|\n|0|O||\n|1|O||\n|2|O||\n|3|O||\n|4|M|Default|\n|5|O||\n|6|O||\n|7|O||\n|8|O||\n|9|O||\n|10|O||\n|11|O||\n|12|O||\n|13|O||\n|14|O||\n|15|M|Fast Fail|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 171,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4297",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3450372815132141
  },
  {
    "content": "If Read Recovery Levels are supported, then the NVM subsystem and all controllers shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 88,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4298",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3727132976055145
  },
  {
    "content": "- Support at least Level 4 and Level 15;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4299",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29803621768951416
  },
  {
    "content": "- Indicate support for Read Recovery Levels in the Controller Attributes field in the Identify\nController data structure;\n\n- Support the Read Recovery Levels Supported field in the Identify Controller data structure; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 220,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4300",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.696700394153595
  },
  {
    "content": "- Support the Read Recovery Level Config Feature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4301",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33995890617370605
  },
  {
    "content": "**8.18 Replay Protected Memory Block**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4302",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5105391144752502
  },
  {
    "content": "The Replay Protected Memory Block (RPMB) provides a means for the system to store data to a specific\nmemory area in an authenticated and replay protected manner. This is provided by first programming\nauthentication key information to the controller that is used as a shared secret. The system is not\nauthenticated in this phase, therefore the authentication key programming should be done in a secure\nenvironment (e.g., as part of the manufacturing process). The authentication key is utilized to sign the read\nand write accesses made to the replay protected memory area with a Message Authentication Code (MAC).\nUse of random number (nonce) generation and a write count property provide additional protection against\nreplay of messages where messages could be recorded and played back later by an attacker.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 807,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4303",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39310044050216675
  },
  {
    "content": "The controller may support multiple RPMB targets. RPMB targets are not contained within a namespace.\nControllers in the NVM subsystem may share the same RPMB targets. Security Send and Security Receive\ncommands for RPMB do not use the namespace ID field; NSID shall be cleared to 0h. Each RPMB target",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 300,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4304",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28535160422325134
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4305",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.03509809821844101
  },
  {
    "content": "operates independently – there may be requests outstanding to multiple RPMB targets at once (where the\nrequests may be interleaved between RPMB targets). In order to guarantee ordering the host should issue\nand wait for completion for one Security Send or Security Receive command at a time. Each RPMB target\nrequires individual authentication and key programming. Each RPMB target may have its own unique\nAuthentication Key.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 425,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4306",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4938669502735138
  },
  {
    "content": "The message types defined in Figure 461 are used by the host to communicate with an RPMB target.\nRequest Message Types are sent from the host to the controller. Response Message Types are sent to the\nhost from the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4307",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5654124617576599
  },
  {
    "content": "Figure 460 defines the RPMB Device Configuration Block data structure – the non-volatile contents stored\nwithin the controller for RPMB target 0.\n\n**Figure 460: RPMB Device Configuration Block Data Structure**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 209,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4308",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41869303584098816
  },
  {
    "content": "|Bytes|Component Name|Description|\n|---|---|---|\n|00|Boot Partition Protection Enable|This field indicates if Boot Partition Protection is enabled.<br>Bits 7:1 are reserved.<br>Bit 0: A value of ‘1’ indicates Boot Partition Protection is enabled. A<br>value of ‘0’ indicates Boot Partition Protection is disabled or not<br>supported. Once enabled, the controller shall prevent disabling Boot<br>Partition Protection|\n|01|Boot Partition Lock|This field indicates the current status of the Boot Partition Lock. This<br>field shall be cleared to 0h unless Boot Partition Protection is enabled.<br>Refer to section 8.2.3.<br>Bits 7:2 are reserved.<br>Bit 1: A value of ‘1’ indicates Boot Partition 1 (BPID = 1) is locked. A<br>value of ‘0’ indicates Boot Partition 1 (BPID = 1) is unlocked.<br>Bit 0: A value of ‘1’ indicates Boot Partition 0 (BPID = 0) is locked. A<br>value of ‘0’ indicates Boot Partition 0 (BPID = 0) is unlocked.|\n|02|Namespace Write Protection<br>Authentication Control|This field specifies whether the controller processes or aborts Set<br>Features commands which enable certain namespace write protection<br>states (refer to section 8.12 and section 5.27.1.28). If the controller<br>does not support Namespace Write Protection, then this field shall be<br>cleared to 0h. If the controller supports Namespace Write Protection,<br>then bits 1:0 of this field shall be cleared to 00b after a power cycle or<br>a Controller Level Reset.<br>Bits 7:2 are reserved.<br>Bit 1: If cleared to ‘0’, indicates that the controller shall fail a Set<br>Features command which attempts to set the namespace write<br>protection state to Permanent Write Protect, as defined in section 8.12.<br>If set to ‘1’, indicates that the controller shall process a Set Features<br>command which attempts to set the namespace write protection state<br>to Permanent Write Protect.<br>Bit 0: If cleared to ‘0’, indicates that the controller shall fail a Set<br>Features command which attempts to set the namespace write<br>protection state to Write Protect Until Power Cycle, as defined in<br>section 8.12. If set to ‘1’, indicates that the controller shall process a<br>Set Features command which sets the namespace write protection<br>state to Write Protect Until Power Cycle.|\n|511:03||Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2287,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4309",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17254027724266052
  },
  {
    "content": "Each RPMB Data Frame is 256 bytes in size plus the size of the Data field, and is organized as shown in\nFigure 464. RPMB uses a sector size of 512 bytes. The RPMB sector size is independent and not related\nto the user data size used for the namespace(s).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 254,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4310",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14459936320781708
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4311",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17193645238876343
  },
  {
    "content": "**Figure 461: RPMB Request and Response Message Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 55,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4312",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6148651242256165
  },
  {
    "content": "|Request Message Types|Col2|Description|Requires<br>Data|RPMB Frame<br>Length<br>(bytes)|\n|---|---|---|---|---|\n|0001h|Authentication key<br>programming request|The host is attempting to program the Authentication<br>Key for the selected RPMB target to the controller|No|256|\n|0002h|Reading of the Write<br>Counter value request|The host is requesting to read the current Write<br>Counter value from the selected RPMB target|No|256|\n|0003h|Authenticated data write<br>request|The host is attempting to write data to the selected<br>RPMB target|Yes|M + 256|\n|0004h|Authenticated data read<br>request|The host is attempting to read data from the selected<br>RPMB target|No|256|\n|0005h|Result read request|The host is attempting to read the result code for any<br>of the other Message Types|No|256|\n|0006h|Authenticated Device<br>Configuration Block write<br>request|The host is attempting to write Device Configuration<br>Block (DCB) to the selected RPMB target. This<br>request message type is only valid for RPMB target<br>0.|Yes|512 + 256|\n|0007h|Authenticated Device<br>Configuration Block read<br>request|The host is attempting to read Device Configuration<br>Block (DCB) from the selected RPMB target. This<br>request message type is only valid for RPMB target<br>0.|No|256|\n|0100h|Authentication key<br>programming response|Returned as a result of the host requesting a Result<br>read request Message Type after programming the<br>Authentication Key|No|256|\n|0200h|Reading of the Write<br>Counter value response|Returned as a result of the host requesting a Result<br>read request Message Type after requesting the<br>Write Counter value|No|256|\n|0300h|Authenticated data write<br>response|Returned as a result of the host requesting a Result<br>read request Message Type after attempting to write<br>data to an RPMB target|No|256|\n|0400h|Authenticated data read<br>response|Returned as a result of the host requesting a Result<br>read request Message Type after attempting to read<br>data from an RPMB target|Yes|M + 256|\n|0600h|Authenticated Device<br>Configuration data write<br>response|Returned as a result of the host requesting a Result<br>read request Message Type after attempting to write<br>a Device Configuration Block to an RPMB target|No|256|\n|0700h|Authenticated Device<br>Configuration data read<br>response|Returned as a result of the host requesting a Result<br>read request Message Type after attempting to read<br>DCB from an RPMB target|Yes|512 + 256|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2477,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4313",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6167981028556824
  },
  {
    "content": "The operation result defined in Figure 462 indicates whether an RPMB request was successful or not.\n\n**Figure 462: RPMB Operation Result**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 138,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4314",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29436877369880676
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|15:08|Reserved|\n|07|Write Counter Status: Indicates if the Write Counter has expired (i.e., reached its maximum value). A<br>value of ‘1’ indicates that the Write Counter has expired. A value of ‘0’ indicates a valid Write Counter.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 262,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4315",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26759395003318787
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4316",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13783326745033264
  },
  {
    "content": "**Figure 462: RPMB Operation Result**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4317",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28286176919937134
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|06:00|Operation Status: Indicates the operation status. Valid operation status values are listed below.<br>Value Description<br>00h Operation successful<br>01h General failure<br>02h Authentication failure (MAC comparison not matching, MAC calculation failure)<br>03h Counter failure (counters not matching in comparison, counter incrementing failure)<br>04h Address failure (address out of range, wrong address alignment)<br>05h Write failure (data/counter/result write failure)<br>06h Read failure (data/counter/result read failure)<br>Authentication Key not yet programmed. This value is the only valid Result value until the<br>07h Authentication Key has been programmed. Once the key is programmed, this Result<br>value shall no longer be used.<br>08h Invalid RPMB Device Configuration Block – this may be used when the target is not 0h.<br>09 to 3Fh Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 895,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4318",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8039940595626831
  },
  {
    "content": "|Value|Description|\n|---|---|\n|00h|Operation successful|\n|01h|General failure|\n|02h|Authentication failure (MAC comparison not matching, MAC calculation failure)|\n|03h|Counter failure (counters not matching in comparison, counter incrementing failure)|\n|04h|Address failure (address out of range, wrong address alignment)|\n|05h|Write failure (data/counter/result write failure)|\n|06h|Read failure (data/counter/result read failure)|\n|07h|Authentication Key not yet programmed. This value is the only valid Result value until the<br>Authentication Key has been programmed. Once the key is programmed, this Result<br>value shall no longer be used.|\n|08h|Invalid RPMB Device Configuration Block – this may be used when the target is not 0h.|\n|09 to 3Fh|Reserved|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 759,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4319",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20466814935207367
  },
  {
    "content": "Figure 463 defines the non-volatile contents stored within the controller for each RPMB target.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4320",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5719930529594421
  },
  {
    "content": "**Figure 463: RPMB Contents**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 29,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4321",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0036159073933959007
  },
  {
    "content": "|Content|Type|Size|Description|\n|---|---|---|---|\n|Authentication<br>Key|Write once, not<br>erasable or<br>readable|Size is dependent on<br>authentication method<br>reported in Identify<br>Controller data<br>structure (e.g., SHA-<br>256 is 32 bytes (refer to<br>RFC 6234))|Authentication key which is used to authenticate<br>accesses when MAC is calculated.|\n|Write Counter|Read only|4 bytes|Counter value for the total amount of successful<br>authenticated data write requests made by the<br>host. The initial value of this property after<br>manufacture is 00000000h. The value is<br>incremented by one automatically by the controller<br>with each successful programming access. The<br>value is not resettable. After the counter has<br>reached the maximum value of FFFFFFFFh, the<br>controller shall no longer increment to prevent<br>overflow.|\n|RPMB Data<br>Area|Readable and<br>writable, not<br>erasable|Size is reported in<br>Identify Controller data<br>structure (128 KiB<br>minimum, 32 MiB<br>maximum)|Data that is able to be read and written only via<br>successfully authenticated read/write access.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1107,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4322",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19627122581005096
  },
  {
    "content": "Each RPMB Data Frame is 256 bytes in size plus the size of the Data field, and is organized as shown in\nFigure 464. RPMB uses a sector size of 512 bytes. The RPMB sector size is independent and not related\nto the user data size used for the namespace(s).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 254,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4323",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.631615161895752
  },
  {
    "content": "**Figure 464: RPMB Data Frame**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4324",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2977360188961029
  },
  {
    "content": "|Bytes|Component Name|Description|\n|---|---|---|\n|222-N:00|Stuff Bytes|Padding for the frame. Values in this field are not part of the MAC<br>calculation. The size is 223 bytes minus the size of the Authentication<br>Key (N).|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 226,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4325",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25997111201286316
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4326",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09666132181882858
  },
  {
    "content": "**Figure 464: RPMB Data Frame**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 31,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4327",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4072295129299164
  },
  {
    "content": "|Bytes|Component Name|Description|\n|---|---|---|\n|222:222-(N-1)|Authentication Key or<br>Message Authentication<br>Code (MAC)|Size is dependent on authentication method reported in the Identify<br>Controller data structure (e.g., SHA-256 key is 32 bytes (refer to<br>RFC 6234)).|\n|223|RPMB Target|Indicates which RPMB this Request/Response is targeted for. Values<br>0-6 are supported. If the value in this field is not equal to the NVMe<br>Security Specific Field (NSSF) in the Security Send or Security<br>Receive command, then the controller shall return an error of Invalid<br>Field in Command for the Security Send or Security Receive<br>command.|\n|239:224|Nonce|Random number generated by the host for the requests and copied to<br>the response by the RPMB target.|\n|243:240|Write Counter|Total amount of successfully authenticated data write requests.|\n|247:244|Address|Starting address of data to be programmed to or read from the RPMB.|\n|251:248|Sector Count|Number of sectors (512 bytes) requested to be read or written.|\n|253:252|Result|Defined in Figure 462. Note: The Result field is not needed for<br>Requests.|\n|255:254|Request/Response<br>Message|Defined in Figure 461.|\n|(M-1)+256:256|Data (Optional)|Data to be written or read by signed access where M = 512 * Sector<br>Count.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1295,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4328",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6506100296974182
  },
  {
    "content": "Security Send and Security Receive commands are used to encapsulate and deliver data packets of any\nsecurity protocol between the host and controller without interpreting, dis-assembling or re-assembling the\ndata packets for delivery. Security Send and Security Receive commands used for RPMB access are\npopulated with the RPMB Data Frame(s) defined in Figure 464. The controller shall not return successful\ncompletion of a Security Send or Security Receive command for RPMB access until the requested RPMB\nRequest/Response Message Type indicated is completed. The Security Protocol used for RPMB is defined\nin section 5.25.3.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 626,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4329",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2872238755226135
  },
  {
    "content": "**Authentication Method**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4330",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.547182023525238
  },
  {
    "content": "A controller supports one Authentication Method as indicated in the Identify Controller data structure.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4331",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39570409059524536
  },
  {
    "content": "If the Authentication Method supported is HMAC SHA-256 (refer to RFC 6234), then the message\nauthentication code (MAC) is calculated using HMAC SHA-256 as defined in RFC 6234. The key used to\ngenerate a MAC using HMAC SHA-256 is the 256-bit Authentication Key stored in the controller for the\nselected RPMB target. The HMAC SHA-256 calculation takes as input a key and a message. Input to the\nMAC calculation is the concatenation of the fields in the RPMB Data Frame (request or response) excluding\nstuff bytes and the MAC itself – i.e., bytes [223:255] and Data of the frame in that order.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 590,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4332",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5173611044883728
  },
  {
    "content": "The host sends a Request Message Type to the controller to request an operation by the controller or to\ndeliver data to be written into the RPMB memory block. To deliver a Request Message Type, the host uses\nthe Security Send command. If the data to be delivered to the controller is more than reported in Identify\nController data structure, the host sends multiple Security Send commands to transfer the entire data.\n\nThe host sends a Response Message Type to the controller to read the result of a previous operation\nrequest, to read the Write Counter, or to read data from the RPMB memory block. To deliver a Response\nMessage Type, the host uses the Security Receive command. If the data to be read from the controller is\nmore than reported in Identify Controller data structure, the host sends multiple Security Receive\ncommands to transfer the entire data.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 861,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4333",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1243671178817749
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4334",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06530554592609406
  },
  {
    "content": "**8.18.2.1 Authentication Key Programming**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4335",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5252284407615662
  },
  {
    "content": "Authentication Key programming is initiated by a Security Send command to program the Authentication\nKey to the specified RPMB target, followed by a subsequent Security Send command to request the result,\nand lastly, the host issues a Security Receive command to retrieve the result.\n\n**Figure 465: RPMB – Authentication Key Data Flow**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 336,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4336",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5144069194793701
  },
  {
    "content": "|Command|Bytes in Command|Field Name|Value|Objective|\n|---|---|---|---|---|\n|Security<br>Send 1|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Send<br>Authentication<br>Key to be<br>Programmed to<br>the controller|\n|Security<br>Send 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Send 1|222:222-(N-1)|MAC/Key|Key to be<br>programmed|Key to be<br>programmed|\n|Security<br>Send 1|223|RPMB Target|RPMB target to<br>access|RPMB target to<br>access|\n|Security<br>Send 1|239:224|Nonce|0…00h|0…00h|\n|Security<br>Send 1|243:240|Write Counter|00000000h|00000000h|\n|Security<br>Send 1|247:244|Address|00000000h|00000000h|\n|Security<br>Send 1|251:248|Sector Count|00000000h|00000000h|\n|Security<br>Send 1|253:252|Result|0000h|0000h|\n|Security<br>Send 1|255:254|Request/Response|0001h (Request)|0001h (Request)|\n|Security<br>Send 2|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Request Result of<br>Key<br>Programming|\n|Security<br>Send 2|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Send 2|222:222-(N-1)|MAC/Key|0…00h|0…00h|\n|Security<br>Send 2|223|RPMB Target|RPMB target to<br>access|RPMB target to<br>access|\n|Security<br>Send 2|239:224|Nonce|0…00h|0…00h|\n|Security<br>Send 2|243:240|Write Counter|00000000h|00000000h|\n|Security<br>Send 2|247:244|Address|00000000h|00000000h|\n|Security<br>Send 2|251:248|Sector Count|00000000h|00000000h|\n|Security<br>Send 2|253:252|Result|0000h|0000h|\n|Security<br>Send 2|255:254|Request/Response|0005h (Request)|0005h (Request)|\n|Security<br>Receive 1|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Retrieve the Key<br>Programming<br>Result|\n|Security<br>Receive 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Receive 1|222:222-(N-1)|MAC/Key|0…00h|0…00h|\n|Security<br>Receive 1|223|RPMB Target|RPMB target<br>response was sent<br>from|RPMB target<br>response was sent<br>from|\n|Security<br>Receive 1|239:224|Nonce|0…00h|0…00h|\n|Security<br>Receive 1|243:240|Write Counter|00000000h|00000000h|\n|Security<br>Receive 1|247:244|Address|00000000h|00000000h|\n|Security<br>Receive 1|251:248|Sector Count|00000000h|00000000h|\n|Security<br>Receive 1|253:252|Result|Result Code|Result Code|\n|Security<br>Receive 1|255:254|Request/Response|0100h (Response)|0100h (Response)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2554,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4337",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13887304067611694
  },
  {
    "content": "**8.18.2.2 Read Write Counter Value**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4338",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6700741052627563
  },
  {
    "content": "The Read Write Counter Value sequence is initiated by a Security Send command to request the Write\nCounter value, followed by a Security Receive command to retrieve the Write Counter result.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 190,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4339",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14195457100868225
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4340",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18747827410697937
  },
  {
    "content": "**Figure 466: RPMB – Read Write Counter Value Flow**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4341",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4281890392303467
  },
  {
    "content": "|Command|Bytes in Command|Field Name|Value|Objective|\n|---|---|---|---|---|\n|Security<br>Send 1|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Request Write<br>Counter Read|\n|Security<br>Send 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Send 1|222:222-(N-1)|MAC/Key|0…00h|0…00h|\n|Security<br>Send 1|223|RPMB Target|RPMB target to access|RPMB target to access|\n|Security<br>Send 1|239:224|Nonce|Nonce generated by the<br>host|Nonce generated by the<br>host|\n|Security<br>Send 1|243:240|Write Counter|00000000h|00000000h|\n|Security<br>Send 1|247:244|Address|00000000h|00000000h|\n|Security<br>Send 1|251:248|Sector Count|00000000h|00000000h|\n|Security<br>Send 1|253:252|Result|0000h|0000h|\n|Security<br>Send 1|255:254|Request/Response|0002h (Request)|0002h (Request)|\n|Security<br>Receive 1|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Retrieve Write<br>Counter Read<br>Result|\n|Security<br>Receive 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Receive 1|222:222-(N-1)|MAC/Key|MAC generated by the<br>controller|MAC generated by the<br>controller|\n|Security<br>Receive 1|223|RPMB Target|RPMB target response<br>was sent from|RPMB target response<br>was sent from|\n|Security<br>Receive 1|239:224|Nonce|Copy of the Nonce<br>generated by the host|Copy of the Nonce<br>generated by the host|\n|Security<br>Receive 1|243:240|Write Counter|Current Write Counter<br>value|Current Write Counter<br>value|\n|Security<br>Receive 1|247:244|Address|00000000h|00000000h|\n|Security<br>Receive 1|251:248|Sector Count|00000000h|00000000h|\n|Security<br>Receive 1|253:252|Result|Result Code|Result Code|\n|Security<br>Receive 1|255:254|Request/Response|0200h (Response)|0200h (Response)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1914,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4342",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21319328248500824
  },
  {
    "content": "**8.18.2.3 Authenticated Data Write**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 37,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4343",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4336908459663391
  },
  {
    "content": "The Authenticated Data Write is initiated by a Security Send command. The RPMB Data Frame delivered\nfrom the host to the controller includes the Request Message Type = 0003h, Block Count, Address, Write\nCounter, Data and MAC.\n\nWhen the controller receives this RPMB Data Frame, that controller first checks whether the Write Counter\nhas expired. If the Write Counter has expired, then that controller sets the result to 0005h (write failure,\nwrite counter expired) and no data is written to the RPMB data area.\n\nAfter checking the Write Counter is not expired, the Address is checked. If there is an error in the Address\n(e.g., out of range), then the result is set to 0004h (address failure) and no data is written to the RPMB data\n\nAfter checking the Address is valid, the controller calculates the MAC (refer to section 8.18.1) and compares\nthis with the MAC in the request. If the MAC in the request and the calculated MAC are different, then the\ncontroller sets the result to 0002h (authentication failure) and no data is written to the RPMB data area.\n\nIf the MAC in the request and the calculated MAC are equal, then the controller compares the Write Counter\nin the request with the Write Counter stored in the controller. If the counters are different, then the controller\nsets the result to 0003h (counter failure) and no data is written to the RPMB data area.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 1369,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4344",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5881277322769165
  },
  {
    "content": "If the MAC and Write Counter comparisons are successful, then the write request is authenticated. The\nData from the request is written to the Address indicated in the request and the Write Counter is\nincremented by one.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 219,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4345",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37681272625923157
  },
  {
    "content": "If the write fails, then the returned result is 0005h (write failure). If another error occurs during the write\nprocedure, then the returned result is 0001h (general failure).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 175,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4346",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19279587268829346
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4347",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.018274404108524323
  },
  {
    "content": "The controller returns a successful completion for the Security Send command when the Authenticated\nData Write operation is completed regardless of whether the Authenticated Data Write was successful or\nnot.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 207,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4348",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14869053661823273
  },
  {
    "content": "The success of programming the data should be checked by the host by reading the result property of the\nRPMB:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 109,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4349",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23943066596984863
  },
  {
    "content": "1) The host initiates the Authenticated Data Write verification process by issuing a Security Send",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 98,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4350",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.37229156494140625
  },
  {
    "content": "command with delivery of a RPMB data frame containing the Request Message Type = 0005h;\n2) The controller returns a successful completion of the Security Send command when the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 175,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4351",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48848482966423035
  },
  {
    "content": "verification result is ready for retrieval;\n3) The host should then retrieve the verification result by issuing a Security Receive command; and\n4) The controller returns a successful completion of the Security Receive command and returns the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 241,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4352",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19640490412712097
  },
  {
    "content": "RPMB data frame containing the Response Message Type = 0300h, the incremented counter\nvalue, the data address, the MAC and result of the data programming operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4353",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15515555441379547
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4354",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18790176510810852
  },
  {
    "content": "**Figure 467: RPMB – Authenticated Data Write Flow**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4355",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47337105870246887
  },
  {
    "content": "|Command|Bytes in Command|Field Name|Value|Objective|\n|---|---|---|---|---|\n|Security<br>Send 1|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Program data<br>request|\n|Security<br>Send 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Send 1|222:222-(N-1)|MAC/Key|MAC generated by the host|MAC generated by the host|\n|Security<br>Send 1|223|RPMB Target|RPMB target to access|RPMB target to access|\n|Security<br>Send 1|239:224|Nonce|0…00h|0…00h|\n|Security<br>Send 1|243:240|Write Counter|Current Write Counter value|Current Write Counter value|\n|Security<br>Send 1|247:244|Address|Address in the RPMB|Address in the RPMB|\n|Security<br>Send 1|251:248|Sector Count|Number of 512B blocks|Number of 512B blocks|\n|Security<br>Send 1|253:252|Result|0000h|0000h|\n|Security<br>Send 1|255:254|Request/Response|0003h (Request)|0003h (Request)|\n|Security<br>Send 1|(M-1)+256:256|Data|Data to be written|Data to be written|\n|Security<br>Send 2|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Request Result of<br>data<br>programming|\n|Security<br>Send 2|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Send 2|222:222-(N-1)|MAC/Key|0…00h|0…00h|\n|Security<br>Send 2|223|RPMB Target|RPMB target to access|RPMB target to access|\n|Security<br>Send 2|239:224|Nonce|0…00h|0…00h|\n|Security<br>Send 2|243:240|Write Counter|00000000h|00000000h|\n|Security<br>Send 2|247:244|Address|00000000h|00000000h|\n|Security<br>Send 2|251:248|Sector Count|00000000h|00000000h|\n|Security<br>Send 2|253:252|Result|0000h|0000h|\n|Security<br>Send 2|255:254|Request/Response|0005h (Request)|0005h (Request)|\n|Security<br>Receive 1|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Retrieve Result<br>from data<br>programming|\n|Security<br>Receive 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Receive 1|222:222-(N-1)|MAC/Key|MAC generated by the<br>controller|MAC generated by the<br>controller|\n|Security<br>Receive 1|223|RPMB Target|RPMB target response was<br>sent from|RPMB target response was<br>sent from|\n|Security<br>Receive 1|239:224|Nonce|0…00h|0…00h|\n|Security<br>Receive 1|243:240|Write Counter|Incremented Write Counter<br>value|Incremented Write Counter<br>value|\n|Security<br>Receive 1|247:244|Address|Address in RPMB|Address in RPMB|\n|Security<br>Receive 1|251:248|Sector Count|00000000h|00000000h|\n|Security<br>Receive 1|253:252|Result|Result Code|Result Code|\n|Security<br>Receive 1|255:254|Request/Response|0300h (Response)|0300h (Response)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2774,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4356",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17574313282966614
  },
  {
    "content": "**8.18.2.4 Authenticated Data Read**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4357",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4055330455303192
  },
  {
    "content": "The Authenticated Data Read sequence is initiated by a Security Send command. The RPMB data frame\ndelivered from the host to the controller includes the Request Message Type = 0004h, Nonce, Address,\nand the Sector Count.\n\nWhen the controller receives this RPMB Data Frame, that controller first checks the Address. If there is an\nerror in the Address, then the result is set to 0004h (address failure) and the data read is not valid.\n\nWhen the host receives a successful completion of the Security Send command from the controller, that\nhost should send a Security Receive command to the controller to retrieve the data. The controller returns\nan RPMB Data Frame with Response Message Type (0400h), the Sector Count, a copy of the Nonce\nreceived in the request, the Address, the Data, the controller calculated MAC, and the Result. Note: It is\nthe responsibility of the host to verify the MAC returned on an Authenticated Data Read Request.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 940,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4358",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5456954836845398
  },
  {
    "content": "If the data transfer from the addressed location in the controller fails, the returned Result is 0006h (read\nfailure). If the Address provided in the Security Send command is not valid, then the returned Result is\n0004h (address failure). If another error occurs during the read procedure, then the returned Result is 0001h\n(general failure).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 342,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4359",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13926300406455994
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4360",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17002913355827332
  },
  {
    "content": "**Figure 468: RPMB – Authenticated Data Read Flow**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4361",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5087647438049316
  },
  {
    "content": "|Command|Bytes in Command|Field Name|Value|Objective|\n|---|---|---|---|---|\n|Security<br>Send 1|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Read Data<br>request|\n|Security<br>Send 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Send 1|222:222-(N-1)|MAC/Key|0..00h|0..00h|\n|Security<br>Send 1|223|RPMB Target|RPMB target to access|RPMB target to access|\n|Security<br>Send 1|239:224|Nonce|Nonce generated by the host|Nonce generated by the host|\n|Security<br>Send 1|243:240|Write Counter|00000000h|00000000h|\n|Security<br>Send 1|247:244|Address|Address in RPMB|Address in RPMB|\n|Security<br>Send 1|251:248|Sector Count|Number of 512B blocks|Number of 512B blocks|\n|Security<br>Send 1|253:252|Result|0000h|0000h|\n|Security<br>Send 1|255:254|Request/Response|0004h (Request)|0004h (Request)|\n|Security<br>Receive 1|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Retrieve result<br>and data from<br>read request|\n|Security<br>Receive 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Receive 1|222:222-(N-1)|MAC/Key|MAC generated by the<br>controller|MAC generated by the<br>controller|\n|Security<br>Receive 1|223|RPMB Target|RPMB target response was<br>sent from|RPMB target response was<br>sent from|\n|Security<br>Receive 1|239:224|Nonce|Copy of the Nonce generated<br>by the host|Copy of the Nonce generated<br>by the host|\n|Security<br>Receive 1|243:240|Write Counter|0000h|0000h|\n|Security<br>Receive 1|247:244|Address|Address in RPMB|Address in RPMB|\n|Security<br>Receive 1|251:248|Sector Count|Number of 512B blocks|Number of 512B blocks|\n|Security<br>Receive 1|253:252|Result|Result Code|Result Code|\n|Security<br>Receive 1|255:254|Request/Response|0400h (Response)|0400h (Response)|\n|Security<br>Receive 1|(M-1)+256:256|Data|Data read from RPMB target|Data read from RPMB target|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2028,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4362",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24502477049827576
  },
  {
    "content": "**Authenticated Device Configuration Block Write**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4363",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5573654770851135
  },
  {
    "content": "The Authenticated Device Configuration Block Write is initiated by a Security Send command. The RPMB\nData Frame delivered from the host to the controller includes the Request Message Type = 0006h, Sector\nCount = 01h, MAC, Write Counter set to the current Write Counter value, and the RPMB Device\nConfiguration Block data structure (refer to Figure 469). All other fields are cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 389,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4364",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5440230965614319
  },
  {
    "content": "If the Write Counter has expired, then that controller sets the result to 0005h (write failure, write counter\nexpired) and no data is written to the Device Configuration Block.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 176,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4365",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5444843769073486
  },
  {
    "content": "The controller calculates the MAC of Request Type, Block Count, Write Counter, Address and Data, and\ncompares this with the MAC in the request. If the MAC in the request and the calculated MAC are different,\nthen the controller sets the result to 0002h (authentication failure) and no data is written to the RPMB Device\nConfiguration Block.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 340,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4366",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6811730265617371
  },
  {
    "content": "If the Data from the RPMB Device Configuration Block attempts to disable Boot Partition Protection, then\nthe controller sets the result to 0008h (Invalid RPMB Device Configuration Block) and no data is written to\nthe RPMB Device Configuration Block.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 249,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4367",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49755859375
  },
  {
    "content": "If the MAC in the request and the calculated MAC are equal, then the write request is authenticated. The\nData from the request is written to the RPMB Device Configuration Block.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 177,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4368",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2732977569103241
  },
  {
    "content": "If any other error occurs during the write procedure, then the returned result is 0001h (general failure).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4369",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.358873575925827
  },
  {
    "content": "The controller returns a successful completion for the Security Send command when the Authenticated\nData Write operation is completed regardless of whether the Authenticated Device Configuration Block\nWrite was successful or not.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4370",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47929030656814575
  },
  {
    "content": "When the host receives a successful completion of the Security Send command from the controller, that\nhost should send a Security Receive command to the controller to retrieve the data. The controller returns\nan RPMB Data Frame with Response Message Type (0600h), the incremented counter value, the MAC,\nand the Result. All other fields are cleared to 0h.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 355,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4371",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07204090058803558
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4372",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1781562864780426
  },
  {
    "content": "The Write Counter for the Device Configuration Block is independent of the Write Counter for RPMB target\n0. Authenticated Device Configuration Block Writes do not affect the Write Counter for RPMB target 0 since\nthe data is not part of the RPMB data area. The current value of the Write Counter for the Device\nConfiguration Block may be read using an Authenticated Device Configuration Block Read (refer to section\n8.18.4).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 423,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4373",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6572555899620056
  },
  {
    "content": "**Figure 469: RPMB – Authenticated Device Configuration Block Write Flow**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 74,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4374",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.398432195186615
  },
  {
    "content": "|Command|Bytes in Command|Field Name|Value|Objective|\n|---|---|---|---|---|\n|Security<br>Send 1|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Request Device<br>Configuration<br>Block Write|\n|Security<br>Send 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Send 1|222:222-(N-1)|MAC/Key|MAC generated by the<br>host|MAC generated by the<br>host|\n|Security<br>Send 1|223|RPMB Target|00h|00h|\n|Security<br>Send 1|239:224|Nonce|0…00h|0…00h|\n|Security<br>Send 1|243:240|Write Counter|Current Write Counter<br>value|Current Write Counter<br>value|\n|Security<br>Send 1|247:244|Address|00000000h|00000000h|\n|Security<br>Send 1|251:248|Sector Count|00000001h|00000001h|\n|Security<br>Send 1|253:252|Result|0000h|0000h|\n|Security<br>Send 1|255:254|Request/Response|0006h (Request)|0006h (Request)|\n|Security<br>Send 1|767:256|Data|RPMB Device<br>Configuration Block data<br>structure|RPMB Device<br>Configuration Block data<br>structure|\n|Security<br>Send 2|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Request Result of<br>data<br>programming|\n|Security<br>Send 2|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Send 2|222:222-(N-1)|MAC/Key|0…00h|0…00h|\n|Security<br>Send 2|223|RPMB Target|RPMB target to access|RPMB target to access|\n|Security<br>Send 2|239:224|Nonce|0…00h|0…00h|\n|Security<br>Send 2|243:240|Write Counter|00000000h|00000000h|\n|Security<br>Send 2|247:244|Address|00000000h|00000000h|\n|Security<br>Send 2|251:248|Sector Count|00000000h|00000000h|\n|Security<br>Send 2|253:252|Result|0000h|0000h|\n|Security<br>Send 2|255:254|Request/Response|0005h (Request)|0005h (Request)|\n|Security<br>Receive 1|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Retrieve Device<br>Configuration<br>Block Write<br>Result|\n|Security<br>Receive 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Receive 1|222:222-(N-1)|MAC/Key|MAC generated by the<br>controller|MAC generated by the<br>controller|\n|Security<br>Receive 1|223|RPMB Target|00h|00h|\n|Security<br>Receive 1|239:224|Nonce|0…00h|0…00h|\n|Security<br>Receive 1|243:240|Write Counter|Incremented Write<br>Counter value|Incremented Write<br>Counter value|\n|Security<br>Receive 1|247:244|Address|00000000h|00000000h|\n|Security<br>Receive 1|251:248|Sector Count|00000000h|00000000h|\n|Security<br>Receive 1|253:252|Result|Result Code|Result Code|\n|Security<br>Receive 1|255:254|Request/Response|0600h (Response)|0600h (Response)|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 2725,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4375",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2786193788051605
  },
  {
    "content": "**Authenticated Device Configuration Block Read**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4376",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5273019075393677
  },
  {
    "content": "The Authenticated Device Configuration Block Read sequence is initiated by a Security Send command.\nThe RPMB data frame delivered from the host to the controller includes the Nonce, Request Message Type\n= 0007h and the Sector Count = 01h. All other fields are cleared to 0h.\n\nWhen the host receives a successful completion of the Security Send command from the controller, that\nhost should send a Security Receive command to the controller to retrieve the data. The controller returns\nan RPMB Data Frame with Response Message Type (0700h), the Sector Count = 01h, a copy of the Nonce",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 583,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4377",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16628022491931915
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4378",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14353929460048676
  },
  {
    "content": "received in the request, the RPMB Device Configuration Block Data Structure (refer to Figure 460), the\nMAC, the Write Counter set to the current Write Counter value, and the Result. All other fields are cleared\nto 0h.\n\nThe Write Counter for the Device Configuration Block is independent of the Write Counter for RPMB target\n0. The controller returns the Device Configuration Block Write Counter as shown in Figure 470.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 418,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4379",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.32314735651016235
  },
  {
    "content": "The MAC is calculated from Response Type, Nonce, Address, Data and Result fields. If the MAC calculation\nfails, then the returned result is 0002h (authentication failure). If another error occurs during the read\nprocedure, then the returned Result is 0001h (general failure).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 275,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4380",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24021567404270172
  },
  {
    "content": "**Figure 470: RPMB – Authenticated Device Configuration Block Read Flow**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 73,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4381",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34336239099502563
  },
  {
    "content": "|Command|Bytes in Command|Field Name|Value|Objective|\n|---|---|---|---|---|\n|Security<br>Send 1|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Data populated by the host and sent to the controller|Request Device<br>Configuration<br>Block Read|\n|Security<br>Send 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Send 1|222:222-(N-1)|MAC/Key|0..00h|0..00h|\n|Security<br>Send 1|223|RPMB Target|00h|00h|\n|Security<br>Send 1|239:224|Nonce|Nonce generated by the<br>host|Nonce generated by the<br>host|\n|Security<br>Send 1|243:240|Write Counter|00000000h|00000000h|\n|Security<br>Send 1|247:244|Address|00000000h|00000000h|\n|Security<br>Send 1|251:248|Sector Count|00000001h|00000001h|\n|Security<br>Send 1|253:252|Result|0000h|0000h|\n|Security<br>Send 1|255:254|Request/Response|0007h (Request)|0007h (Request)|\n|Security<br>Receive 1|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Data populated by the controller and returned to the host|Retrieve Device<br>Configuration<br>Block Read<br>Result|\n|Security<br>Receive 1|222-N:00|Stuff Bytes|0…00h|0…00h|\n|Security<br>Receive 1|222:222-(N-1)|MAC/Key|MAC generated by the<br>controller|MAC generated by the<br>controller|\n|Security<br>Receive 1|223|RPMB Target|00h|00h|\n|Security<br>Receive 1|239:224|Nonce|Copy of the Nonce<br>generated by the host|Copy of the Nonce<br>generated by the host|\n|Security<br>Receive 1|243:240|Write Counter|Current Write Counter value|Current Write Counter value|\n|Security<br>Receive 1|247:244|Address|00000000h|00000000h|\n|Security<br>Receive 1|251:248|Sector Count|00000001h|00000001h|\n|Security<br>Receive 1|253:252|Result|Result Code|Result Code|\n|Security<br>Receive 1|255:254|Request/Response|0700h (Response)|0700h (Response)|\n|Security<br>Receive 1|767:256|Data|RPMB Device<br>Configuration Block data<br>structure|RPMB Device<br>Configuration Block data<br>structure|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1981,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4382",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.012877985835075378
  },
  {
    "content": "**8.19 Reservations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4383",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35125747323036194
  },
  {
    "content": "NVM Express reservations provide capabilities that may be utilized by two or more hosts to coordinate\naccess to a shared namespace. The protocol and manner in which these capabilities are used is outside\nthe scope of this specification. Incorrect application of these capabilities may corrupt data and/or otherwise\nimpair system operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 339,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4384",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41969990730285645
  },
  {
    "content": "Reservation operation after a division event (refer to section 3.2.4.1) is described in section 3.2.4.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 104,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4385",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5117424130439758
  },
  {
    "content": "A reservation on a namespace restricts hosts access to that namespace. If a host submits a command to\na namespace in the presence of a reservation and lacks sufficient rights, then the command is aborted by\nthe controller with a status code of Reservation Conflict. If a host submits a command with the NSID set to\nFFFFFFFFh in the presence of a reservation on any of the namespaces impacted by that command and\nthat host lacks sufficient rights on all the impacted namespaces, then the command is aborted by the\ncontroller with a status code of Reservation Conflict. Capabilities are provided that allow recovery from a\nreservation on a namespace held by a failing or uncooperative host.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 688,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4386",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21278634667396545
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4387",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23228532075881958
  },
  {
    "content": "**Figure 471: Example Multi-Host System**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4388",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4356415569782257
  },
  {
    "content": "A reservation requires an association between a host and a namespace. As shown in Figure 471, each\ncontroller in a multi-path I/O and namespace sharing environment is associated with exactly one host. While\nit is possible to construct systems where two or more hosts share a single controller, such usage is outside\nthe scope of this specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 348,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4389",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5897250771522522
  },
  {
    "content": "A host may be associated with multiple controllers. In Figure 471 host A is associated with two controllers\nwhile hosts B and C are each associated with a single controller. A host registers a Host Identifier (refer to\nsection 5.27.1.25) with each controller with which that host is associated using a Set Features command\n(refer to section 5.27) prior to performing any operations associated with reservations. The Host Identifier\nallows the NVM subsystem to identify controllers associated with the same host and preserve reservation\nproperties across these controllers (i.e., a host issued command has the same reservation rights no matter\nwhich controller associated with the host processes the command).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 708,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4390",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5472647547721863
  },
  {
    "content": "Support for reservations by a namespace or controller is optional. A namespace indicates support for\nreservations by reporting a non-zero value in the Reservation Capabilities (RESCAP) field in the Identify\nNamespace data structure. A controller indicates support for reservations through the Optional NVM\nCommand Support (ONCS) field in the Identify Controller data structure (refer to Figure 275). If a host\nsubmits a command associated with reservations (i.e., Reservation Report, Reservation Register,\nReservation Acquire, and Reservation Release) to a controller or a namespace that do not both support\nreservations, then the command is aborted by the controller with a status code of Invalid Command Opcode.\n\nControllers that make up an NVM subsystem shall all have the same support for reservations. Although\nstrongly encouraged, namespaces that make up an NVM subsystem are not all required to have the same\nsupport for reservations. For example, some namespaces within a single controller may support\nreservations while others do not, or the supported reservation types may differ among namespaces. If a\ncontroller supports reservations, then the controller shall:\n\n- Indicate support for reservations by returning a '1' in bit 5 of the Optional NVM Command Support\n(ONCS) field in the Identify Controller data structure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1330,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4391",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5955582857131958
  },
  {
    "content": "- Support the Reservation Report command (refer to section 7.5), Reservation Register command\n(refer to section 7.3), Reservation Acquire command (refer to section 7.1), and Reservation\nRelease command (refer to section 7.4);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 225,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4392",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.653799831867218
  },
  {
    "content": "- Support the Reservation Notification log page;\n\n- Support the Reservation Log Page Available asynchronous events;\n\n- Support the Reservation Notification Mask Feature;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4393",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1598527580499649
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4394",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2306264191865921
  },
  {
    "content": "- Support the Host Identifier Feature; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4395",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1363639384508133
  },
  {
    "content": "- Support the Reservation Persistence Feature.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4396",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47843968868255615
  },
  {
    "content": "If a namespace supports reservations, then the namespace shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4397",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6406247019767761
  },
  {
    "content": "- Report a non-zero value in the Reservation Capabilities (RESCAP) field in the Identify Namespace\ndata structure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 114,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4398",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14418445527553558
  },
  {
    "content": "- Support Persist Through Power Loss (PTPL) state; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4399",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23200933635234833
  },
  {
    "content": "- Support sufficient resources to allow a host to successfully register a reservation key on every\ncontroller in the NVM subsystem with access to the shared namespace (i.e., a Reservation Register\ncommand shall never fail due to lack of resources).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 248,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4400",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5039518475532532
  },
  {
    "content": "NOTE: The behavior of Ignore Existing Key has been changed to improve compatibility with SCSI based\nimplementations. Conformance to the modified behavior is indicated in the Reservation Capabilities\n(RESCAP) field of the Identify Namespace data structure. For the previous definition of Ignore Existing Key\nbehavior, refer to NVM Express Base Specification revision 1.2.1.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 372,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4401",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23745910823345184
  },
  {
    "content": "**Reservation Types**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 21,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4402",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6112741231918335
  },
  {
    "content": "The NVM Express interface supports six types of reservations:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4403",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1352314054965973
  },
  {
    "content": "- Write Exclusive - Registrants Only;\n\n- Exclusive Access - Registrants Only;\n\n- Write Exclusive - All Registrants; and\n\n- Exclusive Access - All Registrants.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 158,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4404",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16173255443572998
  },
  {
    "content": "**Figure 472: Command Behavior in the Presence of a Reservation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4405",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.415345162153244
  },
  {
    "content": "|Reservation Type|Reservation<br>Holder|Col3|Registrant|Col5|Non-<br>Registrant|Col7|Reservation Holder Definition|\n|---|---|---|---|---|---|---|---|\n|Reservation Type|Read|Write|Read|Write|Read|Write|Write|\n|Write Exclusive|Y|Y|Y|N|Y|N|One Reservation Holder|\n|Exclusive Access|Y|Y|N|N|N|N|One Reservation Holder|\n|Write Exclusive -<br>Registrants Only|Y|Y|Y|Y|Y|N|One Reservation Holder|\n|Exclusive Access -<br>Registrants Only|Y|Y|Y|Y|N|N|One Reservation Holder|\n|Write Exclusive - All<br>Registrants|Y|Y|Y|Y|Y|N|All Registrants are Reservation<br>Holders|\n|Exclusive Access - All<br>Registrants|Y|Y|Y|Y|N|N|All Registrants are Reservation<br>Holders|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 654,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4406",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5025607943534851
  },
  {
    "content": "The differences between these reservation types are: the type of access that is excluded (i.e., writes or all\naccesses), whether registrants have the same access rights as the reservation holder, and whether\nregistrants are also considered to be reservation holders. These differences are summarized in Figure 472\nand the specific behavior for each NVM Express command is shown in Figure 473.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 392,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4407",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5016140937805176
  },
  {
    "content": "Reservations and registrations persist across all Controller Level Resets and all NVM Subsystem Resets\nexcept reset due to power loss. A reservation may be optionally configured to be retained across a reset\ndue to power loss using the Persist Through Power Loss State (PTPLS). A Persist Through Power Loss\nState (PTPLS) is associated with each namespace that supports reservations and may be modified as a\nside effect of a Reservation Register command (refer to section 7.3) or a Set Features command (refer to\nsection 5.27).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 526,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4408",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.35396355390548706
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4409",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21067535877227783
  },
  {
    "content": "**Figure 473: Command Behavior in the Presence of a Reservation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 65,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4410",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3524077236652374
  },
  {
    "content": "|NVMe Command|Write<br>Exclusive<br>Reservation|Col3|Exclusive<br>Access<br>Reservation|Col5|Write Exclusive<br>Registrants Only<br>or<br>Write Exclusive<br>All Registrants<br>Reservation|Col7|Exclusive Access<br>Registrants Only<br>or<br>Exclusive Access<br>All Registrants<br>Reservation|Col9|\n|---|---|---|---|---|---|---|---|---|\n|NVMe Command|Non-Registrant|Registrant|Non-Registrant|Registrant|Non-Registrant|Registrant|Non-Registrant|Registrant|\n|Copy Command Group|Copy Command Group|Copy Command Group|Copy Command Group|Copy Command Group|Copy Command Group|Copy Command Group|Copy Command Group|Copy Command Group|\n|2<br>I/O Command Set specific Copy Commands|C|C|C|C|C|A|C|A|\n|Read Command Group|Read Command Group|Read Command Group|Read Command Group|Read Command Group|Read Command Group|Read Command Group|Read Command Group|Read Command Group|\n|Security Receive (Admin)<br>2<br>I/O Command Set specific Read Commands|A|A|C|C|A|A|C|A|\n|Write Command Group|Write Command Group|Write Command Group|Write Command Group|Write Command Group|Write Command Group|Write Command Group|Write Command Group|Write Command Group|\n|Capacity Management (Admin)<br>Flush<br>Format NVM (Admin)<br>Namespace Attachment (Admin)<br>Namespace Management (Admin)<br>Sanitize (Admin)<br>Security Send (Admin)<br>2<br>I/O Command Set specific Write Commands|C|C|C|C|C|A|C|A|\n|Reservation Command Groups|Reservation Command Groups|Reservation Command Groups|Reservation Command Groups|Reservation Command Groups|Reservation Command Groups|Reservation Command Groups|Reservation Command Groups|Reservation Command Groups|\n|Reservation Acquire - Acquire|C|C|C|C|C|C|C|C|\n|Reservation Acquire - Preempt<br>Reservation Acquire - Preempt and Abort<br>Reservation Release|C|A|C|A|C|A|C|A|\n|All Other Commands Group|All Other Commands Group|All Other Commands Group|All Other Commands Group|All Other Commands Group|All Other Commands Group|All Other Commands Group|All Other Commands Group|All Other Commands Group|\n|1<br>All other commands|A|A|A|A|A|A|A|A|\n|Key:<br>A definition: A=Allowed, command processed normally by the controller<br>C definition: C=Conflict, command aborted by the controller with a status code of Reservation Conflict<br>Notes:<br>1. The behavior of a vendor specific command is vendor specific.<br>2. Refer to the applicable I/O Command Set specification|Key:<br>A definition: A=Allowed, command processed normally by the controller<br>C definition: C=Conflict, command aborted by the controller with a status code of Reservation Conflict<br>Notes:<br>1. The behavior of a vendor specific command is vendor specific.<br>2. Refer to the applicable I/O Command Set specification|Key:<br>A definition: A=Allowed, command processed normally by the controller<br>C definition: C=Conflict, command aborted by the controller with a status code of Reservation Conflict<br>Notes:<br>1. The behavior of a vendor specific command is vendor specific.<br>2. Refer to the applicable I/O Command Set specification|Key:<br>A definition: A=Allowed, command processed normally by the controller<br>C definition: C=Conflict, command aborted by the controller with a status code of Reservation Conflict<br>Notes:<br>1. The behavior of a vendor specific command is vendor specific.<br>2. Refer to the applicable I/O Command Set specification|Key:<br>A definition: A=Allowed, command processed normally by the controller<br>C definition: C=Conflict, command aborted by the controller with a status code of Reservation Conflict<br>Notes:<br>1. The behavior of a vendor specific command is vendor specific.<br>2. Refer to the applicable I/O Command Set specification|Key:<br>A definition: A=Allowed, command processed normally by the controller<br>C definition: C=Conflict, command aborted by the controller with a status code of Reservation Conflict<br>Notes:<br>1. The behavior of a vendor specific command is vendor specific.<br>2. Refer to the applicable I/O Command Set specification|Key:<br>A definition: A=Allowed, command processed normally by the controller<br>C definition: C=Conflict, command aborted by the controller with a status code of Reservation Conflict<br>Notes:<br>1. The behavior of a vendor specific command is vendor specific.<br>2. Refer to the applicable I/O Command Set specification|Key:<br>A definition: A=Allowed, command processed normally by the controller<br>C definition: C=Conflict, command aborted by the controller with a status code of Reservation Conflict<br>Notes:<br>1. The behavior of a vendor specific command is vendor specific.<br>2. Refer to the applicable I/O Command Set specification|Key:<br>A definition: A=Allowed, command processed normally by the controller<br>C definition: C=Conflict, command aborted by the controller with a status code of Reservation Conflict<br>Notes:<br>1. The behavior of a vendor specific command is vendor specific.<br>2. Refer to the applicable I/O Command Set specification|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 4942,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4411",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19386911392211914
  },
  {
    "content": "**Reservation Notifications**\n\nThere are three types of reservation notifications: registration preempted, reservation released, and\nreservation preempted. Conditions that cause a reservation notification to occur are described in the\nfollowing sections. A Reservation Notification log page is created whenever an unmasked reservation\nnotification occurs on a namespace associated with the controller (refer to section 5.16.1.24). Reservation\nnotifications may be masked from generating a Reservation Notification log page on a per reservation\nnotification type and per namespace ID basis through the Reservation Notification Mask feature (refer to\nsection 5.27.1.26). A host may use the Asynchronous Event Request command (refer to section 5.2) to be\nnotified of the presence of one or more available Reservation Notification log pages (refer to section\n5.16.1.24).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 866,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4412",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17520396411418915
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4413",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24734221398830414
  },
  {
    "content": "Prior to establishing a reservation on a namespace, a host shall become a registrant of that namespace by\nregistering a reservation key. This reservation key may be used by the host as a means of identifying the\nregistrant (host), authenticating the registrant, and preempting a failed or uncooperative registrant. The\nvalue of the reservation key used by a host and the method used to select its value is outside the scope of\nthis specification.\n\nRegistering a reservation key with a namespace creates an association between a host and a namespace.\nA host that is a registrant of a namespace may use any controller with which that host is associated (i.e.,\nthat has the same Host Identifier, refer to section 5.27.1.25) to access that namespace as a registrant.\nThus, a host is only required to register on a single controller to become a registrant of the namespace on\nall controllers in the NVM subsystem that have access to the namespace and are associated with the host.\n\nA host registers a reservation key by executing a Reservation Register command (refer to section 7.3) on\nthe namespace with the Reservation Register Action (RREGA) field cleared to 000b (i.e., Register\nReservation Key) and supplying a reservation key in the New Reservation Key (NRKEY) field.\n\nA host that is a registrant of a namespace may register the same reservation key value multiple times with\nthe namespace on the same or different controllers. For a Reservation Register command with the RREGA\nfield cleared to 000b:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 1502,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4414",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4872114956378937
  },
  {
    "content": "a) the IEKEY field shall be ignored; and\nb) if a host that is already a registrant of a namespace attempts to register with that namespace using",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 144,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4415",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.33646300435066223
  },
  {
    "content": "a different registration key value, then the command shall be aborted with a status code of\nReservation Conflict.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 113,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4416",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5999832153320312
  },
  {
    "content": "There are no restrictions on the reservation key value used by hosts with different Host Identifiers. For\nexample, multiple hosts may all register with the same reservation key value.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 183,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4417",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.697353184223175
  },
  {
    "content": "A host that is a registrant of a namespace may replace the existing reservation key value for that\nnamespace by executing a Reservation Register command on the namespace with the:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 179,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4418",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6075376272201538
  },
  {
    "content": "a) RREGA field set to 010b (i.e., Replace Reservation Key);\nb) current reservation key in the Current Reservation Key (CRKEY) field; and\nc) new reservation key in the NRKEY field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 179,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4419",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.671674907207489
  },
  {
    "content": "The current reservation key value shall be replaced by the new reservation key value in all controllers to\nwhich the namespace is attached that have the same Host Identifier as the Host Identifier of the controller\nprocessing the command. If the contents of the CRKEY field do not match the key currently associated with\nthe host, then the command shall be aborted with a status code of Reservation Conflict. A host may replace\nits reservation key without regard to its registration status or current reservation key value by setting the\nIgnore Existing Key (IEKEY) bit to '1' in the Reservation Register command. Replacing a reservation key\nhas no effect on any reservation that may be held on the namespace.\n\nA host that is a registrant of a namespace may unregister with the namespace by executing a Reservation\nRegister command (refer to section 7.3) on the namespace with the RREGA field set to 001b (i.e.,\nUnregister Reservation Key) and supplying its current reservation key in the CRKEY field. If the contents\nof the CRKEY field do not match the key currently associated with the host, then the command is aborted\nwith a status code of Reservation Conflict. If the host is not a registrant, then the command is aborted with\na status code of Reservation Conflict.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1270,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4420",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.7670735716819763
  },
  {
    "content": "Successful completion of an unregister operation causes the host to no longer be a registrant of that\nnamespace. A host may unregister without regard to its current reservation key value by setting the IEKEY\nbit to '1' in the Reservation Register command.\n\nUnregistering by a host may cause a reservation held by the host to be released. If a host is the last\nremaining reservation holder (i.e., the reservation type is Write Exclusive - All Registrants or Exclusive\nAccess - All Registrants) or is the only reservation holder, then the reservation is released when the host\nunregisters.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 587,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4421",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.21813420951366425
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4422",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22274257242679596
  },
  {
    "content": "If a reservation is released and the type of the released reservation was Write Exclusive - Registrants Only\nor Exclusive Access - Registrants Only, then a reservation released notification occurs on all controllers\nassociated with a registered host other than the host that issued the Reservation Register command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 315,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4423",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.535329282283783
  },
  {
    "content": "**Acquiring a Reservation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4424",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5892371535301208
  },
  {
    "content": "In order for a host to obtain a reservation on a namespace, that host shall be a registrant of that namespace.\nA registrant obtains a reservation by executing a Reservation Acquire command (refer to section 7.1),\nclearing the Reservation Acquire Action (RACQA) field to 000b (Acquire), and supplying the current\nreservation key associated with the host in the Current Reservation Key (CRKEY) field. The CRKEY value\nshall match that used by the registrant to register with the namespace. If the CRKEY value does not match,\nthen the command is aborted with a status code of Reservation Conflict. If the host is not a registrant, then\nthe command is aborted with a status code of Reservation Conflict.\n\nOnly one reservation is allowed at a time on a namespace. If a registrant attempts to obtain a reservation\non a namespace that already has a reservation holder, then the command is aborted with a status code of\nReservation Conflict. If a reservation holder attempts to obtain a reservation of a different type on a\nnamespace for which that host already is the reservation holder, then the command is aborted with a status\ncode of Reservation Conflict. If a reservation holder attempts to obtain a reservation of the same type on a\nnamespace for which that host already is the reservation holder, then it is not a Reservation Conflict and\nthe command is processed. A reservation holder may preempt a reservation to change the reservation type.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 1442,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4425",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.581016480922699
  },
  {
    "content": "**Releasing a Reservation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 27,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4426",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6634823679924011
  },
  {
    "content": "Only a reservation holder is able to release a reservation held on a namespace. A host should release a\nreservation using the following sequence:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 145,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4427",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6622536182403564
  },
  {
    "content": "a) executing a Reservation Release command (refer to section 7.4);\nb) clearing the Reservation Release Action (RRELA) field to 000b (i.e., Release);\nc) setting the Reservation Type (RTYPE) field to the type of reservation being released; and\nd) supplying the current reservation key associated with the host in the Current Reservation Key",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 338,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4428",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31073617935180664
  },
  {
    "content": "(CRKEY) field. The CRKEY value shall match that used by the host to register with the namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4429",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29694095253944397
  },
  {
    "content": "If the key value doesn’t match, then the command is aborted with a status code of Reservation Conflict. If\nthe RTYPE field does not match the type of the current reservation, then the command completes with a\nstatus code of Invalid Field in Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 249,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4430",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4440493583679199
  },
  {
    "content": "An attempt by a registrant to release a reservation using the Reservation Release command in the absence\nof a reservation held on the namespace or when the host is not the reservation holder shall cause the\ncommand to complete successfully, but shall have no effect on the controller or namespace.\n\nWhen a reservation is released as a result of actions described in this section and the reservation type is\nnot Write Exclusive or Exclusive Access, a reservation released notification occurs on all controllers in the\nNVM subsystem that are associated with hosts that are registrants except for controllers that are associated\nwith the host that issued the Reservation Release command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 684,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4431",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5500968098640442
  },
  {
    "content": "**Preempting a Reservation or Registration**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4432",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.639032244682312
  },
  {
    "content": "A host that is a registrant may preempt a reservation and/or registration by executing a Reservation Acquire\ncommand (refer to section 7.1), setting the Reservation Acquire Action (RACQA) field to 001b (Preempt),\nand supplying the current reservation key associated with the host in the Current Reservation Key (CRKEY)\nfield. The CRKEY value shall match that used by the registrant to register with the namespace. If the\nCRKEY value does not match, then the command is aborted with a status code of Reservation Conflict.\nThe preempt actions that occur are dependent on the type of reservation held on the namespace, if any,\nand the value of the Preempt Reservation Key (PRKEY) field in the command. If the host is not a registrant,\nthen the command is aborted with a status code of Reservation Conflict. The remainder of this section\nassumes that the host is a registrant.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 872,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4433",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6559436917304993
  },
  {
    "content": "If the existing reservation type is not Write Exclusive - All Registrants and not Exclusive Access - All\nRegistrants, then the actions performed by the command depend on the value of the PRKEY field as\nfollows:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4434",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16741621494293213
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4435",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18465326726436615
  },
  {
    "content": "a) If the PRKEY field value matches the reservation key of the current reservation holder, then the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 99,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4436",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19049499928951263
  },
  {
    "content": "following occur as an atomic operation:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4437",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.03325336426496506
  },
  {
    "content": "- all registrants with a matching registration key other than the host that issued the command\nare unregistered;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 112,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4438",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10279649496078491
  },
  {
    "content": "- the reservation is released; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4439",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5451056957244873
  },
  {
    "content": "- a new reservation is created of the type specified by the Reservation Type (RTYPE) field in the\ncommand for the host that issued the command as the reservation key holder;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 173,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4440",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.584395706653595
  },
  {
    "content": "b) If the PRKEY field value does not match that of the current reservation holder and is not equal to\n\n0h, then registrants whose reservation key matches the value of the PRKEY field are unregistered.\nIf the PRKEY field value does not match that of the current reservation holder and is equal to 0h,\nthen the command is aborted with a status code of Invalid Field in Command.\n\nIf the existing reservation type is Write Exclusive - All Registrants or Exclusive Access - All Registrants,\nthen the actions performed by the command depend on the value of the PRKEY field as follows:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 578,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4441",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5155284404754639
  },
  {
    "content": "a) If the PRKEY field value is 0h, then the following occurs as an atomic operation:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 84,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4442",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12802888453006744
  },
  {
    "content": "- all registrants other than the host that issued the command are unregistered;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 79,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4443",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12363553047180176
  },
  {
    "content": "- the reservation is released; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4444",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5451056957244873
  },
  {
    "content": "- a new reservation is created of the type specified by the Reservation Type (RTYPE) field in the\ncommand for the host that issued the command as the reservation key holder;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 173,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4445",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5791215896606445
  },
  {
    "content": "b) If the PRKEY value is non-zero, then registrants whose reservation key matches the value of the\n\nPRKEY field are unregistered. If the PRKEY value is non-zero and there are no registrants whose\nreservation key matches the value of the PRKEY field, the controller should return an error of\nReservation Conflict.\n\nIf there is no reservation held on the namespace, then execution of the command causes registrants whose\nreservation key match the value of the PRKEY field to be unregistered.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 489,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4446",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5976322889328003
  },
  {
    "content": "If the existing reservation type is not Write Exclusive - All Registrants and not Exclusive Access - All\nRegistrants, then a reservation holder may preempt itself using the above mechanism. When a host\npreempts itself the following occurs as an atomic operation:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 262,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4447",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46066027879714966
  },
  {
    "content": "- registration of the host is maintained;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4448",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24303534626960754
  },
  {
    "content": "- the reservation is released; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 34,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4449",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.524395227432251
  },
  {
    "content": "- a new reservation is created for the host of the type specified by the RTYPE field.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4450",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48999136686325073
  },
  {
    "content": "A host may abort commands as a side effect of preempting a reservation by executing a Reservation\nAcquire command (refer to section 7.1) and setting the RACQA field to 010b (Preempt and Abort). The\nbehavior of such a command is exactly the same as that described above with the RACQA field set to 001b\n(Preempt), with two exceptions:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 333,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4451",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5907102823257446
  },
  {
    "content": "- After the atomic operation changes namespace reservation and registration state, all controllers\nassociated with any host whose reservation or registration is preempted by that atomic operation\nare requested to abort all commands being processed that were addressed to the namespace\nspecified in the Namespace Identifier field (i.e., the NSID field in the Reservation Acquire\ncommand) (refer to section 3.4.4 for the definition of “being processed”); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 456,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4452",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5434602499008179
  },
  {
    "content": "- Completion of the Reservation Acquire command shall not occur until all commands that are\nrequested to be aborted are completed, regardless of whether or not each command is actually\naborted.\n\nAs with the Abort command (refer to section 5.1), aborting a command as a side effect of preempting a\nreservation is best effort; as a command that is requested to be aborted may currently be at a point in\nexecution where that command is no longer able to be aborted or may have already completed, when a\nReservation Acquire or Abort Admin command is submitted. Although prompt execution of abort requests",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 600,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4453",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09395663440227509
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4454",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13731667399406433
  },
  {
    "content": "reduces delay in completing the Reservation Acquire command, a command which is requested to be\naborted shall either be aborted or otherwise completed before the completion of the Reservation Acquire\ncommand.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 208,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4455",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5020812153816223
  },
  {
    "content": "When a registrant is unregistered as a result of actions described in this section, then a registration\npreempted notification occurs on all controllers associated with a host that was unregistered other than the\nhost that issued the Reservation Acquire command.\n\nWhen the type of reservation held on a namespace changes as a result of actions described in this section,\nthen a reservation released notification occurs on all controllers associated with hosts that remain\nregistrants of the namespace except the host that issued the Reservation Acquire command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 561,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4456",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4648166596889496
  },
  {
    "content": "**Clearing a Reservation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 26,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4457",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5461392998695374
  },
  {
    "content": "A host that is a registrant may clear a reservation (i.e., force the release of a reservation held on the\nnamespace and unregister all registrants) by:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 151,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4458",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5791424512863159
  },
  {
    "content": "a) executing a Reservation Release command (refer to section 7.4);\nb) setting the Reservation Release Action (RRELA) field to 001b (i.e., Clear); and\nc) supplying the current reservation key associated with the host in the Current Reservation Key",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 246,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4459",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.598399817943573
  },
  {
    "content": "If the value in the CRKEY field does not match the value used by the host to register with the namespace,\nthen the command shall be aborted with a status code of Reservation Conflict. If the host is not a registrant,\nthen the command is aborted with a status code of Reservation Conflict. When a command to clear a\nreservation is executed the following occur as an atomic operation: the reservation held on the namespace,\nif any, is released, and all registrants are unregistered from the namespace.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 499,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4460",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47938311100006104
  },
  {
    "content": "A reservation preempted notification occurs on all controllers in the NVM subsystem that are associated\nwith hosts that have their registrations removed as a result of actions taken in this section except those\nassociated with the host that issued the Reservation Release command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 280,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4461",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5264105796813965
  },
  {
    "content": "**Reporting Reservation Status**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4462",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.535672664642334
  },
  {
    "content": "A host may determine the current reservation status associated with a namespace by executing a\nReservation Report command (refer to section 7.5).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 145,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4463",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.011234770528972149
  },
  {
    "content": "**8.20 Rotational Media**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4464",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5910375118255615
  },
  {
    "content": "Rotational media has different operational, endurance and performance characteristics than non-rotational\nmedia (e.g., NAND). Rotational media utilizes electromechanical methods for accessing data.\n\nRotational media contains one or more spinning platters containing the media, and one or more actuators\nthat provide physical access to the data on that media (e.g., a hard disk drive or a CD-ROM).\nA controller that supports namespaces that store user data on rotational media shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 482,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4465",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3683772087097168
  },
  {
    "content": "a) set the Rotational Media bit to ‘1’ in the NSFEAT field of the I/O Command Set Independent Identify",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4466",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5057483315467834
  },
  {
    "content": "Namespace data structure (refer to the NVM Command Set Specification) for any namespace that\nstores data on rotational media;\nb) support the Rotational Media Information log page (refer to section 5.16.1.21);\nc) support the Spinup Control feature (refer to section 5.27.1.22);\nd) support Endurance Groups (refer to section 3.2.3); and\ne) set the EG Rotational Media bit to ‘1’ in the EGFEAT field in the Endurance Group Information log",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 435,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4467",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6063766479492188
  },
  {
    "content": "page for each Endurance Group that stores data on rotational media.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4468",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3053542375564575
  },
  {
    "content": "If a namespace that stores data on rotational media is attached to a controller, and the spindle used by\nthat namespace is not spinning, then that controller shall be in a non-operational power state (i.e., NOPS\nis set to ‘1’, refer to Figure 276).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 248,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4469",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38841816782951355
  },
  {
    "content": "a) a domain contains an Endurance Group that stores data on rotational meida;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 77,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4470",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1583620309829712
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4471",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3694303631782532
  },
  {
    "content": "b) that domain processes an NVM Subsystem Reset; and\nc) the Spinup Control feature (refer to section 5.27.1.22) is:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 115,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4472",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5269471406936646
  },
  {
    "content": "a. disabled, then initial spinup for all such Endurnce Groups in that domain shall be initiated;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4473",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6642562747001648
  },
  {
    "content": "and\nb. enabled, then initial spinup for all such Endurance Groups in that domain shall be",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4474",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29712405800819397
  },
  {
    "content": "inhibited during processing of the NVM Subsystem Reset until the controller processes a\nSet Features (Power Management) command that specifies an operational power state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 170,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4475",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3107669949531555
  },
  {
    "content": "If the PCIe transport is used for a controller, then the PCIe Slot Power Control feature may affect the\npower states supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4476",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.0825154036283493
  },
  {
    "content": "**8.21 Sanitize Operations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 28,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4477",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4407426714897156
  },
  {
    "content": "A sanitize operation alters all user data in the NVM subsystem such that recovery of any previous user data\nfrom any cache, the non-volatile media, or any Controller Memory Buffer is not possible. It is implementation\nspecific whether Submission Queues and Completion Queues within a Controller Memory Buffer are altered\nby a sanitize operation; all other data stored in all Controller Memory Buffers is altered by a sanitize\noperation. If a portion of the user data was not altered and the sanitize operation completed successfully,\nthen the NVM subsystem shall ensure permanent inaccessibility of that portion of the user data for any\nfuture use within the NVM subsystem (e.g., retrieval from NVM media, caches, or any Controller Memory\nBuffer) and permanent inaccessibility of that portion of the user data via any interface to the NVM\nsubsystem, including management interfaces as defined by the NVM Express Management Interface\nSpecification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 947,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4478",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.8145996332168579
  },
  {
    "content": "The scope of a sanitize operation is all locations in the NVM subsystem that are able to contain user data,\nincluding caches, Persistent Memory Regions, and unallocated or deallocated areas of the media. If the\ncomposition of the NVM subsystem (refer to section 3.2.4) changes (e.g., a new domain is added, or a\ndivision event occurs) and that change prevents the successful completion of a sanitize operation, then the\nsanitize operation shall fail. Sanitize operations do not affect the Replay Protected Memory Block, boot\npartitions, or other media and caches that do not contain user data. A sanitize operation also may alter log\npages as necessary (e.g., to prevent derivation of user data from log page information). A sanitize operation\nis only able to be started if the NVM subsystem is not divided (refer to section 3.2.4). Once started, a\nsanitize operation is not able to be aborted and continues after a Controller Level Reset including across\npower cycles. Refer to Annex A for further information about sanitize operations.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1037,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4479",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5754984021186829
  },
  {
    "content": "The Sanitize command (refer to section 5.24) is used to start a sanitize operation or to recover from a\npreviously failed sanitize operation. All sanitize operations are performed in the background (i.e., completion\nof the Sanitize command does not indicate completion of the sanitize operation). The completion of a\nsanitize operation is indicated in the Sanitize Status log page, and with either the Sanitize Operation\nCompleted asynchronous event or the Sanitize Operation Completed With Unexpected Deallocation\nasynchronous event (if an Asynchronous Event Request Command is outstanding).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 592,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4480",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43098631501197815
  },
  {
    "content": "The Sanitize Capabilities (SANICAP) field of the Identify Controller data structure (refer to Figure 275)\nindicates the sanitize operation types supported and controller attributes specific to sanitize operations.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 213,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4481",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5584865212440491
  },
  {
    "content": "The sanitize operation types are:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4482",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42791640758514404
  },
  {
    "content": "- The Block Erase sanitize operation alters user data with a low-level block erase method that is\nspecific to the media for all locations on the media within the NVM subsystem in which user data\nmay be stored;\n\n- The Crypto Erase sanitize operation alters user data by changing the media encryption keys for all\nlocations on the media within the NVM subsystem in which user data may be stored; and\n\n- The Overwrite sanitize operation alters user data by writing a fixed data pattern or related patterns\nto all locations on the media within the NVM subsystem in which user data may be stored one or\nmore times. Figure 474 defines the data pattern or patterns that are written.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 675,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4483",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46102458238601685
  },
  {
    "content": "Controller attributes specific to sanitize operations include:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4484",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13973818719387054
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4485",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2497376948595047
  },
  {
    "content": "- The No-Deallocate Modifies Media After Sanitize (NODMMAS) field which indicates if media is\nmodified by the controller after a sanitize operation successfully completes that had been\nrequested with No-Deallocate After Sanitize set to ‘1’ in the Sanitize command that started the\nsanitize operation; and\n\n- No-Deallocate Inhibited (NDI) bit which indicates if the controller supports the No-Deallocate After\nSanitize bit in the Sanitize Command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 446,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4486",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6759294867515564
  },
  {
    "content": "The NODMMAS field in the Identify Controller data structure (refer to Figure 275), specifies that if a Sanitize\ncommand includes No-Deallocate After Sanitize set to ‘1’ and NODMMAS is set to 10b, then a sanitize\noperation has an associated additional media modification operation. This additional media modification\noperation acts upon the results of the requested sanitize operation with the purpose of making all LBA\ncontents readable. Refer to Annex A.3 for further information about sanitize operations and interactions\nwith integrity circuits.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 548,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4487",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.38296377658843994
  },
  {
    "content": "This additional media modification shall complete before the NVM subsystem:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 75,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4488",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22005733847618103
  },
  {
    "content": "a) reports sanitize completion by Asynchronous Event (refer to section 5.2); and\nb) reports sanitize completion in the Sanitize Status log (refer to section 5.16.1.25).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 168,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4489",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42437055706977844
  },
  {
    "content": "The Overwrite sanitize operation is media specific and may not be appropriate for all media types. For\nexample, if the media is NAND, multiple pass overwrite operations may have an adverse effect on media\nendurance.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 215,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4490",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5608188509941101
  },
  {
    "content": "**Figure 474: Sanitize Operations – Overwrite Mechanism**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4491",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41811704635620117
  },
  {
    "content": "|1<br>OIPBP|Overwrite<br>1<br>Pass Count|Overwrite<br>Pass Number|User Data except PI Metadata|2<br>Protection Information|\n|---|---|---|---|---|\n|‘0’|All|All|1<br>Overwrite Pattern|Each byte set to FFh|\n|‘1’|Even|First|1<br>Inversion of Overwrite Pattern|Each byte cleared to 00h|\n|‘1’|Even|Subsequent|1<br>Inversion of Overwrite Pattern from previous pass (i.e., each bit<br>XORed with ‘1’)|1<br>Inversion of Overwrite Pattern from previous pass (i.e., each bit<br>XORed with ‘1’)|\n|‘1’|Odd|First|1<br>Overwrite Pattern|Each byte set to FFh|\n|‘1’|Odd|Subsequent|1<br>Inversion of Overwrite Pattern from previous pass (i.e., each bit<br>XORed with ‘1’)|1<br>Inversion of Overwrite Pattern from previous pass (i.e., each bit<br>XORed with ‘1’)|\n|Notes:<br>1. Parameters are specified in Command Dword 10 and Command Dword 11 of the corresponding Sanitize<br>command that started the Overwrite operation. The Overwrite Invert Pattern Between Passes (OIPBP) field is<br>defined in Command Dword 10. The Overwrite Pass Count is defined in Command Dword 10. The Overwrite<br>Pattern is defined in Command Dword 11. Refer to section 5.24.<br>2. If Protection Information is present within the metadata.|Notes:<br>1. Parameters are specified in Command Dword 10 and Command Dword 11 of the corresponding Sanitize<br>command that started the Overwrite operation. The Overwrite Invert Pattern Between Passes (OIPBP) field is<br>defined in Command Dword 10. The Overwrite Pass Count is defined in Command Dword 10. The Overwrite<br>Pattern is defined in Command Dword 11. Refer to section 5.24.<br>2. If Protection Information is present within the metadata.|Notes:<br>1. Parameters are specified in Command Dword 10 and Command Dword 11 of the corresponding Sanitize<br>command that started the Overwrite operation. The Overwrite Invert Pattern Between Passes (OIPBP) field is<br>defined in Command Dword 10. The Overwrite Pass Count is defined in Command Dword 10. The Overwrite<br>Pattern is defined in Command Dword 11. Refer to section 5.24.<br>2. If Protection Information is present within the metadata.|Notes:<br>1. Parameters are specified in Command Dword 10 and Command Dword 11 of the corresponding Sanitize<br>command that started the Overwrite operation. The Overwrite Invert Pattern Between Passes (OIPBP) field is<br>defined in Command Dword 10. The Overwrite Pass Count is defined in Command Dword 10. The Overwrite<br>Pattern is defined in Command Dword 11. Refer to section 5.24.<br>2. If Protection Information is present within the metadata.|Notes:<br>1. Parameters are specified in Command Dword 10 and Command Dword 11 of the corresponding Sanitize<br>command that started the Overwrite operation. The Overwrite Invert Pattern Between Passes (OIPBP) field is<br>defined in Command Dword 10. The Overwrite Pass Count is defined in Command Dword 10. The Overwrite<br>Pattern is defined in Command Dword 11. Refer to section 5.24.<br>2. If Protection Information is present within the metadata.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 3006,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4492",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28624898195266724
  },
  {
    "content": "To start a sanitize operation, the host submits a Sanitize command specifying one of the sanitize operation\ntypes (i.e., Block Erase, Overwrite, or Crypto Erase). The host sets command parameters, including the\nAllow Unrestricted Sanitize Exit bit and the No-Deallocate After Sanitize bit. After validating the Sanitize\ncommand parameters, the controller starts the sanitize operation in the background, updates the Sanitize\nStatus log page and then completes the Sanitize command with Successful Completion status. If the\nsanitize operation is to be followed by an associated additional media modification operation (refer to\nNODMMAS in Figure 275), then the associated additional media modification operation shall be completed\nbefore the controller reports sanitize operation complete. If a Sanitize command is completed with any\nstatus code other than Successful Completion, then the controller shall not start the sanitize operation and\nshall not update the Sanitize Status log page. The controller ignores Critical Warning(s) in the SMART /\nHealth Information log page (e.g., read only mode) and attempts to complete the sanitize operation\nrequested. Refer to section 5 for further information about restrictions on Admin Commands during the\nprocessing of a Format NVM command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 1283,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4493",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10779765248298645
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4494",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4236487150192261
  },
  {
    "content": "Following a successful sanitize operation, the values of user data, protection information, and non-PI\nmetadata that result from an audit (refer to section 1.5.6) of the NVM subsystem are defined in the I/O\ncommand set specifications.\nThe Sanitize Status log page (refer to section 5.16.1.25) contains estimated times for sanitize operations\nand a consistent snapshot of information about the most recently started sanitize operation, including\nwhether a sanitize operation is in progress, the sanitize operation parameters and the status of the most\nrecent sanitize operation. The controller shall report sanitize operation in progress if either a sanitize\noperation is in progress or an associated additional media modification operation is in progress. If a sanitize\noperation is not in progress, then the Global Data Erased bit in the log page indicates whether the NVM\nsubsystem may contain any user data (i.e., has not been written to since the most recent successful sanitize\noperation).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 994,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4495",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5917157530784607
  },
  {
    "content": "The Sanitize Status log page shall be updated as described:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 59,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4496",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.006627717055380344
  },
  {
    "content": "- Initialize before any controller in the NVM subsystem is ready as described in sections 3.5.3 and\n3.5.4;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4497",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2219514548778534
  },
  {
    "content": "- Update before a Sanitize command that starts a sanitize operation is completed (i.e., prior to the\ncompletion queue entry being posted for the Sanitize command); and\n\n- Update when a sanitize operation is complete (e.g., immediately prior to the completion queue\nentry being posted for the Sanitize Operation Completed asynchronous event or for the Sanitize\nOperation Completed With Unexpected Deallocation asynchronous event).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 429,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4498",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6223616600036621
  },
  {
    "content": "The Sanitize Status log page should be updated periodically during a sanitize operation to make progress\ninformation available to hosts.\n\nDuring a sanitize operation, the host may periodically examine the Sanitize Status log page to check for\nprogress, however, the host should limit this polling (e.g., to at most once every several minutes) to avoid\ninterfering with the progress of the sanitize operation itself.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 415,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4499",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5753129720687866
  },
  {
    "content": "On completion of a sanitize operation:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 38,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4500",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6744110584259033
  },
  {
    "content": "- If the sanitize operation is successful, then the Global Data Erased bit shall be set to ‘1’;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4501",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45813924074172974
  },
  {
    "content": "- The Sanitize Status log page is updated;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4502",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6010987758636475
  },
  {
    "content": "- The controller to which the Sanitize command was submitted completes an Asynchronous Event\nRequest command (if one is outstanding) with the following information:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 164,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4503",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.527548611164093
  },
  {
    "content": "`o` The Log Page Identifier field is set to 81h (i.e., Sanitize Status);\n`o` The Asynchronous Event Information field is set to Sanitize Operation Completed or to Sanitize\nOperation Completed With Unexpected Deallocation asynchronous event (refer to section 5.2);\nand\n`o` The Asynchronous Event Type field is set to 110b (i.e., I/O Command specific status);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 357,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4504",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25443169474601746
  },
  {
    "content": "- All controllers in the NVM subsystem may resume any power management that was suspended\nwhen the sanitize operation started.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 126,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4505",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.422059029340744
  },
  {
    "content": "Upon completion of a sanitize operation, the host should read the Sanitize Status log page with the Retain\nAsynchronous Event bit cleared to ‘0’ (which clears the asynchronous event, if one was generated).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 205,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4506",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5160483121871948
  },
  {
    "content": "If a sanitize operation fails, all controllers in the NVM subsystem shall abort any command not allowed\nduring a sanitize operation with a status code of Sanitize Failed (refer to section 8.21.1) until a subsequent\nsanitize operation is started or successful recovery from the failed sanitize operation occurs. A subsequent\nsuccessful sanitize operation or the Exit Failure Mode action may be used to recover from a failed sanitize\noperation. Refer to section 5.24 for recovery details.\n\nIf the Sanitize command is supported, then the NVM subsystem and all controllers shall:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 575,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4507",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46449175477027893
  },
  {
    "content": "- Support the Sanitize Status log page;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4508",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5482433438301086
  },
  {
    "content": "- Support the Sanitize Operation Completed asynchronous event;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4509",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.048906248062849045
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4510",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11378517746925354
  },
  {
    "content": "- Support the Sanitize Operation Completed With Unexpected Deallocation asynchronous event, if\nthe Sanitize Config feature is supported;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 136,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4511",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6163808107376099
  },
  {
    "content": "- Support the Exit Failure Mode action for a Sanitize command;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 62,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4512",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4774400293827057
  },
  {
    "content": "- Support at least one of the following sanitize operation types: Block Erase, Overwrite, or Crypto\nErase;\n\n- Support the same set of sanitize operation types; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4513",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5904417634010315
  },
  {
    "content": "- Indicate the supported sanitize operation types in the Sanitize Capabilities field in the Identify\nController data structure.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 127,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4514",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6685296893119812
  },
  {
    "content": "The Sanitize Config Feature Identifier (refer to section 5.27.1.19) contains the No-Deallocate Response\nMode (NODRM) bit that specifies the response of the controller to a Sanitize command processed with the\nNo-Deallocate After Sanitize bit (refer to Figure 303) set to ‘1’ if the No-Deallocate Inhibited bit is set to ‘1’\nin the Sanitize Capabilities field of the Identify Controller data structure (refer to Figure 275). In the NoDeallocate Error Response Mode, the controller aborts such Sanitize commands with a status code of\nInvalid Field in Command. In the No-Deallocate Warning Response Mode, the controller processes such\nSanitize commands, and if a resulting sanitize operation is completed successfully, then bits 2:0 of the\nSanitize Status field are set to 100b in the Sanitize Status log page (refer to Figure 267).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 828,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4515",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46004167199134827
  },
  {
    "content": "**Sanitize Operation Restrictions**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 35,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4516",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48269978165626526
  },
  {
    "content": "While performing a sanitize operation and while a failed sanitize operation has occurred but successful\nrecovery from that failure has not occurred, all enabled controllers and namespaces in the NVM\nsubsystem are restricted to performing only a limited set of actions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 268,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4517",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44814547896385193
  },
  {
    "content": "While a sanitize operation is in progress:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4518",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08888547122478485
  },
  {
    "content": "- All controllers in the NVM subsystem shall only process the Admin commands listed in Figure 140\nsubject to the additional restrictions stated in that figure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 159,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4519",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28734517097473145
  },
  {
    "content": "- All I/O Commands other than a Flush command shall be aborted with a status code of Sanitize In\nProgress;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4520",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6565757393836975
  },
  {
    "content": "- Processing of a Flush command is specified in section 7.1;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 60,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4521",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42315199971199036
  },
  {
    "content": "- Any command or command option that is not explicitly permitted in Figure 140 shall be aborted\nwith a status code of Sanitize In Progress if fetched by any controller in the NVM subsystem; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4522",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.39039742946624756
  },
  {
    "content": "- The Persistent Memory Region shall be prevented from being enabled (i.e., setting PMRCTL.EN\nto ‘1’ does not result in PMRSTS.NRDY being cleared to ‘0’).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 154,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4523",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2843378782272339
  },
  {
    "content": "While a failed sanitize operation has occurred, a subsequent sanitize operation has not started and\nsuccessful recovery from the failed sanitize operation has not occurred:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 172,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4524",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3682853877544403
  },
  {
    "content": "- All controllers in the NVM subsystem shall only process the Sanitize command (refer to section\n5.24) and the Admin commands listed in Figure 140 subject to the additional restrictions noted in\nthat figure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 207,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4525",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5529690384864807
  },
  {
    "content": "- All I/O Commands other than a Flush command (refer to section 7.1) shall be aborted with a\nstatus code of Sanitize Failed;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 124,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4526",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6476532220840454
  },
  {
    "content": "- The Sanitize command is permitted with action restrictions (refer to section 5.24);\n\n- Aside from the Sanitize command, any other command or command option that is not explicitly\npermitted in Figure 140 shall be aborted with a status code of Sanitize Failed if fetched by any\ncontroller in the NVM subsystem; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 314,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4527",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.34281888604164124
  },
  {
    "content": "- The Persistent Memory Region shall be prevented from being enabled (i.e., setting PMRCTL.EN\nto ‘1’ does not result in PMRSTS.NRDY being cleared to ‘0’).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 154,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4528",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.169703409075737
  },
  {
    "content": "**8.22 Submission Queue (SQ) Associations**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 43,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4529",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2741294801235199
  },
  {
    "content": "When Predictable Latency Mode is enabled, all I/O commands for namespaces in a given NVM Set have\nthe same quality of service attributes and shall exhibit predictable latencies as described in section 8.16.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 206,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4530",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.596641480922699
  },
  {
    "content": "The SQ Associations capability provides hints to the controller as to which specific I/O Queues are\nassociated with a given NVM Set. The controller uses this information to further enhance performance when\nPredictable Latency Mode is enabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 242,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4531",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3500923216342926
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4532",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14065192639827728
  },
  {
    "content": "The SQ Associations capability is an optional capability. Predictable Latency Mode (refer to section 8.16)\nis not dependent on the use of the SQ Associations capability.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4533",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.612027645111084
  },
  {
    "content": "If a controller supports SQ Associations, then the controller shall:\n\n- indicate support for the SQ Associations capability in the Controller Attributes (CTRATT) field in\nthe Identify Controller data structure;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4534",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5777713060379028
  },
  {
    "content": "- indicate support for NVM Sets in the Controller Attributes (CTRATT) field in the Identify Controller\ndata structure; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4535",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6578123569488525
  },
  {
    "content": "- indicate support for Predictable Latency Mode in the Controller Attributes (CTRATT) field in the\nIdentify Controller data structure (refer to Figure 275).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 156,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4536",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26592907309532166
  },
  {
    "content": "The host enables the SQ Associations capability by creating an association between an NVM Set and a\nSubmission Queue at the time the Submission Queue is created (e.g., with a Create I/O Submission Queue\ncommand (refer to section 5.5)).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 235,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4537",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6893436908721924
  },
  {
    "content": "For the SQ Associations capability to yield benefits, the host is required to:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 78,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4538",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15660697221755981
  },
  {
    "content": "a) create an association between each Submission Queue and some NVM Set; and\nb) only issue I/O commands to Submission Queues that have an association with the NVM Set that",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 171,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4539",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.27891889214515686
  },
  {
    "content": "contains the namespace associated with the Namespace Identifier specified in that I/O command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 94,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4540",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07228534668684006
  },
  {
    "content": "While this capability is enabled, failure to follow the specified operating rules may impact Predictable\nLatency (refer to section 8.16).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 137,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4541",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.0603928342461586
  },
  {
    "content": "**8.23 Standard Vendor Specific Command Format**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 48,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4542",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4576810598373413
  },
  {
    "content": "Controllers may support the standard Vendor Specific command format defined in Figure 88. Host storage\ndrivers may use the Number of Dwords fields to ensure that the application is not corrupting physical\nmemory (e.g., overflowing a data buffer). The controller indicates support of this format in the Identify\nController data structure in Figure 275; refer to Admin Vendor Specific Command Configuration and NVM\nVendor Specific Command Configuration.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 451,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4543",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30674678087234497
  },
  {
    "content": "Telemetry enables manufacturers to collect internal data logs to improve the functionality and reliability of\nproducts. The telemetry data collection may be initiated by the host or by the controller. The data is returned\nin the Telemetry Host-Initiated log page or the Telemetry Controller-Initiated log page (refer to section\n5.16.1.8 and 5.16.1.9). The data captured is vendor specific. The telemetry feature defines the mechanism\nto collect the vendor specific data. The controller indicates support for the telemetry log pages and for the\nData Area 4 size in the Log Page Attributes (LPA) field in the Identify Controller data structure (refer to\nFigure 275).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 664,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4544",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5558928847312927
  },
  {
    "content": "An important aspect to discovering issues by collecting telemetry data is the ability to qualify distinct issues\nthat are being collected. The ability to create a one to one mapping of issues to data collections is essential.\nIf a one to one mapping is not established, there is the risk that several payload collections appear distinct\nbut are actually all caused by the same issue. Conversely, a single payload collection may have payloads\ncaused by several issues mixed together creating additional complexity in determining the root cause. As\na result, flexibility in size is provided in the collection of telemetry payloads and a three phase process is\ntypically used.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 673,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4545",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6635871529579163
  },
  {
    "content": "The first phase establishes that an issue exists and is best accomplished by collecting a minimum set of\ndata to identify the issue as being distinct from other issues. Once the number of instances of an issue\nestablish an investigation, another phase may be necessary to collect actionable information. In the second\nphase, a targeted collection of more in depth medium size payloads are gathered and analyzed to identify\nthe source of the problem.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 449,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4546",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4471089243888855
  },
  {
    "content": "If the small or medium sized telemetry data collection provides insufficient information, a third phase may\nbe employed to collect additional details. If bit 6 is cleared to ‘0’ in the Log Page Attributes field, then the\nthird phase provides the largest and most complete payload to diagnose the issue. If bit 6 is set to ‘1’ in the\nLog Page Attribute and the Extended Telemetry Data Area 4 Supported (ETDAS) field is set to 1h in the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 434,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4547",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11898685991764069
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4548",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13754874467849731
  },
  {
    "content": "Host Behavior Support feature (refer to section 5.27.1.18) then a fourth phase may be employed to collect\nthe largest and most complete payload to diagnose the issue. If Data Area 4 is created, then Data Area 3\nof non-zero length shall also be created and populated as part of data collection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 293,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4549",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3889532685279846
  },
  {
    "content": "There are two telemetry data logs (i.e., Telemetry Host-Initiated log page and Telemetry Controller-Initiated\nlog page) defined. Each telemetry data log is made up of a single set of Telemetry Data Blocks. Each\nTelemetry Data Block is 512 bytes in size. Telemetry data is returned (refer to section 5.16.1.8 and section\n5.16.1.9) in units of Telemetry Data Blocks. Each telemetry data log is segmented into:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 407,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4550",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6616940498352051
  },
  {
    "content": "a) Three Telemetry Data Areas (i.e., small, medium, and large), if bit 6 of the Log Page Attributes field\n\nis cleared to ‘0’ ; or\nb) Four Telemetry Data Areas (i.e., small, medium, large and extra-large) If bit 6 of the Log Page",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 228,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4551",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47204044461250305
  },
  {
    "content": "Attributes field is set to ‘1’ and the Extended Telemetry Data Area 4 Supported (ETDAS) field is set\nto 1h in the Host Behavior Support feature (refer to section 5.27.1.18).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 173,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4552",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5030461549758911
  },
  {
    "content": "All telemetry data areas start at Telemetry Data Block 1.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4553",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5883928537368774
  },
  {
    "content": "Each Telemetry Data Area shall represent the controller’s internal state at the time the telemetry data was\ncaptured.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 117,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4554",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6249943375587463
  },
  {
    "content": "Each Telemetry Data Area is intended to capture a richer set of data to aid in resolution of issues. Telemetry\nData Area 1 is intended to have a small size payload (i.e., the first phase), Telemetry Data Area 2 is intended\nto have a medium size payload (i.e., the second phase), and Telemetry Data Area 3 is intended to have a\nlarge size payload (i.e., the third phase). Telemetry Data Area 4 is intended to have an extra-large size\npayload (i.e. the fourth phase). The size of each Telemetry Data Area is vendor specific and may change\non each data collection. When possible, the host should retrieve the payload for all supported Telemetry\nData Areas to enable the best diagnosis of the issue(s).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 698,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4555",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5157086849212646
  },
  {
    "content": "The preparation, collection, and submission of telemetry data is similar for host-initiated and controllerinitiated data; the primary difference is the trigger for the collection. The operational model for telemetry is:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 219,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4556",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4927849769592285
  },
  {
    "content": "1. The host identifies controller support for Telemetry log pages in the Identify Controller data",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4557",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6076685786247253
  },
  {
    "content": "structure;\n2. The host may indicate the support for the Telemetry Host-Initiated Data Area 4 and Telemetry",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 106,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4558",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6408668756484985
  },
  {
    "content": "Controller-Initiated Data Area 4 by setting the Extended Telemetry Data Area 4 Supported\n(ETDAS) field to 1h in the Host Behavior Support feature (refer to section 5.27.1.18);\n3. The host prepares an area to store telemetry data if needed;\n4. To receive notification that controller-initiated telemetry data is available, the host enables",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 338,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4559",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6344411373138428
  },
  {
    "content": "Telemetry Log Notices using the Asynchronous Event Configuration feature (refer to section\n5.27.1.8); and\n5. If the host decides to collect host-initiated telemetry data or the controller signals that controller\ninitiated telemetry data is available:\n\na. The host reads the appropriate blocks of the Telemetry Data Area from the Telemetry Host\nInitiated log page (refer to section 5.16.1.8) or the Telemetry Controller-Initiated log page\n(refer to section 5.16.1.9). If possible, the host should collect Telemetry Data Area 1, 2, 3,\nand 4. The host reads the log in 512 byte Telemetry Data Block units (i.e., a starting offset\nthat is a multiple of 512, and a length that is a multiple of 512). The host should set the Retain\nAsynchronous Event bit to ‘1’;\nb. The host re-reads the header of the log page and ensures that the Telemetry Host-Initiated\n\nData Generation Number field from the Telemetry Host-Initiated log page or the Telemetry\nController-Initiated Data Generation Number field in the Telemetry Controller-Initiated log\npage matches the original value read. If these values do not match, then the data captured is\nnot consistent and should be re-read from the log page with the Retain Asynchronous Event\nbit set to ‘1’;\nc. If the host is reading the Telemetry Controller-Initiated log page, then the host reads any",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1327,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4560",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.823301374912262
  },
  {
    "content": "portion of that log page with the Retain Asynchronous Event bit cleared to ‘0’ to indicate to\nthe controller that the host has completed reading the Telemetry Controller-Initiated log page;\nand",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 193,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4561",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.007807595189660788
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4562",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.14339512586593628
  },
  {
    "content": "d. When all telemetry data has been saved, the data should be forwarded to the manufacturer",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 91,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4563",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4763522744178772
  },
  {
    "content": "The trigger for the collection for host-initiated data is typically a system crash, but may also be initiated\nduring normal operation. The host proceeds with a host-initiated data collection by submitting the Get Log\nPage command for the Telemetry Host-Initiated log page with the Create Telemetry Host-Initiated Data bit\nset to ‘1’ in the Log Specific Parameter field. The controller should complete the command quickly (e.g., in\nless than one second) to avoid a user rebooting the system prior to completion of the data collection.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 533,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4564",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5511071681976318
  },
  {
    "content": "The NVM subsystem is allowed to provide a Telemetry Host-Initiated log page per controller or a shared\nTelemetry Host-Initiated log page across all controllers in the NVM subsystem. If a shared Telemetry HostInitiated log page is implemented, the Telemetry Host-Initiated Data Generation Number field in the\nTelemetry Host-Initiated log page is used to allow the host to detect that the Telemetry Host-Initiated log\npage has been changed by a host through a different controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 479,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4565",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6397666335105896
  },
  {
    "content": "The controller notifies the host to collect controller-initiated data through the completion of an Asynchronous\nEvent Request command with an Asynchronous Event Type of Notice that indicates a Telemetry Log\nChanged event. The host may also determine controller-initiated data is available via the Telemetry\nController-Initiated Data Available field in the Telemetry Host-Initiated or the Telemetry Controller-Initiated\nlog pages. The host proceeds with a controller-initiated data collection by submitting the Get Log Page\ncommand for the Telemetry Controller-Initiated log page. Once the host has started reading the Telemetry\nController-Initiated log page, the controller should avoid modifying the controller-initiated data until the host\nhas finished reading all controller-initiated data. The amount of time for the host to read the controllerinitiated data is vendor specific.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 882,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4566",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6459198594093323
  },
  {
    "content": "Since there is only one set of controller-initiated data, the controller is responsible for prioritizing the version\nof the controller-initiated data that is available for the host to collect. When the controller replaces the\ncontroller-initiated data with new controller-initiated data, the controller shall increment the Telemetry\nController-Initiated Data Generation Number field. The host needs to ensure that the Telemetry ControllerInitiated Data Generation Number field has not changed between the start and completion of the controllerinitiated data collection to ensure the data captured is consistent.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 611,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4567",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36091378331184387
  },
  {
    "content": "**Telemetry Data Collection Examples (Informative)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4568",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6867605447769165
  },
  {
    "content": "This section includes several examples of Telemetry Host-Initiated Data Areas for illustration. The same\nconcepts apply to the Telemetry Controller-Initiated Data Areas.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4569",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4082232117652893
  },
  {
    "content": "If a Telemetry Host-Initiated log page has no data for collection, then the following fields are all cleared to\n0h:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 115,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4570",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5893864035606384
  },
  {
    "content": "- Telemetry Host-Initiated Data Area 1 Last Block = 0;\n\n- Telemetry Host-Initiated Data Area 2 Last Block = 0; and\n\n- Telemetry Host-Initiated Data Area 3 Last Block = 0.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 170,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4571",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6872847080230713
  },
  {
    "content": "When all three telemetry data areas are populated, then the Telemetry Host-Initiated log page has different\nvalues in each of the Telemetry Host-Initiated Data Area n Last Block fields. For example, the following\nvalues correspond to the layout shown in Figure 475:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 265,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4572",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6735678911209106
  },
  {
    "content": "- Telemetry Host-Initiated Data Area 1 Last Block = 65;\n\n- Telemetry Host-Initiated Data Area 2 Last Block = 1,000; and\n\n- Telemetry Host-Initiated Data Area 3 Last Block = 30,000.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 180,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4573",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6548348069190979
  },
  {
    "content": "As a result of telemetry data areas being made up of a single set of Telemetry Data Blocks starting at\nTelemetry Data Block 1, the telemetry data contained in Telemetry Data Block 1 through Telemetry Data\nBlock 65 of data area 1, data area 2, and data area 3 is the same. In addition, the telemetry data contained\nin Telemetry Data Block 66 through Telemetry Data Block 1,000 of data area 2 and data area 3 is the same.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 419,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4574",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.020291022956371307
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4575",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09566183388233185
  },
  {
    "content": "|Figure 475: Telemetry Log Example – All Data Areas Populated|Col2|Col3|\n|---|---|---|\n|Block Number Telemetry Host-Initiated Data Areas|Block Number Telemetry Host-Initiated Data Areas|Block Number Telemetry Host-Initiated Data Areas|\n|1<br>Data Area 1 *<br>65<br>1,000<br>30,000|Data Area 2 *<br>Data Area 2 +<br>continued|Data Area 3 *<br>Data Area 3 +<br>continued<br>Data Area 3<br>continued|\n|* Data Area 1, Data Area 2, and Data Area 3 contain the same telemetry data in blocks 1 through 65.<br>+ Data Area 2 and Data Area 3 contain the same telemetry data in blocks 66 through 1,000.|* Data Area 1, Data Area 2, and Data Area 3 contain the same telemetry data in blocks 1 through 65.<br>+ Data Area 2 and Data Area 3 contain the same telemetry data in blocks 66 through 1,000.|* Data Area 1, Data Area 2, and Data Area 3 contain the same telemetry data in blocks 1 through 65.<br>+ Data Area 2 and Data Area 3 contain the same telemetry data in blocks 66 through 1,000.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 978,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4576",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6826865077018738
  },
  {
    "content": "When only the second data areas is populated, then the Telemetry Host-Initiated log page has no data in\nTelemetry Data Area 1 shown by having its corresponding last block value cleared to 0h, and no additional\ndata in Telemetry Data Area 3 shown by having its corresponding last block value set to the same value as\nthe last block value for Telemetry Data Area 2. For example, the following values correspond to the layout\nshown in Figure 476:\n\n- Telemetry Host-Initiated Data Area 1 Last Block = 0;\n\n- Telemetry Host-Initiated Data Area 2 Last Block = 1,000; and\n\n- Telemetry Host-Initiated Data Area 3 Last Block = 1,000.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 623,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4577",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.675004243850708
  },
  {
    "content": "As a result of telemetry data areas being made up of a single set of Telemetry Data Blocks starting at\nTelemetry Data Block 1, the telemetry data contained in Telemetry Data Block 1 through Telemetry Data\nBlock 1,000 of data area of data area 2 and data area 3 is the same.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 273,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4578",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.03392062336206436
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4579",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.058909665793180466
  },
  {
    "content": "|Figure 476: Telemetry Log Example – Data Area 2 Populated|Col2|Col3|\n|---|---|---|\n|Block Number Telemetry Host-Initiated Data Areas|Block Number Telemetry Host-Initiated Data Areas|Block Number Telemetry Host-Initiated Data Areas|\n|1<br>Data Area 1<br>(empty)<br>1,000|Data Area 2 *|Data Area 3 *|\n|* Data Area 2, and Data Area 3 contain the same telemetry data in blocks 1 through 1,000.|* Data Area 2, and Data Area 3 contain the same telemetry data in blocks 1 through 1,000.|* Data Area 2, and Data Area 3 contain the same telemetry data in blocks 1 through 1,000.|",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 571,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4580",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15330635011196136
  },
  {
    "content": "**8.25 Universally Unique Identifiers (UUIDs) for Vendor Specific Information**\n\n**UUIDs for Vendor Specific Information Introduction**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 135,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4581",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45047232508659363
  },
  {
    "content": "Several commands send or receive information that contains fields described as Vendor Specific or that is\nspecified by a command field containing a value in a vendor specific range. Examples include the Set\nFeatures command, which may specify a vendor specific feature identifier, and the Identify command, which\nmay retrieve a data structure having a vendor specific area.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 373,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4582",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6550724506378174
  },
  {
    "content": "The vendor specific information may have different definitions (e.g., a vendor specific log page identifier\nwith the contents of the page defined differently by different entities, such as an NVM subsystem vendor\nand an NVM subsystem customer). By associating each definition of the information with a UUID specified\nby the defining entity, a command is able to specify the particular definition of the information.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 415,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4583",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5249539613723755
  },
  {
    "content": "A command specifies a particular definition of the information by specifying an index into a list of UUIDs\nsupported by the controller (refer to section 5.17.2.16). The NVMe Invalid UUID (refer to section 8.25.2) is\nused to replace a previously valid UUID in the UUID List (refer to Figure 284). This is done to keep the\nvalues in the list at a static index, as that index is used by the Host to access the UUID List contents.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 426,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4584",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6438790559768677
  },
  {
    "content": "NVM subsystem vendors and customers communicate (by means outside the scope of this specification)\nthe UUID used for each definition of the information.\n\n**UUIDs for Vendor Specific Information Requirements**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 208,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4585",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5918260812759399
  },
  {
    "content": "A UUID list is a list of non-zero UUID values, terminated by a 0h UUID value. Each non-zero UUID value\nmay be either a valid UUID or the NVMe Invalid UUID. The NVMe Invalid UUID is the hexadecimal value\nFFFFFFFF_FFFFFFFF_7FFFFFFF_FFFFFFFFh. A valid UUID is any non-zero value other than the NVMe\nInvalid UUID.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 309,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4586",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4500133693218231
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4587",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20018672943115234
  },
  {
    "content": "If a command supports selection of a UUID, then the UUID Selection Supported bit in the Commands\nSupported and Effects data structure for that command (refer to Figure 211) shall be set to ‘1’. If a command\ndoes not support selection of a UUID, then the UUID Selection Supported bit shall be cleared to ‘0’.\n\nIf the UUID Selection Supported bit is set to ‘1’ for one or more commands, then the UUID List bit in the\nController Attributes field shall be set to ‘1’ (refer to Figure 275), and the controller shall support reporting\nof a UUID List (refer to Figure 284).\n\nIf a command supports selection of a UUID, then that command contains a UUID Index field (refer to Figure\n477).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 679,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4588",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6415212154388428
  },
  {
    "content": "**Figure 477: UUID Index Field**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 32,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4589",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6729661226272583
  },
  {
    "content": "|Bits|Description|\n|---|---|\n|6:0|UUID Index: If this field is set to a non-zero value, then the value of this field is the index of a<br>UUID in the UUID List (refer to Figure 284) that is used by the command. If this field is cleared to<br>0h, then no UUID index is specified.|\n\nIf the UUID Index field specifies a valid UUID (i.e., the UUID Index field is set to a non-zero value and the\nUUID at that index indicates a valid UUID) (refer to section 5.17.2.16), then the controller shall process the\ncommand using the vendor specific information specified by that UUID. If the UUID Index field is cleared to\n0h, then the command does not specify a UUID.\n\nIf no UUID is specified by the command, then the controller shall process the command, returning vendor\nspecific information.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 782,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4590",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28873223066329956
  },
  {
    "content": "The controller shall abort the command with a status code of Invalid Field in Command if:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 89,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4591",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**5 Admin Command Set **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.25503259897232056
  },
  {
    "content": "a) The controller does not support the UUID specified by the UUID Index for the specified information;\nb) The UUID specified by the UUID Index is cleared to 0h; or\nc) The UUID specified by the UUID Index is the NVMe Invalid UUID.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4592",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4730336666107178
  },
  {
    "content": "If a firmware image is activated that has a UUID List in which an entry is different from that of the previouslyactive firmware image, then a host that is unaware of the change may issue a command with the UUID\nindex value for that entry. Such a command may produce unexpected results because the UUID specified\nby that UUID Index has changed. To avoid this, vendors should follow the following revision guidelines for\nUUID lists when constructing firmware images that support UUID selection:\n\na) Add UUIDs that are not supported in prior firmware image revisions to the end of the UUID List in\n\nsubsequent firmware image revisions;\nb) Remove UUIDs that are supported in prior firmware image revisions by replacing the UUID with\n\nthe NVMe Invalid UUID in the same entry in the UUID list in subsequent firmware image revisions;\nc) Do not replace the NVMe Invalid UUID with a valid UUID in the same UUID list entry in subsequent\n\nfirmware image revisions; and\nd) Do not shorten or remove the UUID list in subsequent firmware image revisions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 1039,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4593",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43090003728866577
  },
  {
    "content": "In these guidelines, the terms “prior” and “subsequent” refer to a linear sequence of firmware versions (e.g.,\nbased on the date and time of the construction of the downloadable firmware image).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 194,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4594",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.08145491778850555
  },
  {
    "content": "Following these guidelines prevents the host from inadvertently specifying the wrong UUID because there\nis at most one valid UUID for each entry in the UUID list. Hence a command that specifies a UUID Index\neither specifies the intended UUID or is aborted because that entry in the UUID list is empty or contains the\nNVMe Invalid UUID.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 335,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4595",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5907796621322632
  },
  {
    "content": "The controller shall require a reset to activate a downloaded firmware image (refer to section 5.12) if the\ndownloaded image reports a UUID list with at least one slot in which a valid UUID replaces the NVMe\nInvalid UUID or a different valid UUID in the existing image. All controllers that are affected by the UUID list\nchange caused by activation of a downloaded firmware image shall be reset as part of activating that\ndownloaded firmware image.\n\nThe above requirements for a reset to activate a downloaded firmware image do not require the controller\nto directly compare the UUID lists in the current and downloaded firmware images. For example, a vendor",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 658,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4596",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2570328116416931
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4597",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.17722217738628387
  },
  {
    "content": "could use a vendor-specific major.minor firmware image revision numbering system (e.g., 3.5, 4.1) where\nall downloadable firmware images with the same major revision number follow the above guidelines. In that\nscenario, the controller is able to meet these reset requirements by requiring a reset if the downloaded\nfirmware image and the currently executing firmware have different major revision numbers.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 405,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4598",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23999278247356415
  },
  {
    "content": "**UUIDs for Vendor Specific Information Examples**\n\nThis section includes examples of the use of UUIDs to select vendor specific information.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4599",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24961796402931213
  },
  {
    "content": "**8.25.3.1 Vendor Specific Log Page Example**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4600",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4053095281124115
  },
  {
    "content": "If entity C and entity V create different definitions for a vendor specific log page having the same log page\nidentifier (e.g., D0h), then each assigns a UUID to distinguish their definition (e.g., entity V assigns UUID V\nand entity C assigns UUID C).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 251,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4601",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4480881094932556
  },
  {
    "content": "A controller supporting both definitions of the log page:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4602",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2071705460548401
  },
  {
    "content": "a) Sets the UUID List bit to ‘1’ in the CTRATT field of the Identify Controller data structure (refer to\n\nFigure 275);\nb) Sets the UUID Selection Supported bit to ‘1’ in the Commands Supported and Effects data structure",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 219,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4603",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6298795342445374
  },
  {
    "content": "(refer to Figure 211) corresponding to the Get Log Page command; and\nc) Reports both UUID V and UUID C in the UUID list (refer to Figure 284).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 142,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4604",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3283086121082306
  },
  {
    "content": "A host requesting the log page defined by entity C:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4605",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4116879105567932
  },
  {
    "content": "1) Determines the index of UUID C in the UUID list;\n2) Sets the Log Page Identifier field of the Get Log Page command to D0h; and\n3) Sets the UUID Index field of the Get Log Page command to the index of UUID C.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4606",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31673383712768555
  },
  {
    "content": "A host requesting the log page defined by entity V:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4607",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3708150386810303
  },
  {
    "content": "1) Determines the index of UUID V in the UUID list;\n2) Sets the Log Page Identifier field of the Get Log Page command to D0h; and\n3) Sets the UUID Index field of the Get Log Page command to the index of UUID V.\n\nA host not specifying the definition of the log page clears the UUID Index field to 0h. The selection of the\nlog page definition returned by the controller is vendor specific (e.g., the controller may select any definition\nfor the returned data).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 458,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4608",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10594718903303146
  },
  {
    "content": "**8.25.3.2 Vendor Specific Feature Example**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4609",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2831078767776489
  },
  {
    "content": "If entity C and entity V create different definitions for a vendor specific feature having the same Feature\nIdentifier (e.g., F1h), then each assigns a UUID to distinguish their definitions (e.g., entity V assigns UUID\nV and entity C assigns UUID C).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 250,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4610",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3812253475189209
  },
  {
    "content": "A controller supporting both definitions of the feature for the Get Features command:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4611",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.290089875459671
  },
  {
    "content": "a) Sets the UUID List bit to ‘1’ in the CTRATT field of the Identify Controller data structure (refer to\n\nFigure 275);\nb) Sets the UUID Selection Supported bit to ‘1’ in the Commands Supported and Effects data structure\n\n(refer to Figure 211) corresponding to the Get Features command;\nc) Sets the UUID Selection Supported bit to ‘1’ in the FID Supported and Effects log page (refer to",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 385,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4612",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.686708927154541
  },
  {
    "content": "Figure 256); and\nd) Reports both UUID V and UUID C in the UUID list (refer to Figure 284).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4613",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2688213884830475
  },
  {
    "content": "A host retrieving the attributes of the feature defined by entity C:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4614",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4106603264808655
  },
  {
    "content": "1) Determines the index of UUID C in the UUID list;\n2) Sets the Feature Identifier field of the Get Features command to F1h; and\n3) Sets the UUID Index field of the Get Features command to the index of UUID C.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 209,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4615",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3054516613483429
  },
  {
    "content": "A host retrieving the attributes of the feature defined by entity V:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4616",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.24431924521923065
  },
  {
    "content": "1) Determines the index of UUID V in the UUID list;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4617",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28789931535720825
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4618",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.19966867566108704
  },
  {
    "content": "2) Sets the Feature Identifier field of the Get Features command to F1h; and\n3) Sets the UUID Index field of the Get Features command to the index of UUID V.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 157,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4619",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12491626292467117
  },
  {
    "content": "**8.26 Virtualization Enhancements**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 36,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4620",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3792550563812256
  },
  {
    "content": "Virtualized environments may use an NVM subsystem with multiple controllers to provide virtual or physical\nhosts direct I/O access. The NVM subsystem is composed of primary controller(s) and secondary\ncontroller(s), where the secondary controller(s) depend on primary controller(s) for dynamically assigned\nresources. A host may issue the Identify command to a primary controller specifying the Secondary\nController List to discover the secondary controllers associated with that primary controller. All secondary\ncontrollers shall be part of the same domain as the primary controller with which they are associated.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 616,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4621",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6106962561607361
  },
  {
    "content": "Controller resources may be assigned or removed from a controller using the Virtualization Management\ncommand issued to a primary controller. The following types of controller resources are defined:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 198,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4622",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5557700991630554
  },
  {
    "content": "- Virtual Queue Resource (VQ Resource): a type of controller resource that manages one\nSubmission Queue (SQ) and one Completion Queue (CQ) (refer to section 8.26.1); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 169,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4623",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.57555091381073
  },
  {
    "content": "- Virtual Interrupt Resource (VI Resource): a type of controller resource that manages one interrupt\nvector (refer to section 8.26.2).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 134,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4624",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4896364212036133
  },
  {
    "content": "Flexible Resources are controller resources that may be assigned to the primary controller or one of its\nsecondary controllers. The Virtualization Management command is used to provision the Flexible\nResources between a primary controller and one of its secondary controller(s). A primary controller’s\nallocation of Flexible Resources may be modified using the Virtualization Management command and the\nchange takes effect after any Controller Level Reset other than a Controller Reset (i.e., CC.EN transitions\nfrom ‘1’ to ‘0’). A secondary controller only supports having Flexible Resources assigned or removed when\nin the Offline state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 638,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4625",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6218507289886475
  },
  {
    "content": "Private Resources are controller resources that are permanently assigned to a primary or secondary\ncontroller. These resources are not supported by the Virtualization Management command.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 186,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4626",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5688381195068359
  },
  {
    "content": "The primary controller is allowed to have a mix of Private and Flexible Resources for a particular controller\nresource type. If there is a mix, then the Private Resources occupy the lower contiguous range of resource\nidentifiers starting with 0. Secondary controllers shall have all Private or all Flexible Resources for a\nparticular resource type. Controller resources assigned to a secondary controller always occupy a\ncontiguous range of identifiers with no gaps, starting with 0. If a particular controller resource type is\nsupported as indicated in the Controller Resource Types field of the Primary Controller Capabilities\nStructure, then all secondary controllers shall have that controller resource type assigned as a Flexible\nResource. Figure 478 shows the controller resource allocation model for a controller resource type that is\nassignable as a Flexible Resource.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 876,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4627",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1859845072031021
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4628",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.18488776683807373
  },
  {
    "content": "**Figure 478: Controller Resource Allocation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4629",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.46702778339385986
  },
  {
    "content": "For each controller resource type supported, the Primary Controller Capabilities Structure (refer to Figure\n281) defines:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 121,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4630",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5044233202934265
  },
  {
    "content": "- The total number of Flexible Resources;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4631",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5601609945297241
  },
  {
    "content": "- The total number of Private Resources for the primary controller;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 67,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4632",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6559202075004578
  },
  {
    "content": "- The maximum number of Flexible Resources that may be assigned to a secondary controller using\nthe Virtualization Management command; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 138,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4633",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6628420352935791
  },
  {
    "content": "- The assignment of resources to the primary controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4634",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4056245982646942
  },
  {
    "content": "Primary and secondary controllers may implement all features of this specification, except where\ncommands are defined as being only supported by a primary controller. It is recommended that only primary\ncontrollers support the privileged actions described in section 3.10 so that untrusted hosts using secondary\ncontrollers do not impact the entire NVM subsystem state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 369,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4635",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42068982124328613
  },
  {
    "content": "The Secondary Controller List structure returned by the Identify command is used to determine the topology\nof secondary controllers and the resources assigned. The secondary controller shall be in the Offline state\nto configure resources. The Virtualization Management command is used to transition the secondary\ncontroller between the Online state and the Offline state. Refer to section 8.26.3 for details on the Online",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 421,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4636",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42976799607276917
  },
  {
    "content": "To support the Virtualization Enhancements capability, the NVM subsystem shall support the following:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 101,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4637",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2592676281929016
  },
  {
    "content": "- One or more primary controllers, each of which supports:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 58,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4638",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6185981631278992
  },
  {
    "content": "`o` One or more secondary controllers;\n`o` A pool of unassigned Flexible Resources that supports allocation to a primary controller and\ndynamic assignment to its associated secondary controllers;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 195,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4639",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13688206672668457
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4640",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3184666931629181
  },
  {
    "content": "`o` Two or more Private Resource queue pairs;\n`o` Indicate support for the Virtualization Management command in the Optional Admin Command\nSupport (OACS) field in the Identify Controller data structure;\n`o` The Virtualization Management command;\n`o` The Primary Controller Capabilities Structure defined in Figure 281 (Identify command with\nCNS value of 14h);\n`o` The Secondary Controller List defined in Figure 282 (Identify command with CNS value of 15h);\nand\n`o` The Namespace Management capability (refer to section 8.11);",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 526,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4641",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.320968359708786
  },
  {
    "content": "- One or more secondary controllers; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4642",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.28755733370780945
  },
  {
    "content": "- Flexible Resources, each of which supports all of the following:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4643",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.12378264963626862
  },
  {
    "content": "`o` Assignment and removal by exactly one primary controller; and\n`o` Assignment to no more than one controller at a time.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 122,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4644",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.374860554933548
  },
  {
    "content": "Within an NVM subsystem that supports both the Virtualization Enhancements capability and SR-IOV (refer\nto section 8.26.4), all controllers that are SR-IOV PFs shall be primary controllers, and all controllers that\nare SR-IOV VFs shall be secondary controllers of their associated PFs.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 285,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4645",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.31026822328567505
  },
  {
    "content": "**VQ Resource Definition**\n\nA Virtual Queue Resource (VQ Resource) is a type of controller resource that manages one CQ and one\nSQ. For a VQ Resource that is assigned to a controller, its resource identifier is equivalent to its Queue\nIdentifier.\n\nThe Controller Resource Types field of the Primary Controller Capabilities Structure indicates whether VQ\nResources are supported. If VQ Resources are unsupported, a primary controller and its associated\nsecondary controllers have all queues as Private Resources. The rest of this section assumes that VQ\nResources are supported.\n\nThe secondary controller is assigned VQ Resources using the Virtualization Management command. The\nnumber of VQ Resources assigned is discoverable in the Secondary Controller List entry for the associated\nsecondary controller. The number of VQ Resources assigned may also be discovered using the Get\nFeatures command with the Number of Queues Feature identifier (refer to section 5.27.1.5).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 4,
      "character_length": 969,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4646",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6479325294494629
  },
  {
    "content": "If a secondary controller has no assigned VQ Resources, then that controller remains in the Offline state.\nA secondary controller is not able to transition to the Online state until VQ Resources for an Admin Queue\nand one or more I/O Queues have been assigned to that controller (i.e., the minimum number of VQ\nResources that may be assigned is two).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 350,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4647",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6801213622093201
  },
  {
    "content": "A primary controller that supports VQ Resources shall have at least two queue pairs that are Private\nResources to ensure there is a minimum of an Admin Queue pair and one I/O queue pair for the primary\ncontroller at all times. A primary controller may be allocated VQ Resources using the Primary Controller\nFlexible Allocation action of the Virtualization Management command. The VQ resources allocated take\neffect after a Controller Level Reset and are persistent across power cycles and resets. The number of VQ\nResources currently allocated is discoverable in the Primary Controller Capabilities Structure. The number\nof VQ Resources currently allocated may also be discovered using the Get Features command with the\nNumber of Queues Feature identifier (refer to section 5.27.1.5).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 784,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4648",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4063219726085663
  },
  {
    "content": "**VI Resource Definition**\n\nA Virtual Interrupt Resource (VI Resource) is a type of controller resource that manages one interrupt\nvector, such as an MSI-X vector. For a VI Resource that is assigned to a controller, its resource identifier\nis equivalent to its interrupt vector number.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 285,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4649",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.688866913318634
  },
  {
    "content": "The Controller Resource Types field of the Primary Controller Capabilities Structure indicates whether VI\nResources are supported. If VI Resources are unsupported, a primary controller and its associated\nsecondary controllers have all interrupts as Private Resources. The rest of this section assumes that VI\nResources are supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 333,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4650",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2914908230304718
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4651",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2558215856552124
  },
  {
    "content": "The secondary controller is assigned VI Resources using the Virtualization Management command. The\nnumber of VI Resources assigned is discoverable in the Secondary Controller List entry for the associated\nsecondary controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 226,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4652",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5276234745979309
  },
  {
    "content": "While a primary controller and/or its associated secondary controllers may concurrently support multiple\ntypes of interrupt vectors (e.g., MSI and MSI-X), all the controllers’ VI Resources shall contain interrupt\nresources for interrupt vectors of the same type. In this revision, MSI-X is the only supported type of VI\nResource.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 329,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4653",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5901371836662292
  },
  {
    "content": "For a secondary controller that supports VI Resources with MSI-X vectors, if at least one VI Resource is\nassigned to that controller, MSIXCAP.MXC.TS (refer to the MSI-X Capability section of the NVMe over\nPCIe Transport Specification) indicates the number of VI Resources assigned to the controller. Since\nMSIXCAP.MXC.TS is read-only, the value shall only be updated when the secondary controller is in the\nOffline state. MSI-X Table Entries on the secondary controller for newly assigned VI Resources shall be\nreset to default values.\n\nIf a secondary controller that supports VI Resources has no assigned VI Resources, then that controller\nremains in the Offline state. A secondary controller is not able to transition to the Online state until a VI\nResource for interrupt vector 0 has been assigned to that controller. For a secondary controller that supports\nVI Resources with MSI-X vectors, if no VI Resources are assigned to that controller, then\nMSIXCAP.MXC.TS is reserved.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 979,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4654",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6281375885009766
  },
  {
    "content": "A primary controller that supports VI Resources shall have at least one interrupt that is a Private Resource.\nInterrupt vector 0 is always assigned to the primary controller. A primary controller may be allocated VI\nResources using the Primary Controller Flexible Allocation action of the Virtualization Management\ncommand. The VI resources allocated take effect after a Controller Level Reset and are persistent across\npower cycles and resets. The number of VI Resources currently allocated is discoverable in the Primary\nController Capabilities Structure. For a primary controller that supports VI Resources with MSI-X vectors,\nMSIXCAP.MXC.TS indicates an MSI-X Table size equal to the total number of Private Resources and the\nFlexible Resources currently allocated following a Controller Level Reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 804,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4655",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4877835512161255
  },
  {
    "content": "When an I/O CQ is created, the controller supports mapping that I/O CQ to any valid interrupt vector,\nregardless of whether they have the same resource identifier, as long as the I/O CQ and the interrupt vector\nare attached to the same controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 247,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4656",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3423292636871338
  },
  {
    "content": "**Secondary Controller States and Resource Configuration**\n\nA secondary controller shall be in one of the following states:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 123,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4657",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6684502363204956
  },
  {
    "content": "- **Online:** The secondary controller may be in use by a host. Required resources have been\nassigned. The secondary controller may be enabled in this state (CC.EN may be set to ‘1’ and\nCSTS.RDY may then transition to ‘1’); or\n\n- **Offline:** The secondary controller may not be used by a host. CSTS.CFS shall be set to ‘1’.\nController properties other than CSTS are undefined in this state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 391,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4658",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5534545183181763
  },
  {
    "content": "The host may request a transition to the Online or Offline state using the Virtualization Management\ncommand. When a secondary controller transitions from the Online state to the Offline state all Flexible\nResources are removed from the secondary controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 258,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4659",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.600367546081543
  },
  {
    "content": "To ensure that the host accurately detects capabilities of the secondary controller, the host should complete\nthe following procedure to bring a secondary controller Online:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 173,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4660",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5948193669319153
  },
  {
    "content": "1. Use the Virtualization Management command to set the secondary controller to the Offline state;\n2. Use the Virtualization Management command to assign VQ resources and VI resources;\n3. Perform a Controller Level Reset. If the secondary controller is a VF, then this should be a VF\n\nFunction Level Reset; and\n4. Use the Virtualization Management command to set the secondary controller to the Online state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 408,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4661",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2603949308395386
  },
  {
    "content": "If VI Resources are supported, then following this process ensures the MSI-X Table size indicated by\nMSIXCAP.MXC.TS is updated to reflect the appropriate number of VI Resources before the transition to\nthe Online state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 219,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4662",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3160122334957123
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4663",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16766706109046936
  },
  {
    "content": "A primary controller or secondary controller is enabled when CC.EN and CSTS.RDY are both set to ‘1’ for\nthat controller. A secondary controller is able to be enabled only when in the Online state. If the primary\ncontroller associated with a secondary controller is disabled or undergoes a Controller Level Reset, then\nthe secondary controller shall implicitly transition to the Offline state. A secondary controller shall transition\nto the Offline state when a shutdown occurs (refer to section 3.1.3.5 and section 3.1.3.20) on the primary\ncontroller associated with that secondary controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 593,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4664",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6631860136985779
  },
  {
    "content": "Resources shall only be assigned to a secondary controller when in the Offline state. If the minimum number\nof resources are not assigned to a secondary controller, then a request to transition to the Online state shall\nfail for that secondary controller. For implementations that support SR-IOV, if VF Enable is cleared to ‘0’ or\nNumVFs specifies a value that does not enable the associated secondary controller, then the secondary\ncontroller shall implicitly transition to the Offline state.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 493,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4665",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3799172341823578
  },
  {
    "content": "**Single Root I/O Virtualization and Sharing (SR-IOV)**\n\nThe PCI-SIG [®] Single Root I/O Virtualization and Sharing Specification (SR-IOV) defines extensions to PCI\nExpress that allow multiple System Images (SIs), such as virtual machines running on a hypervisor, to\nshare PCI hardware resources. The primary benefit of SR-IOV is that it eliminates the hypervisor from\nparticipating in I/O operations which may be a significant factor limiting storage performance in some\nvirtualized environments and allows direct SI access to PCI hardware resources.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 551,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4666",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.40407857298851013
  },
  {
    "content": "A Physical Function (PF) is a PCI Express Function that supports the SR-IOV Capability, which in turn\nallows that PF to support one or more dependent Virtual Functions (VFs). These PFs and VFs may support\nNVM Express controllers that share an underlying NVM subsystem with multi-path I/O and namespace\nsharing capabilities (refer to section 2.4.1).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 348,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4667",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6928446292877197
  },
  {
    "content": "SR-IOV Virtual Functions (VFs) with an NVM Express Class Code (refer to the PCI Header section of the\nNVMe over PCIe Transport Specification) shall implement fully compliant NVM Express controllers. This\nensures that the same host software developed for non-virtualized environments is capable of running\nunmodified within an SI.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 329,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4668",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5913309454917908
  },
  {
    "content": "For hosts where SR-IOV is unsupported or not needed, a controller that is a PF shall support operation as\na stand-alone controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 131,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4669",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5495303273200989
  },
  {
    "content": "For a controller that is a PF, the requirements for SR-IOV Capability registers VF BAR0, VF BAR1, VF\nBAR2, VF BAR4, and VF BAR5 are the same as the requirements for PCI registers BAR0, BAR1, BAR4,\nand BAR5, respectively. For a controller that is a PF, SR-IOV Capability register VF BAR2 shall not support\nIndex/Data Pair. Refer to the PCI Header section of the NVMe over PCIe Transport Specification.\n\nTo accommodate SR-IOV address range isolation requirements, VF BAR2 and VF BAR3 may support a\n64-bit prefetchable memory register space which shall only be used for MSI-X Tables and MSI-X PBAs of\nVFs. MSI-X Table BIR = ‘2’ and MSI-X PBA BIR = ‘2’ are valid for controllers that are VFs. Refer to the\nMSI-X Capability section of the NVMe over PCIe Transport Specification.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 773,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4670",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.409787118434906
  },
  {
    "content": "While the controller properties of a controller that is a VF are accessible only if SR-IOV Control.VF MSE is\nset to ‘1’, clearing VF MSE from ‘1’ to ‘0’ does not cause a reset of that controller. In this case, controller\nproperties are hidden, but their values are not reset.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 275,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4671",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**8 Extended Capabilities **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.15829505026340485
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **9 Error Reporting and Recovery **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 90,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4672",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3636838495731354
  },
  {
    "content": "**9.1** **Command and Queue Error Handling**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4673",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4462284743785858
  },
  {
    "content": "In the case of serious error conditions, like Completion Queue Invalid, the operation of the associated\nSubmission Queue or Completion Queue may be compromised. In this case, host software should delete\nthe associated Completion Queue and/or Submission Queue. The delete of a Submission Queue aborts all\noutstanding commands, and deletion of either queue type releases resources associated with that queue.\nHost software should recreate the Completion Queue and/or Submission Queue to then continue with\noperation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 514,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4674",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42756643891334534
  },
  {
    "content": "In the case of serious error conditions for Admin commands, the entire controller should be reset using a\nController Level Reset. The entire controller should also be reset if a completion is not received for the\ndeletion of a Submission Queue or Completion Queue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 264,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4675",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6292567253112793
  },
  {
    "content": "For most command errors, there is not an issue with the Submission Queue and/or Completion Queue\nitself. Thus, host software and the controller should continue to process commands. It is at the discretion\nof host software whether to retry the failed command; the Retry bit in the completion queue entry indicates\nwhether a retry of the failed command may succeed.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 363,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4676",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.26369205117225647
  },
  {
    "content": "**9.2** **Media and Data Error Handling**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 41,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4677",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45932576060295105
  },
  {
    "content": "In the event that the requested operation could not be performed to the NVM media, the particular command\nis completed with a media error indicating the type of failure using the appropriate status code.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 203,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4678",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3708024322986603
  },
  {
    "content": "If a read error occurs during the processing of a command, (e.g., End-to-end Guard Check Error,\nUnrecovered Read Error), the controller may either stop the DMA transfer into the memory or transfer the\nerroneous data to the memory. The host shall ignore the data in the memory locations for commands that\ncomplete with such error conditions.\n\nIf a write error occurs during the processing of a command, (e.g., an internal error, End-to-end Guard Check\nError, End-to-end Application Tag Check Error), the controller may either stop or complete the DMA\ntransfer.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 559,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4679",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5557569861412048
  },
  {
    "content": "Additional I/O Command Set specific error handling is described within applicable I/O Command Set\nspecifications.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 113,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4680",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4234800338745117
  },
  {
    "content": "**9.3** **Memory Error Handling**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 33,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4681",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44965797662734985
  },
  {
    "content": "For PCI Express implementations, memory errors such as target abort, master abort, and parity may cause\nthe controller to stop processing the currently executing command. These are serious errors that cannot be\nrecovered from without host software intervention.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 261,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4682",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6684964895248413
  },
  {
    "content": "A master/target abort error occurs when host software has provided, to the controller, the address of\nmemory that does not exist. When this occurs, the controller aborts the command with a Data Transfer\nError status code.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 221,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4683",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45442190766334534
  },
  {
    "content": "**9.4** **Internal Controller Error Handling**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 46,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4684",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49806392192840576
  },
  {
    "content": "Errors such as a DRAM failure or power loss notification indicate that a controller level failure has occurred\nduring the processing of a command. The status code of the completion queue entry should indicate an\nInternal Error status code. Host software shall ignore any data transfer associated with the command. The\nhost may choose to re-submit the command or indicate an error to the higher level software.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 409,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4685",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4756695330142975
  },
  {
    "content": "**9.5** **Controller Fatal Status Condition**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4686",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6009646058082581
  },
  {
    "content": "If the controller has a serious error condition and is unable to communicate with host software via\ncompletion queue entries in the Admin Completion Queue or I/O Completion Queues, then the controller\nmay set the Controller Fatal Status (CSTS.CFS) bit to ‘1’ (refer to section 3.1.3.6). This indicates to host",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 309,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4687",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13273829221725464
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4688",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07686329632997513
  },
  {
    "content": "software that a serious error condition has occurred. When this condition occurs, host software should\nattempt to reset and then re-initialize the controller.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 158,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4689",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5937056541442871
  },
  {
    "content": "The Controller Fatal Status condition is not indicated with an interrupt. If host software experiences timeout\nconditions and/or repeated errors, then host software should consult the Controller Fatal Status\n(CSTS.CFS) bit to determine if a more serious error has occurred.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 273,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4690",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5223976373672485
  },
  {
    "content": "If the Controller Fatal Status (CSTS.CFS) bit is set to ‘1’ on any controller in the NVM subsystem, the host\nshould issue a Controller Reset to that controller.\n\nIf that Controller Reset does not clear the Controller Fatal Status condition, the host should initiate an NVM\nSubsystem Reset (refer to section 3.7.1), if supported.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 328,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4691",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6173643469810486
  },
  {
    "content": "Performing an NVM Subsystem Reset (NSSR) may cause PCI Express links to go down as part of resetting\nthe NVM subsystem. Host software may have undesirable effects related to PCI Express links going down\n(e.g., some host operating systems or hypervisors may crash).\n\nNVM Subsystem Reset should not be used if the host software has undesirable effects related to PCI\nExpress links going down. This host software includes, but is not limited to, operating systems using\nFirmware First Error Handling (refer to the ACPI Specification). Such operating systems should not use\nNSSR for recovery from CFS conditions.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 608,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4692",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**9 Error Reporting and Recovery **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45311203598976135
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **Annex A. Sanitize Operation Considerations (Informative) **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 116,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4693",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42313551902770996
  },
  {
    "content": "The Sanitize command initiates a sanitize operation that makes all user data previously written to the device\ninaccessible. To do this a Sanitize command is provided over the device’s physical interface that cause the\ncontroller to process the requested operation. The actual result of the operation is very difficult to prove as\ncomplete. This annex provides some context and considerations for understanding the result of the\noperation and the practical limitations for auditing the result of the sanitize operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 518,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4694",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3370552361011505
  },
  {
    "content": "**A.2** **Hidden Storage (Overprovisioning)**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 45,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4695",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3246942460536957
  },
  {
    "content": "Sanitize operations affect all physical storage that is able to hold user data. Many NVMe SSDs contain\nmore physical storage than is addressable through the interface (overprovisioning), which is used for vendor\nspecific purposes that may include providing increasing endurance, improving performance, and providing\nextra capacity to allow retiring bad or worn-out storage without affecting capacity. This excess capacity as\nwell as any retired storage are not accessible through the interface. Vendor specific innovative use of this\nextra capacity supports advantages to the end user, but the lack of observability makes it difficult to ensure\nthat all storage within the device has been affected. Only the accessible storage is able to be audited for\nthe results of a sanitization operation.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 793,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4696",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3542267382144928
  },
  {
    "content": "**A.3** **Integrity checks and No-Deallocate After Sanitize**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 61,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4697",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2923617660999298
  },
  {
    "content": "Another issue is availability of the data returned through the interface. Some of the sanitize operations (e.g.,\nBlock Erase) affect the physical devices in such a way that directly reading the accessible storage may\ntrigger internal integrity checks resulting in error responses instead of returning the contents of the storage.\nOther sanitize operations (e.g., Crypto Erase) may scramble the vendor specific internal format of the data\nalso resulting in error responses instead of returning the contents of the storage.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 521,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4698",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5969449281692505
  },
  {
    "content": "Some devices compensate for these issues by performing an additional internal write operation on all\nstorage that is able to be allocated for user data. However, this has the side effect of potentially significant\nadditional wear on the device as well as the side effect of obscuring the results of the initial sanitize\noperation (i.e., the writes forensically destroy the ability to audit the result of the initial sanitize operation).\nGiven this side effect, process audits of sanitize behavior only prove effective results when the NoDeallocate After Sanitize bit is set the same way (e.g., set to ‘1’) for both process audits and the individual\ndevice audits.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 663,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4699",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4497055411338806
  },
  {
    "content": "The Sanitize command introduced in NVM Express Base Specification revision 1.3 included a mechanism\nto specify that sanitized addressable storage not be deallocated, thereby allowing observations of the\nresults of the sanitization operation. However, some architectures and products (e.g., integrity checking\ncircuitry) interact with this capability in such a way as to defeat the sanitize result observability purpose.\nNew features were added to NVM Express Base Specification revision 1.4 that include extended\ninformation about the sanitization capabilities of devices, a new asynchronous event, and configuration of\nthe response to No-Deallocate After Sanitize requests. These features are intended to both support new\nsystems that understand the new capabilities, as well to help manage legacy systems that do not\nunderstand the new capabilities without losing the ability to sanitize as requested.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 903,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4700",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.279738187789917
  },
  {
    "content": "**A.4** **Bad Media and Vendor Specific NAND Use**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 50,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4701",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2637246549129486
  },
  {
    "content": "Another audit capability that is not supported by NVM Express is checking that any media that could not be\nsanitized (e.g., bad physical blocks) has been removed from the pool of storage that is able to be used as\naddressable storage.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 234,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4702",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6621413826942444
  },
  {
    "content": "An approach that is performed under some circumstances is removing the storage components from the\nNVM Express device after a sanitize operation and reading the contents in laboratory conditions. However,\nthis approach also has multiple difficulties. When physical storage devices are removed from a NVM\nExpress device, much context is lost. This includes:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 356,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4703",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.30904316902160645
  },
  {
    "content": "a) any encoding for zero’s/one’s balance;\nb) identification of which components contain device firmware or other non-data information; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 138,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4704",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3260086476802826
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4705",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.06748808920383453
  },
  {
    "content": "c) which media has been retired and cannot be sanitized.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4706",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex A. Sanitize Operation Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.11785069853067398
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c\n#### **Annex B. Host Considerations (Informative) **",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 102,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4707",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.16940681636333466
  },
  {
    "content": "**B.1** **Basic Steps when Building a Command**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4708",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.20632871985435486
  },
  {
    "content": "When host software builds a command for the controller to execute, it first checks to make sure that the\nappropriate Submission Queue (SQ) is not full. The Submission Queue is full when the number of entries\nin the queue is one less than the queue size. Once an empty slot (pFreeSlot) is available:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 298,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4709",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5902641415596008
  },
  {
    "content": "1. Host software builds a command at SQ[pFreeSlot] with:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4710",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.13667058944702148
  },
  {
    "content": "a. CDW0.OPC is set to the appropriate command to be executed by the controller;\nb. CDW0.FUSE is set to the appropriate value, depending on whether the command is a",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 163,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4711",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6021174192428589
  },
  {
    "content": "fused operation;\nc. CDW0.CID is set to a unique identifier for the command when combined with the",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 97,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4712",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3391950726509094
  },
  {
    "content": "Submission Queue identifier;\nd. The Namespace Identifier, NSID field, is set to the namespace the command applies to;\ne. MPTR shall be filled in with the offset to the beginning of the Metadata Region, if there is",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 213,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4713",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.44409239292144775
  },
  {
    "content": "a data transfer and the namespace format contains metadata as a separate buffer;\nf. PRP1 and/or PRP2 (or SGL Entry 1 if SGLs are used) are set to the source/destination of\ndata transfer, if there is a data transfer; and\ng. CDW10 – CDW15 are set to any command specific information;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 281,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4714",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3742882013320923
  },
  {
    "content": "Host software then completes a transport specific action in order to submit the command for processing.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 103,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4715",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36992770433425903
  },
  {
    "content": "**B.2** **Creating an I/O Submission Queue**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 44,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4716",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4995949864387512
  },
  {
    "content": "This example describes how host software creates an I/O Submission Queue that utilizes non-contiguous\nPRP entries. Creating an I/O Submission Queue that utilizes a PRP List is only valid if the controller\nsupports non-contiguous queues as indicated in CAP.CQR.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 260,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4717",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5070022940635681
  },
  {
    "content": "Prior to creating an I/O Submission Queue, host software shall create the I/O Completion Queue that the\nSQ uses with the Create I/O Completion Queue command.\n\nTo create an I/O Submission Queue, host software builds a Create I/O Submission Queue command for\nthe Admin Submission Queue. Host software builds the Create I/O Submission Queue command in the\nnext free Admin Submission Queue command location. The attributes of the command are:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 438,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4718",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1409396082162857
  },
  {
    "content": "- CDW0.OPC is set to 01h;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 25,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4719",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5244312286376953
  },
  {
    "content": "- CDW0.FUSE is cleared to 00b indicating that this is not a fused operation;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 76,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4720",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42794743180274963
  },
  {
    "content": "- CDW0.CID is set to a free command identifier;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 47,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4721",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.2916860282421112
  },
  {
    "content": "- The NSID field is cleared to 0h; Submission Queues are not specific to a namespace;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 85,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4722",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1512773483991623
  },
  {
    "content": "- MPTR is cleared to 0h; metadata is not used for this command;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 63,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4723",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23937837779521942
  },
  {
    "content": "- PRP1 is set to the physical address of the PRP List. The PRP List is shown in Figure 479 for a\nPRP List with three entries;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 125,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4724",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5777865648269653
  },
  {
    "content": "- PRP2 is cleared to 0h; PRP Entry 2 is not used for this command;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 66,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4725",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1789366602897644
  },
  {
    "content": "- CDW10.QSIZE is set to the size of queue to create. In this case, the value is set to 191, indicating\na queue size of 192 entries. The queue size shall not exceed the maximum queue entries\nsupported, indicated in the CAP.MQES field;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 233,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4726",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6309057474136353
  },
  {
    "content": "- CDW10.QID is set to the Submission Queue identifier;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 54,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4727",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6631249785423279
  },
  {
    "content": "- CDW11.CQID is set to the I/O Completion Queue identifier where command completions are\nposted;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 96,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4728",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5723891854286194
  },
  {
    "content": "- CDW11.QPRIO is set to 10b, indicating a Medium priority queue; and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 68,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4729",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.501918375492096
  },
  {
    "content": "- CDW11.PC is cleared to ‘0’ indicating that the data buffer indicated by PRP1 is not physically\ncontiguously.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 110,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4730",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3919619917869568
  },
  {
    "content": "Host software then completes a transport specific action in order to submit the command for processing.\nHost software shall maintain the PRP List unmodified in host memory until the Submission Queue is\ndeleted.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 210,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4731",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1628963202238083
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4732",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.23665569722652435
  },
  {
    "content": "**Figure 479: PRP List Describing I/O Submission Queue**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 56,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4733",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.29663583636283875
  },
  {
    "content": "**B.3** **Executing a Fused Operation**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 39,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4734",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4191334545612335
  },
  {
    "content": "This example describes how host software creates and executes a fused command, specifically Compare\nand Write for a total of 16 KiB of data. In this case, there are two commands that are created. The first\ncommand is the Compare, referred to as CMD0. The second command is the Write, referred to as CMD1.\nIn this case, end-to-end data protection is not enabled and the size of each logical block is 4 KiB.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 405,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4735",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5882763266563416
  },
  {
    "content": "To build commands for a fused operation, host software utilizes two available adjacent command locations\nin the appropriate I/O Submission Queue as is described in section 3.4.2.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 178,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4736",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1969083845615387
  },
  {
    "content": "The attributes of the Compare command are:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4737",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.43498510122299194
  },
  {
    "content": "- CMD0.CDW0.OPC is set to 05h for Compare;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 42,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4738",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.49350079894065857
  },
  {
    "content": "- CMD0.CDW0.FUSE is set to 01b indicating that this is the first command of a fused operation;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 94,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4739",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5606181621551514
  },
  {
    "content": "- CMD0.CDW0.CID is set to a free command identifier;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4740",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5687111020088196
  },
  {
    "content": "- CMD0.NSID is set to identify the appropriate namespace;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 57,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4741",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1590573638677597
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4742",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.09955327212810516
  },
  {
    "content": "- If metadata is being used in a separate buffer, then the location of that buffer is specified in the\nCMD0.MPTR field;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 119,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4743",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.22041746973991394
  },
  {
    "content": "- The physical address of the first page of the data to compare:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 64,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4744",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5645672082901001
  },
  {
    "content": "`o` If PRPs are used, CMD0.PRP1 is set to the physical address of the first page of the data\nto compare and CMD0.PRP2 is set to the physical address of the PRP List. The PRP List\nis shown in Figure 480 for a PRP List with three entries; or\n`o` If the command uses SGLs, CMD0.SGL1 is set to an appropriate SGL segment descriptor\ndepending on whether more than one descriptor is needed;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 384,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4745",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4403841495513916
  },
  {
    "content": "- CMD0.CDW10.SLBA is set to the first LBA to compare against. Note that this field also spans\nCommand Dword 11;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 111,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4746",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.48635387420654297
  },
  {
    "content": "- CMD0.CDW12.LR is cleared to ‘0’ to indicate that the controller should apply all available error\nrecovery means to retrieve the data for comparison;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 150,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4747",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5414374470710754
  },
  {
    "content": "- CMD0.CDW12.FUA is cleared to ‘0’, indicating that the data may be read from any location,\nincluding a volatile cache, in the NVM subsystem;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 141,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4748",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4358442425727844
  },
  {
    "content": "- CMD0.CDW12.PRINFO is cleared to 0h since end-to-end protection is not enabled;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 80,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4749",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3610363304615021
  },
  {
    "content": "- CMD0.CDW12.NLB is set to 3h, indicating that four logical blocks of a size of 4 KiB each are to be\ncompared against;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 118,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4750",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.45919686555862427
  },
  {
    "content": "- CMD0.CDW14 is cleared to 0h since end-to-end protection is not enabled; and\n\n- CMD0.CDW15 is cleared to 0h since end-to-end protection is not enabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 152,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4751",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": -0.005159953609108925
  },
  {
    "content": "**Figure 480: PRP List Describing Data to Compare**",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 51,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4752",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.10227233916521072
  },
  {
    "content": "The attributes of the Write command are:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4753",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5087334513664246
  },
  {
    "content": "- CMD1.CDW0.OPC is set to 01h for Write;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 40,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4754",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5332497954368591
  },
  {
    "content": "- CMD1.CDW0.FUSE is set to 10b indicating that this is the second command of a fused operation;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 95,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4755",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5516799092292786
  },
  {
    "content": "- CMD1.CDW0.CID is set to a free command identifier;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 52,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4756",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1589372754096985
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4757",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1613810956478119
  },
  {
    "content": "- CMD1.NSID is set to identify the appropriate namespace. This value shall be the same as\nCMD0.NSID;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 100,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4758",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.36274248361587524
  },
  {
    "content": "- If metadata is being used in a separate buffer, then the location of that buffer is specified in the\nCMD1.MPTR field;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 119,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4759",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3133678436279297
  },
  {
    "content": "- The physical address of the first page of data to write is identified:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 72,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4760",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5929422378540039
  },
  {
    "content": "`o` If the command uses PRPs, then CMD1.PRP1 is set to the physical address of the first\npage of the data to write and CMD1.PRP2 is set to the physical address of the PRP List.\nThe PRP List includes three entries; or\n`o` If the command uses SGLs, CMD1.SGL1 is set to an appropriate SGL segment descriptor\ndepending on whether more than one descriptor is needed;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 361,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4761",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4327094554901123
  },
  {
    "content": "- CMD1.CDW10.SLBA is set to the first LBA to compare against. Note that this field also spans\nCommand Dword 11. This value shall be the same as CMD0.CDW10.SLBA;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 160,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4762",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.42020565271377563
  },
  {
    "content": "- CMD1.CDW12.LR is cleared to ‘0’ to indicate that the controller should apply all available error\nrecovery means to write the data to the NVM;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 143,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4763",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6861717700958252
  },
  {
    "content": "- CMD1.CDW12.FUA is cleared to ‘0’, indicating that the data may be written to any location,\nincluding a volatile cache, in the NVM subsystem;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 142,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4764",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3857845366001129
  },
  {
    "content": "- CMD1.CDW12.PRINFO is cleared to 0h since end-to-end protection is not enabled;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 80,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4765",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.41485247015953064
  },
  {
    "content": "- CMD1.CDW12.NLB is set to 3h, indicating that four logical blocks of a size of 4 KiB each are to be\ncompared against. This value shall be the same as CMD0.CDW12.NLB;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 166,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4766",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5181763172149658
  },
  {
    "content": "- CMD1.CDW14 is cleared to 0h since end-to-end protection is not enabled; and\n\n- CMD1.CDW15 is cleared to 0h since end-to-end protection is not enabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 152,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4767",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.1982375830411911
  },
  {
    "content": "Host software then completes a transport specific action in order to submit the command for processing.\nNote that the transport specific submit action shall indicate both commands have been submitted at one\ntime.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 212,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4768",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.3062940239906311
  },
  {
    "content": "**B.4** **Asynchronous Event Request Host Software Recommendations**\n\nThis section describes the recommended host software procedure for Asynchronous Event Requests.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 165,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4769",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6520233750343323
  },
  {
    "content": "The host sends *n* Asynchronous Event Request commands (refer to section 3.5.1, step 12). When an\nAsynchronous Event Request completes (providing Event Type, Event Information, and Log Page details):",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 199,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4770",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.5325988531112671
  },
  {
    "content": "- If the event(s) in the reported Log Page may be disabled with the Asynchronous Event\nConfiguration feature (refer to section 5.27.1.8), then host software issues a Set Features\ncommand for the Asynchronous Event Configuration feature specifying to disable reporting of all\nevents that utilize the Log Page reported. Host software should wait for the Set Features\ncommand to complete;\n\n- Host software issues a Get Log Page command requesting the Log Page reported as part of the\nAsynchronous Event Command completion. Host software should wait for the Get Log Page\ncommand to complete;\n\n- Host software parses the returned Log Page. If the condition is not persistent, then host software\nshould re-enable all asynchronous events that utilize the Log Page. If the condition is persistent,\nthen host software should re-enable all asynchronous events that utilize the Log Page except for\nthe one(s) reported in the Log Page. The host re-enables events by issuing a Set Features\ncommand for the Asynchronous Event Configuration feature;",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 3,
      "character_length": 1034,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4771",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.47268080711364746
  },
  {
    "content": "- Host software should issue an Asynchronous Event Request command to the controller (restoring\nto *n* the number of these commands outstanding); and",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 149,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4772",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.4335075318813324
  },
  {
    "content": "- If the reporting of event(s) was disabled, host software should enable reporting of the event(s)\nusing the Asynchronous Event Configuration feature. If the condition reported may persist, host\nsoftware should continue to monitor the event (e.g., spare below threshold) to determine if\nreporting of the event should be re-enabled.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 331,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4773",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 2.595442310848739e-05
  },
  {
    "content": "NVM Express [®] Base Specification, Revision 2.0c",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 49,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4774",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Revision 2.0c ** **October 4th, 2022 **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.07784591615200043
  },
  {
    "content": "**B.5** **Updating Controller Doorbell Properties using a Shadow Doorbell Buffer**\n\n**B.5.1. Shadow Doorbell Buffer Overview**\n\nControllers that support the Doorbell Buffer Config command are typically emulated controllers where this\nfeature is used to enhance the performance of host software running in Virtual Machines. If supported by\nthe controller, host software may enable Shadow Doorbell buffers by submitting the Doorbell Buffer Config\ncommand (refer to section 5.8).\n\nAfter the completion of the Doorbell Buffer Config command, host software shall submit commands by\nupdating the appropriate entry in the Shadow Doorbell buffer instead of updating the controller's\ncorresponding doorbell property. If updating an entry in the Shadow Doorbell buffer changes the value from\nbeing less than or equal to the value of the corresponding EventIdx buffer entry to being greater than that\nvalue, then the host shall also update the controller's corresponding doorbell property to match the value\nof that entry in the Shadow Doorbell buffer. Queue wrap conditions shall be taken into account in all\ncomparisons in this paragraph.\n\nThe controller may read from the Shadow Doorbell buffer and update the EventIdx buffer at any time (e.g.,\nbefore the host writes to the controller's doorbell property).",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 5,
      "character_length": 1299,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4775",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6400827765464783
  },
  {
    "content": "**B.5.2. Example Algorithm for Controller Doorbell Property Updates**\n\nHost software may use modular arithmetic where the modulus is the queue depth to decide if the controller\ndoorbell property should be updated, specifically:",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 227,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4776",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.609245240688324
  },
  {
    "content": "- Compute *X* as the new doorbell value minus the corresponding EventIdx value, modulo queue\ndepth; and\n\n- Compute *Y* as the new doorbell value minus the old doorbell value in the shadow doorbell buffer,\nalso modulo queue depth.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 2,
      "character_length": 229,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4777",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 0.6431625485420227
  },
  {
    "content": "If *X* is less than or equal to *Y*, the controller doorbell property should be updated with the new doorbell\nvalue.",
    "metadata": {
      "source": "data/raw/nvme-base-spec.pdf",
      "extraction_method": "pymupdf4llm",
      "paragraph_count": 1,
      "character_length": 116,
      "processing_timestamp": "2025-06-07T11:22:23.006456",
      "section_level": 4
    },
    "chunk_id": "91cfd52ab0dc_4778",
    "parent_doc_id": "91cfd52ab0dc",
    "section_header": "**Annex B. Host Considerations (Informative) **",
    "page_number": 0,
    "chunk_type": "text",
    "semantic_density": 1.0
  }
]